
Omni_f103rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab0  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  08008c98  08008c98  00009c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009458  08009458  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009458  08009458  0000a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009460  08009460  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08009460  08009460  0000a460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800946c  0800946c  0000a46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009474  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200001d8  0800964c  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800964c  0000b6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a224  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030d3  00000000  00000000  00025425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001568  00000000  00000000  000284f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001091  00000000  00000000  00029a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc88  00000000  00000000  0002aaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001447a  00000000  00000000  00048779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4a3f  00000000  00000000  0005cbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111632  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007068  00000000  00000000  00111678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001186e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d8 	.word	0x200001d8
 8000204:	00000000 	.word	0x00000000
 8000208:	08008c80 	.word	0x08008c80

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001dc 	.word	0x200001dc
 8000224:	08008c80 	.word	0x08008c80

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef>:
 *      Author: Admin
 */

#include "GPIO_Master.h"

void ENABLE_GPIO_CLK(GPIO_TypeDef* GPIO){
 8000ba0:	b480      	push	{r7}
 8000ba2:	b087      	sub	sp, #28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if(GPIO == GPIOA)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a23      	ldr	r2, [pc, #140]	@ (8000c38 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x98>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d10c      	bne.n	8000bca <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x2a>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	6193      	str	r3, [r2, #24]
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	f003 0304 	and.w	r3, r3, #4
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
	}else if(GPIO == GPIOD)
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();

	}
}
 8000bc8:	e031      	b.n	8000c2e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOB)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8000c40 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d10c      	bne.n	8000bec <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x4c>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000bd8:	f043 0308 	orr.w	r3, r3, #8
 8000bdc:	6193      	str	r3, [r2, #24]
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
}
 8000bea:	e020      	b.n	8000c2e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOC){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a15      	ldr	r2, [pc, #84]	@ (8000c44 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa4>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d10c      	bne.n	8000c0e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x6e>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	e00f      	b.n	8000c2e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOD)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a0d      	ldr	r2, [pc, #52]	@ (8000c48 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10b      	bne.n	8000c2e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000c1c:	f043 0320 	orr.w	r3, r3, #32
 8000c20:	6193      	str	r3, [r2, #24]
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 0320 	and.w	r3, r3, #32
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
}
 8000c2e:	bf00      	nop
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	40011000 	.word	0x40011000
 8000c48:	40011400 	.word	0x40011400

08000c4c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>:

void GPIO_OUT_Init(GPIO_TypeDef* GPIO,uint32_t GPIO_PIN,uint32_t SPEED_FREQ){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]

	ENABLE_GPIO_CLK(GPIO);
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff ffa1 	bl	8000ba0 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN;
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = SPEED_FREQ;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIO, &GPIO_InitStruct);
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4619      	mov	r1, r3
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f003 f800 	bl	8003c88 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO, GPIO_PIN, GPIO_PIN_RESET);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4619      	mov	r1, r3
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f003 f98d 	bl	8003fb0 <HAL_GPIO_WritePin>

}
 8000c96:	bf00      	nop
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt4hashIbEclEb>:
      operator()(_Tp __val) const noexcept              \
      { return static_cast<size_t>(__val); }            \
    };

  /// Explicit specialization for bool.
  _Cxx_hashtable_define_trivial_hash(bool)
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <_ZNKSt4hashItEclEt>:

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	807b      	strh	r3, [r7, #2]
 8000cd8:	887b      	ldrh	r3, [r7, #2]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr

08000cfe <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	fb01 f202 	mul.w	r2, r1, r2
 8000d18:	1a9b      	subs	r3, r3, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8000d46:	b480      	push	{r7}
 8000d48:	b083      	sub	sp, #12
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>:
    bool status;

    GPIO_TIM_Mapping() :GPIO(nullptr), Pin(0),TIMx(nullptr), TIM_CHANNEL(0), status(false) {
    	Error_Handler();
    }
    GPIO_TIM_Mapping(GPIO_TypeDef* GPIO, uint32_t Pin, TIM_TypeDef* TIMx, uint32_t TIM_CHANNEL,bool status)
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
    : GPIO(GPIO), Pin(Pin), TIMx(TIMx), TIM_CHANNEL(TIM_CHANNEL),status(status) {}
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	7f3a      	ldrb	r2, [r7, #28]
 8000d86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <_ZNK16GPIO_TIM_MappingeqERKS_>:

    // Để bảng băm làm việc với class, bạn cần cung cấp operator== và một hàm băm (hash function).
    bool operator==(const GPIO_TIM_Mapping & other) const {
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
        return (GPIO == other.GPIO && Pin == other.Pin);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d107      	bne.n	8000dbc <_ZNK16GPIO_TIM_MappingeqERKS_+0x26>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685a      	ldr	r2, [r3, #4]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d101      	bne.n	8000dbc <_ZNK16GPIO_TIM_MappingeqERKS_+0x26>
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <_ZNK16GPIO_TIM_MappingeqERKS_+0x28>
 8000dbc:	2300      	movs	r3, #0
    }
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr

08000dc8 <_ZNK11GPIOPinHashclERK16GPIO_TIM_Mapping>:
};



struct GPIOPinHash {
    size_t operator()(const GPIO_TIM_Mapping& mapping) const {
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
        // Sử dụng địa chỉ GPIO và Pin để tạo ra một giá trị hash
        return (reinterpret_cast<size_t>(mapping.GPIO) ^ std::hash<uint16_t>()(mapping.Pin) ^ std::hash<bool>()(mapping.status));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	461c      	mov	r4, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4611      	mov	r1, r2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff ff71 	bl	8000ccc <_ZNKSt4hashItEclEt>
 8000dea:	4603      	mov	r3, r0
 8000dec:	405c      	eors	r4, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff5a 	bl	8000cb4 <_ZNKSt4hashIbEclEb>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4063      	eors	r3, r4
    }
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd90      	pop	{r4, r7, pc}

08000e0c <_ZNSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f9d9 	bl	80011cc <_ZNSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EEC1Ev>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ffed 	bl	8000e0c <_ZNSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EEC1Ev>
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f9d4 	bl	80011e0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EEC1Ev>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f9de 	bl	800120c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEED1Ev>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f9c6 	bl	80011f4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EEC1Ev>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffe1 	bl	8000e42 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EED1Ev>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffc6 	bl	8000e24 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ffde 	bl	8000e5a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEEC1Ev>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f103 0218 	add.w	r2, r3, #24
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff ff16 	bl	8000ce4 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3310      	adds	r3, #16
 8000ec2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff2c 	bl	8000d24 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	619a      	str	r2, [r3, #24]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_multimap() = default;
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ffcf 	bl	8000e8a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>:
		Error_Handler();
	}
}

// Khi cần thêm các ánh xạ
void AddMapping(GPIO_TypeDef* GPIO, uint16_t Pin, TIM_TypeDef* TIMx, uint32_t TIM_CHANNEL, bool status) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b4      	sub	sp, #208	@ 0xd0
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	460b      	mov	r3, r1
 8000f06:	817b      	strh	r3, [r7, #10]
    gpioMap.emplace(GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status),
 8000f08:	897a      	ldrh	r2, [r7, #10]
 8000f0a:	f107 0010 	add.w	r0, r7, #16
 8000f0e:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68f9      	ldr	r1, [r7, #12]
 8000f1c:	f7ff ff1e 	bl	8000d5c <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
                    GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status));
 8000f20:	897a      	ldrh	r2, [r7, #10]
 8000f22:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8000f26:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68f9      	ldr	r1, [r7, #12]
 8000f34:	f7ff ff12 	bl	8000d5c <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
    gpioMap.emplace(GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status),
 8000f38:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4619      	mov	r1, r3
 8000f42:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb+0x58>)
 8000f44:	f000 f980 	bl	8001248 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJS0_S0_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>
}
 8000f48:	bf00      	nop
 8000f4a:	37c8      	adds	r7, #200	@ 0xc8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200001f4 	.word	0x200001f4

08000f54 <_Z19Add_Map_STM32F103xxv>:
//	__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,200);

}

void Add_Map_STM32F103xx()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af02      	add	r7, sp, #8

/**/	AddMapping(GPIOA, GPIO_PIN_0, TIM2, TIM_CHANNEL_1, false);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f64:	2101      	movs	r1, #1
 8000f66:	4891      	ldr	r0, [pc, #580]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000f68:	f7ff ffc6 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_0, TIM5, TIM_CHANNEL_1, false);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	4a8f      	ldr	r2, [pc, #572]	@ (80011b0 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8000f74:	2101      	movs	r1, #1
 8000f76:	488d      	ldr	r0, [pc, #564]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000f78:	f7ff ffbe 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_1, TIM2, TIM_CHANNEL_2, false);
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2304      	movs	r3, #4
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f86:	2102      	movs	r1, #2
 8000f88:	4888      	ldr	r0, [pc, #544]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000f8a:	f7ff ffb5 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_1, TIM5, TIM_CHANNEL_2, false);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2304      	movs	r3, #4
 8000f94:	4a86      	ldr	r2, [pc, #536]	@ (80011b0 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8000f96:	2102      	movs	r1, #2
 8000f98:	4884      	ldr	r0, [pc, #528]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000f9a:	f7ff ffad 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_2, TIM2, TIM_CHANNEL_3, false);
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4880      	ldr	r0, [pc, #512]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000fac:	f7ff ffa4 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_2, TIM5, TIM_CHANNEL_3, false);
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80011b0 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8000fb8:	2104      	movs	r1, #4
 8000fba:	487c      	ldr	r0, [pc, #496]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000fbc:	f7ff ff9c 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_3, TIM2, TIM_CHANNEL_4, false);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fca:	2108      	movs	r1, #8
 8000fcc:	4877      	ldr	r0, [pc, #476]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000fce:	f7ff ff93 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_3, TIM5, TIM_CHANNEL_4, false);
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	230c      	movs	r3, #12
 8000fd8:	4a75      	ldr	r2, [pc, #468]	@ (80011b0 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8000fda:	2108      	movs	r1, #8
 8000fdc:	4873      	ldr	r0, [pc, #460]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000fde:	f7ff ff8b 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_6, TIM3, TIM_CHANNEL_1, false);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	4a72      	ldr	r2, [pc, #456]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8000fea:	2140      	movs	r1, #64	@ 0x40
 8000fec:	486f      	ldr	r0, [pc, #444]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000fee:	f7ff ff83 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_7, TIM3, TIM_CHANNEL_2, false);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8000ffa:	2180      	movs	r1, #128	@ 0x80
 8000ffc:	486b      	ldr	r0, [pc, #428]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8000ffe:	f7ff ff7b 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_8, TIM1, TIM_CHANNEL_1, false);
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2300      	movs	r3, #0
 8001008:	4a6b      	ldr	r2, [pc, #428]	@ (80011b8 <_Z19Add_Map_STM32F103xxv+0x264>)
 800100a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800100e:	4867      	ldr	r0, [pc, #412]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8001010:	f7ff ff72 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_9, TIM1, TIM_CHANNEL_2, false);
 8001014:	2300      	movs	r3, #0
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2304      	movs	r3, #4
 800101a:	4a67      	ldr	r2, [pc, #412]	@ (80011b8 <_Z19Add_Map_STM32F103xxv+0x264>)
 800101c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001020:	4862      	ldr	r0, [pc, #392]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8001022:	f7ff ff69 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_10, TIM1, TIM_CHANNEL_3, false);
 8001026:	2300      	movs	r3, #0
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2308      	movs	r3, #8
 800102c:	4a62      	ldr	r2, [pc, #392]	@ (80011b8 <_Z19Add_Map_STM32F103xxv+0x264>)
 800102e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001032:	485e      	ldr	r0, [pc, #376]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8001034:	f7ff ff60 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_11, TIM1, TIM_CHANNEL_4, false);
 8001038:	2300      	movs	r3, #0
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	230c      	movs	r3, #12
 800103e:	4a5e      	ldr	r2, [pc, #376]	@ (80011b8 <_Z19Add_Map_STM32F103xxv+0x264>)
 8001040:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001044:	4859      	ldr	r0, [pc, #356]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 8001046:	f7ff ff57 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_15, TIM2, TIM_CHANNEL_1, false);
 800104a:	2300      	movs	r3, #0
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2300      	movs	r3, #0
 8001050:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001054:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001058:	4854      	ldr	r0, [pc, #336]	@ (80011ac <_Z19Add_Map_STM32F103xxv+0x258>)
 800105a:	f7ff ff4d 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_0, TIM3, TIM_CHANNEL_3, false);
 800105e:	2300      	movs	r3, #0
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2308      	movs	r3, #8
 8001064:	4a53      	ldr	r2, [pc, #332]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8001066:	2101      	movs	r1, #1
 8001068:	4854      	ldr	r0, [pc, #336]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 800106a:	f7ff ff45 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_1, TIM3, TIM_CHANNEL_4, false);
 800106e:	2300      	movs	r3, #0
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	230c      	movs	r3, #12
 8001074:	4a4f      	ldr	r2, [pc, #316]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8001076:	2102      	movs	r1, #2
 8001078:	4850      	ldr	r0, [pc, #320]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 800107a:	f7ff ff3d 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_3, TIM2, TIM_CHANNEL_2, false);
 800107e:	2300      	movs	r3, #0
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2304      	movs	r3, #4
 8001084:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001088:	2108      	movs	r1, #8
 800108a:	484c      	ldr	r0, [pc, #304]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 800108c:	f7ff ff34 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_4, TIM3, TIM_CHANNEL_1, false);
 8001090:	2300      	movs	r3, #0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	4a47      	ldr	r2, [pc, #284]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8001098:	2110      	movs	r1, #16
 800109a:	4848      	ldr	r0, [pc, #288]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 800109c:	f7ff ff2c 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_5, TIM3, TIM_CHANNEL_2, false);
 80010a0:	2300      	movs	r3, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2304      	movs	r3, #4
 80010a6:	4a43      	ldr	r2, [pc, #268]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 80010a8:	2120      	movs	r1, #32
 80010aa:	4844      	ldr	r0, [pc, #272]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 80010ac:	f7ff ff24 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_6, TIM4, TIM_CHANNEL_1, false);
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2300      	movs	r3, #0
 80010b6:	4a42      	ldr	r2, [pc, #264]	@ (80011c0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80010b8:	2140      	movs	r1, #64	@ 0x40
 80010ba:	4840      	ldr	r0, [pc, #256]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 80010bc:	f7ff ff1c 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_7, TIM4, TIM_CHANNEL_2, false);
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2304      	movs	r3, #4
 80010c6:	4a3e      	ldr	r2, [pc, #248]	@ (80011c0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	483c      	ldr	r0, [pc, #240]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 80010cc:	f7ff ff14 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_8, TIM4, TIM_CHANNEL_3, false);
 80010d0:	2300      	movs	r3, #0
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2308      	movs	r3, #8
 80010d6:	4a3a      	ldr	r2, [pc, #232]	@ (80011c0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80010d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010dc:	4837      	ldr	r0, [pc, #220]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 80010de:	f7ff ff0b 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_9, TIM4, TIM_CHANNEL_4, false);
 80010e2:	2300      	movs	r3, #0
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	230c      	movs	r3, #12
 80010e8:	4a35      	ldr	r2, [pc, #212]	@ (80011c0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80010ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010ee:	4833      	ldr	r0, [pc, #204]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 80010f0:	f7ff ff02 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_10, TIM2, TIM_CHANNEL_3, false);
 80010f4:	2300      	movs	r3, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2308      	movs	r3, #8
 80010fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001102:	482e      	ldr	r0, [pc, #184]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 8001104:	f7ff fef8 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_11, TIM2, TIM_CHANNEL_4, false);
 8001108:	2300      	movs	r3, #0
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	230c      	movs	r3, #12
 800110e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001112:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001116:	4829      	ldr	r0, [pc, #164]	@ (80011bc <_Z19Add_Map_STM32F103xxv+0x268>)
 8001118:	f7ff feee 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_6, TIM3, TIM_CHANNEL_1, false);
 800111c:	2300      	movs	r3, #0
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	4a24      	ldr	r2, [pc, #144]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8001124:	2140      	movs	r1, #64	@ 0x40
 8001126:	4827      	ldr	r0, [pc, #156]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8001128:	f7ff fee6 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_6, TIM8, TIM_CHANNEL_1, false);
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	4a25      	ldr	r2, [pc, #148]	@ (80011c8 <_Z19Add_Map_STM32F103xxv+0x274>)
 8001134:	2140      	movs	r1, #64	@ 0x40
 8001136:	4823      	ldr	r0, [pc, #140]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8001138:	f7ff fede 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_7, TIM3, TIM_CHANNEL_2, false);
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2304      	movs	r3, #4
 8001142:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	481f      	ldr	r0, [pc, #124]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8001148:	f7ff fed6 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_7, TIM8, TIM_CHANNEL_2, false);
 800114c:	2300      	movs	r3, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2304      	movs	r3, #4
 8001152:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <_Z19Add_Map_STM32F103xxv+0x274>)
 8001154:	2180      	movs	r1, #128	@ 0x80
 8001156:	481b      	ldr	r0, [pc, #108]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8001158:	f7ff fece 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_8, TIM3, TIM_CHANNEL_3, false);
 800115c:	2300      	movs	r3, #0
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2308      	movs	r3, #8
 8001162:	4a14      	ldr	r2, [pc, #80]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8001164:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001168:	4816      	ldr	r0, [pc, #88]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 800116a:	f7ff fec5 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_8, TIM8, TIM_CHANNEL_3, false);
 800116e:	2300      	movs	r3, #0
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2308      	movs	r3, #8
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_Z19Add_Map_STM32F103xxv+0x274>)
 8001176:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800117a:	4812      	ldr	r0, [pc, #72]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 800117c:	f7ff febc 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_9, TIM3, TIM_CHANNEL_4, false);
 8001180:	2300      	movs	r3, #0
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	230c      	movs	r3, #12
 8001186:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <_Z19Add_Map_STM32F103xxv+0x260>)
 8001188:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800118c:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 800118e:	f7ff feb3 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_9, TIM8, TIM_CHANNEL_4, false);
 8001192:	2300      	movs	r3, #0
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	230c      	movs	r3, #12
 8001198:	4a0b      	ldr	r2, [pc, #44]	@ (80011c8 <_Z19Add_Map_STM32F103xxv+0x274>)
 800119a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800119e:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <_Z19Add_Map_STM32F103xxv+0x270>)
 80011a0:	f7ff feaa 	bl	8000ef8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>



}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40000c00 	.word	0x40000c00
 80011b4:	40000400 	.word	0x40000400
 80011b8:	40012c00 	.word	0x40012c00
 80011bc:	40010c00 	.word	0x40010c00
 80011c0:	40000800 	.word	0x40000800
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40013400 	.word	0x40013400

080011cc <_ZNSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EEC1Ev>:
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EEC1Ev>:
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f859 	bl	80012b4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEEC1Ev>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f859 	bl	80012cc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEED1Ev>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f857 	bl	80012e0 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5clearEv>
      _M_deallocate_buckets();
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f874 	bl	8001320 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>
    }
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fe1a 	bl	8000e72 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEED1Ev>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJS0_S0_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>:
       *
       *  Insertion requires amortized constant time.
       */
      template<typename... _Args>
	iterator
	emplace(_Args&&... __args)
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	{ return _M_h.emplace(std::forward<_Args>(__args)...); }
 8001254:	68fc      	ldr	r4, [r7, #12]
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f000 f872 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800125c:	4605      	mov	r5, r0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f86e 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	4629      	mov	r1, r5
 800126a:	4620      	mov	r0, r4
 800126c:	f000 f872 	bl	8001354 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>
 8001270:	4603      	mov	r3, r0
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bdb0      	pop	{r4, r5, r7, pc}

0800127a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>:
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
      { return __x._M_cur != __y._M_cur; }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f87e 	bl	80013be <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEC1Ev>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f872 	bl	80013d2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 f878 	bl	80013e8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_>
      __builtin_memset(_M_buckets, 0,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4610      	mov	r0, r2
 8001304:	461a      	mov	r2, r3
 8001306:	2100      	movs	r1, #0
 8001308:	f005 fca6 	bl	8006c58 <memset>
      _M_element_count = 0;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
    }
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6819      	ldr	r1, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	461a      	mov	r2, r3
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f870 	bl	8001418 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>:
	emplace(_Args&&... __args)
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
	{ return _M_emplace(__unique_keys{}, std::forward<_Args>(__args)...); }
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f7ff ffed 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8001366:	4604      	mov	r4, r0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff ffe9 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800136e:	4603      	mov	r3, r0
 8001370:	4622      	mov	r2, r4
 8001372:	4629      	mov	r1, r5
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f866 	bl	8001446 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bdb0      	pop	{r4, r5, r7, pc}

08001384 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>:
      _M_incr() noexcept
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f000 f877 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8001396:	4602      	mov	r2, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>:
      _M_valptr() noexcept
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f873 	bl	800149a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>:
      _M_begin() const
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr

080013e8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 80013f2:	e009      	b.n	8001408 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_+0x20>
	{
	  __node_ptr __tmp = __n;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	f000 f843 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80013fe:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8001400:	68f9      	ldr	r1, [r7, #12]
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f855 	bl	80014b2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>
      while (__n)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f2      	bne.n	80013f4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_+0xc>
	}
    }
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 f85e 	bl	80014e8 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d105      	bne.n	800143e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f86d 	bl	8001516 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800143c:	e000      	b.n	8001440 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x28>
	  return;
 800143e:	bf00      	nop
      }
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
	_M_emplace(false_type __uks, _Args&&... __args)
 8001446:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001448:	b087      	sub	sp, #28
 800144a:	af02      	add	r7, sp, #8
 800144c:	60f8      	str	r0, [r7, #12]
 800144e:	7239      	strb	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	603b      	str	r3, [r7, #0]
	{ return _M_emplace(cend(), __uks, std::forward<_Args>(__args)...); }
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f881 	bl	800155c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 800145a:	4604      	mov	r4, r0
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff6f 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8001462:	4605      	mov	r5, r0
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f7ff ff6b 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800146a:	4603      	mov	r3, r0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	462b      	mov	r3, r5
 8001470:	4632      	mov	r2, r6
 8001472:	4621      	mov	r1, r4
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f880 	bl	800157a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 800147a:	4603      	mov	r3, r0
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>:
      _M_next() const noexcept
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr

0800149a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f924 	bl	80016f0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>
 80014a8:	4603      	mov	r3, r0
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 80014b2:	b590      	push	{r4, r7, lr}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 f940 	bl	8001742 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 80014c2:	4604      	mov	r4, r0
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	3304      	adds	r3, #4
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff6b 	bl	80013a4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4620      	mov	r0, r4
 80014d4:	f000 f941 	bl	800175a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE7destroyIS5_EEvRS7_PT_>
      _M_deallocate_node_ptr(__n);
 80014d8:	6839      	ldr	r1, [r7, #0]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f94a 	bl	8001774 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE22_M_deallocate_node_ptrEPS6_>
    }
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd90      	pop	{r4, r7, pc}

080014e8 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3318      	adds	r3, #24
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	bf0c      	ite	eq
 80014fc:	2301      	moveq	r3, #1
 80014fe:	2300      	movne	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	bf14      	ite	ne
 8001506:	2301      	movne	r3, #1
 8001508:	2300      	moveq	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr

08001516 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	60f8      	str	r0, [r7, #12]
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f000 f93c 	bl	80017a0 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8001528:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f909 	bl	8001742 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8001530:	4602      	mov	r2, r0
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f93d 	bl	80017b8 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6979      	ldr	r1, [r7, #20]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f94f 	bl	80017ea <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f000 f93e 	bl	80017d2 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>:
      cend() const noexcept
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
      { return const_iterator(nullptr); }
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f94c 	bl	8001808 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800157a:	b590      	push	{r4, r7, lr}
 800157c:	b08d      	sub	sp, #52	@ 0x34
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	713a      	strb	r2, [r7, #4]
 8001586:	603b      	str	r3, [r7, #0]
	_Scoped_node __node { this, std::forward<_Args>(__args)...  };
 8001588:	6838      	ldr	r0, [r7, #0]
 800158a:	f7ff fed9 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800158e:	4604      	mov	r4, r0
 8001590:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001592:	f7ff fed5 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8001596:	4603      	mov	r3, r0
 8001598:	f107 0020 	add.w	r0, r7, #32
 800159c:	4622      	mov	r2, r4
 800159e:	68f9      	ldr	r1, [r7, #12]
 80015a0:	f000 f941 	bl	8001826 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJS0_S0_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>
	const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());
 80015a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a6:	3304      	adds	r3, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f971 	bl	8001890 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f976 	bl	80018a8 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>
 80015bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	auto __res = this->_M_compute_hash_code(__hint, __k);
 80015be:	f107 0018 	add.w	r0, r7, #24
 80015c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	68f9      	ldr	r1, [r7, #12]
 80015c8:	f000 f97b 	bl	80018c2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_>
	  = _M_insert_multi_node(__res.first._M_cur, __res.second,
 80015cc:	69b9      	ldr	r1, [r7, #24]
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 fa0d 	bl	80019f2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_>
 80015d8:	4603      	mov	r3, r0
 80015da:	617b      	str	r3, [r7, #20]
	__node._M_node = nullptr;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	@ 0x24
	return __pos;
 80015e0:	697c      	ldr	r4, [r7, #20]
      }
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f93d 	bl	8001866 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev>
	return __pos;
 80015ec:	4623      	mov	r3, r4
      }
 80015ee:	4618      	mov	r0, r3
 80015f0:	3734      	adds	r7, #52	@ 0x34
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}

080015f6 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4sizeEv>:
      size() const noexcept
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 8001610:	f000 faa5 	bl	8001b5e <_ZNSt8__detail22_Hashtable_hash_traitsI11GPIOPinHashE22__small_size_thresholdEv>
 8001614:	4603      	mov	r3, r0
      }
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}

0800161a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_key_equals(const _Key& __k,
 800161a:	b590      	push	{r4, r7, lr}
 800161c:	b087      	sub	sp, #28
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 faa0 	bl	8001b6c <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE5_M_eqEv>
 800162c:	4604      	mov	r4, r0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 f844 	bl	80016be <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 8001636:	4602      	mov	r2, r0
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f849 	bl	80016d6 <_ZNKSt8__detail10_Select1stclIRKSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS9_>
 8001644:	4603      	mov	r3, r0
 8001646:	461a      	mov	r2, r3
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	4620      	mov	r0, r4
 800164c:	f000 fa9a 	bl	8001b84 <_ZNKSt8equal_toI16GPIO_TIM_MappingEclERKS0_S3_>
 8001650:	4603      	mov	r3, r0
      }
 8001652:	4618      	mov	r0, r3
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	bd90      	pop	{r4, r7, pc}

0800165a <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS3_>:
      _M_hash_code(const _Key& __k) const
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa9c 	bl	8001ba2 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv>
 800166a:	4603      	mov	r3, r0
 800166c:	6839      	ldr	r1, [r7, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fbaa 	bl	8000dc8 <_ZNK11GPIOPinHashclERK16GPIO_TIM_Mapping>
 8001674:	4603      	mov	r3, r0
      }
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	461a      	mov	r2, r3
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fa92 	bl	8001bba <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEjj>
 8001696:	4603      	mov	r3, r0
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_iterator(__node_type* __p) noexcept
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f828 	bl	8001704 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>:
      _M_v() const noexcept
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 face 	bl	8001c68 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_ZNKSt8__detail10_Select1stclIRKSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS9_>:
      operator()(_Tp&& __x) const noexcept
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f000 face 	bl	8001c82 <_ZSt7forwardIRKSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>:
      _M_addr() noexcept
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 80016f8:	687b      	ldr	r3, [r7, #4]
      }
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	461a      	mov	r2, r3
 8001730:	6839      	ldr	r1, [r7, #0]
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 faaf 	bl	8001c96 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8001738:	4603      	mov	r3, r0
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fab7 	bl	8001cbe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EE6_M_getEv>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE7destroyIS5_EEvRS7_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fab3 	bl	8001cd2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE7destroyIS5_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE22_M_deallocate_node_ptrEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f000 fab1 	bl	8001ce6 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEES6_Lb0EE10pointer_toERS6_>
 8001784:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffdb 	bl	8001742 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 800178c:	4603      	mov	r3, r0
 800178e:	2201      	movs	r2, #1
 8001790:	68f9      	ldr	r1, [r7, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fab3 	bl	8001cfe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE10deallocateERS7_PS6_j>
    }
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fab7 	bl	8001d1c <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fab6 	bl	8001d34 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fab4 	bl	8001d48 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 faae 	bl	8001d5c <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_const_iterator(__node_type* __p) noexcept
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff74 	bl	8001704 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJS0_S0_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8001826:	b5b0      	push	{r4, r5, r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
 8001832:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 800183a:	68bc      	ldr	r4, [r7, #8]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff fd7f 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8001842:	4605      	mov	r5, r0
 8001844:	6838      	ldr	r0, [r7, #0]
 8001846:	f7ff fd7b 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4629      	mov	r1, r5
 8001850:	4620      	mov	r0, r4
 8001852:	f000 faa0 	bl	8001d96 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJS3_S3_EEEPS6_DpOT_>
 8001856:	4602      	mov	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	605a      	str	r2, [r3, #4]
	  { }
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bdb0      	pop	{r4, r5, r7, pc}

08001866 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev+0x20>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4619      	mov	r1, r3
 8001880:	4610      	mov	r0, r2
 8001882:	f7ff fe16 	bl	80014b2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>:
      _M_v() noexcept
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fd83 	bl	80013a4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 800189e:	4603      	mov	r3, r0
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>:
      operator()(_Tp&& __x) const noexcept
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f000 faa7 	bl	8001e06 <_ZSt7forwardIRSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS5_E4typeE>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80018c2:	b590      	push	{r4, r7, lr}
 80018c4:	b08d      	sub	sp, #52	@ 0x34
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	603b      	str	r3, [r7, #0]
      if (size() <= __small_size_threshold())
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f7ff fe90 	bl	80015f6 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4sizeEv>
 80018d6:	4604      	mov	r4, r0
 80018d8:	f7ff fe98 	bl	800160c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22__small_size_thresholdEv>
 80018dc:	4603      	mov	r3, r0
 80018de:	429c      	cmp	r4, r3
 80018e0:	bf94      	ite	ls
 80018e2:	2301      	movls	r3, #1
 80018e4:	2300      	movhi	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d071      	beq.n	80019d0 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x10e>
	  if (__hint != cend())
 80018ec:	68b8      	ldr	r0, [r7, #8]
 80018ee:	f7ff fe35 	bl	800155c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 80018f2:	4603      	mov	r3, r0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	f107 021c 	add.w	r2, r7, #28
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fcbb 	bl	800127a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d032      	beq.n	8001970 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xae>
	      for (auto __it = __hint; __it != cend(); ++__it)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	61bb      	str	r3, [r7, #24]
 800190e:	e01f      	b.n	8001950 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x8e>
		if (this->_M_key_equals(__k, *__it._M_cur))
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	3304      	adds	r3, #4
 8001914:	461a      	mov	r2, r3
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7ff fe7e 	bl	800161a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d010      	beq.n	8001946 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x84>
		  return { __it, this->_M_hash_code(*__it._M_cur) };
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	3304      	adds	r3, #4
 8001928:	4619      	mov	r1, r3
 800192a:	68b8      	ldr	r0, [r7, #8]
 800192c:	f000 fa82 	bl	8001e34 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>
 8001930:	4603      	mov	r3, r0
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	f107 0220 	add.w	r2, r7, #32
 8001938:	f107 0318 	add.w	r3, r7, #24
 800193c:	4619      	mov	r1, r3
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fa85 	bl	8001e4e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 8001944:	e051      	b.n	80019ea <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x128>
	      for (auto __it = __hint; __it != cend(); ++__it)
 8001946:	f107 0318 	add.w	r3, r7, #24
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fa65 	bl	8001e1a <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 8001950:	68b8      	ldr	r0, [r7, #8]
 8001952:	f7ff fe03 	bl	800155c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 8001956:	4603      	mov	r3, r0
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
 800195a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fc88 	bl	800127a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1cf      	bne.n	8001910 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x4e>
	  for (auto __it = cbegin(); __it != __hint; ++__it)
 8001970:	68b8      	ldr	r0, [r7, #8]
 8001972:	f000 fa85 	bl	8001e80 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE6cbeginEv>
 8001976:	4603      	mov	r3, r0
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	e01f      	b.n	80019bc <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xfa>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	3304      	adds	r3, #4
 8001980:	461a      	mov	r2, r3
 8001982:	6839      	ldr	r1, [r7, #0]
 8001984:	68b8      	ldr	r0, [r7, #8]
 8001986:	f7ff fe48 	bl	800161a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d010      	beq.n	80019b2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xf0>
	      return { __it, this->_M_hash_code(*__it._M_cur) };
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	3304      	adds	r3, #4
 8001994:	4619      	mov	r1, r3
 8001996:	68b8      	ldr	r0, [r7, #8]
 8001998:	f000 fa4c 	bl	8001e34 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>
 800199c:	4603      	mov	r3, r0
 800199e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019a0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 fa4f 	bl	8001e4e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 80019b0:	e01b      	b.n	80019ea <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x128>
	  for (auto __it = cbegin(); __it != __hint; ++__it)
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 fa2f 	bl	8001e1a <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 80019bc:	1d3a      	adds	r2, r7, #4
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fc58 	bl	800127a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1d5      	bne.n	800197c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xba>
      return { __hint, this->_M_hash_code(__k) };
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	68b8      	ldr	r0, [r7, #8]
 80019d4:	f7ff fe41 	bl	800165a <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS3_>
 80019d8:	4603      	mov	r3, r0
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019dc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa32 	bl	8001e4e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	3734      	adds	r7, #52	@ 0x34
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}

080019f2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80019f2:	b590      	push	{r4, r7, lr}
 80019f4:	b091      	sub	sp, #68	@ 0x44
 80019f6:	af02      	add	r7, sp, #8
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3310      	adds	r3, #16
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff f99e 	bl	8000d46 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	61bb      	str	r3, [r7, #24]
 8001a0e:	f107 0318 	add.w	r3, r7, #24
 8001a12:	637b      	str	r3, [r7, #52]	@ 0x34
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f103 0110 	add.w	r1, r3, #16
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f107 0010 	add.w	r0, r7, #16
 8001a26:	2401      	movs	r4, #1
 8001a28:	9400      	str	r4, [sp, #0]
 8001a2a:	f004 f9d3 	bl	8005dd4 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 8001a2e:	7c3b      	ldrb	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x4e>
	_M_rehash(__do_rehash.second, __saved_state);
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a38:	4619      	mov	r1, r3
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 fa33 	bl	8001ea6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_rehashEjRKj>
      this->_M_store_code(*__node, __code);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	33bc      	adds	r3, #188	@ 0xbc
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4619      	mov	r1, r3
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 fa3b 	bl	8001ec4 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEj>
      const key_type& __k = _ExtractKey{}(__node->_M_v());
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3304      	adds	r3, #4
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff1c 	bl	8001890 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff21 	bl	80018a8 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>
 8001a66:	6338      	str	r0, [r7, #48]	@ 0x30
      size_type __bkt = _M_bucket_index(__code);
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	68f8      	ldr	r0, [r7, #12]
 8001a6c:	f7ff fe07 	bl	800167e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexEj>
 8001a70:	62f8      	str	r0, [r7, #44]	@ 0x2c
	= __builtin_expect(__hint != nullptr, false)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf14      	ite	ne
 8001a78:	2301      	movne	r3, #1
 8001a7a:	2300      	moveq	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
	    ? __hint
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00c      	beq.n	8001a9c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xaa>
	  && this->_M_equals(__k, __code, *__hint)
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3304      	adds	r3, #4
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 fa28 	bl	8001ee0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f083 0301 	eor.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d007      	beq.n	8001aac <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xba>
	    : _M_find_before_node(__bkt, __k, __code);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001aa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f89b 	bl	8001bde <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j>
 8001aa8:	4603      	mov	r3, r0
	    ? __hint
 8001aaa:	e000      	b.n	8001aae <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xbc>
 8001aac:	68bb      	ldr	r3, [r7, #8]
      __node_base_ptr __prev
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (__prev)
 8001ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d03e      	beq.n	8001b34 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x142>
	  __node->_M_nxt = __prev->_M_nxt;
 8001ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	601a      	str	r2, [r3, #0]
	  __prev->_M_nxt = __node;
 8001abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	601a      	str	r2, [r3, #0]
	  if (__builtin_expect(__prev == __hint, false))
 8001ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	bf0c      	ite	eq
 8001acc:	2301      	moveq	r3, #1
 8001ace:	2300      	movne	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d033      	beq.n	8001b3e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
	    if (__node->_M_nxt
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
		&& !this->_M_equals(__k, __code, *__node->_M_next()))
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d011      	beq.n	8001b02 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x110>
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f7ff fcd0 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f9f7 	bl	8001ee0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f083 0301 	eor.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x110>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x112>
 8001b02:	2300      	movs	r3, #0
	    if (__node->_M_nxt
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d01a      	beq.n	8001b3e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
		size_type __next_bkt = _M_bucket_index(*__node->_M_next());
 8001b08:	6838      	ldr	r0, [r7, #0]
 8001b0a:	f7ff fcbb 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	3304      	adds	r3, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff fe03 	bl	8001720 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8001b1a:	6278      	str	r0, [r7, #36]	@ 0x24
		if (__next_bkt != __bkt)
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d00c      	beq.n	8001b3e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
		  _M_buckets[__next_bkt] = __node;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	e004      	b.n	8001b3e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
	_M_insert_bucket_begin(__bkt, __node);
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f9f0 	bl	8001f1e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE>
      ++_M_element_count;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	6839      	ldr	r1, [r7, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fda6 	bl	80016a0 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8001b54:	6a3b      	ldr	r3, [r7, #32]
    }
 8001b56:	4618      	mov	r0, r3
 8001b58:	373c      	adds	r7, #60	@ 0x3c
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}

08001b5e <_ZNSt8__detail22_Hashtable_hash_traitsI11GPIOPinHashE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 8001b62:	2300      	movs	r3, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fa19 	bl	8001fac <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EE7_M_cgetEv>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZNKSt8equal_toI16GPIO_TIM_MappingEclERKS0_S3_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	68b8      	ldr	r0, [r7, #8]
 8001b94:	f7ff f8ff 	bl	8000d96 <_ZNK16GPIO_TIM_MappingeqERKS_>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fa08 	bl	8001fc0 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EE7_M_cgetEv>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f895 	bl	8000cfe <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d101      	bne.n	8001c04 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x26>
	return nullptr;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e02d      	b.n	8001c60 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f964 	bl	8001ee0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x44>
	    return __prev_p;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	e01e      	b.n	8001c60 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d00c      	beq.n	8001c44 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x66>
 8001c2a:	6938      	ldr	r0, [r7, #16]
 8001c2c:	f7ff fc2a 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8001c30:	4603      	mov	r3, r0
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fd72 	bl	8001720 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d001      	beq.n	8001c48 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x6a>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x6c>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x7e>
	  __prev_p = __p;
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8001c52:	6938      	ldr	r0, [r7, #16]
 8001c54:	f7ff fc16 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8001c58:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8001c5a:	e7d6      	b.n	8001c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x2c>
	    break;
 8001c5c:	bf00      	nop
      return nullptr;
 8001c5e:	2300      	movs	r3, #0
    }
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>:
      _M_valptr() const noexcept
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 f9ae 	bl	8001fd4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <_ZSt7forwardIRKSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff f825 	bl	8000cfe <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE7destroyIS5_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEES6_Lb0EE10pointer_toERS6_>:
      pointer_to(element_type& __r) noexcept
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f97c 	bl	8001fec <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f978 	bl	8002004 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE10deallocateEPS6_j>
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f980 	bl	800202a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68b8      	ldr	r0, [r7, #8]
 8001d70:	f003 ffd6 	bl	8005d20 <_ZdlPvj>
      }
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <_ZNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1Ev>:
    struct _Hash_node
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe ffac 	bl	8000ce4 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJS3_S3_EEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8001d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d98:	b087      	sub	sp, #28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff fccd 	bl	8001742 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2101      	movs	r1, #1
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f946 	bl	800203e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE8allocateERS7_j>
 8001db2:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f000 f951 	bl	800205c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_S8_>
 8001dba:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	20c0      	movs	r0, #192	@ 0xc0
 8001dc2:	f7fe ff6c 	bl	8000c9e <_ZnwjPv>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ffd7 	bl	8001d7c <_ZNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f7ff fcb7 	bl	8001742 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fae2 	bl	80013a4 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8001de0:	4605      	mov	r5, r0
 8001de2:	68b8      	ldr	r0, [r7, #8]
 8001de4:	f7ff faac 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8001de8:	4606      	mov	r6, r0
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff faa8 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4632      	mov	r2, r6
 8001df4:	4629      	mov	r1, r5
 8001df6:	4620      	mov	r0, r4
 8001df8:	f000 f93a 	bl	8002070 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JS3_S3_EEEvRS7_PT_DpOT0_>
	    return __n;
 8001dfc:	693b      	ldr	r3, [r7, #16]
      }
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e06 <_ZSt7forwardIRSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>:
      operator++() noexcept
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff faad 	bl	8001384 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>
	return *this;
 8001e2a:	687b      	ldr	r3, [r7, #4]
      }
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_hash_code(const _Hash_node_value<_Value, true>& __n) const
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
      { return __n._M_hash_code; }
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8001e5a:	68b8      	ldr	r0, [r7, #8]
 8001e5c:	f000 f920 	bl	80020a0 <_ZSt7forwardIRNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fa19 	bl	80012a0 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE6cbeginEv>:
      cbegin() const noexcept
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
      { return const_iterator(_M_begin()); }
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff faa2 	bl	80013d2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fcb6 	bl	8001808 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f8fc 	bl	80020b4 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEj>:
      _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
      { __n._M_hash_code = __c; }
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	33b8      	adds	r3, #184	@ 0xb8
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f99b 	bl	8002230 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb1EEE>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x34>
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fb88 	bl	800161a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x34>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x36>
 8001f14:	2300      	movs	r3, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8001f1e:	b590      	push	{r4, r7, lr}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d011      	beq.n	8001f5e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	601a      	str	r2, [r3, #0]
    }
 8001f5c:	e022      	b.n	8001fa4 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00f      	beq.n	8001f94 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681c      	ldr	r4, [r3, #0]
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fa83 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	3304      	adds	r3, #4
 8001f82:	4619      	mov	r1, r3
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fbcb 	bl	8001720 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4423      	add	r3, r4
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	601a      	str	r2, [r3, #0]
    }
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}

08001fac <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EE7_M_cgetEv>:
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f939 	bl	8002254 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>:
    addressof(_Tp& __r) noexcept
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f937 	bl	8002268 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	4413      	add	r3, r2
 8002018:	019b      	lsls	r3, r3, #6
 800201a:	4619      	mov	r1, r3
 800201c:	68b8      	ldr	r0, [r7, #8]
 800201e:	f003 fe7f 	bl	8005d20 <_ZdlPvj>
      }
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8002048:	2200      	movs	r2, #0
 800204a:	6839      	ldr	r1, [r7, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f915 	bl	800227c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_S8_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8002064:	687b      	ldr	r3, [r7, #4]
    }
 8002066:	4618      	mov	r0, r3
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JS3_S3_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff f95e 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8002084:	4604      	mov	r4, r0
 8002086:	6838      	ldr	r0, [r7, #0]
 8002088:	f7ff f95a 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800208c:	4603      	mov	r3, r0
 800208e:	4622      	mov	r2, r4
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f920 	bl	80022d8 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JS3_S3_EEEvPT_DpOT0_>
	}
 8002098:	bf00      	nop
 800209a:	3714      	adds	r7, #20
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}

080020a0 <_ZSt7forwardIRNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr

080020b4 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08e      	sub	sp, #56	@ 0x38
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, false_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	68f8      	ldr	r0, [r7, #12]
 80020c4:	f000 f926 	bl	8002314 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj>
 80020c8:	6238      	str	r0, [r7, #32]
      __node_ptr __p = _M_begin();
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff f981 	bl	80013d2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 80020d0:	6378      	str	r0, [r7, #52]	@ 0x34
      _M_before_begin._M_nxt = nullptr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
      std::size_t __prev_bkt = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      __node_ptr __prev_p = nullptr;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62bb      	str	r3, [r7, #40]	@ 0x28
      bool __check_bucket = false;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      while (__p)
 80020ea:	e074      	b.n	80021d6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x122>
	{
	  __node_ptr __next = __p->_M_next();
 80020ec:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80020ee:	f7ff f9c9 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80020f2:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 80020f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f6:	3304      	adds	r3, #4
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	4619      	mov	r1, r3
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7ff fdca 	bl	8001c96 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8002102:	6178      	str	r0, [r7, #20]

	  if (__prev_p && __prev_bkt == __bkt)
 8002104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00e      	beq.n	8002128 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x74>
 800210a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	429a      	cmp	r2, r3
 8002110:	d10a      	bne.n	8002128 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x74>
	    {
	      // Previous insert was already in this bucket, we insert after
	      // the previously inserted one to preserve equivalent elements
	      // relative order.
	      __p->_M_nxt = __prev_p->_M_nxt;
 8002112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002118:	601a      	str	r2, [r3, #0]
	      __prev_p->_M_nxt = __p;
 800211a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800211c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800211e:	601a      	str	r2, [r3, #0]
	      // Inserting after a node in a bucket require to check that we
	      // haven't change the bucket last node, in this case next
	      // bucket containing its before begin node must be updated. We
	      // schedule a check as soon as we move out of the sequence of
	      // equivalent nodes to limit the number of checks.
	      __check_bucket = true;
 8002120:	2301      	movs	r3, #1
 8002122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002126:	e050      	b.n	80021ca <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x116>
	    }
	  else
	    {
	      if (__check_bucket)
 8002128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xb4>
		{
		  // Check if we shall update the next bucket because of
		  // insertions into __prev_bkt bucket.
		  if (__prev_p->_M_nxt)
 8002130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d014      	beq.n	8002162 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xae>
		    {
		      std::size_t __next_bkt
			= __hash_code_base::_M_bucket_index(
			  *__prev_p->_M_next(), __bkt_count);
 8002138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800213a:	f7ff f9a3 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 800213e:	4603      	mov	r3, r0
			= __hash_code_base::_M_bucket_index(
 8002140:	3304      	adds	r3, #4
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	4619      	mov	r1, r3
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff fda5 	bl	8001c96 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 800214c:	6138      	str	r0, [r7, #16]
		      if (__next_bkt != __prev_bkt)
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002152:	429a      	cmp	r2, r3
 8002154:	d005      	beq.n	8002162 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xae>
			__new_buckets[__next_bkt] = __prev_p;
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	4413      	add	r3, r2
 800215e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002160:	601a      	str	r2, [r3, #0]
		    }
		  __check_bucket = false;
 8002162:	2300      	movs	r3, #0
 8002164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

	      if (!__new_buckets[__bkt])
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	6a3a      	ldr	r2, [r7, #32]
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d11a      	bne.n	80021ac <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xf8>
		{
		  __p->_M_nxt = _M_before_begin._M_nxt;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800217c:	601a      	str	r2, [r3, #0]
		  _M_before_begin._M_nxt = __p;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002182:	609a      	str	r2, [r3, #8]
		  __new_buckets[__bkt] = &_M_before_begin;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	4413      	add	r3, r2
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	3208      	adds	r2, #8
 8002190:	601a      	str	r2, [r3, #0]
		  if (__p->_M_nxt)
 8002192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xf2>
		    __new_buckets[__bbegin_bkt] = __p;
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	6a3a      	ldr	r2, [r7, #32]
 80021a0:	4413      	add	r3, r2
 80021a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021a4:	601a      	str	r2, [r3, #0]
		  __bbegin_bkt = __bkt;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80021aa:	e00e      	b.n	80021ca <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x116>
		}
	      else
		{
		  __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	6a3a      	ldr	r2, [r7, #32]
 80021b2:	4413      	add	r3, r2
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ba:	601a      	str	r2, [r3, #0]
		  __new_buckets[__bkt]->_M_nxt = __p;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	6a3a      	ldr	r2, [r7, #32]
 80021c2:	4413      	add	r3, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021c8:	601a      	str	r2, [r3, #0]
		}
	    }
	  __prev_p = __p;
 80021ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	  __prev_bkt = __bkt;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  __p = __next;
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__p)
 80021d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d187      	bne.n	80020ec <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x38>
	}

      if (__check_bucket && __prev_p->_M_nxt)
 80021dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d018      	beq.n	8002216 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
 80021e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d014      	beq.n	8002216 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
	{
	  std::size_t __next_bkt
	    = __hash_code_base::_M_bucket_index(*__prev_p->_M_next(),
 80021ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021ee:	f7ff f949 	bl	8001484 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80021f2:	4603      	mov	r3, r0
 80021f4:	3304      	adds	r3, #4
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4619      	mov	r1, r3
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f7ff fd4b 	bl	8001c96 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8002200:	61f8      	str	r0, [r7, #28]
						__bkt_count);
	  if (__next_bkt != __prev_bkt)
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002206:	429a      	cmp	r2, r3
 8002208:	d005      	beq.n	8002216 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
	    __new_buckets[__next_bkt] = __prev_p;
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	6a3a      	ldr	r2, [r7, #32]
 8002210:	4413      	add	r3, r2
 8002212:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002214:	601a      	str	r2, [r3, #0]
	}

      _M_deallocate_buckets();
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff f882 	bl	8001320 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	601a      	str	r2, [r3, #0]
    }
 8002228:	bf00      	nop
 800222a:	3738      	adds	r7, #56	@ 0x38
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb1EEE>:
      _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
      { return __c == __n._M_hash_code; }
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	429a      	cmp	r2, r3
 8002242:	bf0c      	ite	eq
 8002244:	2301      	moveq	r3, #1
 8002246:	2300      	movne	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr

08002254 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>:
      _M_addr() const noexcept
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800225c:	687b      	ldr	r3, [r7, #4]
      }
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f861 	bl	8002350 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv>
 800228e:	4602      	mov	r2, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4293      	cmp	r3, r2
 8002294:	bf8c      	ite	hi
 8002296:	2301      	movhi	r3, #1
 8002298:	2300      	movls	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d007      	beq.n	80022ba <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	4a09      	ldr	r2, [pc, #36]	@ (80022d4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x58>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80022b2:	f003 fd4b 	bl	8005d4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80022b6:	f003 fd46 	bl	8005d46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	019b      	lsls	r3, r3, #6
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fd2d 	bl	8005d24 <_Znwj>
 80022ca:	4603      	mov	r3, r0
      }
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	01555555 	.word	0x01555555

080022d8 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JS3_S3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80022d8:	b5b0      	push	{r4, r5, r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	4619      	mov	r1, r3
 80022ea:	20b8      	movs	r0, #184	@ 0xb8
 80022ec:	f7fe fcd7 	bl	8000c9e <_ZnwjPv>
 80022f0:	4604      	mov	r4, r0
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff f824 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80022f8:	4605      	mov	r5, r0
 80022fa:	6838      	ldr	r0, [r7, #0]
 80022fc:	f7ff f820 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8002300:	4603      	mov	r3, r0
 8002302:	461a      	mov	r2, r3
 8002304:	4629      	mov	r1, r5
 8002306:	4620      	mov	r0, r4
 8002308:	f000 f82e 	bl	8002368 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS0_S0_Lb1EEEOT_OT0_>
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bdb0      	pop	{r4, r5, r7, pc}

08002314 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	bf0c      	ite	eq
 8002324:	2301      	moveq	r3, #1
 8002326:	2300      	movne	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3318      	adds	r3, #24
 8002338:	e005      	b.n	8002346 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 800233a:	6839      	ldr	r1, [r7, #0]
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f834 	bl	80023aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_allocate_bucketsEj>
 8002342:	4603      	mov	r3, r0
 8002344:	bf00      	nop
      }
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002358:	4b02      	ldr	r3, [pc, #8]	@ (8002364 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	00aaaaaa 	.word	0x00aaaaaa

08002368 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS0_S0_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002374:	68b8      	ldr	r0, [r7, #8]
 8002376:	f7fe ffe3 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800237a:	4602      	mov	r2, r0
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	4611      	mov	r1, r2
 8002382:	235c      	movs	r3, #92	@ 0x5c
 8002384:	461a      	mov	r2, r3
 8002386:	f004 fd48 	bl	8006e1a <memcpy>
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe ffd8 	bl	8001340 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8002390:	4602      	mov	r2, r0
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	335c      	adds	r3, #92	@ 0x5c
 8002396:	4611      	mov	r1, r2
 8002398:	225c      	movs	r2, #92	@ 0x5c
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fd3d 	bl	8006e1a <memcpy>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 80023aa:	b590      	push	{r4, r7, lr}
 80023ac:	b087      	sub	sp, #28
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff f9c4 	bl	8001742 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 80023ba:	4602      	mov	r2, r0
 80023bc:	f107 030c 	add.w	r3, r7, #12
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f9f8 	bl	80017b8 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	6839      	ldr	r1, [r7, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 f818 	bl	8002404 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 80023d4:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f000 f823 	bl	8002422 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 80023dc:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4610      	mov	r0, r2
 80023e6:	461a      	mov	r2, r3
 80023e8:	2100      	movs	r1, #0
 80023ea:	f004 fc35 	bl	8006c58 <memset>
      return __p;
 80023ee:	693c      	ldr	r4, [r7, #16]
    }
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f9ec 	bl	80017d2 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 80023fa:	4623      	mov	r3, r4
    }
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd90      	pop	{r4, r7, pc}

08002404 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800240e:	2200      	movs	r2, #0
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f80f 	bl	8002436 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
      return __ptr;
 800242a:	687b      	ldr	r3, [r7, #4]
    }
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f820 	bl	8002488 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4293      	cmp	r3, r2
 800244e:	bf8c      	ite	hi
 8002450:	2301      	movhi	r3, #1
 8002452:	2300      	movls	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d007      	beq.n	8002474 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246a:	d301      	bcc.n	8002470 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 800246c:	f003 fc6e 	bl	8005d4c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8002470:	f003 fc69 	bl	8005d46 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4618      	mov	r0, r3
 800247a:	f003 fc53 	bl	8005d24 <_Znwj>
 800247e:	4603      	mov	r3, r0
      }
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002490:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEED1Ev>:
    class unordered_multimap
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe febb 	bl	8001224 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEED1Ev>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_Z41__static_initialization_and_destruction_0ii>:
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d102      	bne.n	80024d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::unordered_multimap<GPIO_TIM_Mapping, GPIO_TIM_Mapping, GPIOPinHash> gpioMap;
 80024d2:	4809      	ldr	r0, [pc, #36]	@ (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80024d4:	f7fe fd02 	bl	8000edc <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEEC1Ev>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d107      	bne.n	80024ee <_Z41__static_initialization_and_destruction_0ii+0x36>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d102      	bne.n	80024ee <_Z41__static_initialization_and_destruction_0ii+0x36>
 80024e8:	4803      	ldr	r0, [pc, #12]	@ (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80024ea:	f7ff ffd8 	bl	800249e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEED1Ev>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200001f4 	.word	0x200001f4

080024fc <_GLOBAL__sub_I_gpioMap>:
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
 8002500:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002504:	2001      	movs	r0, #1
 8002506:	f7ff ffd7 	bl	80024b8 <_Z41__static_initialization_and_destruction_0ii>
 800250a:	bd80      	pop	{r7, pc}

0800250c <_GLOBAL__sub_D_gpioMap>:
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
 8002510:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002514:	2000      	movs	r0, #0
 8002516:	f7ff ffcf 	bl	80024b8 <_Z41__static_initialization_and_destruction_0ii>
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_TIM_PeriodElapsedCallback>:
uint32_t millis(){
	return tick;
}
///////////	+++++++++ CALL BACK	+++++++++++++////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){ /// ngat 1ms
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d104      	bne.n	8002538 <HAL_TIM_PeriodElapsedCallback+0x1c>
		tick++;
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3301      	adds	r3, #1
 8002534:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002536:	6013      	str	r3, [r2, #0]

	if(htim->Instance == TIM7){ // ngắt sau 10ms
		///// update map
	}

}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40001000 	.word	0x40001000
 8002548:	20000210 	.word	0x20000210

0800254c <_ZN19Info_position_robotC1Effsb>:
    float y;
    int16_t angle;
    bool st ;
	// 1 byte cua struct

	Info_position_robot(float x,float y,int16_t angle,bool st): x(x),y(y),angle(angle),st(st){}
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	807b      	strh	r3, [r7, #2]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	68ba      	ldr	r2, [r7, #8]
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	887a      	ldrh	r2, [r7, #2]
 800256a:	811a      	strh	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	7e3a      	ldrb	r2, [r7, #24]
 8002570:	729a      	strb	r2, [r3, #10]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4618      	mov	r0, r3
 8002576:	3714      	adds	r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
	...

08002580 <_Z5DebugPKcz>:

bool st_data_dg = true;
bool st_data_recv_map = true;
bool flag_uart3 = false;

void Debug(const char* format,...){ // uart 3
 8002580:	b40f      	push	{r0, r1, r2, r3}
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0

	//static uint32_t time = 0;


	if(uart3_stages == STAGE_NO_SEND && !flag_uart3 && st_data_dg){
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <_Z5DebugPKcz+0x5c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d11e      	bne.n	80025ce <_Z5DebugPKcz+0x4e>
 8002590:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <_Z5DebugPKcz+0x60>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d017      	beq.n	80025ce <_Z5DebugPKcz+0x4e>
 800259e:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <_Z5DebugPKcz+0x64>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d013      	beq.n	80025ce <_Z5DebugPKcz+0x4e>

		va_list args;
		va_start(args,format); // chuyển các kí tự thành 1 mảng
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	607b      	str	r3, [r7, #4]

		vsnprintf(buffer_dg,sizeof(buffer_dg),format,args);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	21fa      	movs	r1, #250	@ 0xfa
 80025b2:	480d      	ldr	r0, [pc, #52]	@ (80025e8 <_Z5DebugPKcz+0x68>)
 80025b4:	f004 fb42 	bl	8006c3c <vsniprintf>
			Error_Handler();
		}

		*/

		HAL_UART_Transmit_IT(&huart3, (uint8_t*)&start_dg, 1);
 80025b8:	2201      	movs	r2, #1
 80025ba:	490c      	ldr	r1, [pc, #48]	@ (80025ec <_Z5DebugPKcz+0x6c>)
 80025bc:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <_Z5DebugPKcz+0x70>)
 80025be:	f002 fdf2 	bl	80051a6 <HAL_UART_Transmit_IT>

		st_data_dg = false;
 80025c2:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <_Z5DebugPKcz+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
		uart3_stages = STAGE_DEBUG;
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <_Z5DebugPKcz+0x5c>)
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]

	}



}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025d8:	b004      	add	sp, #16
 80025da:	4770      	bx	lr
 80025dc:	2000022c 	.word	0x2000022c
 80025e0:	2000032a 	.word	0x2000032a
 80025e4:	20000002 	.word	0x20000002
 80025e8:	20000230 	.word	0x20000230
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000544 	.word	0x20000544

080025f4 <_Z8Data_mapv>:



void Data_map(){ // uart3
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0

	static uint32_t timee = 0;
	if( flag_uart3 && st_data_dg){
 80025fa:	4b22      	ldr	r3, [pc, #136]	@ (8002684 <_Z8Data_mapv+0x90>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d021      	beq.n	8002646 <_Z8Data_mapv+0x52>
 8002602:	4b21      	ldr	r3, [pc, #132]	@ (8002688 <_Z8Data_mapv+0x94>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d01d      	beq.n	8002646 <_Z8Data_mapv+0x52>

			uint8_t buffer[13];
			buffer[0] = '!';
 800260a:	2321      	movs	r3, #33	@ 0x21
 800260c:	703b      	strb	r3, [r7, #0]
			memcpy((uint8_t*)&buffer[1],(uint8_t*)&my_info_pt,12);
 800260e:	463b      	mov	r3, r7
 8002610:	3301      	adds	r3, #1
 8002612:	220c      	movs	r2, #12
 8002614:	491d      	ldr	r1, [pc, #116]	@ (800268c <_Z8Data_mapv+0x98>)
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fbff 	bl	8006e1a <memcpy>

			if(HAL_UART_Transmit(&huart3, (uint8_t*)&buffer, sizeof(buffer),100) != HAL_OK){
 800261c:	4639      	mov	r1, r7
 800261e:	2364      	movs	r3, #100	@ 0x64
 8002620:	220d      	movs	r2, #13
 8002622:	481b      	ldr	r0, [pc, #108]	@ (8002690 <_Z8Data_mapv+0x9c>)
 8002624:	f002 fd34 	bl	8005090 <HAL_UART_Transmit>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf14      	ite	ne
 800262e:	2301      	movne	r3, #1
 8002630:	2300      	moveq	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <_Z8Data_mapv+0x48>
				Error_Handler(); // dấu !
 8002638:	f000 fc8c 	bl	8002f54 <Error_Handler>
			}

			flag_uart3 = false;
 800263c:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <_Z8Data_mapv+0x90>)
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]

	}else{
 8002642:	bf00      	nop
		//HAL_UART_Transmit(&huart3, (uint8_t*)&my_info_pt, 12,100);
		//st_data_recv_map = false;

	}

}
 8002644:	e01a      	b.n	800267c <_Z8Data_mapv+0x88>
		if(HAL_GetTick() - timee >= 300){
 8002646:	f001 f8a1 	bl	800378c <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <_Z8Data_mapv+0xa0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f240 122b 	movw	r2, #299	@ 0x12b
 8002656:	4293      	cmp	r3, r2
 8002658:	bf8c      	ite	hi
 800265a:	2301      	movhi	r3, #1
 800265c:	2300      	movls	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <_Z8Data_mapv+0x88>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8002664:	2110      	movs	r1, #16
 8002666:	480c      	ldr	r0, [pc, #48]	@ (8002698 <_Z8Data_mapv+0xa4>)
 8002668:	f001 fcba 	bl	8003fe0 <HAL_GPIO_TogglePin>
			flag_uart3 = true;
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <_Z8Data_mapv+0x90>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
			timee = HAL_GetTick();
 8002672:	f001 f88b 	bl	800378c <HAL_GetTick>
 8002676:	4603      	mov	r3, r0
 8002678:	4a06      	ldr	r2, [pc, #24]	@ (8002694 <_Z8Data_mapv+0xa0>)
 800267a:	6013      	str	r3, [r2, #0]
}
 800267c:	bf00      	nop
 800267e:	3710      	adds	r7, #16
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000032a 	.word	0x2000032a
 8002688:	20000002 	.word	0x20000002
 800268c:	20000214 	.word	0x20000214
 8002690:	20000544 	.word	0x20000544
 8002694:	2000032c 	.word	0x2000032c
 8002698:	40010c00 	.word	0x40010c00

0800269c <_Z3ps3v>:

UART4_stages uart4_stages = STAGE_NO_READ;
uint16_t button;
int16_t LX,LY,RX,RY;

void ps3(){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0

	static uint32_t time = 0;

	if(uart4_stages == STAGE_NO_READ){
 80026a2:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <_Z3ps3v+0x5c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d110      	bne.n	80026cc <_Z3ps3v+0x30>
		char start = 'd';
 80026aa:	2364      	movs	r3, #100	@ 0x64
 80026ac:	71fb      	strb	r3, [r7, #7]
		uart4_stages = STAGE_READ_BUTTON;
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <_Z3ps3v+0x5c>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
		time = HAL_GetTick();
 80026b4:	f001 f86a 	bl	800378c <HAL_GetTick>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a10      	ldr	r2, [pc, #64]	@ (80026fc <_Z3ps3v+0x60>)
 80026bc:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart4, (uint8_t *)&start, 1);
 80026be:	1dfb      	adds	r3, r7, #7
 80026c0:	2201      	movs	r2, #1
 80026c2:	4619      	mov	r1, r3
 80026c4:	480e      	ldr	r0, [pc, #56]	@ (8002700 <_Z3ps3v+0x64>)
 80026c6:	f002 fd6e 	bl	80051a6 <HAL_UART_Transmit_IT>
		if(HAL_GetTick() - time >= 1500){
			uart4_stages = STAGE_NO_READ;
		}
	}

}
 80026ca:	e011      	b.n	80026f0 <_Z3ps3v+0x54>
		if(HAL_GetTick() - time >= 1500){
 80026cc:	f001 f85e 	bl	800378c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <_Z3ps3v+0x60>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf8c      	ite	hi
 80026e0:	2301      	movhi	r3, #1
 80026e2:	2300      	movls	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <_Z3ps3v+0x54>
			uart4_stages = STAGE_NO_READ;
 80026ea:	4b03      	ldr	r3, [pc, #12]	@ (80026f8 <_Z3ps3v+0x5c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	20000330 	.word	0x20000330
 80026fc:	2000033c 	.word	0x2000033c
 8002700:	2000046c 	.word	0x2000046c

08002704 <HAL_UART_TxCpltCallback>:

///////////////////// INTERRUPT UART /////////////////
// 	CALL BACK TX //
bool flag;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

	/*************** UART 3 *******************/
	if(huart->Instance == huart3.Instance){
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <HAL_UART_TxCpltCallback+0xf0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d145      	bne.n	80027a4 <HAL_UART_TxCpltCallback+0xa0>


		switch(uart3_stages){
 8002718:	4b37      	ldr	r3, [pc, #220]	@ (80027f8 <HAL_UART_TxCpltCallback+0xf4>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d841      	bhi.n	80027a4 <HAL_UART_TxCpltCallback+0xa0>
 8002720:	a201      	add	r2, pc, #4	@ (adr r2, 8002728 <HAL_UART_TxCpltCallback+0x24>)
 8002722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002726:	bf00      	nop
 8002728:	08002785 	.word	0x08002785
 800272c:	08002739 	.word	0x08002739
 8002730:	08002751 	.word	0x08002751
 8002734:	0800276d 	.word	0x0800276d

		case STAGE_MAP:
			flag = false;
 8002738:	4b30      	ldr	r3, [pc, #192]	@ (80027fc <HAL_UART_TxCpltCallback+0xf8>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
			uart3_stages = STAGE_NO_SEND;
 800273e:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_UART_TxCpltCallback+0xf4>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3,(uint8_t*)&my_info_pt, 12);
 8002744:	220c      	movs	r2, #12
 8002746:	492e      	ldr	r1, [pc, #184]	@ (8002800 <HAL_UART_TxCpltCallback+0xfc>)
 8002748:	482a      	ldr	r0, [pc, #168]	@ (80027f4 <HAL_UART_TxCpltCallback+0xf0>)
 800274a:	f002 fd2c 	bl	80051a6 <HAL_UART_Transmit_IT>
			//Error_Handler();
			break;
 800274e:	e029      	b.n	80027a4 <HAL_UART_TxCpltCallback+0xa0>

		case STAGE_DEBUG:
			uart3_stages = STAGE_END_DEBUG;
 8002750:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <HAL_UART_TxCpltCallback+0xf4>)
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Receive_IT(huart, (uint8_t*)&st_data_dg, 1);
			HAL_UART_Transmit_IT(&huart3,(uint8_t*)buffer_dg, strlen(buffer_dg));
 8002756:	482b      	ldr	r0, [pc, #172]	@ (8002804 <HAL_UART_TxCpltCallback+0x100>)
 8002758:	f7fd fd66 	bl	8000228 <strlen>
 800275c:	4603      	mov	r3, r0
 800275e:	b29b      	uxth	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	4928      	ldr	r1, [pc, #160]	@ (8002804 <HAL_UART_TxCpltCallback+0x100>)
 8002764:	4823      	ldr	r0, [pc, #140]	@ (80027f4 <HAL_UART_TxCpltCallback+0xf0>)
 8002766:	f002 fd1e 	bl	80051a6 <HAL_UART_Transmit_IT>
			break;
 800276a:	e01b      	b.n	80027a4 <HAL_UART_TxCpltCallback+0xa0>

		case STAGE_END_DEBUG:
			flag = true;
 800276c:	4b23      	ldr	r3, [pc, #140]	@ (80027fc <HAL_UART_TxCpltCallback+0xf8>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
			uart3_stages = STAGE_NO_SEND;
 8002772:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <HAL_UART_TxCpltCallback+0xf4>)
 8002774:	2200      	movs	r2, #0
 8002776:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)&end_dg, 1);
 8002778:	2201      	movs	r2, #1
 800277a:	4923      	ldr	r1, [pc, #140]	@ (8002808 <HAL_UART_TxCpltCallback+0x104>)
 800277c:	481d      	ldr	r0, [pc, #116]	@ (80027f4 <HAL_UART_TxCpltCallback+0xf0>)
 800277e:	f002 fd12 	bl	80051a6 <HAL_UART_Transmit_IT>
			break;
 8002782:	e00f      	b.n	80027a4 <HAL_UART_TxCpltCallback+0xa0>

		case STAGE_NO_SEND:
			if(flag){
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <HAL_UART_TxCpltCallback+0xf8>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_UART_TxCpltCallback+0x94>
				HAL_UART_Receive_IT(&huart3, (uint8_t*)&st_data_dg, 1);
 800278c:	2201      	movs	r2, #1
 800278e:	491f      	ldr	r1, [pc, #124]	@ (800280c <HAL_UART_TxCpltCallback+0x108>)
 8002790:	4818      	ldr	r0, [pc, #96]	@ (80027f4 <HAL_UART_TxCpltCallback+0xf0>)
 8002792:	f002 fd3d 	bl	8005210 <HAL_UART_Receive_IT>
			}else{
				HAL_UART_Receive_IT(&huart3,(uint8_t*)&frd_info_pt, 12);
			}
			break;
 8002796:	e004      	b.n	80027a2 <HAL_UART_TxCpltCallback+0x9e>
				HAL_UART_Receive_IT(&huart3,(uint8_t*)&frd_info_pt, 12);
 8002798:	220c      	movs	r2, #12
 800279a:	491d      	ldr	r1, [pc, #116]	@ (8002810 <HAL_UART_TxCpltCallback+0x10c>)
 800279c:	4815      	ldr	r0, [pc, #84]	@ (80027f4 <HAL_UART_TxCpltCallback+0xf0>)
 800279e:	f002 fd37 	bl	8005210 <HAL_UART_Receive_IT>
			break;
 80027a2:	bf00      	nop
	/**********************************************/



	/******************	UART 4	********************/
	if(huart->Instance == huart4.Instance){
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002814 <HAL_UART_TxCpltCallback+0x110>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d104      	bne.n	80027ba <HAL_UART_TxCpltCallback+0xb6>

		HAL_UART_Receive_IT(huart, (uint8_t*)&button, 2);
 80027b0:	2202      	movs	r2, #2
 80027b2:	4919      	ldr	r1, [pc, #100]	@ (8002818 <HAL_UART_TxCpltCallback+0x114>)
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f002 fd2b 	bl	8005210 <HAL_UART_Receive_IT>



	/************	UART 5	********************/

	if(huart->Instance == huart5.Instance){
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	4b17      	ldr	r3, [pc, #92]	@ (800281c <HAL_UART_TxCpltCallback+0x118>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d112      	bne.n	80027ec <HAL_UART_TxCpltCallback+0xe8>
		if(uart5_stages == STAGE_READ_START){
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <HAL_UART_TxCpltCallback+0x11c>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_UART_TxCpltCallback+0xda>
			HAL_UART_Receive_IT(&huart5, (uint8_t*)&buffer_angle[0],1);
 80027ce:	2201      	movs	r2, #1
 80027d0:	4914      	ldr	r1, [pc, #80]	@ (8002824 <HAL_UART_TxCpltCallback+0x120>)
 80027d2:	4812      	ldr	r0, [pc, #72]	@ (800281c <HAL_UART_TxCpltCallback+0x118>)
 80027d4:	f002 fd1c 	bl	8005210 <HAL_UART_Receive_IT>
			uart5_stages = STAGE_BYTE_H;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_UART_TxCpltCallback+0x11c>)
 80027da:	2202      	movs	r2, #2
 80027dc:	701a      	strb	r2, [r3, #0]
		}
		if(uart5_stages == STAGE_RESET_COMPASS){
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <HAL_UART_TxCpltCallback+0x11c>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d102      	bne.n	80027ec <HAL_UART_TxCpltCallback+0xe8>
			uart5_stages = STAGE_NO_READ_COMPASS;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_UART_TxCpltCallback+0x11c>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]

	}

	/**********************/

}
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20000544 	.word	0x20000544
 80027f8:	2000022c 	.word	0x2000022c
 80027fc:	20000348 	.word	0x20000348
 8002800:	20000214 	.word	0x20000214
 8002804:	20000230 	.word	0x20000230
 8002808:	20000001 	.word	0x20000001
 800280c:	20000002 	.word	0x20000002
 8002810:	20000220 	.word	0x20000220
 8002814:	2000046c 	.word	0x2000046c
 8002818:	20000332 	.word	0x20000332
 800281c:	200004b4 	.word	0x200004b4
 8002820:	20000340 	.word	0x20000340
 8002824:	20000344 	.word	0x20000344

08002828 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	//***********	UART 3	************//
	if(huart->Instance == huart3.Instance){
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b39      	ldr	r3, [pc, #228]	@ (800291c <HAL_UART_RxCpltCallback+0xf4>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d102      	bne.n	8002842 <HAL_UART_RxCpltCallback+0x1a>
		st_data_dg = true;
 800283c:	4b38      	ldr	r3, [pc, #224]	@ (8002920 <HAL_UART_RxCpltCallback+0xf8>)
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
	}



	//**********	UART4	***************//
	if(huart->Instance == huart4.Instance){
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b37      	ldr	r3, [pc, #220]	@ (8002924 <HAL_UART_RxCpltCallback+0xfc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d13e      	bne.n	80028cc <HAL_UART_RxCpltCallback+0xa4>
		switch(uart4_stages){
 800284e:	4b36      	ldr	r3, [pc, #216]	@ (8002928 <HAL_UART_RxCpltCallback+0x100>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d83a      	bhi.n	80028cc <HAL_UART_RxCpltCallback+0xa4>
 8002856:	a201      	add	r2, pc, #4	@ (adr r2, 800285c <HAL_UART_RxCpltCallback+0x34>)
 8002858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285c:	080028c5 	.word	0x080028c5
 8002860:	08002875 	.word	0x08002875
 8002864:	08002887 	.word	0x08002887
 8002868:	08002899 	.word	0x08002899
 800286c:	080028ab 	.word	0x080028ab
 8002870:	080028bd 	.word	0x080028bd

		case STAGE_READ_BUTTON:
			uart4_stages = STAGE_READ_LX;
 8002874:	4b2c      	ldr	r3, [pc, #176]	@ (8002928 <HAL_UART_RxCpltCallback+0x100>)
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&LX, sizeof(LX));
 800287a:	2202      	movs	r2, #2
 800287c:	492b      	ldr	r1, [pc, #172]	@ (800292c <HAL_UART_RxCpltCallback+0x104>)
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f002 fcc6 	bl	8005210 <HAL_UART_Receive_IT>
			break;
 8002884:	e022      	b.n	80028cc <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_LX:
			uart4_stages = STAGE_READ_LY;
 8002886:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <HAL_UART_RxCpltCallback+0x100>)
 8002888:	2203      	movs	r2, #3
 800288a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&LY, sizeof(LY));
 800288c:	2202      	movs	r2, #2
 800288e:	4928      	ldr	r1, [pc, #160]	@ (8002930 <HAL_UART_RxCpltCallback+0x108>)
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f002 fcbd 	bl	8005210 <HAL_UART_Receive_IT>
			break;
 8002896:	e019      	b.n	80028cc <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_LY:
			uart4_stages = STAGE_READ_RX;
 8002898:	4b23      	ldr	r3, [pc, #140]	@ (8002928 <HAL_UART_RxCpltCallback+0x100>)
 800289a:	2204      	movs	r2, #4
 800289c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&RX, sizeof(RX));
 800289e:	2202      	movs	r2, #2
 80028a0:	4924      	ldr	r1, [pc, #144]	@ (8002934 <HAL_UART_RxCpltCallback+0x10c>)
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f002 fcb4 	bl	8005210 <HAL_UART_Receive_IT>
			break;
 80028a8:	e010      	b.n	80028cc <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_RX:
			uart4_stages = STAGE_READ_RY;
 80028aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <HAL_UART_RxCpltCallback+0x100>)
 80028ac:	2205      	movs	r2, #5
 80028ae:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&RY, sizeof(RY));
 80028b0:	2202      	movs	r2, #2
 80028b2:	4921      	ldr	r1, [pc, #132]	@ (8002938 <HAL_UART_RxCpltCallback+0x110>)
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f002 fcab 	bl	8005210 <HAL_UART_Receive_IT>
			break;
 80028ba:	e007      	b.n	80028cc <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_RY:
			uart4_stages = STAGE_NO_READ;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <HAL_UART_RxCpltCallback+0x100>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
			break;
 80028c2:	e003      	b.n	80028cc <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_NO_READ:
			st_data_dg = true;
 80028c4:	4b16      	ldr	r3, [pc, #88]	@ (8002920 <HAL_UART_RxCpltCallback+0xf8>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
			break;
 80028ca:	bf00      	nop
		}

	}

	//************	UART5	************//
	if(huart->Instance == huart5.Instance){
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <HAL_UART_RxCpltCallback+0x114>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d11d      	bne.n	8002914 <HAL_UART_RxCpltCallback+0xec>
		if(uart5_stages == STAGE_BYTE_H){
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_UART_RxCpltCallback+0x118>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d107      	bne.n	80028f0 <HAL_UART_RxCpltCallback+0xc8>
			HAL_UART_Receive_IT(&huart5, (uint8_t*)&buffer_angle[1], 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	4918      	ldr	r1, [pc, #96]	@ (8002944 <HAL_UART_RxCpltCallback+0x11c>)
 80028e4:	4815      	ldr	r0, [pc, #84]	@ (800293c <HAL_UART_RxCpltCallback+0x114>)
 80028e6:	f002 fc93 	bl	8005210 <HAL_UART_Receive_IT>
			uart5_stages = STAGE_BYTE_L;
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_UART_RxCpltCallback+0x118>)
 80028ec:	2203      	movs	r2, #3
 80028ee:	701a      	strb	r2, [r3, #0]
		}
		if(uart5_stages == STAGE_BYTE_L){
 80028f0:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <HAL_UART_RxCpltCallback+0x118>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10d      	bne.n	8002914 <HAL_UART_RxCpltCallback+0xec>
			value_compass = (int16_t) ((buffer_angle[0] << 8) | (buffer_angle[1]));
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <HAL_UART_RxCpltCallback+0x120>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	b21a      	sxth	r2, r3
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_UART_RxCpltCallback+0x120>)
 8002902:	785b      	ldrb	r3, [r3, #1]
 8002904:	b21b      	sxth	r3, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	b21a      	sxth	r2, r3
 800290a:	4b10      	ldr	r3, [pc, #64]	@ (800294c <HAL_UART_RxCpltCallback+0x124>)
 800290c:	801a      	strh	r2, [r3, #0]
			uart5_stages = STAGE_NO_READ_COMPASS;
 800290e:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <HAL_UART_RxCpltCallback+0x118>)
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
			}
		}



}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000544 	.word	0x20000544
 8002920:	20000002 	.word	0x20000002
 8002924:	2000046c 	.word	0x2000046c
 8002928:	20000330 	.word	0x20000330
 800292c:	20000334 	.word	0x20000334
 8002930:	20000336 	.word	0x20000336
 8002934:	20000338 	.word	0x20000338
 8002938:	2000033a 	.word	0x2000033a
 800293c:	200004b4 	.word	0x200004b4
 8002940:	20000340 	.word	0x20000340
 8002944:	20000345 	.word	0x20000345
 8002948:	20000344 	.word	0x20000344
 800294c:	20000346 	.word	0x20000346

08002950 <_Z41__static_initialization_and_destruction_0ii>:
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af02      	add	r7, sp, #8
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d116      	bne.n	800298e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002966:	4293      	cmp	r3, r2
 8002968:	d111      	bne.n	800298e <_Z41__static_initialization_and_destruction_0ii+0x3e>
Info_position_robot my_info_pt(10.0,5.0,0,false);
 800296a:	2300      	movs	r3, #0
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8002974:	480a      	ldr	r0, [pc, #40]	@ (80029a0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8002976:	f7ff fde9 	bl	800254c <_ZN19Info_position_robotC1Effsb>
Info_position_robot frd_info_pt(0,0,0,false);
 800297a:	2300      	movs	r3, #0
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0100 	mov.w	r1, #0
 8002988:	4806      	ldr	r0, [pc, #24]	@ (80029a4 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800298a:	f7ff fddf 	bl	800254c <_ZN19Info_position_robotC1Effsb>
}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40a00000 	.word	0x40a00000
 800299c:	41200000 	.word	0x41200000
 80029a0:	20000214 	.word	0x20000214
 80029a4:	20000220 	.word	0x20000220

080029a8 <_GLOBAL__sub_I_my_info_pt>:
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff ffcd 	bl	8002950 <_Z41__static_initialization_and_destruction_0ii>
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029be:	f000 fe8d 	bl	80036dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029c2:	f000 f833 	bl	8002a2c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029c6:	f000 fa75 	bl	8002eb4 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 80029ca:	f000 fa45 	bl	8002e58 <_ZL19MX_USART3_UART_Initv>
  MX_UART4_Init();
 80029ce:	f000 f9b9 	bl	8002d44 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 80029d2:	f000 f9e5 	bl	8002da0 <_ZL13MX_UART5_Initv>
  MX_TIM2_Init();
 80029d6:	f000 f879 	bl	8002acc <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 80029da:	f000 f8d5 	bl	8002b88 <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 80029de:	f000 fa0d 	bl	8002dfc <_ZL19MX_USART2_UART_Initv>
  MX_TIM6_Init(); // 1ms
 80029e2:	f000 f92f 	bl	8002c44 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init(); // 10s
 80029e6:	f000 f96d 	bl	8002cc4 <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim6);
  //HAL_TIM_Base_Start_IT(&htim7);

  Add_Map_STM32F103xx();
 80029ea:	f7fe fab3 	bl	8000f54 <_Z19Add_Map_STM32F103xxv>
  //Error_Handler();
  GPIO_OUT_Init(GPIOB, GPIO_PIN_4,GPIO_SPEED_FREQ_HIGH);
 80029ee:	2203      	movs	r2, #3
 80029f0:	2110      	movs	r1, #16
 80029f2:	480b      	ldr	r0, [pc, #44]	@ (8002a20 <main+0x68>)
 80029f4:	f7fe f92a 	bl	8000c4c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 80029f8:	213c      	movs	r1, #60	@ 0x3c
 80029fa:	480a      	ldr	r0, [pc, #40]	@ (8002a24 <main+0x6c>)
 80029fc:	f002 f82d 	bl	8004a5a <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Data_map();
 8002a00:	f7ff fdf8 	bl	80025f4 <_Z8Data_mapv>
	  ps3();
 8002a04:	f7ff fe4a 	bl	800269c <_Z3ps3v>

	  //void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	 // Debug("button  :  %d  LX  :  %d  Ly : %d  Rx : %d  Ry : %d" ,button,LX,LY,RX,RY);
	  //Debug("xin loi vi da dep trai");
	  //int16_t angle = compass();
	  uint16_t encoer = __HAL_TIM_GET_COUNTER(&htim5);
 8002a08:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <main+0x6c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	80fb      	strh	r3, [r7, #6]
	  Debug("encoder : %d",encoer);
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	4619      	mov	r1, r3
 8002a14:	4804      	ldr	r0, [pc, #16]	@ (8002a28 <main+0x70>)
 8002a16:	f7ff fdb3 	bl	8002580 <_Z5DebugPKcz>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002a1a:	bf00      	nop
 8002a1c:	e7f0      	b.n	8002a00 <main+0x48>
 8002a1e:	bf00      	nop
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	20000394 	.word	0x20000394
 8002a28:	08008c98 	.word	0x08008c98

08002a2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b090      	sub	sp, #64	@ 0x40
 8002a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a32:	f107 0318 	add.w	r3, r7, #24
 8002a36:	2228      	movs	r2, #40	@ 0x28
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f90c 	bl	8006c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	605a      	str	r2, [r3, #4]
 8002a48:	609a      	str	r2, [r3, #8]
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a60:	2302      	movs	r3, #2
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a6a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a70:	f107 0318 	add.w	r3, r7, #24
 8002a74:	4618      	mov	r0, r3
 8002a76:	f001 faef 	bl	8004058 <HAL_RCC_OscConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	bf14      	ite	ne
 8002a80:	2301      	movne	r3, #1
 8002a82:	2300      	moveq	r3, #0
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002a8a:	f000 fa63 	bl	8002f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8e:	230f      	movs	r3, #15
 8002a90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a92:	2302      	movs	r3, #2
 8002a94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2102      	movs	r1, #2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fd57 	bl	800455c <HAL_RCC_ClockConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8002abe:	f000 fa49 	bl	8002f54 <Error_Handler>
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	3740      	adds	r7, #64	@ 0x40
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	@ 0x30
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	2224      	movs	r2, #36	@ 0x24
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f004 f8bc 	bl	8006c58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ae8:	4b26      	ldr	r3, [pc, #152]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002aea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002aee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002af0:	4b24      	ldr	r3, [pc, #144]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002af6:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002afc:	4b21      	ldr	r3, [pc, #132]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b10:	2303      	movs	r3, #3
 8002b12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b24:	2300      	movs	r3, #0
 8002b26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b34:	f107 030c 	add.w	r3, r7, #12
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4812      	ldr	r0, [pc, #72]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b3c:	f001 feeb 	bl	8004916 <HAL_TIM_Encoder_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8002b50:	f000 fa00 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4808      	ldr	r0, [pc, #32]	@ (8002b84 <_ZL12MX_TIM2_Initv+0xb8>)
 8002b62:	f002 f9c7 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bf14      	ite	ne
 8002b6c:	2301      	movne	r3, #1
 8002b6e:	2300      	moveq	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8002b76:	f000 f9ed 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b7a:	bf00      	nop
 8002b7c:	3730      	adds	r7, #48	@ 0x30
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	2000034c 	.word	0x2000034c

08002b88 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08c      	sub	sp, #48	@ 0x30
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b8e:	f107 030c 	add.w	r3, r7, #12
 8002b92:	2224      	movs	r2, #36	@ 0x24
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 f85e 	bl	8006c58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002ba6:	4a26      	ldr	r2, [pc, #152]	@ (8002c40 <_ZL12MX_TIM5_Initv+0xb8>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002baa:	4b24      	ldr	r3, [pc, #144]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002bb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bbc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002be2:	2301      	movs	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4811      	ldr	r0, [pc, #68]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002bf6:	f001 fe8e 	bl	8004916 <HAL_TIM_Encoder_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8002c0a:	f000 f9a3 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4808      	ldr	r0, [pc, #32]	@ (8002c3c <_ZL12MX_TIM5_Initv+0xb4>)
 8002c1c:	f002 f96a 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8002c30:	f000 f990 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002c34:	bf00      	nop
 8002c36:	3730      	adds	r7, #48	@ 0x30
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000394 	.word	0x20000394
 8002c40:	40000c00 	.word	0x40000c00

08002c44 <_ZL12MX_TIM6_Initv>:
  * @retval None
  */


static void MX_TIM6_Init(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c52:	4b1a      	ldr	r3, [pc, #104]	@ (8002cbc <_ZL12MX_TIM6_Initv+0x78>)
 8002c54:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc0 <_ZL12MX_TIM6_Initv+0x7c>)
 8002c56:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8002c58:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <_ZL12MX_TIM6_Initv+0x78>)
 8002c5a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002c5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c60:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <_ZL12MX_TIM6_Initv+0x78>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <_ZL12MX_TIM6_Initv+0x78>)
 8002c68:	2209      	movs	r2, #9
 8002c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6c:	4b13      	ldr	r3, [pc, #76]	@ (8002cbc <_ZL12MX_TIM6_Initv+0x78>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c72:	4812      	ldr	r0, [pc, #72]	@ (8002cbc <_ZL12MX_TIM6_Initv+0x78>)
 8002c74:	f001 fe00 	bl	8004878 <HAL_TIM_Base_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bf14      	ite	ne
 8002c7e:	2301      	movne	r3, #1
 8002c80:	2300      	moveq	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8002c88:	f000 f964 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c94:	463b      	mov	r3, r7
 8002c96:	4619      	mov	r1, r3
 8002c98:	4808      	ldr	r0, [pc, #32]	@ (8002cbc <_ZL12MX_TIM6_Initv+0x78>)
 8002c9a:	f002 f92b 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf14      	ite	ne
 8002ca4:	2301      	movne	r3, #1
 8002ca6:	2300      	moveq	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8002cae:	f000 f951 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200003dc 	.word	0x200003dc
 8002cc0:	40001000 	.word	0x40001000

08002cc4 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cca:	463b      	mov	r3, r7
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <_ZL12MX_TIM7_Initv+0x78>)
 8002cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d40 <_ZL12MX_TIM7_Initv+0x7c>)
 8002cd6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8002cd8:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <_ZL12MX_TIM7_Initv+0x78>)
 8002cda:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002cde:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ce0:	4b16      	ldr	r3, [pc, #88]	@ (8002d3c <_ZL12MX_TIM7_Initv+0x78>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8002ce6:	4b15      	ldr	r3, [pc, #84]	@ (8002d3c <_ZL12MX_TIM7_Initv+0x78>)
 8002ce8:	2263      	movs	r2, #99	@ 0x63
 8002cea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cec:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <_ZL12MX_TIM7_Initv+0x78>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002cf2:	4812      	ldr	r0, [pc, #72]	@ (8002d3c <_ZL12MX_TIM7_Initv+0x78>)
 8002cf4:	f001 fdc0 	bl	8004878 <HAL_TIM_Base_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8002d08:	f000 f924 	bl	8002f54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002d14:	463b      	mov	r3, r7
 8002d16:	4619      	mov	r1, r3
 8002d18:	4808      	ldr	r0, [pc, #32]	@ (8002d3c <_ZL12MX_TIM7_Initv+0x78>)
 8002d1a:	f002 f8eb 	bl	8004ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8002d2e:	f000 f911 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000424 	.word	0x20000424
 8002d40:	40001400 	.word	0x40001400

08002d44 <_ZL13MX_UART4_Initv>:



static void MX_UART4_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d4a:	4a14      	ldr	r2, [pc, #80]	@ (8002d9c <_ZL13MX_UART4_Initv+0x58>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b10      	ldr	r3, [pc, #64]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b0b      	ldr	r3, [pc, #44]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d7a:	4807      	ldr	r0, [pc, #28]	@ (8002d98 <_ZL13MX_UART4_Initv+0x54>)
 8002d7c:	f002 f938 	bl	8004ff0 <HAL_UART_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002d90:	f000 f8e0 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	2000046c 	.word	0x2000046c
 8002d9c:	40004c00 	.word	0x40004c00

08002da0 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002da4:	4b13      	ldr	r3, [pc, #76]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002da6:	4a14      	ldr	r2, [pc, #80]	@ (8002df8 <_ZL13MX_UART5_Initv+0x58>)
 8002da8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002daa:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002db0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002db8:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002dc6:	220c      	movs	r2, #12
 8002dc8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dca:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002dd6:	4807      	ldr	r0, [pc, #28]	@ (8002df4 <_ZL13MX_UART5_Initv+0x54>)
 8002dd8:	f002 f90a 	bl	8004ff0 <HAL_UART_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8002dec:	f000 f8b2 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200004b4 	.word	0x200004b4
 8002df8:	40005000 	.word	0x40005000

08002dfc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e02:	4a14      	ldr	r2, [pc, #80]	@ (8002e54 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002e04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e14:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e22:	220c      	movs	r2, #12
 8002e24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e2c:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e32:	4807      	ldr	r0, [pc, #28]	@ (8002e50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e34:	f002 f8dc 	bl	8004ff0 <HAL_UART_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002e48:	f000 f884 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200004fc 	.word	0x200004fc
 8002e54:	40004400 	.word	0x40004400

08002e58 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e5e:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002e60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e62:	4b12      	ldr	r3, [pc, #72]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e70:	4b0e      	ldr	r3, [pc, #56]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e7e:	220c      	movs	r2, #12
 8002e80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e8e:	4807      	ldr	r0, [pc, #28]	@ (8002eac <_ZL19MX_USART3_UART_Initv+0x54>)
 8002e90:	f002 f8ae 	bl	8004ff0 <HAL_UART_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002ea4:	f000 f856 	bl	8002f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000544 	.word	0x20000544
 8002eb0:	40004800 	.word	0x40004800

08002eb4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	f107 0310 	add.w	r3, r7, #16
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002ece:	f043 0320 	orr.w	r3, r3, #32
 8002ed2:	6193      	str	r3, [r2, #24]
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	4a18      	ldr	r2, [pc, #96]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6193      	str	r3, [r2, #24]
 8002eec:	4b16      	ldr	r3, [pc, #88]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	4a12      	ldr	r2, [pc, #72]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002efe:	f043 0308 	orr.w	r3, r3, #8
 8002f02:	6193      	str	r3, [r2, #24]
 8002f04:	4b10      	ldr	r3, [pc, #64]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f10:	4b0d      	ldr	r3, [pc, #52]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002f16:	f043 0310 	orr.w	r3, r3, #16
 8002f1a:	6193      	str	r3, [r2, #24]
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <_ZL12MX_GPIO_Initv+0x94>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002f28:	2330      	movs	r3, #48	@ 0x30
 8002f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <_ZL12MX_GPIO_Initv+0x98>)
 8002f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <_ZL12MX_GPIO_Initv+0x9c>)
 8002f3c:	f000 fea4 	bl	8003c88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f40:	bf00      	nop
 8002f42:	3720      	adds	r7, #32
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	10110000 	.word	0x10110000
 8002f50:	40010800 	.word	0x40010800

08002f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f66:	2320      	movs	r3, #32
 8002f68:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f72:	2303      	movs	r3, #3
 8002f74:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f76:	463b      	mov	r3, r7
 8002f78:	4619      	mov	r1, r3
 8002f7a:	480a      	ldr	r0, [pc, #40]	@ (8002fa4 <Error_Handler+0x50>)
 8002f7c:	f000 fe84 	bl	8003c88 <HAL_GPIO_Init>



  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8002f80:	2201      	movs	r2, #1
 8002f82:	2120      	movs	r1, #32
 8002f84:	4807      	ldr	r0, [pc, #28]	@ (8002fa4 <Error_Handler+0x50>)
 8002f86:	f001 f813 	bl	8003fb0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002f8a:	2064      	movs	r0, #100	@ 0x64
 8002f8c:	f000 fc08 	bl	80037a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2120      	movs	r1, #32
 8002f94:	4803      	ldr	r0, [pc, #12]	@ (8002fa4 <Error_Handler+0x50>)
 8002f96:	f001 f80b 	bl	8003fb0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002f9a:	2064      	movs	r0, #100	@ 0x64
 8002f9c:	f000 fc00 	bl	80037a0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8002fa0:	bf00      	nop
 8002fa2:	e7ed      	b.n	8002f80 <Error_Handler+0x2c>
 8002fa4:	40011000 	.word	0x40011000

08002fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <HAL_MspInit+0x5c>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4a14      	ldr	r2, [pc, #80]	@ (8003004 <HAL_MspInit+0x5c>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6193      	str	r3, [r2, #24]
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_MspInit+0x5c>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <HAL_MspInit+0x5c>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	4a0e      	ldr	r2, [pc, #56]	@ (8003004 <HAL_MspInit+0x5c>)
 8002fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	61d3      	str	r3, [r2, #28]
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <HAL_MspInit+0x5c>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	607b      	str	r3, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_MspInit+0x60>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	60fb      	str	r3, [r7, #12]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	@ (8003008 <HAL_MspInit+0x60>)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40021000 	.word	0x40021000
 8003008:	40010000 	.word	0x40010000

0800300c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	@ 0x30
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 031c 	add.w	r3, r7, #28
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800302a:	d14f      	bne.n	80030cc <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800302c:	4b3e      	ldr	r3, [pc, #248]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4a3d      	ldr	r2, [pc, #244]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	61d3      	str	r3, [r2, #28]
 8003038:	4b3b      	ldr	r3, [pc, #236]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003044:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	4a37      	ldr	r2, [pc, #220]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	6193      	str	r3, [r2, #24]
 8003050:	4b35      	ldr	r3, [pc, #212]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305c:	4b32      	ldr	r3, [pc, #200]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	4a31      	ldr	r2, [pc, #196]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 8003062:	f043 0308 	orr.w	r3, r3, #8
 8003066:	6193      	str	r3, [r2, #24]
 8003068:	4b2f      	ldr	r3, [pc, #188]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003074:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800307a:	2300      	movs	r3, #0
 800307c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800307e:	2301      	movs	r3, #1
 8003080:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	4619      	mov	r1, r3
 8003088:	4828      	ldr	r0, [pc, #160]	@ (800312c <HAL_TIM_Encoder_MspInit+0x120>)
 800308a:	f000 fdfd 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800308e:	2308      	movs	r3, #8
 8003090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003096:	2301      	movs	r3, #1
 8003098:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	4823      	ldr	r0, [pc, #140]	@ (8003130 <HAL_TIM_Encoder_MspInit+0x124>)
 80030a2:	f000 fdf1 	bl	8003c88 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80030a6:	4b23      	ldr	r3, [pc, #140]	@ (8003134 <HAL_TIM_Encoder_MspInit+0x128>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80030ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003134 <HAL_TIM_Encoder_MspInit+0x128>)
 80030c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030ca:	e028      	b.n	800311e <HAL_TIM_Encoder_MspInit+0x112>
  else if(htim_encoder->Instance==TIM5)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a19      	ldr	r2, [pc, #100]	@ (8003138 <HAL_TIM_Encoder_MspInit+0x12c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d123      	bne.n	800311e <HAL_TIM_Encoder_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030d6:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	4a13      	ldr	r2, [pc, #76]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 80030dc:	f043 0308 	orr.w	r3, r3, #8
 80030e0:	61d3      	str	r3, [r2, #28]
 80030e2:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	6193      	str	r3, [r2, #24]
 80030fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x11c>)
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003106:	2303      	movs	r3, #3
 8003108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800310e:	2301      	movs	r3, #1
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003112:	f107 031c 	add.w	r3, r7, #28
 8003116:	4619      	mov	r1, r3
 8003118:	4804      	ldr	r0, [pc, #16]	@ (800312c <HAL_TIM_Encoder_MspInit+0x120>)
 800311a:	f000 fdb5 	bl	8003c88 <HAL_GPIO_Init>
}
 800311e:	bf00      	nop
 8003120:	3730      	adds	r7, #48	@ 0x30
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40021000 	.word	0x40021000
 800312c:	40010800 	.word	0x40010800
 8003130:	40010c00 	.word	0x40010c00
 8003134:	40010000 	.word	0x40010000
 8003138:	40000c00 	.word	0x40000c00

0800313c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1a      	ldr	r2, [pc, #104]	@ (80031b4 <HAL_TIM_Base_MspInit+0x78>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d114      	bne.n	8003178 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800314e:	4b1a      	ldr	r3, [pc, #104]	@ (80031b8 <HAL_TIM_Base_MspInit+0x7c>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a19      	ldr	r2, [pc, #100]	@ (80031b8 <HAL_TIM_Base_MspInit+0x7c>)
 8003154:	f043 0310 	orr.w	r3, r3, #16
 8003158:	61d3      	str	r3, [r2, #28]
 800315a:	4b17      	ldr	r3, [pc, #92]	@ (80031b8 <HAL_TIM_Base_MspInit+0x7c>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 0310 	and.w	r3, r3, #16
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003166:	2200      	movs	r2, #0
 8003168:	2100      	movs	r1, #0
 800316a:	2036      	movs	r0, #54	@ 0x36
 800316c:	f000 fc13 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003170:	2036      	movs	r0, #54	@ 0x36
 8003172:	f000 fc2c 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003176:	e018      	b.n	80031aa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0f      	ldr	r2, [pc, #60]	@ (80031bc <HAL_TIM_Base_MspInit+0x80>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d113      	bne.n	80031aa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003182:	4b0d      	ldr	r3, [pc, #52]	@ (80031b8 <HAL_TIM_Base_MspInit+0x7c>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4a0c      	ldr	r2, [pc, #48]	@ (80031b8 <HAL_TIM_Base_MspInit+0x7c>)
 8003188:	f043 0320 	orr.w	r3, r3, #32
 800318c:	61d3      	str	r3, [r2, #28]
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_TIM_Base_MspInit+0x7c>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800319a:	2200      	movs	r2, #0
 800319c:	2100      	movs	r1, #0
 800319e:	2037      	movs	r0, #55	@ 0x37
 80031a0:	f000 fbf9 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031a4:	2037      	movs	r0, #55	@ 0x37
 80031a6:	f000 fc12 	bl	80039ce <HAL_NVIC_EnableIRQ>
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40001000 	.word	0x40001000
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40001400 	.word	0x40001400

080031c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b090      	sub	sp, #64	@ 0x40
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a85      	ldr	r2, [pc, #532]	@ (80033f0 <HAL_UART_MspInit+0x230>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d13a      	bne.n	8003256 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031e0:	4b84      	ldr	r3, [pc, #528]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4a83      	ldr	r2, [pc, #524]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 80031e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80031ea:	61d3      	str	r3, [r2, #28]
 80031ec:	4b81      	ldr	r3, [pc, #516]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f8:	4b7e      	ldr	r3, [pc, #504]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	4a7d      	ldr	r2, [pc, #500]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 80031fe:	f043 0310 	orr.w	r3, r3, #16
 8003202:	6193      	str	r3, [r2, #24]
 8003204:	4b7b      	ldr	r3, [pc, #492]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800320e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003214:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800321a:	2303      	movs	r3, #3
 800321c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003222:	4619      	mov	r1, r3
 8003224:	4874      	ldr	r0, [pc, #464]	@ (80033f8 <HAL_UART_MspInit+0x238>)
 8003226:	f000 fd2f 	bl	8003c88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800322a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800322e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003230:	2300      	movs	r3, #0
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003234:	2301      	movs	r3, #1
 8003236:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003238:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800323c:	4619      	mov	r1, r3
 800323e:	486e      	ldr	r0, [pc, #440]	@ (80033f8 <HAL_UART_MspInit+0x238>)
 8003240:	f000 fd22 	bl	8003c88 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003244:	2200      	movs	r2, #0
 8003246:	2100      	movs	r1, #0
 8003248:	2034      	movs	r0, #52	@ 0x34
 800324a:	f000 fba4 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800324e:	2034      	movs	r0, #52	@ 0x34
 8003250:	f000 fbbd 	bl	80039ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003254:	e0c7      	b.n	80033e6 <HAL_UART_MspInit+0x226>
  else if(huart->Instance==UART5)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a68      	ldr	r2, [pc, #416]	@ (80033fc <HAL_UART_MspInit+0x23c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d145      	bne.n	80032ec <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003260:	4b64      	ldr	r3, [pc, #400]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003262:	69db      	ldr	r3, [r3, #28]
 8003264:	4a63      	ldr	r2, [pc, #396]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003266:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800326a:	61d3      	str	r3, [r2, #28]
 800326c:	4b61      	ldr	r3, [pc, #388]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003274:	627b      	str	r3, [r7, #36]	@ 0x24
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003278:	4b5e      	ldr	r3, [pc, #376]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a5d      	ldr	r2, [pc, #372]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 800327e:	f043 0310 	orr.w	r3, r3, #16
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b5b      	ldr	r3, [pc, #364]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003290:	4b58      	ldr	r3, [pc, #352]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a57      	ldr	r2, [pc, #348]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003296:	f043 0320 	orr.w	r3, r3, #32
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b55      	ldr	r3, [pc, #340]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	61fb      	str	r3, [r7, #28]
 80032a6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80032a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b2:	2303      	movs	r3, #3
 80032b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80032ba:	4619      	mov	r1, r3
 80032bc:	484e      	ldr	r0, [pc, #312]	@ (80033f8 <HAL_UART_MspInit+0x238>)
 80032be:	f000 fce3 	bl	8003c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032c2:	2304      	movs	r3, #4
 80032c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032c6:	2300      	movs	r3, #0
 80032c8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032ca:	2301      	movs	r3, #1
 80032cc:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80032d2:	4619      	mov	r1, r3
 80032d4:	484a      	ldr	r0, [pc, #296]	@ (8003400 <HAL_UART_MspInit+0x240>)
 80032d6:	f000 fcd7 	bl	8003c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	2035      	movs	r0, #53	@ 0x35
 80032e0:	f000 fb59 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80032e4:	2035      	movs	r0, #53	@ 0x35
 80032e6:	f000 fb72 	bl	80039ce <HAL_NVIC_EnableIRQ>
}
 80032ea:	e07c      	b.n	80033e6 <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a44      	ldr	r2, [pc, #272]	@ (8003404 <HAL_UART_MspInit+0x244>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d138      	bne.n	8003368 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032f6:	4b3f      	ldr	r3, [pc, #252]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4a3e      	ldr	r2, [pc, #248]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003300:	61d3      	str	r3, [r2, #28]
 8003302:	4b3c      	ldr	r3, [pc, #240]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	4a38      	ldr	r2, [pc, #224]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6193      	str	r3, [r2, #24]
 800331a:	4b36      	ldr	r3, [pc, #216]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003326:	2304      	movs	r3, #4
 8003328:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800332e:	2303      	movs	r3, #3
 8003330:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003332:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003336:	4619      	mov	r1, r3
 8003338:	4833      	ldr	r0, [pc, #204]	@ (8003408 <HAL_UART_MspInit+0x248>)
 800333a:	f000 fca5 	bl	8003c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800333e:	2308      	movs	r3, #8
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800334e:	4619      	mov	r1, r3
 8003350:	482d      	ldr	r0, [pc, #180]	@ (8003408 <HAL_UART_MspInit+0x248>)
 8003352:	f000 fc99 	bl	8003c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003356:	2200      	movs	r2, #0
 8003358:	2100      	movs	r1, #0
 800335a:	2026      	movs	r0, #38	@ 0x26
 800335c:	f000 fb1b 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003360:	2026      	movs	r0, #38	@ 0x26
 8003362:	f000 fb34 	bl	80039ce <HAL_NVIC_EnableIRQ>
}
 8003366:	e03e      	b.n	80033e6 <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART3)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a27      	ldr	r2, [pc, #156]	@ (800340c <HAL_UART_MspInit+0x24c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d139      	bne.n	80033e6 <HAL_UART_MspInit+0x226>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003372:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a1f      	ldr	r2, [pc, #124]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	61d3      	str	r3, [r2, #28]
 800337e:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	6193      	str	r3, [r2, #24]
 8003396:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <HAL_UART_MspInit+0x234>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a8:	2302      	movs	r3, #2
 80033aa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ac:	2303      	movs	r3, #3
 80033ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033b4:	4619      	mov	r1, r3
 80033b6:	4816      	ldr	r0, [pc, #88]	@ (8003410 <HAL_UART_MspInit+0x250>)
 80033b8:	f000 fc66 	bl	8003c88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80033bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033c2:	2300      	movs	r3, #0
 80033c4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80033ce:	4619      	mov	r1, r3
 80033d0:	480f      	ldr	r0, [pc, #60]	@ (8003410 <HAL_UART_MspInit+0x250>)
 80033d2:	f000 fc59 	bl	8003c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	2027      	movs	r0, #39	@ 0x27
 80033dc:	f000 fadb 	bl	8003996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80033e0:	2027      	movs	r0, #39	@ 0x27
 80033e2:	f000 faf4 	bl	80039ce <HAL_NVIC_EnableIRQ>
}
 80033e6:	bf00      	nop
 80033e8:	3740      	adds	r7, #64	@ 0x40
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40004c00 	.word	0x40004c00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40005000 	.word	0x40005000
 8003400:	40011400 	.word	0x40011400
 8003404:	40004400 	.word	0x40004400
 8003408:	40010800 	.word	0x40010800
 800340c:	40004800 	.word	0x40004800
 8003410:	40010c00 	.word	0x40010c00

08003414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003418:	bf00      	nop
 800341a:	e7fd      	b.n	8003418 <NMI_Handler+0x4>

0800341c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003420:	bf00      	nop
 8003422:	e7fd      	b.n	8003420 <HardFault_Handler+0x4>

08003424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003428:	bf00      	nop
 800342a:	e7fd      	b.n	8003428 <MemManage_Handler+0x4>

0800342c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003430:	bf00      	nop
 8003432:	e7fd      	b.n	8003430 <BusFault_Handler+0x4>

08003434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <UsageFault_Handler+0x4>

0800343c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800344c:	bf00      	nop
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003464:	f000 f980 	bl	8003768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}

0800346c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8003470:	2010      	movs	r0, #16
 8003472:	f000 fdcf 	bl	8004014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}

0800347a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800347e:	2020      	movs	r0, #32
 8003480:	f000 fdc8 	bl	8004014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}

08003488 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800348c:	4802      	ldr	r0, [pc, #8]	@ (8003498 <USART2_IRQHandler+0x10>)
 800348e:	f001 fee5 	bl	800525c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	200004fc 	.word	0x200004fc

0800349c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80034a0:	4802      	ldr	r0, [pc, #8]	@ (80034ac <USART3_IRQHandler+0x10>)
 80034a2:	f001 fedb 	bl	800525c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000544 	.word	0x20000544

080034b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80034b4:	4802      	ldr	r0, [pc, #8]	@ (80034c0 <UART4_IRQHandler+0x10>)
 80034b6:	f001 fed1 	bl	800525c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000046c 	.word	0x2000046c

080034c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80034c8:	4802      	ldr	r0, [pc, #8]	@ (80034d4 <UART5_IRQHandler+0x10>)
 80034ca:	f001 fec7 	bl	800525c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	200004b4 	.word	0x200004b4

080034d8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80034dc:	4802      	ldr	r0, [pc, #8]	@ (80034e8 <TIM6_IRQHandler+0x10>)
 80034de:	f001 fb4a 	bl	8004b76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200003dc 	.word	0x200003dc

080034ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80034f0:	4802      	ldr	r0, [pc, #8]	@ (80034fc <TIM7_IRQHandler+0x10>)
 80034f2:	f001 fb40 	bl	8004b76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000424 	.word	0x20000424

08003500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return 1;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <_kill>:

int _kill(int pid, int sig)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003518:	f003 fc44 	bl	8006da4 <__errno>
 800351c:	4603      	mov	r3, r0
 800351e:	2216      	movs	r2, #22
 8003520:	601a      	str	r2, [r3, #0]
  return -1;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_exit>:

void _exit (int status)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003536:	f04f 31ff 	mov.w	r1, #4294967295
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ffe7 	bl	800350e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003540:	bf00      	nop
 8003542:	e7fd      	b.n	8003540 <_exit+0x12>

08003544 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e00a      	b.n	800356c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003556:	f3af 8000 	nop.w
 800355a:	4601      	mov	r1, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	b2ca      	uxtb	r2, r1
 8003564:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	dbf0      	blt.n	8003556 <_read+0x12>
  }

  return len;
 8003574:	687b      	ldr	r3, [r7, #4]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e009      	b.n	80035a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	60ba      	str	r2, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dbf1      	blt.n	8003590 <_write+0x12>
  }
  return len;
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_close>:

int _close(int file)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035dc:	605a      	str	r2, [r3, #4]
  return 0;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bc80      	pop	{r7}
 80035e8:	4770      	bx	lr

080035ea <_isatty>:

int _isatty(int file)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035f2:	2301      	movs	r3, #1
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
	...

08003618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003620:	4a14      	ldr	r2, [pc, #80]	@ (8003674 <_sbrk+0x5c>)
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <_sbrk+0x60>)
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800362c:	4b13      	ldr	r3, [pc, #76]	@ (800367c <_sbrk+0x64>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003634:	4b11      	ldr	r3, [pc, #68]	@ (800367c <_sbrk+0x64>)
 8003636:	4a12      	ldr	r2, [pc, #72]	@ (8003680 <_sbrk+0x68>)
 8003638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800363a:	4b10      	ldr	r3, [pc, #64]	@ (800367c <_sbrk+0x64>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	429a      	cmp	r2, r3
 8003646:	d207      	bcs.n	8003658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003648:	f003 fbac 	bl	8006da4 <__errno>
 800364c:	4603      	mov	r3, r0
 800364e:	220c      	movs	r2, #12
 8003650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295
 8003656:	e009      	b.n	800366c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003658:	4b08      	ldr	r3, [pc, #32]	@ (800367c <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800365e:	4b07      	ldr	r3, [pc, #28]	@ (800367c <_sbrk+0x64>)
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	4a05      	ldr	r2, [pc, #20]	@ (800367c <_sbrk+0x64>)
 8003668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800366a:	68fb      	ldr	r3, [r7, #12]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	2000c000 	.word	0x2000c000
 8003678:	00000400 	.word	0x00000400
 800367c:	2000058c 	.word	0x2000058c
 8003680:	200006e8 	.word	0x200006e8

08003684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003690:	f7ff fff8 	bl	8003684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003694:	480b      	ldr	r0, [pc, #44]	@ (80036c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003696:	490c      	ldr	r1, [pc, #48]	@ (80036c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003698:	4a0c      	ldr	r2, [pc, #48]	@ (80036cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800369c:	e002      	b.n	80036a4 <LoopCopyDataInit>

0800369e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800369e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036a2:	3304      	adds	r3, #4

080036a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036a8:	d3f9      	bcc.n	800369e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036aa:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036ac:	4c09      	ldr	r4, [pc, #36]	@ (80036d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036b0:	e001      	b.n	80036b6 <LoopFillZerobss>

080036b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036b4:	3204      	adds	r2, #4

080036b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036b8:	d3fb      	bcc.n	80036b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ba:	f003 fb79 	bl	8006db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036be:	f7ff f97b 	bl	80029b8 <main>
  bx lr
 80036c2:	4770      	bx	lr
  ldr r0, =_sdata
 80036c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80036cc:	08009474 	.word	0x08009474
  ldr r2, =_sbss
 80036d0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80036d4:	200006e4 	.word	0x200006e4

080036d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036d8:	e7fe      	b.n	80036d8 <ADC1_2_IRQHandler>
	...

080036dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036e0:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_Init+0x28>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a07      	ldr	r2, [pc, #28]	@ (8003704 <HAL_Init+0x28>)
 80036e6:	f043 0310 	orr.w	r3, r3, #16
 80036ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ec:	2003      	movs	r0, #3
 80036ee:	f000 f947 	bl	8003980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f2:	2002      	movs	r0, #2
 80036f4:	f000 f808 	bl	8003708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f8:	f7ff fc56 	bl	8002fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000

08003708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_InitTick+0x54>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <HAL_InitTick+0x58>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f95f 	bl	80039ea <HAL_SYSTICK_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e00e      	b.n	8003754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d80a      	bhi.n	8003752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800373c:	2200      	movs	r2, #0
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f000 f927 	bl	8003996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003748:	4a06      	ldr	r2, [pc, #24]	@ (8003764 <HAL_InitTick+0x5c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000004 	.word	0x20000004
 8003760:	2000000c 	.word	0x2000000c
 8003764:	20000008 	.word	0x20000008

08003768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_IncTick+0x1c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_IncTick+0x20>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a03      	ldr	r2, [pc, #12]	@ (8003788 <HAL_IncTick+0x20>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	2000000c 	.word	0x2000000c
 8003788:	20000590 	.word	0x20000590

0800378c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTick;
 8003790:	4b02      	ldr	r3, [pc, #8]	@ (800379c <HAL_GetTick+0x10>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	20000590 	.word	0x20000590

080037a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7ff fff0 	bl	800378c <HAL_GetTick>
 80037ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d005      	beq.n	80037c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <HAL_Delay+0x44>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037c6:	bf00      	nop
 80037c8:	f7ff ffe0 	bl	800378c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d8f7      	bhi.n	80037c8 <HAL_Delay+0x28>
  {
  }
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2000000c 	.word	0x2000000c

080037e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037f8:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <__NVIC_SetPriorityGrouping+0x44>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003810:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381a:	4a04      	ldr	r2, [pc, #16]	@ (800382c <__NVIC_SetPriorityGrouping+0x44>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	60d3      	str	r3, [r2, #12]
}
 8003820:	bf00      	nop
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003834:	4b04      	ldr	r3, [pc, #16]	@ (8003848 <__NVIC_GetPriorityGrouping+0x18>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	f003 0307 	and.w	r3, r3, #7
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	db0b      	blt.n	8003876 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4906      	ldr	r1, [pc, #24]	@ (8003880 <__NVIC_EnableIRQ+0x34>)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	2001      	movs	r0, #1
 800386e:	fa00 f202 	lsl.w	r2, r0, r2
 8003872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100

08003884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	6039      	str	r1, [r7, #0]
 800388e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003894:	2b00      	cmp	r3, #0
 8003896:	db0a      	blt.n	80038ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	490c      	ldr	r1, [pc, #48]	@ (80038d0 <__NVIC_SetPriority+0x4c>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	0112      	lsls	r2, r2, #4
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	440b      	add	r3, r1
 80038a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ac:	e00a      	b.n	80038c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4908      	ldr	r1, [pc, #32]	@ (80038d4 <__NVIC_SetPriority+0x50>)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	3b04      	subs	r3, #4
 80038bc:	0112      	lsls	r2, r2, #4
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	440b      	add	r3, r1
 80038c2:	761a      	strb	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000e100 	.word	0xe000e100
 80038d4:	e000ed00 	.word	0xe000ed00

080038d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	@ 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f1c3 0307 	rsb	r3, r3, #7
 80038f2:	2b04      	cmp	r3, #4
 80038f4:	bf28      	it	cs
 80038f6:	2304      	movcs	r3, #4
 80038f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	3304      	adds	r3, #4
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d902      	bls.n	8003908 <NVIC_EncodePriority+0x30>
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3b03      	subs	r3, #3
 8003906:	e000      	b.n	800390a <NVIC_EncodePriority+0x32>
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800390c:	f04f 32ff 	mov.w	r2, #4294967295
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	401a      	ands	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	43d9      	mvns	r1, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	4313      	orrs	r3, r2
         );
}
 8003932:	4618      	mov	r0, r3
 8003934:	3724      	adds	r7, #36	@ 0x24
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr

0800393c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800394c:	d301      	bcc.n	8003952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800394e:	2301      	movs	r3, #1
 8003950:	e00f      	b.n	8003972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003952:	4a0a      	ldr	r2, [pc, #40]	@ (800397c <SysTick_Config+0x40>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800395a:	210f      	movs	r1, #15
 800395c:	f04f 30ff 	mov.w	r0, #4294967295
 8003960:	f7ff ff90 	bl	8003884 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <SysTick_Config+0x40>)
 8003966:	2200      	movs	r2, #0
 8003968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800396a:	4b04      	ldr	r3, [pc, #16]	@ (800397c <SysTick_Config+0x40>)
 800396c:	2207      	movs	r2, #7
 800396e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	e000e010 	.word	0xe000e010

08003980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7ff ff2d 	bl	80037e8 <__NVIC_SetPriorityGrouping>
}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039a8:	f7ff ff42 	bl	8003830 <__NVIC_GetPriorityGrouping>
 80039ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff90 	bl	80038d8 <NVIC_EncodePriority>
 80039b8:	4602      	mov	r2, r0
 80039ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff5f 	bl	8003884 <__NVIC_SetPriority>
}
 80039c6:	bf00      	nop
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b082      	sub	sp, #8
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	4603      	mov	r3, r0
 80039d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff35 	bl	800384c <__NVIC_EnableIRQ>
}
 80039e2:	bf00      	nop
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff ffa2 	bl	800393c <SysTick_Config>
 80039f8:	4603      	mov	r3, r0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b085      	sub	sp, #20
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d008      	beq.n	8003a2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e020      	b.n	8003a6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 020e 	bic.w	r2, r2, #14
 8003a3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a54:	2101      	movs	r1, #1
 8003a56:	fa01 f202 	lsl.w	r2, r1, r2
 8003a5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d005      	beq.n	8003a9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2204      	movs	r2, #4
 8003a94:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	e0d6      	b.n	8003c4a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 020e 	bic.w	r2, r2, #14
 8003aaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4b64      	ldr	r3, [pc, #400]	@ (8003c54 <HAL_DMA_Abort_IT+0x1dc>)
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d958      	bls.n	8003b7a <HAL_DMA_Abort_IT+0x102>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a62      	ldr	r2, [pc, #392]	@ (8003c58 <HAL_DMA_Abort_IT+0x1e0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d04f      	beq.n	8003b72 <HAL_DMA_Abort_IT+0xfa>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a61      	ldr	r2, [pc, #388]	@ (8003c5c <HAL_DMA_Abort_IT+0x1e4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d048      	beq.n	8003b6e <HAL_DMA_Abort_IT+0xf6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a5f      	ldr	r2, [pc, #380]	@ (8003c60 <HAL_DMA_Abort_IT+0x1e8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d040      	beq.n	8003b68 <HAL_DMA_Abort_IT+0xf0>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a5e      	ldr	r2, [pc, #376]	@ (8003c64 <HAL_DMA_Abort_IT+0x1ec>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d038      	beq.n	8003b62 <HAL_DMA_Abort_IT+0xea>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c68 <HAL_DMA_Abort_IT+0x1f0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d030      	beq.n	8003b5c <HAL_DMA_Abort_IT+0xe4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a5b      	ldr	r2, [pc, #364]	@ (8003c6c <HAL_DMA_Abort_IT+0x1f4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d028      	beq.n	8003b56 <HAL_DMA_Abort_IT+0xde>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a52      	ldr	r2, [pc, #328]	@ (8003c54 <HAL_DMA_Abort_IT+0x1dc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d020      	beq.n	8003b50 <HAL_DMA_Abort_IT+0xd8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a57      	ldr	r2, [pc, #348]	@ (8003c70 <HAL_DMA_Abort_IT+0x1f8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d019      	beq.n	8003b4c <HAL_DMA_Abort_IT+0xd4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a55      	ldr	r2, [pc, #340]	@ (8003c74 <HAL_DMA_Abort_IT+0x1fc>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d012      	beq.n	8003b48 <HAL_DMA_Abort_IT+0xd0>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a54      	ldr	r2, [pc, #336]	@ (8003c78 <HAL_DMA_Abort_IT+0x200>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00a      	beq.n	8003b42 <HAL_DMA_Abort_IT+0xca>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a52      	ldr	r2, [pc, #328]	@ (8003c7c <HAL_DMA_Abort_IT+0x204>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d102      	bne.n	8003b3c <HAL_DMA_Abort_IT+0xc4>
 8003b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b3a:	e01b      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b40:	e018      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b46:	e015      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	e013      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e011      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b54:	e00e      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003b5a:	e00b      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b60:	e008      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b66:	e005      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b6c:	e002      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b6e:	2310      	movs	r3, #16
 8003b70:	e000      	b.n	8003b74 <HAL_DMA_Abort_IT+0xfc>
 8003b72:	2301      	movs	r3, #1
 8003b74:	4a42      	ldr	r2, [pc, #264]	@ (8003c80 <HAL_DMA_Abort_IT+0x208>)
 8003b76:	6053      	str	r3, [r2, #4]
 8003b78:	e057      	b.n	8003c2a <HAL_DMA_Abort_IT+0x1b2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a36      	ldr	r2, [pc, #216]	@ (8003c58 <HAL_DMA_Abort_IT+0x1e0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d04f      	beq.n	8003c24 <HAL_DMA_Abort_IT+0x1ac>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a34      	ldr	r2, [pc, #208]	@ (8003c5c <HAL_DMA_Abort_IT+0x1e4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d048      	beq.n	8003c20 <HAL_DMA_Abort_IT+0x1a8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a33      	ldr	r2, [pc, #204]	@ (8003c60 <HAL_DMA_Abort_IT+0x1e8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d040      	beq.n	8003c1a <HAL_DMA_Abort_IT+0x1a2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a31      	ldr	r2, [pc, #196]	@ (8003c64 <HAL_DMA_Abort_IT+0x1ec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d038      	beq.n	8003c14 <HAL_DMA_Abort_IT+0x19c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a30      	ldr	r2, [pc, #192]	@ (8003c68 <HAL_DMA_Abort_IT+0x1f0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d030      	beq.n	8003c0e <HAL_DMA_Abort_IT+0x196>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c6c <HAL_DMA_Abort_IT+0x1f4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d028      	beq.n	8003c08 <HAL_DMA_Abort_IT+0x190>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a26      	ldr	r2, [pc, #152]	@ (8003c54 <HAL_DMA_Abort_IT+0x1dc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d020      	beq.n	8003c02 <HAL_DMA_Abort_IT+0x18a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c70 <HAL_DMA_Abort_IT+0x1f8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d019      	beq.n	8003bfe <HAL_DMA_Abort_IT+0x186>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a29      	ldr	r2, [pc, #164]	@ (8003c74 <HAL_DMA_Abort_IT+0x1fc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d012      	beq.n	8003bfa <HAL_DMA_Abort_IT+0x182>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a27      	ldr	r2, [pc, #156]	@ (8003c78 <HAL_DMA_Abort_IT+0x200>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_DMA_Abort_IT+0x17c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a26      	ldr	r2, [pc, #152]	@ (8003c7c <HAL_DMA_Abort_IT+0x204>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d102      	bne.n	8003bee <HAL_DMA_Abort_IT+0x176>
 8003be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bec:	e01b      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003bee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bf2:	e018      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003bf4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bf8:	e015      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003bfa:	2310      	movs	r3, #16
 8003bfc:	e013      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e011      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003c02:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c06:	e00e      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003c08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c0c:	e00b      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003c0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c12:	e008      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003c14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c18:	e005      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003c1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c1e:	e002      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003c20:	2310      	movs	r3, #16
 8003c22:	e000      	b.n	8003c26 <HAL_DMA_Abort_IT+0x1ae>
 8003c24:	2301      	movs	r3, #1
 8003c26:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <HAL_DMA_Abort_IT+0x20c>)
 8003c28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
    } 
  }
  return status;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40020080 	.word	0x40020080
 8003c58:	40020008 	.word	0x40020008
 8003c5c:	4002001c 	.word	0x4002001c
 8003c60:	40020030 	.word	0x40020030
 8003c64:	40020044 	.word	0x40020044
 8003c68:	40020058 	.word	0x40020058
 8003c6c:	4002006c 	.word	0x4002006c
 8003c70:	40020408 	.word	0x40020408
 8003c74:	4002041c 	.word	0x4002041c
 8003c78:	40020430 	.word	0x40020430
 8003c7c:	40020444 	.word	0x40020444
 8003c80:	40020400 	.word	0x40020400
 8003c84:	40020000 	.word	0x40020000

08003c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b08b      	sub	sp, #44	@ 0x2c
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c92:	2300      	movs	r3, #0
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9a:	e179      	b.n	8003f90 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	f040 8168 	bne.w	8003f8a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4a96      	ldr	r2, [pc, #600]	@ (8003f18 <HAL_GPIO_Init+0x290>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d05e      	beq.n	8003d82 <HAL_GPIO_Init+0xfa>
 8003cc4:	4a94      	ldr	r2, [pc, #592]	@ (8003f18 <HAL_GPIO_Init+0x290>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d875      	bhi.n	8003db6 <HAL_GPIO_Init+0x12e>
 8003cca:	4a94      	ldr	r2, [pc, #592]	@ (8003f1c <HAL_GPIO_Init+0x294>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d058      	beq.n	8003d82 <HAL_GPIO_Init+0xfa>
 8003cd0:	4a92      	ldr	r2, [pc, #584]	@ (8003f1c <HAL_GPIO_Init+0x294>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d86f      	bhi.n	8003db6 <HAL_GPIO_Init+0x12e>
 8003cd6:	4a92      	ldr	r2, [pc, #584]	@ (8003f20 <HAL_GPIO_Init+0x298>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d052      	beq.n	8003d82 <HAL_GPIO_Init+0xfa>
 8003cdc:	4a90      	ldr	r2, [pc, #576]	@ (8003f20 <HAL_GPIO_Init+0x298>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d869      	bhi.n	8003db6 <HAL_GPIO_Init+0x12e>
 8003ce2:	4a90      	ldr	r2, [pc, #576]	@ (8003f24 <HAL_GPIO_Init+0x29c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04c      	beq.n	8003d82 <HAL_GPIO_Init+0xfa>
 8003ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8003f24 <HAL_GPIO_Init+0x29c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d863      	bhi.n	8003db6 <HAL_GPIO_Init+0x12e>
 8003cee:	4a8e      	ldr	r2, [pc, #568]	@ (8003f28 <HAL_GPIO_Init+0x2a0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d046      	beq.n	8003d82 <HAL_GPIO_Init+0xfa>
 8003cf4:	4a8c      	ldr	r2, [pc, #560]	@ (8003f28 <HAL_GPIO_Init+0x2a0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d85d      	bhi.n	8003db6 <HAL_GPIO_Init+0x12e>
 8003cfa:	2b12      	cmp	r3, #18
 8003cfc:	d82a      	bhi.n	8003d54 <HAL_GPIO_Init+0xcc>
 8003cfe:	2b12      	cmp	r3, #18
 8003d00:	d859      	bhi.n	8003db6 <HAL_GPIO_Init+0x12e>
 8003d02:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <HAL_GPIO_Init+0x80>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d83 	.word	0x08003d83
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	08003d6f 	.word	0x08003d6f
 8003d14:	08003db1 	.word	0x08003db1
 8003d18:	08003db7 	.word	0x08003db7
 8003d1c:	08003db7 	.word	0x08003db7
 8003d20:	08003db7 	.word	0x08003db7
 8003d24:	08003db7 	.word	0x08003db7
 8003d28:	08003db7 	.word	0x08003db7
 8003d2c:	08003db7 	.word	0x08003db7
 8003d30:	08003db7 	.word	0x08003db7
 8003d34:	08003db7 	.word	0x08003db7
 8003d38:	08003db7 	.word	0x08003db7
 8003d3c:	08003db7 	.word	0x08003db7
 8003d40:	08003db7 	.word	0x08003db7
 8003d44:	08003db7 	.word	0x08003db7
 8003d48:	08003db7 	.word	0x08003db7
 8003d4c:	08003d65 	.word	0x08003d65
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	4a75      	ldr	r2, [pc, #468]	@ (8003f2c <HAL_GPIO_Init+0x2a4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d013      	beq.n	8003d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d5a:	e02c      	b.n	8003db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	623b      	str	r3, [r7, #32]
          break;
 8003d62:	e029      	b.n	8003db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	623b      	str	r3, [r7, #32]
          break;
 8003d6c:	e024      	b.n	8003db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	3308      	adds	r3, #8
 8003d74:	623b      	str	r3, [r7, #32]
          break;
 8003d76:	e01f      	b.n	8003db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	623b      	str	r3, [r7, #32]
          break;
 8003d80:	e01a      	b.n	8003db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	623b      	str	r3, [r7, #32]
          break;
 8003d8e:	e013      	b.n	8003db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d105      	bne.n	8003da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d98:	2308      	movs	r3, #8
 8003d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	611a      	str	r2, [r3, #16]
          break;
 8003da2:	e009      	b.n	8003db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da4:	2308      	movs	r3, #8
 8003da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69fa      	ldr	r2, [r7, #28]
 8003dac:	615a      	str	r2, [r3, #20]
          break;
 8003dae:	e003      	b.n	8003db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003db0:	2300      	movs	r3, #0
 8003db2:	623b      	str	r3, [r7, #32]
          break;
 8003db4:	e000      	b.n	8003db8 <HAL_GPIO_Init+0x130>
          break;
 8003db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2bff      	cmp	r3, #255	@ 0xff
 8003dbc:	d801      	bhi.n	8003dc2 <HAL_GPIO_Init+0x13a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	e001      	b.n	8003dc6 <HAL_GPIO_Init+0x13e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2bff      	cmp	r3, #255	@ 0xff
 8003dcc:	d802      	bhi.n	8003dd4 <HAL_GPIO_Init+0x14c>
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	e002      	b.n	8003dda <HAL_GPIO_Init+0x152>
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	3b08      	subs	r3, #8
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	210f      	movs	r1, #15
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	401a      	ands	r2, r3
 8003dec:	6a39      	ldr	r1, [r7, #32]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	fa01 f303 	lsl.w	r3, r1, r3
 8003df4:	431a      	orrs	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80c1 	beq.w	8003f8a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e08:	4b49      	ldr	r3, [pc, #292]	@ (8003f30 <HAL_GPIO_Init+0x2a8>)
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	4a48      	ldr	r2, [pc, #288]	@ (8003f30 <HAL_GPIO_Init+0x2a8>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6193      	str	r3, [r2, #24]
 8003e14:	4b46      	ldr	r3, [pc, #280]	@ (8003f30 <HAL_GPIO_Init+0x2a8>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e20:	4a44      	ldr	r2, [pc, #272]	@ (8003f34 <HAL_GPIO_Init+0x2ac>)
 8003e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e24:	089b      	lsrs	r3, r3, #2
 8003e26:	3302      	adds	r3, #2
 8003e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4013      	ands	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3c      	ldr	r2, [pc, #240]	@ (8003f38 <HAL_GPIO_Init+0x2b0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d01f      	beq.n	8003e8c <HAL_GPIO_Init+0x204>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f3c <HAL_GPIO_Init+0x2b4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d019      	beq.n	8003e88 <HAL_GPIO_Init+0x200>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3a      	ldr	r2, [pc, #232]	@ (8003f40 <HAL_GPIO_Init+0x2b8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <HAL_GPIO_Init+0x1fc>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a39      	ldr	r2, [pc, #228]	@ (8003f44 <HAL_GPIO_Init+0x2bc>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00d      	beq.n	8003e80 <HAL_GPIO_Init+0x1f8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a38      	ldr	r2, [pc, #224]	@ (8003f48 <HAL_GPIO_Init+0x2c0>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <HAL_GPIO_Init+0x1f4>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a37      	ldr	r2, [pc, #220]	@ (8003f4c <HAL_GPIO_Init+0x2c4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <HAL_GPIO_Init+0x1f0>
 8003e74:	2305      	movs	r3, #5
 8003e76:	e00a      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e78:	2306      	movs	r3, #6
 8003e7a:	e008      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	e006      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e80:	2303      	movs	r3, #3
 8003e82:	e004      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e002      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <HAL_GPIO_Init+0x206>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e90:	f002 0203 	and.w	r2, r2, #3
 8003e94:	0092      	lsls	r2, r2, #2
 8003e96:	4093      	lsls	r3, r2
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e9e:	4925      	ldr	r1, [pc, #148]	@ (8003f34 <HAL_GPIO_Init+0x2ac>)
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	089b      	lsrs	r3, r3, #2
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eb8:	4b25      	ldr	r3, [pc, #148]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	4924      	ldr	r1, [pc, #144]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
 8003ec4:	e006      	b.n	8003ed4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ec6:	4b22      	ldr	r3, [pc, #136]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4920      	ldr	r1, [pc, #128]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d006      	beq.n	8003eee <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	491a      	ldr	r1, [pc, #104]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
 8003eec:	e006      	b.n	8003efc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003eee:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	4916      	ldr	r1, [pc, #88]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d025      	beq.n	8003f54 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f08:	4b11      	ldr	r3, [pc, #68]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	4910      	ldr	r1, [pc, #64]	@ (8003f50 <HAL_GPIO_Init+0x2c8>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	e025      	b.n	8003f62 <HAL_GPIO_Init+0x2da>
 8003f16:	bf00      	nop
 8003f18:	10320000 	.word	0x10320000
 8003f1c:	10310000 	.word	0x10310000
 8003f20:	10220000 	.word	0x10220000
 8003f24:	10210000 	.word	0x10210000
 8003f28:	10120000 	.word	0x10120000
 8003f2c:	10110000 	.word	0x10110000
 8003f30:	40021000 	.word	0x40021000
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010800 	.word	0x40010800
 8003f3c:	40010c00 	.word	0x40010c00
 8003f40:	40011000 	.word	0x40011000
 8003f44:	40011400 	.word	0x40011400
 8003f48:	40011800 	.word	0x40011800
 8003f4c:	40011c00 	.word	0x40011c00
 8003f50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f54:	4b15      	ldr	r3, [pc, #84]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	4913      	ldr	r1, [pc, #76]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d006      	beq.n	8003f7c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	490e      	ldr	r1, [pc, #56]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]
 8003f7a:	e006      	b.n	8003f8a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	4909      	ldr	r1, [pc, #36]	@ (8003fac <HAL_GPIO_Init+0x324>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f47f ae7e 	bne.w	8003c9c <HAL_GPIO_Init+0x14>
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	372c      	adds	r7, #44	@ 0x2c
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr
 8003fac:	40010400 	.word	0x40010400

08003fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fc0:	787b      	ldrb	r3, [r7, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fcc:	e003      	b.n	8003fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	041a      	lsls	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	611a      	str	r2, [r3, #16]
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ff2:	887a      	ldrh	r2, [r7, #2]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	041a      	lsls	r2, r3, #16
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43d9      	mvns	r1, r3
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	400b      	ands	r3, r1
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	611a      	str	r2, [r3, #16]
}
 8004008:	bf00      	nop
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
	...

08004014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800401e:	4b08      	ldr	r3, [pc, #32]	@ (8004040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004020:	695a      	ldr	r2, [r3, #20]
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d006      	beq.n	8004038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800402a:	4a05      	ldr	r2, [pc, #20]	@ (8004040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004030:	88fb      	ldrh	r3, [r7, #6]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f806 	bl	8004044 <HAL_GPIO_EXTI_Callback>
  }
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40010400 	.word	0x40010400

08004044 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	4603      	mov	r3, r0
 800404c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e272      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8087 	beq.w	8004186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004078:	4b92      	ldr	r3, [pc, #584]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b04      	cmp	r3, #4
 8004082:	d00c      	beq.n	800409e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004084:	4b8f      	ldr	r3, [pc, #572]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b08      	cmp	r3, #8
 800408e:	d112      	bne.n	80040b6 <HAL_RCC_OscConfig+0x5e>
 8004090:	4b8c      	ldr	r3, [pc, #560]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800409c:	d10b      	bne.n	80040b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409e:	4b89      	ldr	r3, [pc, #548]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d06c      	beq.n	8004184 <HAL_RCC_OscConfig+0x12c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d168      	bne.n	8004184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e24c      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040be:	d106      	bne.n	80040ce <HAL_RCC_OscConfig+0x76>
 80040c0:	4b80      	ldr	r3, [pc, #512]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a7f      	ldr	r2, [pc, #508]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	e02e      	b.n	800412c <HAL_RCC_OscConfig+0xd4>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10c      	bne.n	80040f0 <HAL_RCC_OscConfig+0x98>
 80040d6:	4b7b      	ldr	r3, [pc, #492]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7a      	ldr	r2, [pc, #488]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	4b78      	ldr	r3, [pc, #480]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a77      	ldr	r2, [pc, #476]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	e01d      	b.n	800412c <HAL_RCC_OscConfig+0xd4>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f8:	d10c      	bne.n	8004114 <HAL_RCC_OscConfig+0xbc>
 80040fa:	4b72      	ldr	r3, [pc, #456]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a71      	ldr	r2, [pc, #452]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004104:	6013      	str	r3, [r2, #0]
 8004106:	4b6f      	ldr	r3, [pc, #444]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a6e      	ldr	r2, [pc, #440]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800410c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e00b      	b.n	800412c <HAL_RCC_OscConfig+0xd4>
 8004114:	4b6b      	ldr	r3, [pc, #428]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a6a      	ldr	r2, [pc, #424]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800411a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	4b68      	ldr	r3, [pc, #416]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a67      	ldr	r2, [pc, #412]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004126:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800412a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d013      	beq.n	800415c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7ff fb2a 	bl	800378c <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800413c:	f7ff fb26 	bl	800378c <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b64      	cmp	r3, #100	@ 0x64
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e200      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800414e:	4b5d      	ldr	r3, [pc, #372]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0f0      	beq.n	800413c <HAL_RCC_OscConfig+0xe4>
 800415a:	e014      	b.n	8004186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7ff fb16 	bl	800378c <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004164:	f7ff fb12 	bl	800378c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e1ec      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004176:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x10c>
 8004182:	e000      	b.n	8004186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d063      	beq.n	800425a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004192:	4b4c      	ldr	r3, [pc, #304]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 030c 	and.w	r3, r3, #12
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00b      	beq.n	80041b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800419e:	4b49      	ldr	r3, [pc, #292]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d11c      	bne.n	80041e4 <HAL_RCC_OscConfig+0x18c>
 80041aa:	4b46      	ldr	r3, [pc, #280]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d116      	bne.n	80041e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041b6:	4b43      	ldr	r3, [pc, #268]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d005      	beq.n	80041ce <HAL_RCC_OscConfig+0x176>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e1c0      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ce:	4b3d      	ldr	r3, [pc, #244]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4939      	ldr	r1, [pc, #228]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e2:	e03a      	b.n	800425a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ec:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <HAL_RCC_OscConfig+0x270>)
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f2:	f7ff facb 	bl	800378c <HAL_GetTick>
 80041f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f8:	e008      	b.n	800420c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fa:	f7ff fac7 	bl	800378c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e1a1      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420c:	4b2d      	ldr	r3, [pc, #180]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0f0      	beq.n	80041fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004218:	4b2a      	ldr	r3, [pc, #168]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4927      	ldr	r1, [pc, #156]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	600b      	str	r3, [r1, #0]
 800422c:	e015      	b.n	800425a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800422e:	4b26      	ldr	r3, [pc, #152]	@ (80042c8 <HAL_RCC_OscConfig+0x270>)
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004234:	f7ff faaa 	bl	800378c <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423c:	f7ff faa6 	bl	800378c <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e180      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800424e:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1f0      	bne.n	800423c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d03a      	beq.n	80042dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d019      	beq.n	80042a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800426e:	4b17      	ldr	r3, [pc, #92]	@ (80042cc <HAL_RCC_OscConfig+0x274>)
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004274:	f7ff fa8a 	bl	800378c <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427c:	f7ff fa86 	bl	800378c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e160      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428e:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <HAL_RCC_OscConfig+0x26c>)
 8004290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800429a:	2001      	movs	r0, #1
 800429c:	f000 face 	bl	800483c <RCC_Delay>
 80042a0:	e01c      	b.n	80042dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_RCC_OscConfig+0x274>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7ff fa70 	bl	800378c <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ae:	e00f      	b.n	80042d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b0:	f7ff fa6c 	bl	800378c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d908      	bls.n	80042d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e146      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000
 80042c8:	42420000 	.word	0x42420000
 80042cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	4b92      	ldr	r3, [pc, #584]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e9      	bne.n	80042b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a6 	beq.w	8004436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2300      	movs	r3, #0
 80042ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ee:	4b8b      	ldr	r3, [pc, #556]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4b88      	ldr	r3, [pc, #544]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	4a87      	ldr	r2, [pc, #540]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004304:	61d3      	str	r3, [r2, #28]
 8004306:	4b85      	ldr	r3, [pc, #532]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b82      	ldr	r3, [pc, #520]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b7f      	ldr	r3, [pc, #508]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a7e      	ldr	r2, [pc, #504]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7ff fa2d 	bl	800378c <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7ff fa29 	bl	800378c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b64      	cmp	r3, #100	@ 0x64
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e103      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b75      	ldr	r3, [pc, #468]	@ (8004520 <HAL_RCC_OscConfig+0x4c8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x312>
 800435c:	4b6f      	ldr	r3, [pc, #444]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	4a6e      	ldr	r2, [pc, #440]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6213      	str	r3, [r2, #32]
 8004368:	e02d      	b.n	80043c6 <HAL_RCC_OscConfig+0x36e>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x334>
 8004372:	4b6a      	ldr	r3, [pc, #424]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4a69      	ldr	r2, [pc, #420]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004378:	f023 0301 	bic.w	r3, r3, #1
 800437c:	6213      	str	r3, [r2, #32]
 800437e:	4b67      	ldr	r3, [pc, #412]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4a66      	ldr	r2, [pc, #408]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004384:	f023 0304 	bic.w	r3, r3, #4
 8004388:	6213      	str	r3, [r2, #32]
 800438a:	e01c      	b.n	80043c6 <HAL_RCC_OscConfig+0x36e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	2b05      	cmp	r3, #5
 8004392:	d10c      	bne.n	80043ae <HAL_RCC_OscConfig+0x356>
 8004394:	4b61      	ldr	r3, [pc, #388]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	4a60      	ldr	r2, [pc, #384]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	6213      	str	r3, [r2, #32]
 80043a0:	4b5e      	ldr	r3, [pc, #376]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	4a5d      	ldr	r2, [pc, #372]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	6213      	str	r3, [r2, #32]
 80043ac:	e00b      	b.n	80043c6 <HAL_RCC_OscConfig+0x36e>
 80043ae:	4b5b      	ldr	r3, [pc, #364]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	4a5a      	ldr	r2, [pc, #360]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	f023 0301 	bic.w	r3, r3, #1
 80043b8:	6213      	str	r3, [r2, #32]
 80043ba:	4b58      	ldr	r3, [pc, #352]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a57      	ldr	r2, [pc, #348]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d015      	beq.n	80043fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ce:	f7ff f9dd 	bl	800378c <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	e00a      	b.n	80043ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d6:	f7ff f9d9 	bl	800378c <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0b1      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	4b4b      	ldr	r3, [pc, #300]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ee      	beq.n	80043d6 <HAL_RCC_OscConfig+0x37e>
 80043f8:	e014      	b.n	8004424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fa:	f7ff f9c7 	bl	800378c <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	e00a      	b.n	8004418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004402:	f7ff f9c3 	bl	800378c <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004410:	4293      	cmp	r3, r2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e09b      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	4b40      	ldr	r3, [pc, #256]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ee      	bne.n	8004402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004424:	7dfb      	ldrb	r3, [r7, #23]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d105      	bne.n	8004436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442a:	4b3c      	ldr	r3, [pc, #240]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4a3b      	ldr	r2, [pc, #236]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004430:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 8087 	beq.w	800454e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004440:	4b36      	ldr	r3, [pc, #216]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d061      	beq.n	8004510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d146      	bne.n	80044e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004454:	4b33      	ldr	r3, [pc, #204]	@ (8004524 <HAL_RCC_OscConfig+0x4cc>)
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7ff f997 	bl	800378c <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7ff f993 	bl	800378c <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e06d      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004474:	4b29      	ldr	r3, [pc, #164]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1f0      	bne.n	8004462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004488:	d108      	bne.n	800449c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800448a:	4b24      	ldr	r3, [pc, #144]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	4921      	ldr	r1, [pc, #132]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449c:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a19      	ldr	r1, [r3, #32]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	430b      	orrs	r3, r1
 80044ae:	491b      	ldr	r1, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004524 <HAL_RCC_OscConfig+0x4cc>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7ff f967 	bl	800378c <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7ff f963 	bl	800378c <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e03d      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d4:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x46a>
 80044e0:	e035      	b.n	800454e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <HAL_RCC_OscConfig+0x4cc>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7ff f950 	bl	800378c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7ff f94c 	bl	800378c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e026      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_RCC_OscConfig+0x4c4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x498>
 800450e:	e01e      	b.n	800454e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e019      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
 800451c:	40021000 	.word	0x40021000
 8004520:	40007000 	.word	0x40007000
 8004524:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004528:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <HAL_RCC_OscConfig+0x500>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	429a      	cmp	r2, r3
 800453a:	d106      	bne.n	800454a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d001      	beq.n	800454e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000

0800455c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0d0      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004570:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d910      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457e:	4b67      	ldr	r3, [pc, #412]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 0207 	bic.w	r2, r3, #7
 8004586:	4965      	ldr	r1, [pc, #404]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800458e:	4b63      	ldr	r3, [pc, #396]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0b8      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045b8:	4b59      	ldr	r3, [pc, #356]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a58      	ldr	r2, [pc, #352]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d0:	4b53      	ldr	r3, [pc, #332]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a52      	ldr	r2, [pc, #328]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80045da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045dc:	4b50      	ldr	r3, [pc, #320]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	494d      	ldr	r1, [pc, #308]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d040      	beq.n	800467c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004602:	4b47      	ldr	r3, [pc, #284]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d115      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e07f      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d107      	bne.n	800462a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461a:	4b41      	ldr	r3, [pc, #260]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e073      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462a:	4b3d      	ldr	r3, [pc, #244]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e06b      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463a:	4b39      	ldr	r3, [pc, #228]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4936      	ldr	r1, [pc, #216]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7ff f89e 	bl	800378c <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004652:	e00a      	b.n	800466a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004654:	f7ff f89a 	bl	800378c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004662:	4293      	cmp	r3, r2
 8004664:	d901      	bls.n	800466a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e053      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f003 020c 	and.w	r2, r3, #12
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	429a      	cmp	r2, r3
 800467a:	d1eb      	bne.n	8004654 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800467c:	4b27      	ldr	r3, [pc, #156]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d210      	bcs.n	80046ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b24      	ldr	r3, [pc, #144]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 0207 	bic.w	r2, r3, #7
 8004692:	4922      	ldr	r1, [pc, #136]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b20      	ldr	r3, [pc, #128]	@ (800471c <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e032      	b.n	8004712 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d008      	beq.n	80046ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046b8:	4b19      	ldr	r3, [pc, #100]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4916      	ldr	r1, [pc, #88]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d009      	beq.n	80046ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046d6:	4b12      	ldr	r3, [pc, #72]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	490e      	ldr	r1, [pc, #56]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ea:	f000 f821 	bl	8004730 <HAL_RCC_GetSysClockFreq>
 80046ee:	4602      	mov	r2, r0
 80046f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004720 <HAL_RCC_ClockConfig+0x1c4>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	490a      	ldr	r1, [pc, #40]	@ (8004724 <HAL_RCC_ClockConfig+0x1c8>)
 80046fc:	5ccb      	ldrb	r3, [r1, r3]
 80046fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004702:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <HAL_RCC_ClockConfig+0x1cc>)
 8004704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <HAL_RCC_ClockConfig+0x1d0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fffc 	bl	8003708 <HAL_InitTick>

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	40022000 	.word	0x40022000
 8004720:	40021000 	.word	0x40021000
 8004724:	08008ca8 	.word	0x08008ca8
 8004728:	20000004 	.word	0x20000004
 800472c:	20000008 	.word	0x20000008

08004730 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800474a:	4b1e      	ldr	r3, [pc, #120]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b04      	cmp	r3, #4
 8004758:	d002      	beq.n	8004760 <HAL_RCC_GetSysClockFreq+0x30>
 800475a:	2b08      	cmp	r3, #8
 800475c:	d003      	beq.n	8004766 <HAL_RCC_GetSysClockFreq+0x36>
 800475e:	e027      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004760:	4b19      	ldr	r3, [pc, #100]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004762:	613b      	str	r3, [r7, #16]
      break;
 8004764:	e027      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	0c9b      	lsrs	r3, r3, #18
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	4a17      	ldr	r2, [pc, #92]	@ (80047cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004770:	5cd3      	ldrb	r3, [r2, r3]
 8004772:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d010      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800477e:	4b11      	ldr	r3, [pc, #68]	@ (80047c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	0c5b      	lsrs	r3, r3, #17
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	4a11      	ldr	r2, [pc, #68]	@ (80047d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800478a:	5cd3      	ldrb	r3, [r2, r3]
 800478c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a0d      	ldr	r2, [pc, #52]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004792:	fb03 f202 	mul.w	r2, r3, r2
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e004      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a0c      	ldr	r2, [pc, #48]	@ (80047d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	613b      	str	r3, [r7, #16]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b05      	ldr	r3, [pc, #20]	@ (80047c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80047b2:	613b      	str	r3, [r7, #16]
      break;
 80047b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b6:	693b      	ldr	r3, [r7, #16]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40021000 	.word	0x40021000
 80047c8:	007a1200 	.word	0x007a1200
 80047cc:	08008cc0 	.word	0x08008cc0
 80047d0:	08008cd0 	.word	0x08008cd0
 80047d4:	003d0900 	.word	0x003d0900

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b02      	ldr	r3, [pc, #8]	@ (80047e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000004 	.word	0x20000004

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff2 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	@ (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	@ (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	08008cb8 	.word	0x08008cb8

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffde 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	@ (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	08008cb8 	.word	0x08008cb8

0800483c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004844:	4b0a      	ldr	r3, [pc, #40]	@ (8004870 <RCC_Delay+0x34>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a0a      	ldr	r2, [pc, #40]	@ (8004874 <RCC_Delay+0x38>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	0a5b      	lsrs	r3, r3, #9
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	fb02 f303 	mul.w	r3, r2, r3
 8004856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004858:	bf00      	nop
  }
  while (Delay --);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	60fa      	str	r2, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1f9      	bne.n	8004858 <RCC_Delay+0x1c>
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr
 8004870:	20000004 	.word	0x20000004
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e041      	b.n	800490e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fe fc4c 	bl	800313c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 fa72 	bl	8004da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e093      	b.n	8004a52 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fe fb64 	bl	800300c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6812      	ldr	r2, [r2, #0]
 8004956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800495a:	f023 0307 	bic.w	r3, r3, #7
 800495e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	4619      	mov	r1, r3
 800496a:	4610      	mov	r0, r2
 800496c:	f000 fa18 	bl	8004da0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004998:	f023 0303 	bic.w	r3, r3, #3
 800499c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	4313      	orrs	r3, r2
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80049b6:	f023 030c 	bic.w	r3, r3, #12
 80049ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80049c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	4313      	orrs	r3, r2
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	011a      	lsls	r2, r3, #4
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	031b      	lsls	r3, r3, #12
 80049e6:	4313      	orrs	r3, r2
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80049f4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	4313      	orrs	r3, r2
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a6a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004a72:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a7a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004a82:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d110      	bne.n	8004aac <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d102      	bne.n	8004a96 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a90:	7b7b      	ldrb	r3, [r7, #13]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d001      	beq.n	8004a9a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e069      	b.n	8004b6e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aaa:	e031      	b.n	8004b10 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d110      	bne.n	8004ad4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ab2:	7bbb      	ldrb	r3, [r7, #14]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d102      	bne.n	8004abe <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ab8:	7b3b      	ldrb	r3, [r7, #12]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d001      	beq.n	8004ac2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e055      	b.n	8004b6e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ad2:	e01d      	b.n	8004b10 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d108      	bne.n	8004aec <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d105      	bne.n	8004aec <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ae0:	7b7b      	ldrb	r3, [r7, #13]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d102      	bne.n	8004aec <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae6:	7b3b      	ldrb	r3, [r7, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e03e      	b.n	8004b6e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d003      	beq.n	8004b1e <HAL_TIM_Encoder_Start+0xc4>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b04      	cmp	r3, #4
 8004b1a:	d008      	beq.n	8004b2e <HAL_TIM_Encoder_Start+0xd4>
 8004b1c:	e00f      	b.n	8004b3e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2201      	movs	r2, #1
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f9c0 	bl	8004eac <TIM_CCxChannelCmd>
      break;
 8004b2c:	e016      	b.n	8004b5c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2201      	movs	r2, #1
 8004b34:	2104      	movs	r1, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f9b8 	bl	8004eac <TIM_CCxChannelCmd>
      break;
 8004b3c:	e00e      	b.n	8004b5c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f9b0 	bl	8004eac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2201      	movs	r2, #1
 8004b52:	2104      	movs	r1, #4
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f9a9 	bl	8004eac <TIM_CCxChannelCmd>
      break;
 8004b5a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d020      	beq.n	8004bda <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d01b      	beq.n	8004bda <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0202 	mvn.w	r2, #2
 8004baa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f8d1 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004bc6:	e005      	b.n	8004bd4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8c4 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f8d3 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01b      	beq.n	8004c26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f06f 0204 	mvn.w	r2, #4
 8004bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d003      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8ab 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004c12:	e005      	b.n	8004c20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f89e 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f8ad 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d020      	beq.n	8004c72 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01b      	beq.n	8004c72 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0208 	mvn.w	r2, #8
 8004c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2204      	movs	r2, #4
 8004c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f885 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004c5e:	e005      	b.n	8004c6c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f878 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f887 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d020      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01b      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0210 	mvn.w	r2, #16
 8004c8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2208      	movs	r2, #8
 8004c94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f85f 	bl	8004d68 <HAL_TIM_IC_CaptureCallback>
 8004caa:	e005      	b.n	8004cb8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f852 	bl	8004d56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f861 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f06f 0201 	mvn.w	r2, #1
 8004cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7fd fc1d 	bl	800251c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00c      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d007      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f96c 	bl	8004fde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f831 	bl	8004d8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00c      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f06f 0220 	mvn.w	r2, #32
 8004d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f93f 	bl	8004fcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d4e:	bf00      	nop
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}

08004d56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
	...

08004da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a39      	ldr	r2, [pc, #228]	@ (8004e98 <TIM_Base_SetConfig+0xf8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a38      	ldr	r2, [pc, #224]	@ (8004e9c <TIM_Base_SetConfig+0xfc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00f      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc6:	d00b      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a35      	ldr	r2, [pc, #212]	@ (8004ea0 <TIM_Base_SetConfig+0x100>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d007      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a34      	ldr	r2, [pc, #208]	@ (8004ea4 <TIM_Base_SetConfig+0x104>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d003      	beq.n	8004de0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <TIM_Base_SetConfig+0x108>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d108      	bne.n	8004df2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a28      	ldr	r2, [pc, #160]	@ (8004e98 <TIM_Base_SetConfig+0xf8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <TIM_Base_SetConfig+0x82>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a27      	ldr	r2, [pc, #156]	@ (8004e9c <TIM_Base_SetConfig+0xfc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00f      	beq.n	8004e22 <TIM_Base_SetConfig+0x82>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e08:	d00b      	beq.n	8004e22 <TIM_Base_SetConfig+0x82>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ea0 <TIM_Base_SetConfig+0x100>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_Base_SetConfig+0x82>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a23      	ldr	r2, [pc, #140]	@ (8004ea4 <TIM_Base_SetConfig+0x104>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0x82>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	@ (8004ea8 <TIM_Base_SetConfig+0x108>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8004e98 <TIM_Base_SetConfig+0xf8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d003      	beq.n	8004e68 <TIM_Base_SetConfig+0xc8>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a0e      	ldr	r2, [pc, #56]	@ (8004e9c <TIM_Base_SetConfig+0xfc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	611a      	str	r2, [r3, #16]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	40012c00 	.word	0x40012c00
 8004e9c:	40013400 	.word	0x40013400
 8004ea0:	40000400 	.word	0x40000400
 8004ea4:	40000800 	.word	0x40000800
 8004ea8:	40000c00 	.word	0x40000c00

08004eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 031f 	and.w	r3, r3, #31
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	401a      	ands	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1a      	ldr	r2, [r3, #32]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e050      	b.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d018      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a15      	ldr	r2, [pc, #84]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d009      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a14      	ldr	r2, [pc, #80]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d004      	beq.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a12      	ldr	r2, [pc, #72]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10c      	bne.n	8004f9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40013400 	.word	0x40013400
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00

08004fcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr

08004fde <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e042      	b.n	8005088 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fe f8d2 	bl	80031c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	@ 0x24
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 fde5 	bl	8005c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695a      	ldr	r2, [r3, #20]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08a      	sub	sp, #40	@ 0x28
 8005094:	af02      	add	r7, sp, #8
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d175      	bne.n	800519c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_UART_Transmit+0x2c>
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e06e      	b.n	800519e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2221      	movs	r2, #33	@ 0x21
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050ce:	f7fe fb5d 	bl	800378c <HAL_GetTick>
 80050d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	88fa      	ldrh	r2, [r7, #6]
 80050d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	88fa      	ldrh	r2, [r7, #6]
 80050de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050e8:	d108      	bne.n	80050fc <HAL_UART_Transmit+0x6c>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	e003      	b.n	8005104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005104:	e02e      	b.n	8005164 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2200      	movs	r2, #0
 800510e:	2180      	movs	r1, #128	@ 0x80
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fb49 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e03a      	b.n	800519e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10b      	bne.n	8005146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800513c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	3302      	adds	r3, #2
 8005142:	61bb      	str	r3, [r7, #24]
 8005144:	e007      	b.n	8005156 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	3301      	adds	r3, #1
 8005154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1cb      	bne.n	8005106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	9300      	str	r3, [sp, #0]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2200      	movs	r2, #0
 8005176:	2140      	movs	r1, #64	@ 0x40
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 fb15 	bl	80057a8 <UART_WaitOnFlagUntilTimeout>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e006      	b.n	800519e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005198:	2300      	movs	r3, #0
 800519a:	e000      	b.n	800519e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800519c:	2302      	movs	r3, #2
  }
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3720      	adds	r7, #32
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b085      	sub	sp, #20
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	4613      	mov	r3, r2
 80051b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d121      	bne.n	8005204 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_UART_Transmit_IT+0x26>
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e01a      	b.n	8005206 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	88fa      	ldrh	r2, [r7, #6]
 80051e0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2221      	movs	r2, #33	@ 0x21
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80051fe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b20      	cmp	r3, #32
 8005228:	d112      	bne.n	8005250 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d002      	beq.n	8005236 <HAL_UART_Receive_IT+0x26>
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e00b      	b.n	8005252 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	461a      	mov	r2, r3
 8005244:	68b9      	ldr	r1, [r7, #8]
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f000 fb07 	bl	800585a <UART_Start_Receive_IT>
 800524c:	4603      	mov	r3, r0
 800524e:	e000      	b.n	8005252 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
  }
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b0ba      	sub	sp, #232	@ 0xe8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005282:	2300      	movs	r3, #0
 8005284:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005288:	2300      	movs	r3, #0
 800528a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800528e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800529a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10f      	bne.n	80052c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <HAL_UART_IRQHandler+0x66>
 80052ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fbe3 	bl	8005a86 <UART_Receive_IT>
      return;
 80052c0:	e25b      	b.n	800577a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80de 	beq.w	8005488 <HAL_UART_IRQHandler+0x22c>
 80052cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d106      	bne.n	80052e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80d1 	beq.w	8005488 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_UART_IRQHandler+0xae>
 80052f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005302:	f043 0201 	orr.w	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_UART_IRQHandler+0xd2>
 8005316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	f043 0202 	orr.w	r2, r3, #2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_UART_IRQHandler+0xf6>
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534a:	f043 0204 	orr.w	r2, r3, #4
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d011      	beq.n	8005382 <HAL_UART_IRQHandler+0x126>
 800535e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d105      	bne.n	8005376 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800536a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	f043 0208 	orr.w	r2, r3, #8
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 81f2 	beq.w	8005770 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005390:	f003 0320 	and.w	r3, r3, #32
 8005394:	2b00      	cmp	r3, #0
 8005396:	d008      	beq.n	80053aa <HAL_UART_IRQHandler+0x14e>
 8005398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d002      	beq.n	80053aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fb6e 	bl	8005a86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	bf14      	ite	ne
 80053b8:	2301      	movne	r3, #1
 80053ba:	2300      	moveq	r3, #0
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <HAL_UART_IRQHandler+0x17a>
 80053ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d04f      	beq.n	8005476 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 fa78 	bl	80058cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d041      	beq.n	800546e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3314      	adds	r3, #20
 80053f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005400:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005408:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3314      	adds	r3, #20
 8005412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005416:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800541a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800542e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1d9      	bne.n	80053ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	d013      	beq.n	8005466 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005442:	4a7e      	ldr	r2, [pc, #504]	@ (800563c <HAL_UART_IRQHandler+0x3e0>)
 8005444:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe fb14 	bl	8003a78 <HAL_DMA_Abort_IT>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800545a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005460:	4610      	mov	r0, r2
 8005462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	e00e      	b.n	8005484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f98a 	bl	8005780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800546c:	e00a      	b.n	8005484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f986 	bl	8005780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005474:	e006      	b.n	8005484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f982 	bl	8005780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005482:	e175      	b.n	8005770 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005484:	bf00      	nop
    return;
 8005486:	e173      	b.n	8005770 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	2b01      	cmp	r3, #1
 800548e:	f040 814f 	bne.w	8005730 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 8148 	beq.w	8005730 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8141 	beq.w	8005730 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 80b6 	beq.w	8005640 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8145 	beq.w	8005774 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054f2:	429a      	cmp	r2, r3
 80054f4:	f080 813e 	bcs.w	8005774 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80054fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	2b20      	cmp	r3, #32
 8005508:	f000 8088 	beq.w	800561c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800551a:	e853 3f00 	ldrex	r3, [r3]
 800551e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005522:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005526:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800552a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	330c      	adds	r3, #12
 8005534:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005538:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800553c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005544:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005548:	e841 2300 	strex	r3, r2, [r1]
 800554c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005550:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1d9      	bne.n	800550c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3314      	adds	r3, #20
 800555e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005568:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800557c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005580:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005584:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800558e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1e1      	bne.n	8005558 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3314      	adds	r3, #20
 800559a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3314      	adds	r3, #20
 80055b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80055c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e3      	bne.n	8005594 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ec:	f023 0310 	bic.w	r3, r3, #16
 80055f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80055fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005600:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005602:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005604:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005606:	e841 2300 	strex	r3, r2, [r1]
 800560a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800560c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1e3      	bne.n	80055da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005616:	4618      	mov	r0, r3
 8005618:	f7fe f9f3 	bl	8003a02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800562a:	b29b      	uxth	r3, r3
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	b29b      	uxth	r3, r3
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f8ad 	bl	8005792 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005638:	e09c      	b.n	8005774 <HAL_UART_IRQHandler+0x518>
 800563a:	bf00      	nop
 800563c:	08005991 	.word	0x08005991
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005648:	b29b      	uxth	r3, r3
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	f000 808e 	beq.w	8005778 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800565c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8089 	beq.w	8005778 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	330c      	adds	r3, #12
 800566c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005670:	e853 3f00 	ldrex	r3, [r3]
 8005674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800567c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800568a:	647a      	str	r2, [r7, #68]	@ 0x44
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e3      	bne.n	8005666 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	623b      	str	r3, [r7, #32]
   return(result);
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80056c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80056c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e3      	bne.n	800569e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0310 	bic.w	r3, r3, #16
 80056fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005708:	61fa      	str	r2, [r7, #28]
 800570a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	69b9      	ldr	r1, [r7, #24]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	617b      	str	r3, [r7, #20]
   return(result);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e3      	bne.n	80056e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005722:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f832 	bl	8005792 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800572e:	e023      	b.n	8005778 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005738:	2b00      	cmp	r3, #0
 800573a:	d009      	beq.n	8005750 <HAL_UART_IRQHandler+0x4f4>
 800573c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f935 	bl	80059b8 <UART_Transmit_IT>
    return;
 800574e:	e014      	b.n	800577a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00e      	beq.n	800577a <HAL_UART_IRQHandler+0x51e>
 800575c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f974 	bl	8005a56 <UART_EndTransmit_IT>
    return;
 800576e:	e004      	b.n	800577a <HAL_UART_IRQHandler+0x51e>
    return;
 8005770:	bf00      	nop
 8005772:	e002      	b.n	800577a <HAL_UART_IRQHandler+0x51e>
      return;
 8005774:	bf00      	nop
 8005776:	e000      	b.n	800577a <HAL_UART_IRQHandler+0x51e>
      return;
 8005778:	bf00      	nop
  }
}
 800577a:	37e8      	adds	r7, #232	@ 0xe8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	460b      	mov	r3, r1
 800579c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b8:	e03b      	b.n	8005832 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d037      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fd ffe3 	bl	800378c <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	6a3a      	ldr	r2, [r7, #32]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e03a      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0304 	and.w	r3, r3, #4
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d023      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	2b80      	cmp	r3, #128	@ 0x80
 80057ee:	d020      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0x8a>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2b40      	cmp	r3, #64	@ 0x40
 80057f4:	d01d      	beq.n	8005832 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b08      	cmp	r3, #8
 8005802:	d116      	bne.n	8005832 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f856 	bl	80058cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2208      	movs	r2, #8
 8005824:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e00f      	b.n	8005852 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4013      	ands	r3, r2
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	bf0c      	ite	eq
 8005842:	2301      	moveq	r3, #1
 8005844:	2300      	movne	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	429a      	cmp	r2, r3
 800584e:	d0b4      	beq.n	80057ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3718      	adds	r7, #24
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	4613      	mov	r3, r2
 8005866:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	88fa      	ldrh	r2, [r7, #6]
 8005872:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	88fa      	ldrh	r2, [r7, #6]
 8005878:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2222      	movs	r2, #34	@ 0x22
 8005884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800589e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695a      	ldr	r2, [r3, #20]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f042 0201 	orr.w	r2, r2, #1
 80058ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0220 	orr.w	r2, r2, #32
 80058be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr

080058cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b095      	sub	sp, #84	@ 0x54
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058de:	e853 3f00 	ldrex	r3, [r3]
 80058e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80058f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058fc:	e841 2300 	strex	r3, r2, [r1]
 8005900:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1e5      	bne.n	80058d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3314      	adds	r3, #20
 800590e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	61fb      	str	r3, [r7, #28]
   return(result);
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f023 0301 	bic.w	r3, r3, #1
 800591e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3314      	adds	r3, #20
 8005926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005928:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800592a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800592e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e5      	bne.n	8005908 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	2b01      	cmp	r3, #1
 8005942:	d119      	bne.n	8005978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	60bb      	str	r3, [r7, #8]
   return(result);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0310 	bic.w	r3, r3, #16
 800595a:	647b      	str	r3, [r7, #68]	@ 0x44
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005964:	61ba      	str	r2, [r7, #24]
 8005966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	613b      	str	r3, [r7, #16]
   return(result);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e5      	bne.n	8005944 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005986:	bf00      	nop
 8005988:	3754      	adds	r7, #84	@ 0x54
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fee8 	bl	8005780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b21      	cmp	r3, #33	@ 0x21
 80059ca:	d13e      	bne.n	8005a4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d4:	d114      	bne.n	8005a00 <UART_Transmit_IT+0x48>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d110      	bne.n	8005a00 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	1c9a      	adds	r2, r3, #2
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]
 80059fe:	e008      	b.n	8005a12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	1c59      	adds	r1, r3, #1
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6211      	str	r1, [r2, #32]
 8005a0a:	781a      	ldrb	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10f      	bne.n	8005a46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	e000      	b.n	8005a4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a4a:	2302      	movs	r3, #2
  }
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fc fe44 	bl	8002704 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b08c      	sub	sp, #48	@ 0x30
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b22      	cmp	r3, #34	@ 0x22
 8005a98:	f040 80ae 	bne.w	8005bf8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005aa4:	d117      	bne.n	8005ad6 <UART_Receive_IT+0x50>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ace:	1c9a      	adds	r2, r3, #2
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ad4:	e026      	b.n	8005b24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ae8:	d007      	beq.n	8005afa <UART_Receive_IT+0x74>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <UART_Receive_IT+0x82>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d106      	bne.n	8005b08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	701a      	strb	r2, [r3, #0]
 8005b06:	e008      	b.n	8005b1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4619      	mov	r1, r3
 8005b32:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d15d      	bne.n	8005bf4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0220 	bic.w	r2, r2, #32
 8005b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695a      	ldr	r2, [r3, #20]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d135      	bne.n	8005bea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	e853 3f00 	ldrex	r3, [r3]
 8005b92:	613b      	str	r3, [r7, #16]
   return(result);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f023 0310 	bic.w	r3, r3, #16
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	330c      	adds	r3, #12
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	623a      	str	r2, [r7, #32]
 8005ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	69f9      	ldr	r1, [r7, #28]
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e5      	bne.n	8005b84 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0310 	and.w	r3, r3, #16
 8005bc2:	2b10      	cmp	r3, #16
 8005bc4:	d10a      	bne.n	8005bdc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff fdd5 	bl	8005792 <HAL_UARTEx_RxEventCallback>
 8005be8:	e002      	b.n	8005bf0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fc fe1c 	bl	8002828 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e002      	b.n	8005bfa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	e000      	b.n	8005bfa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
  }
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3730      	adds	r7, #48	@ 0x30
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c3e:	f023 030c 	bic.w	r3, r3, #12
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a2c      	ldr	r2, [pc, #176]	@ (8005d18 <UART_SetConfig+0x114>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d103      	bne.n	8005c74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c6c:	f7fe fdd2 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	e002      	b.n	8005c7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c74:	f7fe fdba 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8005c78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	009a      	lsls	r2, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	4a22      	ldr	r2, [pc, #136]	@ (8005d1c <UART_SetConfig+0x118>)
 8005c92:	fba2 2303 	umull	r2, r3, r2, r3
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	0119      	lsls	r1, r3, #4
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009a      	lsls	r2, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	fbb2 f2f3 	udiv	r2, r2, r3
 8005cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cb2:	fba3 0302 	umull	r0, r3, r3, r2
 8005cb6:	095b      	lsrs	r3, r3, #5
 8005cb8:	2064      	movs	r0, #100	@ 0x64
 8005cba:	fb00 f303 	mul.w	r3, r0, r3
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	3332      	adds	r3, #50	@ 0x32
 8005cc4:	4a15      	ldr	r2, [pc, #84]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cd0:	4419      	add	r1, r3
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cea:	fba3 0302 	umull	r0, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	2064      	movs	r0, #100	@ 0x64
 8005cf2:	fb00 f303 	mul.w	r3, r0, r3
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	3332      	adds	r3, #50	@ 0x32
 8005cfc:	4a07      	ldr	r2, [pc, #28]	@ (8005d1c <UART_SetConfig+0x118>)
 8005cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005d02:	095b      	lsrs	r3, r3, #5
 8005d04:	f003 020f 	and.w	r2, r3, #15
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40013800 	.word	0x40013800
 8005d1c:	51eb851f 	.word	0x51eb851f

08005d20 <_ZdlPvj>:
 8005d20:	f000 b8b0 	b.w	8005e84 <_ZdlPv>

08005d24 <_Znwj>:
 8005d24:	2801      	cmp	r0, #1
 8005d26:	bf38      	it	cc
 8005d28:	2001      	movcc	r0, #1
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 f93a 	bl	8005fa8 <malloc>
 8005d34:	b100      	cbz	r0, 8005d38 <_Znwj+0x14>
 8005d36:	bd10      	pop	{r4, pc}
 8005d38:	f000 f8a6 	bl	8005e88 <_ZSt15get_new_handlerv>
 8005d3c:	b908      	cbnz	r0, 8005d42 <_Znwj+0x1e>
 8005d3e:	f000 f92b 	bl	8005f98 <abort>
 8005d42:	4780      	blx	r0
 8005d44:	e7f3      	b.n	8005d2e <_Znwj+0xa>

08005d46 <_ZSt17__throw_bad_allocv>:
 8005d46:	b508      	push	{r3, lr}
 8005d48:	f000 f926 	bl	8005f98 <abort>

08005d4c <_ZSt28__throw_bad_array_new_lengthv>:
 8005d4c:	b508      	push	{r3, lr}
 8005d4e:	f000 f923 	bl	8005f98 <abort>
	...

08005d54 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8005d54:	290d      	cmp	r1, #13
 8005d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d58:	4605      	mov	r5, r0
 8005d5a:	d82b      	bhi.n	8005db4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x60>
 8005d5c:	b391      	cbz	r1, 8005dc4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x70>
 8005d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc8 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x74>)
 8005d60:	5c5c      	ldrb	r4, [r3, r1]
 8005d62:	4620      	mov	r0, r4
 8005d64:	f7fa fbba 	bl	80004dc <__aeabi_i2d>
 8005d68:	4606      	mov	r6, r0
 8005d6a:	6828      	ldr	r0, [r5, #0]
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	f7fa fbc7 	bl	8000500 <__aeabi_f2d>
 8005d72:	4602      	mov	r2, r0
 8005d74:	460b      	mov	r3, r1
 8005d76:	4630      	mov	r0, r6
 8005d78:	4639      	mov	r1, r7
 8005d7a:	f7fa fc19 	bl	80005b0 <__aeabi_dmul>
 8005d7e:	f000 f88b 	bl	8005e98 <floor>
 8005d82:	f7fa feed 	bl	8000b60 <__aeabi_d2uiz>
 8005d86:	6068      	str	r0, [r5, #4]
 8005d88:	4620      	mov	r0, r4
 8005d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8c:	1058      	asrs	r0, r3, #1
 8005d8e:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8005d92:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8005d96:	428e      	cmp	r6, r1
 8005d98:	d20f      	bcs.n	8005dba <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x66>
 8005d9a:	1a1b      	subs	r3, r3, r0
 8005d9c:	1d22      	adds	r2, r4, #4
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	dcf3      	bgt.n	8005d8c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8005da4:	4b09      	ldr	r3, [pc, #36]	@ (8005dcc <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>)
 8005da6:	6814      	ldr	r4, [r2, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d008      	beq.n	8005dbe <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6a>
 8005dac:	4620      	mov	r0, r4
 8005dae:	f7fa fb85 	bl	80004bc <__aeabi_ui2d>
 8005db2:	e7d9      	b.n	8005d68 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8005db4:	23f9      	movs	r3, #249	@ 0xf9
 8005db6:	4a06      	ldr	r2, [pc, #24]	@ (8005dd0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8005db8:	e7f2      	b.n	8005da0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	e7f0      	b.n	8005da0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 8005dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc2:	e7e0      	b.n	8005d86 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8005dc4:	2401      	movs	r4, #1
 8005dc6:	e7df      	b.n	8005d88 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x34>
 8005dc8:	08008cd2 	.word	0x08008cd2
 8005dcc:	080090dc 	.word	0x080090dc
 8005dd0:	08008cf8 	.word	0x08008cf8

08005dd4 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8005dd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd8:	4692      	mov	sl, r2
 8005dda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ddc:	4604      	mov	r4, r0
 8005dde:	eb03 0802 	add.w	r8, r3, r2
 8005de2:	684b      	ldr	r3, [r1, #4]
 8005de4:	460d      	mov	r5, r1
 8005de6:	4598      	cmp	r8, r3
 8005de8:	d946      	bls.n	8005e78 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	6808      	ldr	r0, [r1, #0]
 8005dee:	bf0c      	ite	eq
 8005df0:	f04f 090b 	moveq.w	r9, #11
 8005df4:	f04f 0900 	movne.w	r9, #0
 8005df8:	f7fa fb82 	bl	8000500 <__aeabi_f2d>
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	45c8      	cmp	r8, r9
 8005e02:	4640      	mov	r0, r8
 8005e04:	bf38      	it	cc
 8005e06:	4648      	movcc	r0, r9
 8005e08:	f7fa fb58 	bl	80004bc <__aeabi_ui2d>
 8005e0c:	4632      	mov	r2, r6
 8005e0e:	463b      	mov	r3, r7
 8005e10:	f7fa fcf8 	bl	8000804 <__aeabi_ddiv>
 8005e14:	4680      	mov	r8, r0
 8005e16:	4650      	mov	r0, sl
 8005e18:	4689      	mov	r9, r1
 8005e1a:	f7fa fb4f 	bl	80004bc <__aeabi_ui2d>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	e9cd 2300 	strd	r2, r3, [sp]
 8005e26:	4642      	mov	r2, r8
 8005e28:	464b      	mov	r3, r9
 8005e2a:	f7fa fe3d 	bl	8000aa8 <__aeabi_dcmple>
 8005e2e:	b1c0      	cbz	r0, 8005e62 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	f000 f830 	bl	8005e98 <floor>
 8005e38:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f7fa fa02 	bl	8000244 <__adddf3>
 8005e40:	f7fa fe8e 	bl	8000b60 <__aeabi_d2uiz>
 8005e44:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8005e48:	4281      	cmp	r1, r0
 8005e4a:	bf38      	it	cc
 8005e4c:	4601      	movcc	r1, r0
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f7ff ff80 	bl	8005d54 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8005e54:	2301      	movs	r3, #1
 8005e56:	6060      	str	r0, [r4, #4]
 8005e58:	7023      	strb	r3, [r4, #0]
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	b002      	add	sp, #8
 8005e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e66:	4630      	mov	r0, r6
 8005e68:	4639      	mov	r1, r7
 8005e6a:	f7fa fba1 	bl	80005b0 <__aeabi_dmul>
 8005e6e:	f000 f813 	bl	8005e98 <floor>
 8005e72:	f7fa fe75 	bl	8000b60 <__aeabi_d2uiz>
 8005e76:	6068      	str	r0, [r5, #4]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e9c4 3300 	strd	r3, r3, [r4]
 8005e7e:	e7ec      	b.n	8005e5a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 8005e80:	3ff00000 	.word	0x3ff00000

08005e84 <_ZdlPv>:
 8005e84:	f000 b898 	b.w	8005fb8 <free>

08005e88 <_ZSt15get_new_handlerv>:
 8005e88:	4b02      	ldr	r3, [pc, #8]	@ (8005e94 <_ZSt15get_new_handlerv+0xc>)
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	f3bf 8f5b 	dmb	ish
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000594 	.word	0x20000594

08005e98 <floor>:
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005ea0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8005ea4:	2e13      	cmp	r6, #19
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	460c      	mov	r4, r1
 8005eac:	4605      	mov	r5, r0
 8005eae:	4680      	mov	r8, r0
 8005eb0:	dc35      	bgt.n	8005f1e <floor+0x86>
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	da17      	bge.n	8005ee6 <floor+0x4e>
 8005eb6:	a334      	add	r3, pc, #208	@ (adr r3, 8005f88 <floor+0xf0>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f7fa f9c2 	bl	8000244 <__adddf3>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f7fa fe04 	bl	8000ad0 <__aeabi_dcmpgt>
 8005ec8:	b150      	cbz	r0, 8005ee0 <floor+0x48>
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	da57      	bge.n	8005f7e <floor+0xe6>
 8005ece:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005ed2:	432c      	orrs	r4, r5
 8005ed4:	2500      	movs	r5, #0
 8005ed6:	42ac      	cmp	r4, r5
 8005ed8:	4c2d      	ldr	r4, [pc, #180]	@ (8005f90 <floor+0xf8>)
 8005eda:	bf08      	it	eq
 8005edc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005ee0:	4623      	mov	r3, r4
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	e024      	b.n	8005f30 <floor+0x98>
 8005ee6:	4f2b      	ldr	r7, [pc, #172]	@ (8005f94 <floor+0xfc>)
 8005ee8:	4137      	asrs	r7, r6
 8005eea:	ea01 0c07 	and.w	ip, r1, r7
 8005eee:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005ef2:	d01d      	beq.n	8005f30 <floor+0x98>
 8005ef4:	a324      	add	r3, pc, #144	@ (adr r3, 8005f88 <floor+0xf0>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f7fa f9a3 	bl	8000244 <__adddf3>
 8005efe:	2200      	movs	r2, #0
 8005f00:	2300      	movs	r3, #0
 8005f02:	f7fa fde5 	bl	8000ad0 <__aeabi_dcmpgt>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d0ea      	beq.n	8005ee0 <floor+0x48>
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	bfbe      	ittt	lt
 8005f0e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005f12:	4133      	asrlt	r3, r6
 8005f14:	18e4      	addlt	r4, r4, r3
 8005f16:	2500      	movs	r5, #0
 8005f18:	ea24 0407 	bic.w	r4, r4, r7
 8005f1c:	e7e0      	b.n	8005ee0 <floor+0x48>
 8005f1e:	2e33      	cmp	r6, #51	@ 0x33
 8005f20:	dd0a      	ble.n	8005f38 <floor+0xa0>
 8005f22:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005f26:	d103      	bne.n	8005f30 <floor+0x98>
 8005f28:	f7fa f98c 	bl	8000244 <__adddf3>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4610      	mov	r0, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f38:	f04f 3cff 	mov.w	ip, #4294967295
 8005f3c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005f40:	fa2c f707 	lsr.w	r7, ip, r7
 8005f44:	4207      	tst	r7, r0
 8005f46:	d0f3      	beq.n	8005f30 <floor+0x98>
 8005f48:	a30f      	add	r3, pc, #60	@ (adr r3, 8005f88 <floor+0xf0>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa f979 	bl	8000244 <__adddf3>
 8005f52:	2200      	movs	r2, #0
 8005f54:	2300      	movs	r3, #0
 8005f56:	f7fa fdbb 	bl	8000ad0 <__aeabi_dcmpgt>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d0c0      	beq.n	8005ee0 <floor+0x48>
 8005f5e:	2c00      	cmp	r4, #0
 8005f60:	da0a      	bge.n	8005f78 <floor+0xe0>
 8005f62:	2e14      	cmp	r6, #20
 8005f64:	d101      	bne.n	8005f6a <floor+0xd2>
 8005f66:	3401      	adds	r4, #1
 8005f68:	e006      	b.n	8005f78 <floor+0xe0>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005f70:	40b3      	lsls	r3, r6
 8005f72:	441d      	add	r5, r3
 8005f74:	4545      	cmp	r5, r8
 8005f76:	d3f6      	bcc.n	8005f66 <floor+0xce>
 8005f78:	ea25 0507 	bic.w	r5, r5, r7
 8005f7c:	e7b0      	b.n	8005ee0 <floor+0x48>
 8005f7e:	2500      	movs	r5, #0
 8005f80:	462c      	mov	r4, r5
 8005f82:	e7ad      	b.n	8005ee0 <floor+0x48>
 8005f84:	f3af 8000 	nop.w
 8005f88:	8800759c 	.word	0x8800759c
 8005f8c:	7e37e43c 	.word	0x7e37e43c
 8005f90:	bff00000 	.word	0xbff00000
 8005f94:	000fffff 	.word	0x000fffff

08005f98 <abort>:
 8005f98:	2006      	movs	r0, #6
 8005f9a:	b508      	push	{r3, lr}
 8005f9c:	f000 fe8c 	bl	8006cb8 <raise>
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	f7fd fac4 	bl	800352e <_exit>
	...

08005fa8 <malloc>:
 8005fa8:	4b02      	ldr	r3, [pc, #8]	@ (8005fb4 <malloc+0xc>)
 8005faa:	4601      	mov	r1, r0
 8005fac:	6818      	ldr	r0, [r3, #0]
 8005fae:	f000 b82d 	b.w	800600c <_malloc_r>
 8005fb2:	bf00      	nop
 8005fb4:	2000001c 	.word	0x2000001c

08005fb8 <free>:
 8005fb8:	4b02      	ldr	r3, [pc, #8]	@ (8005fc4 <free+0xc>)
 8005fba:	4601      	mov	r1, r0
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	f001 bd8b 	b.w	8007ad8 <_free_r>
 8005fc2:	bf00      	nop
 8005fc4:	2000001c 	.word	0x2000001c

08005fc8 <sbrk_aligned>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4e0f      	ldr	r6, [pc, #60]	@ (8006008 <sbrk_aligned+0x40>)
 8005fcc:	460c      	mov	r4, r1
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	b911      	cbnz	r1, 8005fda <sbrk_aligned+0x12>
 8005fd4:	f000 fec4 	bl	8006d60 <_sbrk_r>
 8005fd8:	6030      	str	r0, [r6, #0]
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 febf 	bl	8006d60 <_sbrk_r>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	d103      	bne.n	8005fee <sbrk_aligned+0x26>
 8005fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8005fea:	4620      	mov	r0, r4
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
 8005fee:	1cc4      	adds	r4, r0, #3
 8005ff0:	f024 0403 	bic.w	r4, r4, #3
 8005ff4:	42a0      	cmp	r0, r4
 8005ff6:	d0f8      	beq.n	8005fea <sbrk_aligned+0x22>
 8005ff8:	1a21      	subs	r1, r4, r0
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 feb0 	bl	8006d60 <_sbrk_r>
 8006000:	3001      	adds	r0, #1
 8006002:	d1f2      	bne.n	8005fea <sbrk_aligned+0x22>
 8006004:	e7ef      	b.n	8005fe6 <sbrk_aligned+0x1e>
 8006006:	bf00      	nop
 8006008:	20000598 	.word	0x20000598

0800600c <_malloc_r>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	1ccd      	adds	r5, r1, #3
 8006012:	f025 0503 	bic.w	r5, r5, #3
 8006016:	3508      	adds	r5, #8
 8006018:	2d0c      	cmp	r5, #12
 800601a:	bf38      	it	cc
 800601c:	250c      	movcc	r5, #12
 800601e:	2d00      	cmp	r5, #0
 8006020:	4606      	mov	r6, r0
 8006022:	db01      	blt.n	8006028 <_malloc_r+0x1c>
 8006024:	42a9      	cmp	r1, r5
 8006026:	d904      	bls.n	8006032 <_malloc_r+0x26>
 8006028:	230c      	movs	r3, #12
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	2000      	movs	r0, #0
 800602e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006108 <_malloc_r+0xfc>
 8006036:	f000 f869 	bl	800610c <__malloc_lock>
 800603a:	f8d8 3000 	ldr.w	r3, [r8]
 800603e:	461c      	mov	r4, r3
 8006040:	bb44      	cbnz	r4, 8006094 <_malloc_r+0x88>
 8006042:	4629      	mov	r1, r5
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ffbf 	bl	8005fc8 <sbrk_aligned>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	4604      	mov	r4, r0
 800604e:	d158      	bne.n	8006102 <_malloc_r+0xf6>
 8006050:	f8d8 4000 	ldr.w	r4, [r8]
 8006054:	4627      	mov	r7, r4
 8006056:	2f00      	cmp	r7, #0
 8006058:	d143      	bne.n	80060e2 <_malloc_r+0xd6>
 800605a:	2c00      	cmp	r4, #0
 800605c:	d04b      	beq.n	80060f6 <_malloc_r+0xea>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4639      	mov	r1, r7
 8006062:	4630      	mov	r0, r6
 8006064:	eb04 0903 	add.w	r9, r4, r3
 8006068:	f000 fe7a 	bl	8006d60 <_sbrk_r>
 800606c:	4581      	cmp	r9, r0
 800606e:	d142      	bne.n	80060f6 <_malloc_r+0xea>
 8006070:	6821      	ldr	r1, [r4, #0]
 8006072:	4630      	mov	r0, r6
 8006074:	1a6d      	subs	r5, r5, r1
 8006076:	4629      	mov	r1, r5
 8006078:	f7ff ffa6 	bl	8005fc8 <sbrk_aligned>
 800607c:	3001      	adds	r0, #1
 800607e:	d03a      	beq.n	80060f6 <_malloc_r+0xea>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	442b      	add	r3, r5
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	f8d8 3000 	ldr.w	r3, [r8]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	bb62      	cbnz	r2, 80060e8 <_malloc_r+0xdc>
 800608e:	f8c8 7000 	str.w	r7, [r8]
 8006092:	e00f      	b.n	80060b4 <_malloc_r+0xa8>
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	1b52      	subs	r2, r2, r5
 8006098:	d420      	bmi.n	80060dc <_malloc_r+0xd0>
 800609a:	2a0b      	cmp	r2, #11
 800609c:	d917      	bls.n	80060ce <_malloc_r+0xc2>
 800609e:	1961      	adds	r1, r4, r5
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	6025      	str	r5, [r4, #0]
 80060a4:	bf18      	it	ne
 80060a6:	6059      	strne	r1, [r3, #4]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	bf08      	it	eq
 80060ac:	f8c8 1000 	streq.w	r1, [r8]
 80060b0:	5162      	str	r2, [r4, r5]
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f82f 	bl	8006118 <__malloc_unlock>
 80060ba:	f104 000b 	add.w	r0, r4, #11
 80060be:	1d23      	adds	r3, r4, #4
 80060c0:	f020 0007 	bic.w	r0, r0, #7
 80060c4:	1ac2      	subs	r2, r0, r3
 80060c6:	bf1c      	itt	ne
 80060c8:	1a1b      	subne	r3, r3, r0
 80060ca:	50a3      	strne	r3, [r4, r2]
 80060cc:	e7af      	b.n	800602e <_malloc_r+0x22>
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	bf0c      	ite	eq
 80060d4:	f8c8 2000 	streq.w	r2, [r8]
 80060d8:	605a      	strne	r2, [r3, #4]
 80060da:	e7eb      	b.n	80060b4 <_malloc_r+0xa8>
 80060dc:	4623      	mov	r3, r4
 80060de:	6864      	ldr	r4, [r4, #4]
 80060e0:	e7ae      	b.n	8006040 <_malloc_r+0x34>
 80060e2:	463c      	mov	r4, r7
 80060e4:	687f      	ldr	r7, [r7, #4]
 80060e6:	e7b6      	b.n	8006056 <_malloc_r+0x4a>
 80060e8:	461a      	mov	r2, r3
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d1fb      	bne.n	80060e8 <_malloc_r+0xdc>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6053      	str	r3, [r2, #4]
 80060f4:	e7de      	b.n	80060b4 <_malloc_r+0xa8>
 80060f6:	230c      	movs	r3, #12
 80060f8:	4630      	mov	r0, r6
 80060fa:	6033      	str	r3, [r6, #0]
 80060fc:	f000 f80c 	bl	8006118 <__malloc_unlock>
 8006100:	e794      	b.n	800602c <_malloc_r+0x20>
 8006102:	6005      	str	r5, [r0, #0]
 8006104:	e7d6      	b.n	80060b4 <_malloc_r+0xa8>
 8006106:	bf00      	nop
 8006108:	2000059c 	.word	0x2000059c

0800610c <__malloc_lock>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__malloc_lock+0x8>)
 800610e:	f000 be74 	b.w	8006dfa <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	200006e0 	.word	0x200006e0

08006118 <__malloc_unlock>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__malloc_unlock+0x8>)
 800611a:	f000 be6f 	b.w	8006dfc <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	200006e0 	.word	0x200006e0

08006124 <__cvt>:
 8006124:	2b00      	cmp	r3, #0
 8006126:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612a:	461d      	mov	r5, r3
 800612c:	bfbb      	ittet	lt
 800612e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006132:	461d      	movlt	r5, r3
 8006134:	2300      	movge	r3, #0
 8006136:	232d      	movlt	r3, #45	@ 0x2d
 8006138:	b088      	sub	sp, #32
 800613a:	4614      	mov	r4, r2
 800613c:	bfb8      	it	lt
 800613e:	4614      	movlt	r4, r2
 8006140:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006142:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006144:	7013      	strb	r3, [r2, #0]
 8006146:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006148:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800614c:	f023 0820 	bic.w	r8, r3, #32
 8006150:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006154:	d005      	beq.n	8006162 <__cvt+0x3e>
 8006156:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800615a:	d100      	bne.n	800615e <__cvt+0x3a>
 800615c:	3601      	adds	r6, #1
 800615e:	2302      	movs	r3, #2
 8006160:	e000      	b.n	8006164 <__cvt+0x40>
 8006162:	2303      	movs	r3, #3
 8006164:	aa07      	add	r2, sp, #28
 8006166:	9204      	str	r2, [sp, #16]
 8006168:	aa06      	add	r2, sp, #24
 800616a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800616e:	e9cd 3600 	strd	r3, r6, [sp]
 8006172:	4622      	mov	r2, r4
 8006174:	462b      	mov	r3, r5
 8006176:	f000 fee7 	bl	8006f48 <_dtoa_r>
 800617a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800617e:	4607      	mov	r7, r0
 8006180:	d119      	bne.n	80061b6 <__cvt+0x92>
 8006182:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006184:	07db      	lsls	r3, r3, #31
 8006186:	d50e      	bpl.n	80061a6 <__cvt+0x82>
 8006188:	eb00 0906 	add.w	r9, r0, r6
 800618c:	2200      	movs	r2, #0
 800618e:	2300      	movs	r3, #0
 8006190:	4620      	mov	r0, r4
 8006192:	4629      	mov	r1, r5
 8006194:	f7fa fc74 	bl	8000a80 <__aeabi_dcmpeq>
 8006198:	b108      	cbz	r0, 800619e <__cvt+0x7a>
 800619a:	f8cd 901c 	str.w	r9, [sp, #28]
 800619e:	2230      	movs	r2, #48	@ 0x30
 80061a0:	9b07      	ldr	r3, [sp, #28]
 80061a2:	454b      	cmp	r3, r9
 80061a4:	d31e      	bcc.n	80061e4 <__cvt+0xc0>
 80061a6:	4638      	mov	r0, r7
 80061a8:	9b07      	ldr	r3, [sp, #28]
 80061aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80061ac:	1bdb      	subs	r3, r3, r7
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	b008      	add	sp, #32
 80061b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061ba:	eb00 0906 	add.w	r9, r0, r6
 80061be:	d1e5      	bne.n	800618c <__cvt+0x68>
 80061c0:	7803      	ldrb	r3, [r0, #0]
 80061c2:	2b30      	cmp	r3, #48	@ 0x30
 80061c4:	d10a      	bne.n	80061dc <__cvt+0xb8>
 80061c6:	2200      	movs	r2, #0
 80061c8:	2300      	movs	r3, #0
 80061ca:	4620      	mov	r0, r4
 80061cc:	4629      	mov	r1, r5
 80061ce:	f7fa fc57 	bl	8000a80 <__aeabi_dcmpeq>
 80061d2:	b918      	cbnz	r0, 80061dc <__cvt+0xb8>
 80061d4:	f1c6 0601 	rsb	r6, r6, #1
 80061d8:	f8ca 6000 	str.w	r6, [sl]
 80061dc:	f8da 3000 	ldr.w	r3, [sl]
 80061e0:	4499      	add	r9, r3
 80061e2:	e7d3      	b.n	800618c <__cvt+0x68>
 80061e4:	1c59      	adds	r1, r3, #1
 80061e6:	9107      	str	r1, [sp, #28]
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e7d9      	b.n	80061a0 <__cvt+0x7c>

080061ec <__exponent>:
 80061ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ee:	2900      	cmp	r1, #0
 80061f0:	bfb6      	itet	lt
 80061f2:	232d      	movlt	r3, #45	@ 0x2d
 80061f4:	232b      	movge	r3, #43	@ 0x2b
 80061f6:	4249      	neglt	r1, r1
 80061f8:	2909      	cmp	r1, #9
 80061fa:	7002      	strb	r2, [r0, #0]
 80061fc:	7043      	strb	r3, [r0, #1]
 80061fe:	dd29      	ble.n	8006254 <__exponent+0x68>
 8006200:	f10d 0307 	add.w	r3, sp, #7
 8006204:	461d      	mov	r5, r3
 8006206:	270a      	movs	r7, #10
 8006208:	fbb1 f6f7 	udiv	r6, r1, r7
 800620c:	461a      	mov	r2, r3
 800620e:	fb07 1416 	mls	r4, r7, r6, r1
 8006212:	3430      	adds	r4, #48	@ 0x30
 8006214:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006218:	460c      	mov	r4, r1
 800621a:	2c63      	cmp	r4, #99	@ 0x63
 800621c:	4631      	mov	r1, r6
 800621e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006222:	dcf1      	bgt.n	8006208 <__exponent+0x1c>
 8006224:	3130      	adds	r1, #48	@ 0x30
 8006226:	1e94      	subs	r4, r2, #2
 8006228:	f803 1c01 	strb.w	r1, [r3, #-1]
 800622c:	4623      	mov	r3, r4
 800622e:	1c41      	adds	r1, r0, #1
 8006230:	42ab      	cmp	r3, r5
 8006232:	d30a      	bcc.n	800624a <__exponent+0x5e>
 8006234:	f10d 0309 	add.w	r3, sp, #9
 8006238:	1a9b      	subs	r3, r3, r2
 800623a:	42ac      	cmp	r4, r5
 800623c:	bf88      	it	hi
 800623e:	2300      	movhi	r3, #0
 8006240:	3302      	adds	r3, #2
 8006242:	4403      	add	r3, r0
 8006244:	1a18      	subs	r0, r3, r0
 8006246:	b003      	add	sp, #12
 8006248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800624a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800624e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006252:	e7ed      	b.n	8006230 <__exponent+0x44>
 8006254:	2330      	movs	r3, #48	@ 0x30
 8006256:	3130      	adds	r1, #48	@ 0x30
 8006258:	7083      	strb	r3, [r0, #2]
 800625a:	70c1      	strb	r1, [r0, #3]
 800625c:	1d03      	adds	r3, r0, #4
 800625e:	e7f1      	b.n	8006244 <__exponent+0x58>

08006260 <_printf_float>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	b091      	sub	sp, #68	@ 0x44
 8006266:	460c      	mov	r4, r1
 8006268:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800626c:	4616      	mov	r6, r2
 800626e:	461f      	mov	r7, r3
 8006270:	4605      	mov	r5, r0
 8006272:	f000 fd29 	bl	8006cc8 <_localeconv_r>
 8006276:	6803      	ldr	r3, [r0, #0]
 8006278:	4618      	mov	r0, r3
 800627a:	9308      	str	r3, [sp, #32]
 800627c:	f7f9 ffd4 	bl	8000228 <strlen>
 8006280:	2300      	movs	r3, #0
 8006282:	930e      	str	r3, [sp, #56]	@ 0x38
 8006284:	f8d8 3000 	ldr.w	r3, [r8]
 8006288:	9009      	str	r0, [sp, #36]	@ 0x24
 800628a:	3307      	adds	r3, #7
 800628c:	f023 0307 	bic.w	r3, r3, #7
 8006290:	f103 0208 	add.w	r2, r3, #8
 8006294:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006298:	f8d4 b000 	ldr.w	fp, [r4]
 800629c:	f8c8 2000 	str.w	r2, [r8]
 80062a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062aa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062ba:	4b9c      	ldr	r3, [pc, #624]	@ (800652c <_printf_float+0x2cc>)
 80062bc:	f7fa fc12 	bl	8000ae4 <__aeabi_dcmpun>
 80062c0:	bb70      	cbnz	r0, 8006320 <_printf_float+0xc0>
 80062c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80062c6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ca:	4b98      	ldr	r3, [pc, #608]	@ (800652c <_printf_float+0x2cc>)
 80062cc:	f7fa fbec 	bl	8000aa8 <__aeabi_dcmple>
 80062d0:	bb30      	cbnz	r0, 8006320 <_printf_float+0xc0>
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	4640      	mov	r0, r8
 80062d8:	4649      	mov	r1, r9
 80062da:	f7fa fbdb 	bl	8000a94 <__aeabi_dcmplt>
 80062de:	b110      	cbz	r0, 80062e6 <_printf_float+0x86>
 80062e0:	232d      	movs	r3, #45	@ 0x2d
 80062e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e6:	4a92      	ldr	r2, [pc, #584]	@ (8006530 <_printf_float+0x2d0>)
 80062e8:	4b92      	ldr	r3, [pc, #584]	@ (8006534 <_printf_float+0x2d4>)
 80062ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062ee:	bf94      	ite	ls
 80062f0:	4690      	movls	r8, r2
 80062f2:	4698      	movhi	r8, r3
 80062f4:	2303      	movs	r3, #3
 80062f6:	f04f 0900 	mov.w	r9, #0
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	f02b 0304 	bic.w	r3, fp, #4
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	4633      	mov	r3, r6
 8006304:	4621      	mov	r1, r4
 8006306:	4628      	mov	r0, r5
 8006308:	9700      	str	r7, [sp, #0]
 800630a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800630c:	f000 f9d4 	bl	80066b8 <_printf_common>
 8006310:	3001      	adds	r0, #1
 8006312:	f040 8090 	bne.w	8006436 <_printf_float+0x1d6>
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	b011      	add	sp, #68	@ 0x44
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	4642      	mov	r2, r8
 8006322:	464b      	mov	r3, r9
 8006324:	4640      	mov	r0, r8
 8006326:	4649      	mov	r1, r9
 8006328:	f7fa fbdc 	bl	8000ae4 <__aeabi_dcmpun>
 800632c:	b148      	cbz	r0, 8006342 <_printf_float+0xe2>
 800632e:	464b      	mov	r3, r9
 8006330:	2b00      	cmp	r3, #0
 8006332:	bfb8      	it	lt
 8006334:	232d      	movlt	r3, #45	@ 0x2d
 8006336:	4a80      	ldr	r2, [pc, #512]	@ (8006538 <_printf_float+0x2d8>)
 8006338:	bfb8      	it	lt
 800633a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800633e:	4b7f      	ldr	r3, [pc, #508]	@ (800653c <_printf_float+0x2dc>)
 8006340:	e7d3      	b.n	80062ea <_printf_float+0x8a>
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	d13f      	bne.n	80063cc <_printf_float+0x16c>
 800634c:	2306      	movs	r3, #6
 800634e:	6063      	str	r3, [r4, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	9206      	str	r2, [sp, #24]
 800635a:	aa0e      	add	r2, sp, #56	@ 0x38
 800635c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006360:	aa0d      	add	r2, sp, #52	@ 0x34
 8006362:	9203      	str	r2, [sp, #12]
 8006364:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006368:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	4642      	mov	r2, r8
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4628      	mov	r0, r5
 8006374:	464b      	mov	r3, r9
 8006376:	910a      	str	r1, [sp, #40]	@ 0x28
 8006378:	f7ff fed4 	bl	8006124 <__cvt>
 800637c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800637e:	4680      	mov	r8, r0
 8006380:	2947      	cmp	r1, #71	@ 0x47
 8006382:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006384:	d128      	bne.n	80063d8 <_printf_float+0x178>
 8006386:	1cc8      	adds	r0, r1, #3
 8006388:	db02      	blt.n	8006390 <_printf_float+0x130>
 800638a:	6863      	ldr	r3, [r4, #4]
 800638c:	4299      	cmp	r1, r3
 800638e:	dd40      	ble.n	8006412 <_printf_float+0x1b2>
 8006390:	f1aa 0a02 	sub.w	sl, sl, #2
 8006394:	fa5f fa8a 	uxtb.w	sl, sl
 8006398:	4652      	mov	r2, sl
 800639a:	3901      	subs	r1, #1
 800639c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80063a2:	f7ff ff23 	bl	80061ec <__exponent>
 80063a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063a8:	4681      	mov	r9, r0
 80063aa:	1813      	adds	r3, r2, r0
 80063ac:	2a01      	cmp	r2, #1
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	dc02      	bgt.n	80063b8 <_printf_float+0x158>
 80063b2:	6822      	ldr	r2, [r4, #0]
 80063b4:	07d2      	lsls	r2, r2, #31
 80063b6:	d501      	bpl.n	80063bc <_printf_float+0x15c>
 80063b8:	3301      	adds	r3, #1
 80063ba:	6123      	str	r3, [r4, #16]
 80063bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d09e      	beq.n	8006302 <_printf_float+0xa2>
 80063c4:	232d      	movs	r3, #45	@ 0x2d
 80063c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ca:	e79a      	b.n	8006302 <_printf_float+0xa2>
 80063cc:	2947      	cmp	r1, #71	@ 0x47
 80063ce:	d1bf      	bne.n	8006350 <_printf_float+0xf0>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1bd      	bne.n	8006350 <_printf_float+0xf0>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e7ba      	b.n	800634e <_printf_float+0xee>
 80063d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063dc:	d9dc      	bls.n	8006398 <_printf_float+0x138>
 80063de:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063e2:	d118      	bne.n	8006416 <_printf_float+0x1b6>
 80063e4:	2900      	cmp	r1, #0
 80063e6:	6863      	ldr	r3, [r4, #4]
 80063e8:	dd0b      	ble.n	8006402 <_printf_float+0x1a2>
 80063ea:	6121      	str	r1, [r4, #16]
 80063ec:	b913      	cbnz	r3, 80063f4 <_printf_float+0x194>
 80063ee:	6822      	ldr	r2, [r4, #0]
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d502      	bpl.n	80063fa <_printf_float+0x19a>
 80063f4:	3301      	adds	r3, #1
 80063f6:	440b      	add	r3, r1
 80063f8:	6123      	str	r3, [r4, #16]
 80063fa:	f04f 0900 	mov.w	r9, #0
 80063fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006400:	e7dc      	b.n	80063bc <_printf_float+0x15c>
 8006402:	b913      	cbnz	r3, 800640a <_printf_float+0x1aa>
 8006404:	6822      	ldr	r2, [r4, #0]
 8006406:	07d2      	lsls	r2, r2, #31
 8006408:	d501      	bpl.n	800640e <_printf_float+0x1ae>
 800640a:	3302      	adds	r3, #2
 800640c:	e7f4      	b.n	80063f8 <_printf_float+0x198>
 800640e:	2301      	movs	r3, #1
 8006410:	e7f2      	b.n	80063f8 <_printf_float+0x198>
 8006412:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006416:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006418:	4299      	cmp	r1, r3
 800641a:	db05      	blt.n	8006428 <_printf_float+0x1c8>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	6121      	str	r1, [r4, #16]
 8006420:	07d8      	lsls	r0, r3, #31
 8006422:	d5ea      	bpl.n	80063fa <_printf_float+0x19a>
 8006424:	1c4b      	adds	r3, r1, #1
 8006426:	e7e7      	b.n	80063f8 <_printf_float+0x198>
 8006428:	2900      	cmp	r1, #0
 800642a:	bfcc      	ite	gt
 800642c:	2201      	movgt	r2, #1
 800642e:	f1c1 0202 	rsble	r2, r1, #2
 8006432:	4413      	add	r3, r2
 8006434:	e7e0      	b.n	80063f8 <_printf_float+0x198>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	055a      	lsls	r2, r3, #21
 800643a:	d407      	bmi.n	800644c <_printf_float+0x1ec>
 800643c:	6923      	ldr	r3, [r4, #16]
 800643e:	4642      	mov	r2, r8
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	d12b      	bne.n	80064a2 <_printf_float+0x242>
 800644a:	e764      	b.n	8006316 <_printf_float+0xb6>
 800644c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006450:	f240 80dc 	bls.w	800660c <_printf_float+0x3ac>
 8006454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006458:	2200      	movs	r2, #0
 800645a:	2300      	movs	r3, #0
 800645c:	f7fa fb10 	bl	8000a80 <__aeabi_dcmpeq>
 8006460:	2800      	cmp	r0, #0
 8006462:	d033      	beq.n	80064cc <_printf_float+0x26c>
 8006464:	2301      	movs	r3, #1
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	4a35      	ldr	r2, [pc, #212]	@ (8006540 <_printf_float+0x2e0>)
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	f43f af51 	beq.w	8006316 <_printf_float+0xb6>
 8006474:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006478:	4543      	cmp	r3, r8
 800647a:	db02      	blt.n	8006482 <_printf_float+0x222>
 800647c:	6823      	ldr	r3, [r4, #0]
 800647e:	07d8      	lsls	r0, r3, #31
 8006480:	d50f      	bpl.n	80064a2 <_printf_float+0x242>
 8006482:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f af42 	beq.w	8006316 <_printf_float+0xb6>
 8006492:	f04f 0900 	mov.w	r9, #0
 8006496:	f108 38ff 	add.w	r8, r8, #4294967295
 800649a:	f104 0a1a 	add.w	sl, r4, #26
 800649e:	45c8      	cmp	r8, r9
 80064a0:	dc09      	bgt.n	80064b6 <_printf_float+0x256>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	079b      	lsls	r3, r3, #30
 80064a6:	f100 8102 	bmi.w	80066ae <_printf_float+0x44e>
 80064aa:	68e0      	ldr	r0, [r4, #12]
 80064ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ae:	4298      	cmp	r0, r3
 80064b0:	bfb8      	it	lt
 80064b2:	4618      	movlt	r0, r3
 80064b4:	e731      	b.n	800631a <_printf_float+0xba>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4652      	mov	r2, sl
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f af28 	beq.w	8006316 <_printf_float+0xb6>
 80064c6:	f109 0901 	add.w	r9, r9, #1
 80064ca:	e7e8      	b.n	800649e <_printf_float+0x23e>
 80064cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	dc38      	bgt.n	8006544 <_printf_float+0x2e4>
 80064d2:	2301      	movs	r3, #1
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	4a19      	ldr	r2, [pc, #100]	@ (8006540 <_printf_float+0x2e0>)
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	f43f af1a 	beq.w	8006316 <_printf_float+0xb6>
 80064e2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80064e6:	ea59 0303 	orrs.w	r3, r9, r3
 80064ea:	d102      	bne.n	80064f2 <_printf_float+0x292>
 80064ec:	6823      	ldr	r3, [r4, #0]
 80064ee:	07d9      	lsls	r1, r3, #31
 80064f0:	d5d7      	bpl.n	80064a2 <_printf_float+0x242>
 80064f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b8      	blx	r7
 80064fc:	3001      	adds	r0, #1
 80064fe:	f43f af0a 	beq.w	8006316 <_printf_float+0xb6>
 8006502:	f04f 0a00 	mov.w	sl, #0
 8006506:	f104 0b1a 	add.w	fp, r4, #26
 800650a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800650c:	425b      	negs	r3, r3
 800650e:	4553      	cmp	r3, sl
 8006510:	dc01      	bgt.n	8006516 <_printf_float+0x2b6>
 8006512:	464b      	mov	r3, r9
 8006514:	e793      	b.n	800643e <_printf_float+0x1de>
 8006516:	2301      	movs	r3, #1
 8006518:	465a      	mov	r2, fp
 800651a:	4631      	mov	r1, r6
 800651c:	4628      	mov	r0, r5
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	f43f aef8 	beq.w	8006316 <_printf_float+0xb6>
 8006526:	f10a 0a01 	add.w	sl, sl, #1
 800652a:	e7ee      	b.n	800650a <_printf_float+0x2aa>
 800652c:	7fefffff 	.word	0x7fefffff
 8006530:	080090e4 	.word	0x080090e4
 8006534:	080090e8 	.word	0x080090e8
 8006538:	080090ec 	.word	0x080090ec
 800653c:	080090f0 	.word	0x080090f0
 8006540:	080090f4 	.word	0x080090f4
 8006544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006546:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800654a:	4553      	cmp	r3, sl
 800654c:	bfa8      	it	ge
 800654e:	4653      	movge	r3, sl
 8006550:	2b00      	cmp	r3, #0
 8006552:	4699      	mov	r9, r3
 8006554:	dc36      	bgt.n	80065c4 <_printf_float+0x364>
 8006556:	f04f 0b00 	mov.w	fp, #0
 800655a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800655e:	f104 021a 	add.w	r2, r4, #26
 8006562:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006564:	930a      	str	r3, [sp, #40]	@ 0x28
 8006566:	eba3 0309 	sub.w	r3, r3, r9
 800656a:	455b      	cmp	r3, fp
 800656c:	dc31      	bgt.n	80065d2 <_printf_float+0x372>
 800656e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006570:	459a      	cmp	sl, r3
 8006572:	dc3a      	bgt.n	80065ea <_printf_float+0x38a>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	07da      	lsls	r2, r3, #31
 8006578:	d437      	bmi.n	80065ea <_printf_float+0x38a>
 800657a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800657c:	ebaa 0903 	sub.w	r9, sl, r3
 8006580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006582:	ebaa 0303 	sub.w	r3, sl, r3
 8006586:	4599      	cmp	r9, r3
 8006588:	bfa8      	it	ge
 800658a:	4699      	movge	r9, r3
 800658c:	f1b9 0f00 	cmp.w	r9, #0
 8006590:	dc33      	bgt.n	80065fa <_printf_float+0x39a>
 8006592:	f04f 0800 	mov.w	r8, #0
 8006596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800659a:	f104 0b1a 	add.w	fp, r4, #26
 800659e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065a0:	ebaa 0303 	sub.w	r3, sl, r3
 80065a4:	eba3 0309 	sub.w	r3, r3, r9
 80065a8:	4543      	cmp	r3, r8
 80065aa:	f77f af7a 	ble.w	80064a2 <_printf_float+0x242>
 80065ae:	2301      	movs	r3, #1
 80065b0:	465a      	mov	r2, fp
 80065b2:	4631      	mov	r1, r6
 80065b4:	4628      	mov	r0, r5
 80065b6:	47b8      	blx	r7
 80065b8:	3001      	adds	r0, #1
 80065ba:	f43f aeac 	beq.w	8006316 <_printf_float+0xb6>
 80065be:	f108 0801 	add.w	r8, r8, #1
 80065c2:	e7ec      	b.n	800659e <_printf_float+0x33e>
 80065c4:	4642      	mov	r2, r8
 80065c6:	4631      	mov	r1, r6
 80065c8:	4628      	mov	r0, r5
 80065ca:	47b8      	blx	r7
 80065cc:	3001      	adds	r0, #1
 80065ce:	d1c2      	bne.n	8006556 <_printf_float+0x2f6>
 80065d0:	e6a1      	b.n	8006316 <_printf_float+0xb6>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f ae9a 	beq.w	8006316 <_printf_float+0xb6>
 80065e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065e4:	f10b 0b01 	add.w	fp, fp, #1
 80065e8:	e7bb      	b.n	8006562 <_printf_float+0x302>
 80065ea:	4631      	mov	r1, r6
 80065ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1c0      	bne.n	800657a <_printf_float+0x31a>
 80065f8:	e68d      	b.n	8006316 <_printf_float+0xb6>
 80065fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065fc:	464b      	mov	r3, r9
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	4442      	add	r2, r8
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	d1c3      	bne.n	8006592 <_printf_float+0x332>
 800660a:	e684      	b.n	8006316 <_printf_float+0xb6>
 800660c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006610:	f1ba 0f01 	cmp.w	sl, #1
 8006614:	dc01      	bgt.n	800661a <_printf_float+0x3ba>
 8006616:	07db      	lsls	r3, r3, #31
 8006618:	d536      	bpl.n	8006688 <_printf_float+0x428>
 800661a:	2301      	movs	r3, #1
 800661c:	4642      	mov	r2, r8
 800661e:	4631      	mov	r1, r6
 8006620:	4628      	mov	r0, r5
 8006622:	47b8      	blx	r7
 8006624:	3001      	adds	r0, #1
 8006626:	f43f ae76 	beq.w	8006316 <_printf_float+0xb6>
 800662a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	47b8      	blx	r7
 8006634:	3001      	adds	r0, #1
 8006636:	f43f ae6e 	beq.w	8006316 <_printf_float+0xb6>
 800663a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006646:	f7fa fa1b 	bl	8000a80 <__aeabi_dcmpeq>
 800664a:	b9c0      	cbnz	r0, 800667e <_printf_float+0x41e>
 800664c:	4653      	mov	r3, sl
 800664e:	f108 0201 	add.w	r2, r8, #1
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	d10c      	bne.n	8006676 <_printf_float+0x416>
 800665c:	e65b      	b.n	8006316 <_printf_float+0xb6>
 800665e:	2301      	movs	r3, #1
 8006660:	465a      	mov	r2, fp
 8006662:	4631      	mov	r1, r6
 8006664:	4628      	mov	r0, r5
 8006666:	47b8      	blx	r7
 8006668:	3001      	adds	r0, #1
 800666a:	f43f ae54 	beq.w	8006316 <_printf_float+0xb6>
 800666e:	f108 0801 	add.w	r8, r8, #1
 8006672:	45d0      	cmp	r8, sl
 8006674:	dbf3      	blt.n	800665e <_printf_float+0x3fe>
 8006676:	464b      	mov	r3, r9
 8006678:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800667c:	e6e0      	b.n	8006440 <_printf_float+0x1e0>
 800667e:	f04f 0800 	mov.w	r8, #0
 8006682:	f104 0b1a 	add.w	fp, r4, #26
 8006686:	e7f4      	b.n	8006672 <_printf_float+0x412>
 8006688:	2301      	movs	r3, #1
 800668a:	4642      	mov	r2, r8
 800668c:	e7e1      	b.n	8006652 <_printf_float+0x3f2>
 800668e:	2301      	movs	r3, #1
 8006690:	464a      	mov	r2, r9
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f ae3c 	beq.w	8006316 <_printf_float+0xb6>
 800669e:	f108 0801 	add.w	r8, r8, #1
 80066a2:	68e3      	ldr	r3, [r4, #12]
 80066a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80066a6:	1a5b      	subs	r3, r3, r1
 80066a8:	4543      	cmp	r3, r8
 80066aa:	dcf0      	bgt.n	800668e <_printf_float+0x42e>
 80066ac:	e6fd      	b.n	80064aa <_printf_float+0x24a>
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	f104 0919 	add.w	r9, r4, #25
 80066b6:	e7f4      	b.n	80066a2 <_printf_float+0x442>

080066b8 <_printf_common>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	4616      	mov	r6, r2
 80066be:	4698      	mov	r8, r3
 80066c0:	688a      	ldr	r2, [r1, #8]
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	4607      	mov	r7, r0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bfb8      	it	lt
 80066ca:	4613      	movlt	r3, r2
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066d2:	460c      	mov	r4, r1
 80066d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066d8:	b10a      	cbz	r2, 80066de <_printf_common+0x26>
 80066da:	3301      	adds	r3, #1
 80066dc:	6033      	str	r3, [r6, #0]
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	0699      	lsls	r1, r3, #26
 80066e2:	bf42      	ittt	mi
 80066e4:	6833      	ldrmi	r3, [r6, #0]
 80066e6:	3302      	addmi	r3, #2
 80066e8:	6033      	strmi	r3, [r6, #0]
 80066ea:	6825      	ldr	r5, [r4, #0]
 80066ec:	f015 0506 	ands.w	r5, r5, #6
 80066f0:	d106      	bne.n	8006700 <_printf_common+0x48>
 80066f2:	f104 0a19 	add.w	sl, r4, #25
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	6832      	ldr	r2, [r6, #0]
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dc2b      	bgt.n	8006758 <_printf_common+0xa0>
 8006700:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006704:	6822      	ldr	r2, [r4, #0]
 8006706:	3b00      	subs	r3, #0
 8006708:	bf18      	it	ne
 800670a:	2301      	movne	r3, #1
 800670c:	0692      	lsls	r2, r2, #26
 800670e:	d430      	bmi.n	8006772 <_printf_common+0xba>
 8006710:	4641      	mov	r1, r8
 8006712:	4638      	mov	r0, r7
 8006714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006718:	47c8      	blx	r9
 800671a:	3001      	adds	r0, #1
 800671c:	d023      	beq.n	8006766 <_printf_common+0xae>
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	f003 0306 	and.w	r3, r3, #6
 8006726:	2b04      	cmp	r3, #4
 8006728:	bf14      	ite	ne
 800672a:	2500      	movne	r5, #0
 800672c:	6833      	ldreq	r3, [r6, #0]
 800672e:	f04f 0600 	mov.w	r6, #0
 8006732:	bf08      	it	eq
 8006734:	68e5      	ldreq	r5, [r4, #12]
 8006736:	f104 041a 	add.w	r4, r4, #26
 800673a:	bf08      	it	eq
 800673c:	1aed      	subeq	r5, r5, r3
 800673e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006742:	bf08      	it	eq
 8006744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006748:	4293      	cmp	r3, r2
 800674a:	bfc4      	itt	gt
 800674c:	1a9b      	subgt	r3, r3, r2
 800674e:	18ed      	addgt	r5, r5, r3
 8006750:	42b5      	cmp	r5, r6
 8006752:	d11a      	bne.n	800678a <_printf_common+0xd2>
 8006754:	2000      	movs	r0, #0
 8006756:	e008      	b.n	800676a <_printf_common+0xb2>
 8006758:	2301      	movs	r3, #1
 800675a:	4652      	mov	r2, sl
 800675c:	4641      	mov	r1, r8
 800675e:	4638      	mov	r0, r7
 8006760:	47c8      	blx	r9
 8006762:	3001      	adds	r0, #1
 8006764:	d103      	bne.n	800676e <_printf_common+0xb6>
 8006766:	f04f 30ff 	mov.w	r0, #4294967295
 800676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676e:	3501      	adds	r5, #1
 8006770:	e7c1      	b.n	80066f6 <_printf_common+0x3e>
 8006772:	2030      	movs	r0, #48	@ 0x30
 8006774:	18e1      	adds	r1, r4, r3
 8006776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006780:	4422      	add	r2, r4
 8006782:	3302      	adds	r3, #2
 8006784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006788:	e7c2      	b.n	8006710 <_printf_common+0x58>
 800678a:	2301      	movs	r3, #1
 800678c:	4622      	mov	r2, r4
 800678e:	4641      	mov	r1, r8
 8006790:	4638      	mov	r0, r7
 8006792:	47c8      	blx	r9
 8006794:	3001      	adds	r0, #1
 8006796:	d0e6      	beq.n	8006766 <_printf_common+0xae>
 8006798:	3601      	adds	r6, #1
 800679a:	e7d9      	b.n	8006750 <_printf_common+0x98>

0800679c <_printf_i>:
 800679c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	7e0f      	ldrb	r7, [r1, #24]
 80067a2:	4691      	mov	r9, r2
 80067a4:	2f78      	cmp	r7, #120	@ 0x78
 80067a6:	4680      	mov	r8, r0
 80067a8:	460c      	mov	r4, r1
 80067aa:	469a      	mov	sl, r3
 80067ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067b2:	d807      	bhi.n	80067c4 <_printf_i+0x28>
 80067b4:	2f62      	cmp	r7, #98	@ 0x62
 80067b6:	d80a      	bhi.n	80067ce <_printf_i+0x32>
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	f000 80d3 	beq.w	8006964 <_printf_i+0x1c8>
 80067be:	2f58      	cmp	r7, #88	@ 0x58
 80067c0:	f000 80ba 	beq.w	8006938 <_printf_i+0x19c>
 80067c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067cc:	e03a      	b.n	8006844 <_printf_i+0xa8>
 80067ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067d2:	2b15      	cmp	r3, #21
 80067d4:	d8f6      	bhi.n	80067c4 <_printf_i+0x28>
 80067d6:	a101      	add	r1, pc, #4	@ (adr r1, 80067dc <_printf_i+0x40>)
 80067d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006849 	.word	0x08006849
 80067e4:	080067c5 	.word	0x080067c5
 80067e8:	080067c5 	.word	0x080067c5
 80067ec:	080067c5 	.word	0x080067c5
 80067f0:	080067c5 	.word	0x080067c5
 80067f4:	08006849 	.word	0x08006849
 80067f8:	080067c5 	.word	0x080067c5
 80067fc:	080067c5 	.word	0x080067c5
 8006800:	080067c5 	.word	0x080067c5
 8006804:	080067c5 	.word	0x080067c5
 8006808:	0800694b 	.word	0x0800694b
 800680c:	08006873 	.word	0x08006873
 8006810:	08006905 	.word	0x08006905
 8006814:	080067c5 	.word	0x080067c5
 8006818:	080067c5 	.word	0x080067c5
 800681c:	0800696d 	.word	0x0800696d
 8006820:	080067c5 	.word	0x080067c5
 8006824:	08006873 	.word	0x08006873
 8006828:	080067c5 	.word	0x080067c5
 800682c:	080067c5 	.word	0x080067c5
 8006830:	0800690d 	.word	0x0800690d
 8006834:	6833      	ldr	r3, [r6, #0]
 8006836:	1d1a      	adds	r2, r3, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6032      	str	r2, [r6, #0]
 800683c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006844:	2301      	movs	r3, #1
 8006846:	e09e      	b.n	8006986 <_printf_i+0x1ea>
 8006848:	6833      	ldr	r3, [r6, #0]
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	1d19      	adds	r1, r3, #4
 800684e:	6031      	str	r1, [r6, #0]
 8006850:	0606      	lsls	r6, r0, #24
 8006852:	d501      	bpl.n	8006858 <_printf_i+0xbc>
 8006854:	681d      	ldr	r5, [r3, #0]
 8006856:	e003      	b.n	8006860 <_printf_i+0xc4>
 8006858:	0645      	lsls	r5, r0, #25
 800685a:	d5fb      	bpl.n	8006854 <_printf_i+0xb8>
 800685c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006860:	2d00      	cmp	r5, #0
 8006862:	da03      	bge.n	800686c <_printf_i+0xd0>
 8006864:	232d      	movs	r3, #45	@ 0x2d
 8006866:	426d      	negs	r5, r5
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800686c:	230a      	movs	r3, #10
 800686e:	4859      	ldr	r0, [pc, #356]	@ (80069d4 <_printf_i+0x238>)
 8006870:	e011      	b.n	8006896 <_printf_i+0xfa>
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	6833      	ldr	r3, [r6, #0]
 8006876:	0608      	lsls	r0, r1, #24
 8006878:	f853 5b04 	ldr.w	r5, [r3], #4
 800687c:	d402      	bmi.n	8006884 <_printf_i+0xe8>
 800687e:	0649      	lsls	r1, r1, #25
 8006880:	bf48      	it	mi
 8006882:	b2ad      	uxthmi	r5, r5
 8006884:	2f6f      	cmp	r7, #111	@ 0x6f
 8006886:	6033      	str	r3, [r6, #0]
 8006888:	bf14      	ite	ne
 800688a:	230a      	movne	r3, #10
 800688c:	2308      	moveq	r3, #8
 800688e:	4851      	ldr	r0, [pc, #324]	@ (80069d4 <_printf_i+0x238>)
 8006890:	2100      	movs	r1, #0
 8006892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006896:	6866      	ldr	r6, [r4, #4]
 8006898:	2e00      	cmp	r6, #0
 800689a:	bfa8      	it	ge
 800689c:	6821      	ldrge	r1, [r4, #0]
 800689e:	60a6      	str	r6, [r4, #8]
 80068a0:	bfa4      	itt	ge
 80068a2:	f021 0104 	bicge.w	r1, r1, #4
 80068a6:	6021      	strge	r1, [r4, #0]
 80068a8:	b90d      	cbnz	r5, 80068ae <_printf_i+0x112>
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	d04b      	beq.n	8006946 <_printf_i+0x1aa>
 80068ae:	4616      	mov	r6, r2
 80068b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80068b4:	fb03 5711 	mls	r7, r3, r1, r5
 80068b8:	5dc7      	ldrb	r7, [r0, r7]
 80068ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068be:	462f      	mov	r7, r5
 80068c0:	42bb      	cmp	r3, r7
 80068c2:	460d      	mov	r5, r1
 80068c4:	d9f4      	bls.n	80068b0 <_printf_i+0x114>
 80068c6:	2b08      	cmp	r3, #8
 80068c8:	d10b      	bne.n	80068e2 <_printf_i+0x146>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	07df      	lsls	r7, r3, #31
 80068ce:	d508      	bpl.n	80068e2 <_printf_i+0x146>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	6861      	ldr	r1, [r4, #4]
 80068d4:	4299      	cmp	r1, r3
 80068d6:	bfde      	ittt	le
 80068d8:	2330      	movle	r3, #48	@ 0x30
 80068da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068e2:	1b92      	subs	r2, r2, r6
 80068e4:	6122      	str	r2, [r4, #16]
 80068e6:	464b      	mov	r3, r9
 80068e8:	4621      	mov	r1, r4
 80068ea:	4640      	mov	r0, r8
 80068ec:	f8cd a000 	str.w	sl, [sp]
 80068f0:	aa03      	add	r2, sp, #12
 80068f2:	f7ff fee1 	bl	80066b8 <_printf_common>
 80068f6:	3001      	adds	r0, #1
 80068f8:	d14a      	bne.n	8006990 <_printf_i+0x1f4>
 80068fa:	f04f 30ff 	mov.w	r0, #4294967295
 80068fe:	b004      	add	sp, #16
 8006900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	f043 0320 	orr.w	r3, r3, #32
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	2778      	movs	r7, #120	@ 0x78
 800690e:	4832      	ldr	r0, [pc, #200]	@ (80069d8 <_printf_i+0x23c>)
 8006910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	6831      	ldr	r1, [r6, #0]
 8006918:	061f      	lsls	r7, r3, #24
 800691a:	f851 5b04 	ldr.w	r5, [r1], #4
 800691e:	d402      	bmi.n	8006926 <_printf_i+0x18a>
 8006920:	065f      	lsls	r7, r3, #25
 8006922:	bf48      	it	mi
 8006924:	b2ad      	uxthmi	r5, r5
 8006926:	6031      	str	r1, [r6, #0]
 8006928:	07d9      	lsls	r1, r3, #31
 800692a:	bf44      	itt	mi
 800692c:	f043 0320 	orrmi.w	r3, r3, #32
 8006930:	6023      	strmi	r3, [r4, #0]
 8006932:	b11d      	cbz	r5, 800693c <_printf_i+0x1a0>
 8006934:	2310      	movs	r3, #16
 8006936:	e7ab      	b.n	8006890 <_printf_i+0xf4>
 8006938:	4826      	ldr	r0, [pc, #152]	@ (80069d4 <_printf_i+0x238>)
 800693a:	e7e9      	b.n	8006910 <_printf_i+0x174>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	f023 0320 	bic.w	r3, r3, #32
 8006942:	6023      	str	r3, [r4, #0]
 8006944:	e7f6      	b.n	8006934 <_printf_i+0x198>
 8006946:	4616      	mov	r6, r2
 8006948:	e7bd      	b.n	80068c6 <_printf_i+0x12a>
 800694a:	6833      	ldr	r3, [r6, #0]
 800694c:	6825      	ldr	r5, [r4, #0]
 800694e:	1d18      	adds	r0, r3, #4
 8006950:	6961      	ldr	r1, [r4, #20]
 8006952:	6030      	str	r0, [r6, #0]
 8006954:	062e      	lsls	r6, r5, #24
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	d501      	bpl.n	800695e <_printf_i+0x1c2>
 800695a:	6019      	str	r1, [r3, #0]
 800695c:	e002      	b.n	8006964 <_printf_i+0x1c8>
 800695e:	0668      	lsls	r0, r5, #25
 8006960:	d5fb      	bpl.n	800695a <_printf_i+0x1be>
 8006962:	8019      	strh	r1, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	4616      	mov	r6, r2
 8006968:	6123      	str	r3, [r4, #16]
 800696a:	e7bc      	b.n	80068e6 <_printf_i+0x14a>
 800696c:	6833      	ldr	r3, [r6, #0]
 800696e:	2100      	movs	r1, #0
 8006970:	1d1a      	adds	r2, r3, #4
 8006972:	6032      	str	r2, [r6, #0]
 8006974:	681e      	ldr	r6, [r3, #0]
 8006976:	6862      	ldr	r2, [r4, #4]
 8006978:	4630      	mov	r0, r6
 800697a:	f000 fa40 	bl	8006dfe <memchr>
 800697e:	b108      	cbz	r0, 8006984 <_printf_i+0x1e8>
 8006980:	1b80      	subs	r0, r0, r6
 8006982:	6060      	str	r0, [r4, #4]
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	6123      	str	r3, [r4, #16]
 8006988:	2300      	movs	r3, #0
 800698a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800698e:	e7aa      	b.n	80068e6 <_printf_i+0x14a>
 8006990:	4632      	mov	r2, r6
 8006992:	4649      	mov	r1, r9
 8006994:	4640      	mov	r0, r8
 8006996:	6923      	ldr	r3, [r4, #16]
 8006998:	47d0      	blx	sl
 800699a:	3001      	adds	r0, #1
 800699c:	d0ad      	beq.n	80068fa <_printf_i+0x15e>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	079b      	lsls	r3, r3, #30
 80069a2:	d413      	bmi.n	80069cc <_printf_i+0x230>
 80069a4:	68e0      	ldr	r0, [r4, #12]
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	4298      	cmp	r0, r3
 80069aa:	bfb8      	it	lt
 80069ac:	4618      	movlt	r0, r3
 80069ae:	e7a6      	b.n	80068fe <_printf_i+0x162>
 80069b0:	2301      	movs	r3, #1
 80069b2:	4632      	mov	r2, r6
 80069b4:	4649      	mov	r1, r9
 80069b6:	4640      	mov	r0, r8
 80069b8:	47d0      	blx	sl
 80069ba:	3001      	adds	r0, #1
 80069bc:	d09d      	beq.n	80068fa <_printf_i+0x15e>
 80069be:	3501      	adds	r5, #1
 80069c0:	68e3      	ldr	r3, [r4, #12]
 80069c2:	9903      	ldr	r1, [sp, #12]
 80069c4:	1a5b      	subs	r3, r3, r1
 80069c6:	42ab      	cmp	r3, r5
 80069c8:	dcf2      	bgt.n	80069b0 <_printf_i+0x214>
 80069ca:	e7eb      	b.n	80069a4 <_printf_i+0x208>
 80069cc:	2500      	movs	r5, #0
 80069ce:	f104 0619 	add.w	r6, r4, #25
 80069d2:	e7f5      	b.n	80069c0 <_printf_i+0x224>
 80069d4:	080090f6 	.word	0x080090f6
 80069d8:	08009107 	.word	0x08009107

080069dc <std>:
 80069dc:	2300      	movs	r3, #0
 80069de:	b510      	push	{r4, lr}
 80069e0:	4604      	mov	r4, r0
 80069e2:	e9c0 3300 	strd	r3, r3, [r0]
 80069e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ea:	6083      	str	r3, [r0, #8]
 80069ec:	8181      	strh	r1, [r0, #12]
 80069ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80069f0:	81c2      	strh	r2, [r0, #14]
 80069f2:	6183      	str	r3, [r0, #24]
 80069f4:	4619      	mov	r1, r3
 80069f6:	2208      	movs	r2, #8
 80069f8:	305c      	adds	r0, #92	@ 0x5c
 80069fa:	f000 f92d 	bl	8006c58 <memset>
 80069fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <std+0x58>)
 8006a00:	6224      	str	r4, [r4, #32]
 8006a02:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a04:	4b0c      	ldr	r3, [pc, #48]	@ (8006a38 <std+0x5c>)
 8006a06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a08:	4b0c      	ldr	r3, [pc, #48]	@ (8006a3c <std+0x60>)
 8006a0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a40 <std+0x64>)
 8006a0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a10:	4b0c      	ldr	r3, [pc, #48]	@ (8006a44 <std+0x68>)
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d006      	beq.n	8006a24 <std+0x48>
 8006a16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a1a:	4294      	cmp	r4, r2
 8006a1c:	d002      	beq.n	8006a24 <std+0x48>
 8006a1e:	33d0      	adds	r3, #208	@ 0xd0
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d105      	bne.n	8006a30 <std+0x54>
 8006a24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	f000 b9e4 	b.w	8006df8 <__retarget_lock_init_recursive>
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	bf00      	nop
 8006a34:	08006b61 	.word	0x08006b61
 8006a38:	08006b83 	.word	0x08006b83
 8006a3c:	08006bbb 	.word	0x08006bbb
 8006a40:	08006bdf 	.word	0x08006bdf
 8006a44:	200005a0 	.word	0x200005a0

08006a48 <stdio_exit_handler>:
 8006a48:	4a02      	ldr	r2, [pc, #8]	@ (8006a54 <stdio_exit_handler+0xc>)
 8006a4a:	4903      	ldr	r1, [pc, #12]	@ (8006a58 <stdio_exit_handler+0x10>)
 8006a4c:	4803      	ldr	r0, [pc, #12]	@ (8006a5c <stdio_exit_handler+0x14>)
 8006a4e:	f000 b869 	b.w	8006b24 <_fwalk_sglue>
 8006a52:	bf00      	nop
 8006a54:	20000010 	.word	0x20000010
 8006a58:	08008619 	.word	0x08008619
 8006a5c:	20000020 	.word	0x20000020

08006a60 <cleanup_stdio>:
 8006a60:	6841      	ldr	r1, [r0, #4]
 8006a62:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <cleanup_stdio+0x34>)
 8006a64:	b510      	push	{r4, lr}
 8006a66:	4299      	cmp	r1, r3
 8006a68:	4604      	mov	r4, r0
 8006a6a:	d001      	beq.n	8006a70 <cleanup_stdio+0x10>
 8006a6c:	f001 fdd4 	bl	8008618 <_fflush_r>
 8006a70:	68a1      	ldr	r1, [r4, #8]
 8006a72:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <cleanup_stdio+0x38>)
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d002      	beq.n	8006a7e <cleanup_stdio+0x1e>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f001 fdcd 	bl	8008618 <_fflush_r>
 8006a7e:	68e1      	ldr	r1, [r4, #12]
 8006a80:	4b06      	ldr	r3, [pc, #24]	@ (8006a9c <cleanup_stdio+0x3c>)
 8006a82:	4299      	cmp	r1, r3
 8006a84:	d004      	beq.n	8006a90 <cleanup_stdio+0x30>
 8006a86:	4620      	mov	r0, r4
 8006a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a8c:	f001 bdc4 	b.w	8008618 <_fflush_r>
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	bf00      	nop
 8006a94:	200005a0 	.word	0x200005a0
 8006a98:	20000608 	.word	0x20000608
 8006a9c:	20000670 	.word	0x20000670

08006aa0 <global_stdio_init.part.0>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <global_stdio_init.part.0+0x30>)
 8006aa4:	4c0b      	ldr	r4, [pc, #44]	@ (8006ad4 <global_stdio_init.part.0+0x34>)
 8006aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <global_stdio_init.part.0+0x38>)
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	2104      	movs	r1, #4
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f7ff ff94 	bl	80069dc <std>
 8006ab4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ab8:	2201      	movs	r2, #1
 8006aba:	2109      	movs	r1, #9
 8006abc:	f7ff ff8e 	bl	80069dc <std>
 8006ac0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aca:	2112      	movs	r1, #18
 8006acc:	f7ff bf86 	b.w	80069dc <std>
 8006ad0:	200006d8 	.word	0x200006d8
 8006ad4:	200005a0 	.word	0x200005a0
 8006ad8:	08006a49 	.word	0x08006a49

08006adc <__sfp_lock_acquire>:
 8006adc:	4801      	ldr	r0, [pc, #4]	@ (8006ae4 <__sfp_lock_acquire+0x8>)
 8006ade:	f000 b98c 	b.w	8006dfa <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	200006e1 	.word	0x200006e1

08006ae8 <__sfp_lock_release>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__sfp_lock_release+0x8>)
 8006aea:	f000 b987 	b.w	8006dfc <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	200006e1 	.word	0x200006e1

08006af4 <__sinit>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	4604      	mov	r4, r0
 8006af8:	f7ff fff0 	bl	8006adc <__sfp_lock_acquire>
 8006afc:	6a23      	ldr	r3, [r4, #32]
 8006afe:	b11b      	cbz	r3, 8006b08 <__sinit+0x14>
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	f7ff bff0 	b.w	8006ae8 <__sfp_lock_release>
 8006b08:	4b04      	ldr	r3, [pc, #16]	@ (8006b1c <__sinit+0x28>)
 8006b0a:	6223      	str	r3, [r4, #32]
 8006b0c:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <__sinit+0x2c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1f5      	bne.n	8006b00 <__sinit+0xc>
 8006b14:	f7ff ffc4 	bl	8006aa0 <global_stdio_init.part.0>
 8006b18:	e7f2      	b.n	8006b00 <__sinit+0xc>
 8006b1a:	bf00      	nop
 8006b1c:	08006a61 	.word	0x08006a61
 8006b20:	200006d8 	.word	0x200006d8

08006b24 <_fwalk_sglue>:
 8006b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b28:	4607      	mov	r7, r0
 8006b2a:	4688      	mov	r8, r1
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b34:	f1b9 0901 	subs.w	r9, r9, #1
 8006b38:	d505      	bpl.n	8006b46 <_fwalk_sglue+0x22>
 8006b3a:	6824      	ldr	r4, [r4, #0]
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	d1f7      	bne.n	8006b30 <_fwalk_sglue+0xc>
 8006b40:	4630      	mov	r0, r6
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	89ab      	ldrh	r3, [r5, #12]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d907      	bls.n	8006b5c <_fwalk_sglue+0x38>
 8006b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b50:	3301      	adds	r3, #1
 8006b52:	d003      	beq.n	8006b5c <_fwalk_sglue+0x38>
 8006b54:	4629      	mov	r1, r5
 8006b56:	4638      	mov	r0, r7
 8006b58:	47c0      	blx	r8
 8006b5a:	4306      	orrs	r6, r0
 8006b5c:	3568      	adds	r5, #104	@ 0x68
 8006b5e:	e7e9      	b.n	8006b34 <_fwalk_sglue+0x10>

08006b60 <__sread>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	460c      	mov	r4, r1
 8006b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b68:	f000 f8d4 	bl	8006d14 <_read_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	bfab      	itete	ge
 8006b70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b72:	89a3      	ldrhlt	r3, [r4, #12]
 8006b74:	181b      	addge	r3, r3, r0
 8006b76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b7a:	bfac      	ite	ge
 8006b7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b7e:	81a3      	strhlt	r3, [r4, #12]
 8006b80:	bd10      	pop	{r4, pc}

08006b82 <__swrite>:
 8006b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b86:	461f      	mov	r7, r3
 8006b88:	898b      	ldrh	r3, [r1, #12]
 8006b8a:	4605      	mov	r5, r0
 8006b8c:	05db      	lsls	r3, r3, #23
 8006b8e:	460c      	mov	r4, r1
 8006b90:	4616      	mov	r6, r2
 8006b92:	d505      	bpl.n	8006ba0 <__swrite+0x1e>
 8006b94:	2302      	movs	r3, #2
 8006b96:	2200      	movs	r2, #0
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	f000 f8a8 	bl	8006cf0 <_lseek_r>
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	4632      	mov	r2, r6
 8006ba4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	4628      	mov	r0, r5
 8006bac:	463b      	mov	r3, r7
 8006bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	f000 b8e3 	b.w	8006d80 <_write_r>

08006bba <__sseek>:
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc2:	f000 f895 	bl	8006cf0 <_lseek_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	bf15      	itete	ne
 8006bcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bd6:	81a3      	strheq	r3, [r4, #12]
 8006bd8:	bf18      	it	ne
 8006bda:	81a3      	strhne	r3, [r4, #12]
 8006bdc:	bd10      	pop	{r4, pc}

08006bde <__sclose>:
 8006bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be2:	f000 b875 	b.w	8006cd0 <_close_r>

08006be6 <_vsniprintf_r>:
 8006be6:	b530      	push	{r4, r5, lr}
 8006be8:	4614      	mov	r4, r2
 8006bea:	2c00      	cmp	r4, #0
 8006bec:	4605      	mov	r5, r0
 8006bee:	461a      	mov	r2, r3
 8006bf0:	b09b      	sub	sp, #108	@ 0x6c
 8006bf2:	da05      	bge.n	8006c00 <_vsniprintf_r+0x1a>
 8006bf4:	238b      	movs	r3, #139	@ 0x8b
 8006bf6:	6003      	str	r3, [r0, #0]
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	b01b      	add	sp, #108	@ 0x6c
 8006bfe:	bd30      	pop	{r4, r5, pc}
 8006c00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c04:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006c08:	bf0c      	ite	eq
 8006c0a:	4623      	moveq	r3, r4
 8006c0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c10:	9302      	str	r3, [sp, #8]
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c18:	9100      	str	r1, [sp, #0]
 8006c1a:	9104      	str	r1, [sp, #16]
 8006c1c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006c20:	4669      	mov	r1, sp
 8006c22:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006c24:	f001 fb7c 	bl	8008320 <_svfiprintf_r>
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	bfbc      	itt	lt
 8006c2c:	238b      	movlt	r3, #139	@ 0x8b
 8006c2e:	602b      	strlt	r3, [r5, #0]
 8006c30:	2c00      	cmp	r4, #0
 8006c32:	d0e3      	beq.n	8006bfc <_vsniprintf_r+0x16>
 8006c34:	2200      	movs	r2, #0
 8006c36:	9b00      	ldr	r3, [sp, #0]
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e7df      	b.n	8006bfc <_vsniprintf_r+0x16>

08006c3c <vsniprintf>:
 8006c3c:	b507      	push	{r0, r1, r2, lr}
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	460a      	mov	r2, r1
 8006c44:	4601      	mov	r1, r0
 8006c46:	4803      	ldr	r0, [pc, #12]	@ (8006c54 <vsniprintf+0x18>)
 8006c48:	6800      	ldr	r0, [r0, #0]
 8006c4a:	f7ff ffcc 	bl	8006be6 <_vsniprintf_r>
 8006c4e:	b003      	add	sp, #12
 8006c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c54:	2000001c 	.word	0x2000001c

08006c58 <memset>:
 8006c58:	4603      	mov	r3, r0
 8006c5a:	4402      	add	r2, r0
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <memset+0xa>
 8006c60:	4770      	bx	lr
 8006c62:	f803 1b01 	strb.w	r1, [r3], #1
 8006c66:	e7f9      	b.n	8006c5c <memset+0x4>

08006c68 <_raise_r>:
 8006c68:	291f      	cmp	r1, #31
 8006c6a:	b538      	push	{r3, r4, r5, lr}
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	d904      	bls.n	8006c7c <_raise_r+0x14>
 8006c72:	2316      	movs	r3, #22
 8006c74:	6003      	str	r3, [r0, #0]
 8006c76:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006c7e:	b112      	cbz	r2, 8006c86 <_raise_r+0x1e>
 8006c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c84:	b94b      	cbnz	r3, 8006c9a <_raise_r+0x32>
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f868 	bl	8006d5c <_getpid_r>
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	4601      	mov	r1, r0
 8006c90:	4628      	mov	r0, r5
 8006c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c96:	f000 b84f 	b.w	8006d38 <_kill_r>
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d00a      	beq.n	8006cb4 <_raise_r+0x4c>
 8006c9e:	1c59      	adds	r1, r3, #1
 8006ca0:	d103      	bne.n	8006caa <_raise_r+0x42>
 8006ca2:	2316      	movs	r3, #22
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	e7e7      	b.n	8006c7a <_raise_r+0x12>
 8006caa:	2100      	movs	r1, #0
 8006cac:	4620      	mov	r0, r4
 8006cae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006cb2:	4798      	blx	r3
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	e7e0      	b.n	8006c7a <_raise_r+0x12>

08006cb8 <raise>:
 8006cb8:	4b02      	ldr	r3, [pc, #8]	@ (8006cc4 <raise+0xc>)
 8006cba:	4601      	mov	r1, r0
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	f7ff bfd3 	b.w	8006c68 <_raise_r>
 8006cc2:	bf00      	nop
 8006cc4:	2000001c 	.word	0x2000001c

08006cc8 <_localeconv_r>:
 8006cc8:	4800      	ldr	r0, [pc, #0]	@ (8006ccc <_localeconv_r+0x4>)
 8006cca:	4770      	bx	lr
 8006ccc:	2000015c 	.word	0x2000015c

08006cd0 <_close_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4d05      	ldr	r5, [pc, #20]	@ (8006cec <_close_r+0x1c>)
 8006cd6:	4604      	mov	r4, r0
 8006cd8:	4608      	mov	r0, r1
 8006cda:	602b      	str	r3, [r5, #0]
 8006cdc:	f7fc fc6b 	bl	80035b6 <_close>
 8006ce0:	1c43      	adds	r3, r0, #1
 8006ce2:	d102      	bne.n	8006cea <_close_r+0x1a>
 8006ce4:	682b      	ldr	r3, [r5, #0]
 8006ce6:	b103      	cbz	r3, 8006cea <_close_r+0x1a>
 8006ce8:	6023      	str	r3, [r4, #0]
 8006cea:	bd38      	pop	{r3, r4, r5, pc}
 8006cec:	200006dc 	.word	0x200006dc

08006cf0 <_lseek_r>:
 8006cf0:	b538      	push	{r3, r4, r5, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	4d05      	ldr	r5, [pc, #20]	@ (8006d10 <_lseek_r+0x20>)
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	f7fc fc7d 	bl	80035fe <_lseek>
 8006d04:	1c43      	adds	r3, r0, #1
 8006d06:	d102      	bne.n	8006d0e <_lseek_r+0x1e>
 8006d08:	682b      	ldr	r3, [r5, #0]
 8006d0a:	b103      	cbz	r3, 8006d0e <_lseek_r+0x1e>
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	200006dc 	.word	0x200006dc

08006d14 <_read_r>:
 8006d14:	b538      	push	{r3, r4, r5, lr}
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	4d05      	ldr	r5, [pc, #20]	@ (8006d34 <_read_r+0x20>)
 8006d20:	602a      	str	r2, [r5, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f7fc fc0e 	bl	8003544 <_read>
 8006d28:	1c43      	adds	r3, r0, #1
 8006d2a:	d102      	bne.n	8006d32 <_read_r+0x1e>
 8006d2c:	682b      	ldr	r3, [r5, #0]
 8006d2e:	b103      	cbz	r3, 8006d32 <_read_r+0x1e>
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	bd38      	pop	{r3, r4, r5, pc}
 8006d34:	200006dc 	.word	0x200006dc

08006d38 <_kill_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	4d06      	ldr	r5, [pc, #24]	@ (8006d58 <_kill_r+0x20>)
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	4611      	mov	r1, r2
 8006d44:	602b      	str	r3, [r5, #0]
 8006d46:	f7fc fbe2 	bl	800350e <_kill>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	d102      	bne.n	8006d54 <_kill_r+0x1c>
 8006d4e:	682b      	ldr	r3, [r5, #0]
 8006d50:	b103      	cbz	r3, 8006d54 <_kill_r+0x1c>
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	bd38      	pop	{r3, r4, r5, pc}
 8006d56:	bf00      	nop
 8006d58:	200006dc 	.word	0x200006dc

08006d5c <_getpid_r>:
 8006d5c:	f7fc bbd0 	b.w	8003500 <_getpid>

08006d60 <_sbrk_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	2300      	movs	r3, #0
 8006d64:	4d05      	ldr	r5, [pc, #20]	@ (8006d7c <_sbrk_r+0x1c>)
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7fc fc54 	bl	8003618 <_sbrk>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_sbrk_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_sbrk_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	200006dc 	.word	0x200006dc

08006d80 <_write_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	4611      	mov	r1, r2
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4d05      	ldr	r5, [pc, #20]	@ (8006da0 <_write_r+0x20>)
 8006d8c:	602a      	str	r2, [r5, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f7fc fbf5 	bl	800357e <_write>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_write_r+0x1e>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_write_r+0x1e>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	200006dc 	.word	0x200006dc

08006da4 <__errno>:
 8006da4:	4b01      	ldr	r3, [pc, #4]	@ (8006dac <__errno+0x8>)
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	2000001c 	.word	0x2000001c

08006db0 <__libc_init_array>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	2600      	movs	r6, #0
 8006db4:	4d0c      	ldr	r5, [pc, #48]	@ (8006de8 <__libc_init_array+0x38>)
 8006db6:	4c0d      	ldr	r4, [pc, #52]	@ (8006dec <__libc_init_array+0x3c>)
 8006db8:	1b64      	subs	r4, r4, r5
 8006dba:	10a4      	asrs	r4, r4, #2
 8006dbc:	42a6      	cmp	r6, r4
 8006dbe:	d109      	bne.n	8006dd4 <__libc_init_array+0x24>
 8006dc0:	f001 ff5e 	bl	8008c80 <_init>
 8006dc4:	2600      	movs	r6, #0
 8006dc6:	4d0a      	ldr	r5, [pc, #40]	@ (8006df0 <__libc_init_array+0x40>)
 8006dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8006df4 <__libc_init_array+0x44>)
 8006dca:	1b64      	subs	r4, r4, r5
 8006dcc:	10a4      	asrs	r4, r4, #2
 8006dce:	42a6      	cmp	r6, r4
 8006dd0:	d105      	bne.n	8006dde <__libc_init_array+0x2e>
 8006dd2:	bd70      	pop	{r4, r5, r6, pc}
 8006dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd8:	4798      	blx	r3
 8006dda:	3601      	adds	r6, #1
 8006ddc:	e7ee      	b.n	8006dbc <__libc_init_array+0xc>
 8006dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de2:	4798      	blx	r3
 8006de4:	3601      	adds	r6, #1
 8006de6:	e7f2      	b.n	8006dce <__libc_init_array+0x1e>
 8006de8:	08009460 	.word	0x08009460
 8006dec:	08009460 	.word	0x08009460
 8006df0:	08009460 	.word	0x08009460
 8006df4:	0800946c 	.word	0x0800946c

08006df8 <__retarget_lock_init_recursive>:
 8006df8:	4770      	bx	lr

08006dfa <__retarget_lock_acquire_recursive>:
 8006dfa:	4770      	bx	lr

08006dfc <__retarget_lock_release_recursive>:
 8006dfc:	4770      	bx	lr

08006dfe <memchr>:
 8006dfe:	4603      	mov	r3, r0
 8006e00:	b510      	push	{r4, lr}
 8006e02:	b2c9      	uxtb	r1, r1
 8006e04:	4402      	add	r2, r0
 8006e06:	4293      	cmp	r3, r2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	d101      	bne.n	8006e10 <memchr+0x12>
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	e003      	b.n	8006e18 <memchr+0x1a>
 8006e10:	7804      	ldrb	r4, [r0, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	428c      	cmp	r4, r1
 8006e16:	d1f6      	bne.n	8006e06 <memchr+0x8>
 8006e18:	bd10      	pop	{r4, pc}

08006e1a <memcpy>:
 8006e1a:	440a      	add	r2, r1
 8006e1c:	4291      	cmp	r1, r2
 8006e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e22:	d100      	bne.n	8006e26 <memcpy+0xc>
 8006e24:	4770      	bx	lr
 8006e26:	b510      	push	{r4, lr}
 8006e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2c:	4291      	cmp	r1, r2
 8006e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e32:	d1f9      	bne.n	8006e28 <memcpy+0xe>
 8006e34:	bd10      	pop	{r4, pc}

08006e36 <quorem>:
 8006e36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3a:	6903      	ldr	r3, [r0, #16]
 8006e3c:	690c      	ldr	r4, [r1, #16]
 8006e3e:	4607      	mov	r7, r0
 8006e40:	42a3      	cmp	r3, r4
 8006e42:	db7e      	blt.n	8006f42 <quorem+0x10c>
 8006e44:	3c01      	subs	r4, #1
 8006e46:	00a3      	lsls	r3, r4, #2
 8006e48:	f100 0514 	add.w	r5, r0, #20
 8006e4c:	f101 0814 	add.w	r8, r1, #20
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e60:	3301      	adds	r3, #1
 8006e62:	429a      	cmp	r2, r3
 8006e64:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e6c:	d32e      	bcc.n	8006ecc <quorem+0x96>
 8006e6e:	f04f 0a00 	mov.w	sl, #0
 8006e72:	46c4      	mov	ip, r8
 8006e74:	46ae      	mov	lr, r5
 8006e76:	46d3      	mov	fp, sl
 8006e78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e7c:	b298      	uxth	r0, r3
 8006e7e:	fb06 a000 	mla	r0, r6, r0, sl
 8006e82:	0c1b      	lsrs	r3, r3, #16
 8006e84:	0c02      	lsrs	r2, r0, #16
 8006e86:	fb06 2303 	mla	r3, r6, r3, r2
 8006e8a:	f8de 2000 	ldr.w	r2, [lr]
 8006e8e:	b280      	uxth	r0, r0
 8006e90:	b292      	uxth	r2, r2
 8006e92:	1a12      	subs	r2, r2, r0
 8006e94:	445a      	add	r2, fp
 8006e96:	f8de 0000 	ldr.w	r0, [lr]
 8006e9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ea4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ea8:	b292      	uxth	r2, r2
 8006eaa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006eae:	45e1      	cmp	r9, ip
 8006eb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006eb4:	f84e 2b04 	str.w	r2, [lr], #4
 8006eb8:	d2de      	bcs.n	8006e78 <quorem+0x42>
 8006eba:	9b00      	ldr	r3, [sp, #0]
 8006ebc:	58eb      	ldr	r3, [r5, r3]
 8006ebe:	b92b      	cbnz	r3, 8006ecc <quorem+0x96>
 8006ec0:	9b01      	ldr	r3, [sp, #4]
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	429d      	cmp	r5, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	d32f      	bcc.n	8006f2a <quorem+0xf4>
 8006eca:	613c      	str	r4, [r7, #16]
 8006ecc:	4638      	mov	r0, r7
 8006ece:	f001 f8c3 	bl	8008058 <__mcmp>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	db25      	blt.n	8006f22 <quorem+0xec>
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	2000      	movs	r0, #0
 8006eda:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ede:	f8d1 c000 	ldr.w	ip, [r1]
 8006ee2:	fa1f fe82 	uxth.w	lr, r2
 8006ee6:	fa1f f38c 	uxth.w	r3, ip
 8006eea:	eba3 030e 	sub.w	r3, r3, lr
 8006eee:	4403      	add	r3, r0
 8006ef0:	0c12      	lsrs	r2, r2, #16
 8006ef2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ef6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f00:	45c1      	cmp	r9, r8
 8006f02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f06:	f841 3b04 	str.w	r3, [r1], #4
 8006f0a:	d2e6      	bcs.n	8006eda <quorem+0xa4>
 8006f0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f14:	b922      	cbnz	r2, 8006f20 <quorem+0xea>
 8006f16:	3b04      	subs	r3, #4
 8006f18:	429d      	cmp	r5, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	d30b      	bcc.n	8006f36 <quorem+0x100>
 8006f1e:	613c      	str	r4, [r7, #16]
 8006f20:	3601      	adds	r6, #1
 8006f22:	4630      	mov	r0, r6
 8006f24:	b003      	add	sp, #12
 8006f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	3b04      	subs	r3, #4
 8006f2e:	2a00      	cmp	r2, #0
 8006f30:	d1cb      	bne.n	8006eca <quorem+0x94>
 8006f32:	3c01      	subs	r4, #1
 8006f34:	e7c6      	b.n	8006ec4 <quorem+0x8e>
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	3b04      	subs	r3, #4
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	d1ef      	bne.n	8006f1e <quorem+0xe8>
 8006f3e:	3c01      	subs	r4, #1
 8006f40:	e7ea      	b.n	8006f18 <quorem+0xe2>
 8006f42:	2000      	movs	r0, #0
 8006f44:	e7ee      	b.n	8006f24 <quorem+0xee>
	...

08006f48 <_dtoa_r>:
 8006f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	461d      	mov	r5, r3
 8006f50:	69c7      	ldr	r7, [r0, #28]
 8006f52:	b097      	sub	sp, #92	@ 0x5c
 8006f54:	4683      	mov	fp, r0
 8006f56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006f5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006f5c:	b97f      	cbnz	r7, 8006f7e <_dtoa_r+0x36>
 8006f5e:	2010      	movs	r0, #16
 8006f60:	f7ff f822 	bl	8005fa8 <malloc>
 8006f64:	4602      	mov	r2, r0
 8006f66:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f6a:	b920      	cbnz	r0, 8006f76 <_dtoa_r+0x2e>
 8006f6c:	21ef      	movs	r1, #239	@ 0xef
 8006f6e:	4ba8      	ldr	r3, [pc, #672]	@ (8007210 <_dtoa_r+0x2c8>)
 8006f70:	48a8      	ldr	r0, [pc, #672]	@ (8007214 <_dtoa_r+0x2cc>)
 8006f72:	f001 fb93 	bl	800869c <__assert_func>
 8006f76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f7a:	6007      	str	r7, [r0, #0]
 8006f7c:	60c7      	str	r7, [r0, #12]
 8006f7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	b159      	cbz	r1, 8006f9e <_dtoa_r+0x56>
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	4093      	lsls	r3, r2
 8006f8c:	604a      	str	r2, [r1, #4]
 8006f8e:	608b      	str	r3, [r1, #8]
 8006f90:	4658      	mov	r0, fp
 8006f92:	f000 fe29 	bl	8007be8 <_Bfree>
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	1e2b      	subs	r3, r5, #0
 8006fa0:	bfaf      	iteee	ge
 8006fa2:	2300      	movge	r3, #0
 8006fa4:	2201      	movlt	r2, #1
 8006fa6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006faa:	9303      	strlt	r3, [sp, #12]
 8006fac:	bfa8      	it	ge
 8006fae:	6033      	strge	r3, [r6, #0]
 8006fb0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006fb4:	4b98      	ldr	r3, [pc, #608]	@ (8007218 <_dtoa_r+0x2d0>)
 8006fb6:	bfb8      	it	lt
 8006fb8:	6032      	strlt	r2, [r6, #0]
 8006fba:	ea33 0308 	bics.w	r3, r3, r8
 8006fbe:	d112      	bne.n	8006fe6 <_dtoa_r+0x9e>
 8006fc0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006fc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006fcc:	4323      	orrs	r3, r4
 8006fce:	f000 8550 	beq.w	8007a72 <_dtoa_r+0xb2a>
 8006fd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006fd4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800721c <_dtoa_r+0x2d4>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 8552 	beq.w	8007a82 <_dtoa_r+0xb3a>
 8006fde:	f10a 0303 	add.w	r3, sl, #3
 8006fe2:	f000 bd4c 	b.w	8007a7e <_dtoa_r+0xb36>
 8006fe6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006fee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f7f9 fd43 	bl	8000a80 <__aeabi_dcmpeq>
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	b158      	cbz	r0, 8007016 <_dtoa_r+0xce>
 8006ffe:	2301      	movs	r3, #1
 8007000:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007006:	b113      	cbz	r3, 800700e <_dtoa_r+0xc6>
 8007008:	4b85      	ldr	r3, [pc, #532]	@ (8007220 <_dtoa_r+0x2d8>)
 800700a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007224 <_dtoa_r+0x2dc>
 8007012:	f000 bd36 	b.w	8007a82 <_dtoa_r+0xb3a>
 8007016:	ab14      	add	r3, sp, #80	@ 0x50
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	ab15      	add	r3, sp, #84	@ 0x54
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	4658      	mov	r0, fp
 8007020:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007024:	f001 f8c8 	bl	80081b8 <__d2b>
 8007028:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800702c:	4681      	mov	r9, r0
 800702e:	2e00      	cmp	r6, #0
 8007030:	d077      	beq.n	8007122 <_dtoa_r+0x1da>
 8007032:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007038:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800703c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007040:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007044:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007048:	9712      	str	r7, [sp, #72]	@ 0x48
 800704a:	4619      	mov	r1, r3
 800704c:	2200      	movs	r2, #0
 800704e:	4b76      	ldr	r3, [pc, #472]	@ (8007228 <_dtoa_r+0x2e0>)
 8007050:	f7f9 f8f6 	bl	8000240 <__aeabi_dsub>
 8007054:	a368      	add	r3, pc, #416	@ (adr r3, 80071f8 <_dtoa_r+0x2b0>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f7f9 faa9 	bl	80005b0 <__aeabi_dmul>
 800705e:	a368      	add	r3, pc, #416	@ (adr r3, 8007200 <_dtoa_r+0x2b8>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 f8ee 	bl	8000244 <__adddf3>
 8007068:	4604      	mov	r4, r0
 800706a:	4630      	mov	r0, r6
 800706c:	460d      	mov	r5, r1
 800706e:	f7f9 fa35 	bl	80004dc <__aeabi_i2d>
 8007072:	a365      	add	r3, pc, #404	@ (adr r3, 8007208 <_dtoa_r+0x2c0>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f7f9 fa9a 	bl	80005b0 <__aeabi_dmul>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4620      	mov	r0, r4
 8007082:	4629      	mov	r1, r5
 8007084:	f7f9 f8de 	bl	8000244 <__adddf3>
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	f7f9 fd40 	bl	8000b10 <__aeabi_d2iz>
 8007090:	2200      	movs	r2, #0
 8007092:	4607      	mov	r7, r0
 8007094:	2300      	movs	r3, #0
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 fcfb 	bl	8000a94 <__aeabi_dcmplt>
 800709e:	b140      	cbz	r0, 80070b2 <_dtoa_r+0x16a>
 80070a0:	4638      	mov	r0, r7
 80070a2:	f7f9 fa1b 	bl	80004dc <__aeabi_i2d>
 80070a6:	4622      	mov	r2, r4
 80070a8:	462b      	mov	r3, r5
 80070aa:	f7f9 fce9 	bl	8000a80 <__aeabi_dcmpeq>
 80070ae:	b900      	cbnz	r0, 80070b2 <_dtoa_r+0x16a>
 80070b0:	3f01      	subs	r7, #1
 80070b2:	2f16      	cmp	r7, #22
 80070b4:	d853      	bhi.n	800715e <_dtoa_r+0x216>
 80070b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ba:	4b5c      	ldr	r3, [pc, #368]	@ (800722c <_dtoa_r+0x2e4>)
 80070bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f7f9 fce6 	bl	8000a94 <__aeabi_dcmplt>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d04a      	beq.n	8007162 <_dtoa_r+0x21a>
 80070cc:	2300      	movs	r3, #0
 80070ce:	3f01      	subs	r7, #1
 80070d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070d2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070d4:	1b9b      	subs	r3, r3, r6
 80070d6:	1e5a      	subs	r2, r3, #1
 80070d8:	bf46      	itte	mi
 80070da:	f1c3 0801 	rsbmi	r8, r3, #1
 80070de:	2300      	movmi	r3, #0
 80070e0:	f04f 0800 	movpl.w	r8, #0
 80070e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070e6:	bf48      	it	mi
 80070e8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	db3b      	blt.n	8007166 <_dtoa_r+0x21e>
 80070ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f0:	970e      	str	r7, [sp, #56]	@ 0x38
 80070f2:	443b      	add	r3, r7
 80070f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070f6:	2300      	movs	r3, #0
 80070f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80070fc:	2b09      	cmp	r3, #9
 80070fe:	d866      	bhi.n	80071ce <_dtoa_r+0x286>
 8007100:	2b05      	cmp	r3, #5
 8007102:	bfc4      	itt	gt
 8007104:	3b04      	subgt	r3, #4
 8007106:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007108:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800710a:	bfc8      	it	gt
 800710c:	2400      	movgt	r4, #0
 800710e:	f1a3 0302 	sub.w	r3, r3, #2
 8007112:	bfd8      	it	le
 8007114:	2401      	movle	r4, #1
 8007116:	2b03      	cmp	r3, #3
 8007118:	d864      	bhi.n	80071e4 <_dtoa_r+0x29c>
 800711a:	e8df f003 	tbb	[pc, r3]
 800711e:	382b      	.short	0x382b
 8007120:	5636      	.short	0x5636
 8007122:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007126:	441e      	add	r6, r3
 8007128:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800712c:	2b20      	cmp	r3, #32
 800712e:	bfc1      	itttt	gt
 8007130:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007134:	fa08 f803 	lslgt.w	r8, r8, r3
 8007138:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800713c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007140:	bfd6      	itet	le
 8007142:	f1c3 0320 	rsble	r3, r3, #32
 8007146:	ea48 0003 	orrgt.w	r0, r8, r3
 800714a:	fa04 f003 	lslle.w	r0, r4, r3
 800714e:	f7f9 f9b5 	bl	80004bc <__aeabi_ui2d>
 8007152:	2201      	movs	r2, #1
 8007154:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007158:	3e01      	subs	r6, #1
 800715a:	9212      	str	r2, [sp, #72]	@ 0x48
 800715c:	e775      	b.n	800704a <_dtoa_r+0x102>
 800715e:	2301      	movs	r3, #1
 8007160:	e7b6      	b.n	80070d0 <_dtoa_r+0x188>
 8007162:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007164:	e7b5      	b.n	80070d2 <_dtoa_r+0x18a>
 8007166:	427b      	negs	r3, r7
 8007168:	930a      	str	r3, [sp, #40]	@ 0x28
 800716a:	2300      	movs	r3, #0
 800716c:	eba8 0807 	sub.w	r8, r8, r7
 8007170:	930e      	str	r3, [sp, #56]	@ 0x38
 8007172:	e7c2      	b.n	80070fa <_dtoa_r+0x1b2>
 8007174:	2300      	movs	r3, #0
 8007176:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007178:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800717a:	2b00      	cmp	r3, #0
 800717c:	dc35      	bgt.n	80071ea <_dtoa_r+0x2a2>
 800717e:	2301      	movs	r3, #1
 8007180:	461a      	mov	r2, r3
 8007182:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007186:	9221      	str	r2, [sp, #132]	@ 0x84
 8007188:	e00b      	b.n	80071a2 <_dtoa_r+0x25a>
 800718a:	2301      	movs	r3, #1
 800718c:	e7f3      	b.n	8007176 <_dtoa_r+0x22e>
 800718e:	2300      	movs	r3, #0
 8007190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007192:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	9308      	str	r3, [sp, #32]
 8007198:	3301      	adds	r3, #1
 800719a:	2b01      	cmp	r3, #1
 800719c:	9307      	str	r3, [sp, #28]
 800719e:	bfb8      	it	lt
 80071a0:	2301      	movlt	r3, #1
 80071a2:	2100      	movs	r1, #0
 80071a4:	2204      	movs	r2, #4
 80071a6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80071aa:	f102 0514 	add.w	r5, r2, #20
 80071ae:	429d      	cmp	r5, r3
 80071b0:	d91f      	bls.n	80071f2 <_dtoa_r+0x2aa>
 80071b2:	6041      	str	r1, [r0, #4]
 80071b4:	4658      	mov	r0, fp
 80071b6:	f000 fcd7 	bl	8007b68 <_Balloc>
 80071ba:	4682      	mov	sl, r0
 80071bc:	2800      	cmp	r0, #0
 80071be:	d139      	bne.n	8007234 <_dtoa_r+0x2ec>
 80071c0:	4602      	mov	r2, r0
 80071c2:	f240 11af 	movw	r1, #431	@ 0x1af
 80071c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007230 <_dtoa_r+0x2e8>)
 80071c8:	e6d2      	b.n	8006f70 <_dtoa_r+0x28>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e7e0      	b.n	8007190 <_dtoa_r+0x248>
 80071ce:	2401      	movs	r4, #1
 80071d0:	2300      	movs	r3, #0
 80071d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295
 80071da:	2200      	movs	r2, #0
 80071dc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80071e0:	2312      	movs	r3, #18
 80071e2:	e7d0      	b.n	8007186 <_dtoa_r+0x23e>
 80071e4:	2301      	movs	r3, #1
 80071e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071e8:	e7f5      	b.n	80071d6 <_dtoa_r+0x28e>
 80071ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80071f0:	e7d7      	b.n	80071a2 <_dtoa_r+0x25a>
 80071f2:	3101      	adds	r1, #1
 80071f4:	0052      	lsls	r2, r2, #1
 80071f6:	e7d8      	b.n	80071aa <_dtoa_r+0x262>
 80071f8:	636f4361 	.word	0x636f4361
 80071fc:	3fd287a7 	.word	0x3fd287a7
 8007200:	8b60c8b3 	.word	0x8b60c8b3
 8007204:	3fc68a28 	.word	0x3fc68a28
 8007208:	509f79fb 	.word	0x509f79fb
 800720c:	3fd34413 	.word	0x3fd34413
 8007210:	08009125 	.word	0x08009125
 8007214:	0800913c 	.word	0x0800913c
 8007218:	7ff00000 	.word	0x7ff00000
 800721c:	08009121 	.word	0x08009121
 8007220:	080090f5 	.word	0x080090f5
 8007224:	080090f4 	.word	0x080090f4
 8007228:	3ff80000 	.word	0x3ff80000
 800722c:	08009238 	.word	0x08009238
 8007230:	08009194 	.word	0x08009194
 8007234:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007238:	6018      	str	r0, [r3, #0]
 800723a:	9b07      	ldr	r3, [sp, #28]
 800723c:	2b0e      	cmp	r3, #14
 800723e:	f200 80a4 	bhi.w	800738a <_dtoa_r+0x442>
 8007242:	2c00      	cmp	r4, #0
 8007244:	f000 80a1 	beq.w	800738a <_dtoa_r+0x442>
 8007248:	2f00      	cmp	r7, #0
 800724a:	dd33      	ble.n	80072b4 <_dtoa_r+0x36c>
 800724c:	4b86      	ldr	r3, [pc, #536]	@ (8007468 <_dtoa_r+0x520>)
 800724e:	f007 020f 	and.w	r2, r7, #15
 8007252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007256:	05f8      	lsls	r0, r7, #23
 8007258:	e9d3 3400 	ldrd	r3, r4, [r3]
 800725c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007260:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007264:	d516      	bpl.n	8007294 <_dtoa_r+0x34c>
 8007266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800726a:	4b80      	ldr	r3, [pc, #512]	@ (800746c <_dtoa_r+0x524>)
 800726c:	2603      	movs	r6, #3
 800726e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007272:	f7f9 fac7 	bl	8000804 <__aeabi_ddiv>
 8007276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800727a:	f004 040f 	and.w	r4, r4, #15
 800727e:	4d7b      	ldr	r5, [pc, #492]	@ (800746c <_dtoa_r+0x524>)
 8007280:	b954      	cbnz	r4, 8007298 <_dtoa_r+0x350>
 8007282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800728a:	f7f9 fabb 	bl	8000804 <__aeabi_ddiv>
 800728e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007292:	e028      	b.n	80072e6 <_dtoa_r+0x39e>
 8007294:	2602      	movs	r6, #2
 8007296:	e7f2      	b.n	800727e <_dtoa_r+0x336>
 8007298:	07e1      	lsls	r1, r4, #31
 800729a:	d508      	bpl.n	80072ae <_dtoa_r+0x366>
 800729c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072a4:	f7f9 f984 	bl	80005b0 <__aeabi_dmul>
 80072a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072ac:	3601      	adds	r6, #1
 80072ae:	1064      	asrs	r4, r4, #1
 80072b0:	3508      	adds	r5, #8
 80072b2:	e7e5      	b.n	8007280 <_dtoa_r+0x338>
 80072b4:	f000 80d2 	beq.w	800745c <_dtoa_r+0x514>
 80072b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072bc:	427c      	negs	r4, r7
 80072be:	4b6a      	ldr	r3, [pc, #424]	@ (8007468 <_dtoa_r+0x520>)
 80072c0:	f004 020f 	and.w	r2, r4, #15
 80072c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072cc:	f7f9 f970 	bl	80005b0 <__aeabi_dmul>
 80072d0:	2602      	movs	r6, #2
 80072d2:	2300      	movs	r3, #0
 80072d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072d8:	4d64      	ldr	r5, [pc, #400]	@ (800746c <_dtoa_r+0x524>)
 80072da:	1124      	asrs	r4, r4, #4
 80072dc:	2c00      	cmp	r4, #0
 80072de:	f040 80b2 	bne.w	8007446 <_dtoa_r+0x4fe>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1d3      	bne.n	800728e <_dtoa_r+0x346>
 80072e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80b7 	beq.w	8007460 <_dtoa_r+0x518>
 80072f2:	2200      	movs	r2, #0
 80072f4:	4620      	mov	r0, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	4b5d      	ldr	r3, [pc, #372]	@ (8007470 <_dtoa_r+0x528>)
 80072fa:	f7f9 fbcb 	bl	8000a94 <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f000 80ae 	beq.w	8007460 <_dtoa_r+0x518>
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80aa 	beq.w	8007460 <_dtoa_r+0x518>
 800730c:	9b08      	ldr	r3, [sp, #32]
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd37      	ble.n	8007382 <_dtoa_r+0x43a>
 8007312:	1e7b      	subs	r3, r7, #1
 8007314:	4620      	mov	r0, r4
 8007316:	9304      	str	r3, [sp, #16]
 8007318:	2200      	movs	r2, #0
 800731a:	4629      	mov	r1, r5
 800731c:	4b55      	ldr	r3, [pc, #340]	@ (8007474 <_dtoa_r+0x52c>)
 800731e:	f7f9 f947 	bl	80005b0 <__aeabi_dmul>
 8007322:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007326:	9c08      	ldr	r4, [sp, #32]
 8007328:	3601      	adds	r6, #1
 800732a:	4630      	mov	r0, r6
 800732c:	f7f9 f8d6 	bl	80004dc <__aeabi_i2d>
 8007330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007334:	f7f9 f93c 	bl	80005b0 <__aeabi_dmul>
 8007338:	2200      	movs	r2, #0
 800733a:	4b4f      	ldr	r3, [pc, #316]	@ (8007478 <_dtoa_r+0x530>)
 800733c:	f7f8 ff82 	bl	8000244 <__adddf3>
 8007340:	4605      	mov	r5, r0
 8007342:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007346:	2c00      	cmp	r4, #0
 8007348:	f040 809a 	bne.w	8007480 <_dtoa_r+0x538>
 800734c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007350:	2200      	movs	r2, #0
 8007352:	4b4a      	ldr	r3, [pc, #296]	@ (800747c <_dtoa_r+0x534>)
 8007354:	f7f8 ff74 	bl	8000240 <__aeabi_dsub>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007360:	462a      	mov	r2, r5
 8007362:	4633      	mov	r3, r6
 8007364:	f7f9 fbb4 	bl	8000ad0 <__aeabi_dcmpgt>
 8007368:	2800      	cmp	r0, #0
 800736a:	f040 828e 	bne.w	800788a <_dtoa_r+0x942>
 800736e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007372:	462a      	mov	r2, r5
 8007374:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007378:	f7f9 fb8c 	bl	8000a94 <__aeabi_dcmplt>
 800737c:	2800      	cmp	r0, #0
 800737e:	f040 8127 	bne.w	80075d0 <_dtoa_r+0x688>
 8007382:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007386:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800738a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800738c:	2b00      	cmp	r3, #0
 800738e:	f2c0 8163 	blt.w	8007658 <_dtoa_r+0x710>
 8007392:	2f0e      	cmp	r7, #14
 8007394:	f300 8160 	bgt.w	8007658 <_dtoa_r+0x710>
 8007398:	4b33      	ldr	r3, [pc, #204]	@ (8007468 <_dtoa_r+0x520>)
 800739a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800739e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	da03      	bge.n	80073b4 <_dtoa_r+0x46c>
 80073ac:	9b07      	ldr	r3, [sp, #28]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f340 8100 	ble.w	80075b4 <_dtoa_r+0x66c>
 80073b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073b8:	4656      	mov	r6, sl
 80073ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f9 fa1f 	bl	8000804 <__aeabi_ddiv>
 80073c6:	f7f9 fba3 	bl	8000b10 <__aeabi_d2iz>
 80073ca:	4680      	mov	r8, r0
 80073cc:	f7f9 f886 	bl	80004dc <__aeabi_i2d>
 80073d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073d4:	f7f9 f8ec 	bl	80005b0 <__aeabi_dmul>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	4620      	mov	r0, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	f7f8 ff2e 	bl	8000240 <__aeabi_dsub>
 80073e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80073e8:	9d07      	ldr	r5, [sp, #28]
 80073ea:	f806 4b01 	strb.w	r4, [r6], #1
 80073ee:	eba6 040a 	sub.w	r4, r6, sl
 80073f2:	42a5      	cmp	r5, r4
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	f040 8116 	bne.w	8007628 <_dtoa_r+0x6e0>
 80073fc:	f7f8 ff22 	bl	8000244 <__adddf3>
 8007400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	f7f9 fb62 	bl	8000ad0 <__aeabi_dcmpgt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 80f8 	bne.w	8007602 <_dtoa_r+0x6ba>
 8007412:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f9 fb31 	bl	8000a80 <__aeabi_dcmpeq>
 800741e:	b118      	cbz	r0, 8007428 <_dtoa_r+0x4e0>
 8007420:	f018 0f01 	tst.w	r8, #1
 8007424:	f040 80ed 	bne.w	8007602 <_dtoa_r+0x6ba>
 8007428:	4649      	mov	r1, r9
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fbdc 	bl	8007be8 <_Bfree>
 8007430:	2300      	movs	r3, #0
 8007432:	7033      	strb	r3, [r6, #0]
 8007434:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007436:	3701      	adds	r7, #1
 8007438:	601f      	str	r7, [r3, #0]
 800743a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8320 	beq.w	8007a82 <_dtoa_r+0xb3a>
 8007442:	601e      	str	r6, [r3, #0]
 8007444:	e31d      	b.n	8007a82 <_dtoa_r+0xb3a>
 8007446:	07e2      	lsls	r2, r4, #31
 8007448:	d505      	bpl.n	8007456 <_dtoa_r+0x50e>
 800744a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800744e:	f7f9 f8af 	bl	80005b0 <__aeabi_dmul>
 8007452:	2301      	movs	r3, #1
 8007454:	3601      	adds	r6, #1
 8007456:	1064      	asrs	r4, r4, #1
 8007458:	3508      	adds	r5, #8
 800745a:	e73f      	b.n	80072dc <_dtoa_r+0x394>
 800745c:	2602      	movs	r6, #2
 800745e:	e742      	b.n	80072e6 <_dtoa_r+0x39e>
 8007460:	9c07      	ldr	r4, [sp, #28]
 8007462:	9704      	str	r7, [sp, #16]
 8007464:	e761      	b.n	800732a <_dtoa_r+0x3e2>
 8007466:	bf00      	nop
 8007468:	08009238 	.word	0x08009238
 800746c:	08009210 	.word	0x08009210
 8007470:	3ff00000 	.word	0x3ff00000
 8007474:	40240000 	.word	0x40240000
 8007478:	401c0000 	.word	0x401c0000
 800747c:	40140000 	.word	0x40140000
 8007480:	4b70      	ldr	r3, [pc, #448]	@ (8007644 <_dtoa_r+0x6fc>)
 8007482:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007484:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800748c:	4454      	add	r4, sl
 800748e:	2900      	cmp	r1, #0
 8007490:	d045      	beq.n	800751e <_dtoa_r+0x5d6>
 8007492:	2000      	movs	r0, #0
 8007494:	496c      	ldr	r1, [pc, #432]	@ (8007648 <_dtoa_r+0x700>)
 8007496:	f7f9 f9b5 	bl	8000804 <__aeabi_ddiv>
 800749a:	4633      	mov	r3, r6
 800749c:	462a      	mov	r2, r5
 800749e:	f7f8 fecf 	bl	8000240 <__aeabi_dsub>
 80074a2:	4656      	mov	r6, sl
 80074a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ac:	f7f9 fb30 	bl	8000b10 <__aeabi_d2iz>
 80074b0:	4605      	mov	r5, r0
 80074b2:	f7f9 f813 	bl	80004dc <__aeabi_i2d>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074be:	f7f8 febf 	bl	8000240 <__aeabi_dsub>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	3530      	adds	r5, #48	@ 0x30
 80074c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074d0:	f806 5b01 	strb.w	r5, [r6], #1
 80074d4:	f7f9 fade 	bl	8000a94 <__aeabi_dcmplt>
 80074d8:	2800      	cmp	r0, #0
 80074da:	d163      	bne.n	80075a4 <_dtoa_r+0x65c>
 80074dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074e0:	2000      	movs	r0, #0
 80074e2:	495a      	ldr	r1, [pc, #360]	@ (800764c <_dtoa_r+0x704>)
 80074e4:	f7f8 feac 	bl	8000240 <__aeabi_dsub>
 80074e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074ec:	f7f9 fad2 	bl	8000a94 <__aeabi_dcmplt>
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f040 8087 	bne.w	8007604 <_dtoa_r+0x6bc>
 80074f6:	42a6      	cmp	r6, r4
 80074f8:	f43f af43 	beq.w	8007382 <_dtoa_r+0x43a>
 80074fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007500:	2200      	movs	r2, #0
 8007502:	4b53      	ldr	r3, [pc, #332]	@ (8007650 <_dtoa_r+0x708>)
 8007504:	f7f9 f854 	bl	80005b0 <__aeabi_dmul>
 8007508:	2200      	movs	r2, #0
 800750a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800750e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007512:	4b4f      	ldr	r3, [pc, #316]	@ (8007650 <_dtoa_r+0x708>)
 8007514:	f7f9 f84c 	bl	80005b0 <__aeabi_dmul>
 8007518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800751c:	e7c4      	b.n	80074a8 <_dtoa_r+0x560>
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	f7f9 f845 	bl	80005b0 <__aeabi_dmul>
 8007526:	4656      	mov	r6, sl
 8007528:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800752c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800752e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007532:	f7f9 faed 	bl	8000b10 <__aeabi_d2iz>
 8007536:	4605      	mov	r5, r0
 8007538:	f7f8 ffd0 	bl	80004dc <__aeabi_i2d>
 800753c:	4602      	mov	r2, r0
 800753e:	460b      	mov	r3, r1
 8007540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007544:	f7f8 fe7c 	bl	8000240 <__aeabi_dsub>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	3530      	adds	r5, #48	@ 0x30
 800754e:	f806 5b01 	strb.w	r5, [r6], #1
 8007552:	42a6      	cmp	r6, r4
 8007554:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007558:	f04f 0200 	mov.w	r2, #0
 800755c:	d124      	bne.n	80075a8 <_dtoa_r+0x660>
 800755e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007562:	4b39      	ldr	r3, [pc, #228]	@ (8007648 <_dtoa_r+0x700>)
 8007564:	f7f8 fe6e 	bl	8000244 <__adddf3>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007570:	f7f9 faae 	bl	8000ad0 <__aeabi_dcmpgt>
 8007574:	2800      	cmp	r0, #0
 8007576:	d145      	bne.n	8007604 <_dtoa_r+0x6bc>
 8007578:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800757c:	2000      	movs	r0, #0
 800757e:	4932      	ldr	r1, [pc, #200]	@ (8007648 <_dtoa_r+0x700>)
 8007580:	f7f8 fe5e 	bl	8000240 <__aeabi_dsub>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758c:	f7f9 fa82 	bl	8000a94 <__aeabi_dcmplt>
 8007590:	2800      	cmp	r0, #0
 8007592:	f43f aef6 	beq.w	8007382 <_dtoa_r+0x43a>
 8007596:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007598:	1e73      	subs	r3, r6, #1
 800759a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800759c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075a0:	2b30      	cmp	r3, #48	@ 0x30
 80075a2:	d0f8      	beq.n	8007596 <_dtoa_r+0x64e>
 80075a4:	9f04      	ldr	r7, [sp, #16]
 80075a6:	e73f      	b.n	8007428 <_dtoa_r+0x4e0>
 80075a8:	4b29      	ldr	r3, [pc, #164]	@ (8007650 <_dtoa_r+0x708>)
 80075aa:	f7f9 f801 	bl	80005b0 <__aeabi_dmul>
 80075ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b2:	e7bc      	b.n	800752e <_dtoa_r+0x5e6>
 80075b4:	d10c      	bne.n	80075d0 <_dtoa_r+0x688>
 80075b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ba:	2200      	movs	r2, #0
 80075bc:	4b25      	ldr	r3, [pc, #148]	@ (8007654 <_dtoa_r+0x70c>)
 80075be:	f7f8 fff7 	bl	80005b0 <__aeabi_dmul>
 80075c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075c6:	f7f9 fa79 	bl	8000abc <__aeabi_dcmpge>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	f000 815b 	beq.w	8007886 <_dtoa_r+0x93e>
 80075d0:	2400      	movs	r4, #0
 80075d2:	4625      	mov	r5, r4
 80075d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075d6:	4656      	mov	r6, sl
 80075d8:	43db      	mvns	r3, r3
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	2700      	movs	r7, #0
 80075de:	4621      	mov	r1, r4
 80075e0:	4658      	mov	r0, fp
 80075e2:	f000 fb01 	bl	8007be8 <_Bfree>
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	d0dc      	beq.n	80075a4 <_dtoa_r+0x65c>
 80075ea:	b12f      	cbz	r7, 80075f8 <_dtoa_r+0x6b0>
 80075ec:	42af      	cmp	r7, r5
 80075ee:	d003      	beq.n	80075f8 <_dtoa_r+0x6b0>
 80075f0:	4639      	mov	r1, r7
 80075f2:	4658      	mov	r0, fp
 80075f4:	f000 faf8 	bl	8007be8 <_Bfree>
 80075f8:	4629      	mov	r1, r5
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 faf4 	bl	8007be8 <_Bfree>
 8007600:	e7d0      	b.n	80075a4 <_dtoa_r+0x65c>
 8007602:	9704      	str	r7, [sp, #16]
 8007604:	4633      	mov	r3, r6
 8007606:	461e      	mov	r6, r3
 8007608:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800760c:	2a39      	cmp	r2, #57	@ 0x39
 800760e:	d107      	bne.n	8007620 <_dtoa_r+0x6d8>
 8007610:	459a      	cmp	sl, r3
 8007612:	d1f8      	bne.n	8007606 <_dtoa_r+0x6be>
 8007614:	9a04      	ldr	r2, [sp, #16]
 8007616:	3201      	adds	r2, #1
 8007618:	9204      	str	r2, [sp, #16]
 800761a:	2230      	movs	r2, #48	@ 0x30
 800761c:	f88a 2000 	strb.w	r2, [sl]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	3201      	adds	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e7bd      	b.n	80075a4 <_dtoa_r+0x65c>
 8007628:	2200      	movs	r2, #0
 800762a:	4b09      	ldr	r3, [pc, #36]	@ (8007650 <_dtoa_r+0x708>)
 800762c:	f7f8 ffc0 	bl	80005b0 <__aeabi_dmul>
 8007630:	2200      	movs	r2, #0
 8007632:	2300      	movs	r3, #0
 8007634:	4604      	mov	r4, r0
 8007636:	460d      	mov	r5, r1
 8007638:	f7f9 fa22 	bl	8000a80 <__aeabi_dcmpeq>
 800763c:	2800      	cmp	r0, #0
 800763e:	f43f aebc 	beq.w	80073ba <_dtoa_r+0x472>
 8007642:	e6f1      	b.n	8007428 <_dtoa_r+0x4e0>
 8007644:	08009238 	.word	0x08009238
 8007648:	3fe00000 	.word	0x3fe00000
 800764c:	3ff00000 	.word	0x3ff00000
 8007650:	40240000 	.word	0x40240000
 8007654:	40140000 	.word	0x40140000
 8007658:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800765a:	2a00      	cmp	r2, #0
 800765c:	f000 80db 	beq.w	8007816 <_dtoa_r+0x8ce>
 8007660:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007662:	2a01      	cmp	r2, #1
 8007664:	f300 80bf 	bgt.w	80077e6 <_dtoa_r+0x89e>
 8007668:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800766a:	2a00      	cmp	r2, #0
 800766c:	f000 80b7 	beq.w	80077de <_dtoa_r+0x896>
 8007670:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007674:	4646      	mov	r6, r8
 8007676:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800767a:	2101      	movs	r1, #1
 800767c:	441a      	add	r2, r3
 800767e:	4658      	mov	r0, fp
 8007680:	4498      	add	r8, r3
 8007682:	9209      	str	r2, [sp, #36]	@ 0x24
 8007684:	f000 fb64 	bl	8007d50 <__i2b>
 8007688:	4605      	mov	r5, r0
 800768a:	b15e      	cbz	r6, 80076a4 <_dtoa_r+0x75c>
 800768c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800768e:	2b00      	cmp	r3, #0
 8007690:	dd08      	ble.n	80076a4 <_dtoa_r+0x75c>
 8007692:	42b3      	cmp	r3, r6
 8007694:	bfa8      	it	ge
 8007696:	4633      	movge	r3, r6
 8007698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800769a:	eba8 0803 	sub.w	r8, r8, r3
 800769e:	1af6      	subs	r6, r6, r3
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a6:	b1f3      	cbz	r3, 80076e6 <_dtoa_r+0x79e>
 80076a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 80b7 	beq.w	800781e <_dtoa_r+0x8d6>
 80076b0:	b18c      	cbz	r4, 80076d6 <_dtoa_r+0x78e>
 80076b2:	4629      	mov	r1, r5
 80076b4:	4622      	mov	r2, r4
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 fc08 	bl	8007ecc <__pow5mult>
 80076bc:	464a      	mov	r2, r9
 80076be:	4601      	mov	r1, r0
 80076c0:	4605      	mov	r5, r0
 80076c2:	4658      	mov	r0, fp
 80076c4:	f000 fb5a 	bl	8007d7c <__multiply>
 80076c8:	4649      	mov	r1, r9
 80076ca:	9004      	str	r0, [sp, #16]
 80076cc:	4658      	mov	r0, fp
 80076ce:	f000 fa8b 	bl	8007be8 <_Bfree>
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	4699      	mov	r9, r3
 80076d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076d8:	1b1a      	subs	r2, r3, r4
 80076da:	d004      	beq.n	80076e6 <_dtoa_r+0x79e>
 80076dc:	4649      	mov	r1, r9
 80076de:	4658      	mov	r0, fp
 80076e0:	f000 fbf4 	bl	8007ecc <__pow5mult>
 80076e4:	4681      	mov	r9, r0
 80076e6:	2101      	movs	r1, #1
 80076e8:	4658      	mov	r0, fp
 80076ea:	f000 fb31 	bl	8007d50 <__i2b>
 80076ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f0:	4604      	mov	r4, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 81c9 	beq.w	8007a8a <_dtoa_r+0xb42>
 80076f8:	461a      	mov	r2, r3
 80076fa:	4601      	mov	r1, r0
 80076fc:	4658      	mov	r0, fp
 80076fe:	f000 fbe5 	bl	8007ecc <__pow5mult>
 8007702:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007704:	4604      	mov	r4, r0
 8007706:	2b01      	cmp	r3, #1
 8007708:	f300 808f 	bgt.w	800782a <_dtoa_r+0x8e2>
 800770c:	9b02      	ldr	r3, [sp, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f040 8087 	bne.w	8007822 <_dtoa_r+0x8da>
 8007714:	9b03      	ldr	r3, [sp, #12]
 8007716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 8083 	bne.w	8007826 <_dtoa_r+0x8de>
 8007720:	9b03      	ldr	r3, [sp, #12]
 8007722:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007726:	0d1b      	lsrs	r3, r3, #20
 8007728:	051b      	lsls	r3, r3, #20
 800772a:	b12b      	cbz	r3, 8007738 <_dtoa_r+0x7f0>
 800772c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800772e:	f108 0801 	add.w	r8, r8, #1
 8007732:	3301      	adds	r3, #1
 8007734:	9309      	str	r3, [sp, #36]	@ 0x24
 8007736:	2301      	movs	r3, #1
 8007738:	930a      	str	r3, [sp, #40]	@ 0x28
 800773a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 81aa 	beq.w	8007a96 <_dtoa_r+0xb4e>
 8007742:	6923      	ldr	r3, [r4, #16]
 8007744:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007748:	6918      	ldr	r0, [r3, #16]
 800774a:	f000 fab5 	bl	8007cb8 <__hi0bits>
 800774e:	f1c0 0020 	rsb	r0, r0, #32
 8007752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007754:	4418      	add	r0, r3
 8007756:	f010 001f 	ands.w	r0, r0, #31
 800775a:	d071      	beq.n	8007840 <_dtoa_r+0x8f8>
 800775c:	f1c0 0320 	rsb	r3, r0, #32
 8007760:	2b04      	cmp	r3, #4
 8007762:	dd65      	ble.n	8007830 <_dtoa_r+0x8e8>
 8007764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007766:	f1c0 001c 	rsb	r0, r0, #28
 800776a:	4403      	add	r3, r0
 800776c:	4480      	add	r8, r0
 800776e:	4406      	add	r6, r0
 8007770:	9309      	str	r3, [sp, #36]	@ 0x24
 8007772:	f1b8 0f00 	cmp.w	r8, #0
 8007776:	dd05      	ble.n	8007784 <_dtoa_r+0x83c>
 8007778:	4649      	mov	r1, r9
 800777a:	4642      	mov	r2, r8
 800777c:	4658      	mov	r0, fp
 800777e:	f000 fbff 	bl	8007f80 <__lshift>
 8007782:	4681      	mov	r9, r0
 8007784:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd05      	ble.n	8007796 <_dtoa_r+0x84e>
 800778a:	4621      	mov	r1, r4
 800778c:	461a      	mov	r2, r3
 800778e:	4658      	mov	r0, fp
 8007790:	f000 fbf6 	bl	8007f80 <__lshift>
 8007794:	4604      	mov	r4, r0
 8007796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d053      	beq.n	8007844 <_dtoa_r+0x8fc>
 800779c:	4621      	mov	r1, r4
 800779e:	4648      	mov	r0, r9
 80077a0:	f000 fc5a 	bl	8008058 <__mcmp>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	da4d      	bge.n	8007844 <_dtoa_r+0x8fc>
 80077a8:	1e7b      	subs	r3, r7, #1
 80077aa:	4649      	mov	r1, r9
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	220a      	movs	r2, #10
 80077b0:	2300      	movs	r3, #0
 80077b2:	4658      	mov	r0, fp
 80077b4:	f000 fa3a 	bl	8007c2c <__multadd>
 80077b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ba:	4681      	mov	r9, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f000 816c 	beq.w	8007a9a <_dtoa_r+0xb52>
 80077c2:	2300      	movs	r3, #0
 80077c4:	4629      	mov	r1, r5
 80077c6:	220a      	movs	r2, #10
 80077c8:	4658      	mov	r0, fp
 80077ca:	f000 fa2f 	bl	8007c2c <__multadd>
 80077ce:	9b08      	ldr	r3, [sp, #32]
 80077d0:	4605      	mov	r5, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	dc61      	bgt.n	800789a <_dtoa_r+0x952>
 80077d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077d8:	2b02      	cmp	r3, #2
 80077da:	dc3b      	bgt.n	8007854 <_dtoa_r+0x90c>
 80077dc:	e05d      	b.n	800789a <_dtoa_r+0x952>
 80077de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077e4:	e746      	b.n	8007674 <_dtoa_r+0x72c>
 80077e6:	9b07      	ldr	r3, [sp, #28]
 80077e8:	1e5c      	subs	r4, r3, #1
 80077ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ec:	42a3      	cmp	r3, r4
 80077ee:	bfbf      	itttt	lt
 80077f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80077f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80077f4:	1ae3      	sublt	r3, r4, r3
 80077f6:	18d2      	addlt	r2, r2, r3
 80077f8:	bfa8      	it	ge
 80077fa:	1b1c      	subge	r4, r3, r4
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	bfbe      	ittt	lt
 8007800:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007802:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007804:	2400      	movlt	r4, #0
 8007806:	2b00      	cmp	r3, #0
 8007808:	bfb5      	itete	lt
 800780a:	eba8 0603 	sublt.w	r6, r8, r3
 800780e:	4646      	movge	r6, r8
 8007810:	2300      	movlt	r3, #0
 8007812:	9b07      	ldrge	r3, [sp, #28]
 8007814:	e730      	b.n	8007678 <_dtoa_r+0x730>
 8007816:	4646      	mov	r6, r8
 8007818:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800781a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800781c:	e735      	b.n	800768a <_dtoa_r+0x742>
 800781e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007820:	e75c      	b.n	80076dc <_dtoa_r+0x794>
 8007822:	2300      	movs	r3, #0
 8007824:	e788      	b.n	8007738 <_dtoa_r+0x7f0>
 8007826:	9b02      	ldr	r3, [sp, #8]
 8007828:	e786      	b.n	8007738 <_dtoa_r+0x7f0>
 800782a:	2300      	movs	r3, #0
 800782c:	930a      	str	r3, [sp, #40]	@ 0x28
 800782e:	e788      	b.n	8007742 <_dtoa_r+0x7fa>
 8007830:	d09f      	beq.n	8007772 <_dtoa_r+0x82a>
 8007832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007834:	331c      	adds	r3, #28
 8007836:	441a      	add	r2, r3
 8007838:	4498      	add	r8, r3
 800783a:	441e      	add	r6, r3
 800783c:	9209      	str	r2, [sp, #36]	@ 0x24
 800783e:	e798      	b.n	8007772 <_dtoa_r+0x82a>
 8007840:	4603      	mov	r3, r0
 8007842:	e7f6      	b.n	8007832 <_dtoa_r+0x8ea>
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	9704      	str	r7, [sp, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	dc20      	bgt.n	800788e <_dtoa_r+0x946>
 800784c:	9308      	str	r3, [sp, #32]
 800784e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007850:	2b02      	cmp	r3, #2
 8007852:	dd1e      	ble.n	8007892 <_dtoa_r+0x94a>
 8007854:	9b08      	ldr	r3, [sp, #32]
 8007856:	2b00      	cmp	r3, #0
 8007858:	f47f aebc 	bne.w	80075d4 <_dtoa_r+0x68c>
 800785c:	4621      	mov	r1, r4
 800785e:	2205      	movs	r2, #5
 8007860:	4658      	mov	r0, fp
 8007862:	f000 f9e3 	bl	8007c2c <__multadd>
 8007866:	4601      	mov	r1, r0
 8007868:	4604      	mov	r4, r0
 800786a:	4648      	mov	r0, r9
 800786c:	f000 fbf4 	bl	8008058 <__mcmp>
 8007870:	2800      	cmp	r0, #0
 8007872:	f77f aeaf 	ble.w	80075d4 <_dtoa_r+0x68c>
 8007876:	2331      	movs	r3, #49	@ 0x31
 8007878:	4656      	mov	r6, sl
 800787a:	f806 3b01 	strb.w	r3, [r6], #1
 800787e:	9b04      	ldr	r3, [sp, #16]
 8007880:	3301      	adds	r3, #1
 8007882:	9304      	str	r3, [sp, #16]
 8007884:	e6aa      	b.n	80075dc <_dtoa_r+0x694>
 8007886:	9c07      	ldr	r4, [sp, #28]
 8007888:	9704      	str	r7, [sp, #16]
 800788a:	4625      	mov	r5, r4
 800788c:	e7f3      	b.n	8007876 <_dtoa_r+0x92e>
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	9308      	str	r3, [sp, #32]
 8007892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8104 	beq.w	8007aa2 <_dtoa_r+0xb5a>
 800789a:	2e00      	cmp	r6, #0
 800789c:	dd05      	ble.n	80078aa <_dtoa_r+0x962>
 800789e:	4629      	mov	r1, r5
 80078a0:	4632      	mov	r2, r6
 80078a2:	4658      	mov	r0, fp
 80078a4:	f000 fb6c 	bl	8007f80 <__lshift>
 80078a8:	4605      	mov	r5, r0
 80078aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d05a      	beq.n	8007966 <_dtoa_r+0xa1e>
 80078b0:	4658      	mov	r0, fp
 80078b2:	6869      	ldr	r1, [r5, #4]
 80078b4:	f000 f958 	bl	8007b68 <_Balloc>
 80078b8:	4606      	mov	r6, r0
 80078ba:	b928      	cbnz	r0, 80078c8 <_dtoa_r+0x980>
 80078bc:	4602      	mov	r2, r0
 80078be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078c2:	4b83      	ldr	r3, [pc, #524]	@ (8007ad0 <_dtoa_r+0xb88>)
 80078c4:	f7ff bb54 	b.w	8006f70 <_dtoa_r+0x28>
 80078c8:	692a      	ldr	r2, [r5, #16]
 80078ca:	f105 010c 	add.w	r1, r5, #12
 80078ce:	3202      	adds	r2, #2
 80078d0:	0092      	lsls	r2, r2, #2
 80078d2:	300c      	adds	r0, #12
 80078d4:	f7ff faa1 	bl	8006e1a <memcpy>
 80078d8:	2201      	movs	r2, #1
 80078da:	4631      	mov	r1, r6
 80078dc:	4658      	mov	r0, fp
 80078de:	f000 fb4f 	bl	8007f80 <__lshift>
 80078e2:	462f      	mov	r7, r5
 80078e4:	4605      	mov	r5, r0
 80078e6:	f10a 0301 	add.w	r3, sl, #1
 80078ea:	9307      	str	r3, [sp, #28]
 80078ec:	9b08      	ldr	r3, [sp, #32]
 80078ee:	4453      	add	r3, sl
 80078f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078f2:	9b02      	ldr	r3, [sp, #8]
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80078fa:	9b07      	ldr	r3, [sp, #28]
 80078fc:	4621      	mov	r1, r4
 80078fe:	3b01      	subs	r3, #1
 8007900:	4648      	mov	r0, r9
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	f7ff fa97 	bl	8006e36 <quorem>
 8007908:	4639      	mov	r1, r7
 800790a:	9008      	str	r0, [sp, #32]
 800790c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007910:	4648      	mov	r0, r9
 8007912:	f000 fba1 	bl	8008058 <__mcmp>
 8007916:	462a      	mov	r2, r5
 8007918:	9009      	str	r0, [sp, #36]	@ 0x24
 800791a:	4621      	mov	r1, r4
 800791c:	4658      	mov	r0, fp
 800791e:	f000 fbb7 	bl	8008090 <__mdiff>
 8007922:	68c2      	ldr	r2, [r0, #12]
 8007924:	4606      	mov	r6, r0
 8007926:	bb02      	cbnz	r2, 800796a <_dtoa_r+0xa22>
 8007928:	4601      	mov	r1, r0
 800792a:	4648      	mov	r0, r9
 800792c:	f000 fb94 	bl	8008058 <__mcmp>
 8007930:	4602      	mov	r2, r0
 8007932:	4631      	mov	r1, r6
 8007934:	4658      	mov	r0, fp
 8007936:	920c      	str	r2, [sp, #48]	@ 0x30
 8007938:	f000 f956 	bl	8007be8 <_Bfree>
 800793c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800793e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007940:	9e07      	ldr	r6, [sp, #28]
 8007942:	ea43 0102 	orr.w	r1, r3, r2
 8007946:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007948:	4319      	orrs	r1, r3
 800794a:	d110      	bne.n	800796e <_dtoa_r+0xa26>
 800794c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007950:	d029      	beq.n	80079a6 <_dtoa_r+0xa5e>
 8007952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	dd02      	ble.n	800795e <_dtoa_r+0xa16>
 8007958:	9b08      	ldr	r3, [sp, #32]
 800795a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800795e:	9b02      	ldr	r3, [sp, #8]
 8007960:	f883 8000 	strb.w	r8, [r3]
 8007964:	e63b      	b.n	80075de <_dtoa_r+0x696>
 8007966:	4628      	mov	r0, r5
 8007968:	e7bb      	b.n	80078e2 <_dtoa_r+0x99a>
 800796a:	2201      	movs	r2, #1
 800796c:	e7e1      	b.n	8007932 <_dtoa_r+0x9ea>
 800796e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007970:	2b00      	cmp	r3, #0
 8007972:	db04      	blt.n	800797e <_dtoa_r+0xa36>
 8007974:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007976:	430b      	orrs	r3, r1
 8007978:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800797a:	430b      	orrs	r3, r1
 800797c:	d120      	bne.n	80079c0 <_dtoa_r+0xa78>
 800797e:	2a00      	cmp	r2, #0
 8007980:	dded      	ble.n	800795e <_dtoa_r+0xa16>
 8007982:	4649      	mov	r1, r9
 8007984:	2201      	movs	r2, #1
 8007986:	4658      	mov	r0, fp
 8007988:	f000 fafa 	bl	8007f80 <__lshift>
 800798c:	4621      	mov	r1, r4
 800798e:	4681      	mov	r9, r0
 8007990:	f000 fb62 	bl	8008058 <__mcmp>
 8007994:	2800      	cmp	r0, #0
 8007996:	dc03      	bgt.n	80079a0 <_dtoa_r+0xa58>
 8007998:	d1e1      	bne.n	800795e <_dtoa_r+0xa16>
 800799a:	f018 0f01 	tst.w	r8, #1
 800799e:	d0de      	beq.n	800795e <_dtoa_r+0xa16>
 80079a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079a4:	d1d8      	bne.n	8007958 <_dtoa_r+0xa10>
 80079a6:	2339      	movs	r3, #57	@ 0x39
 80079a8:	9a02      	ldr	r2, [sp, #8]
 80079aa:	7013      	strb	r3, [r2, #0]
 80079ac:	4633      	mov	r3, r6
 80079ae:	461e      	mov	r6, r3
 80079b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	2a39      	cmp	r2, #57	@ 0x39
 80079b8:	d052      	beq.n	8007a60 <_dtoa_r+0xb18>
 80079ba:	3201      	adds	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	e60e      	b.n	80075de <_dtoa_r+0x696>
 80079c0:	2a00      	cmp	r2, #0
 80079c2:	dd07      	ble.n	80079d4 <_dtoa_r+0xa8c>
 80079c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079c8:	d0ed      	beq.n	80079a6 <_dtoa_r+0xa5e>
 80079ca:	9a02      	ldr	r2, [sp, #8]
 80079cc:	f108 0301 	add.w	r3, r8, #1
 80079d0:	7013      	strb	r3, [r2, #0]
 80079d2:	e604      	b.n	80075de <_dtoa_r+0x696>
 80079d4:	9b07      	ldr	r3, [sp, #28]
 80079d6:	9a07      	ldr	r2, [sp, #28]
 80079d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079de:	4293      	cmp	r3, r2
 80079e0:	d028      	beq.n	8007a34 <_dtoa_r+0xaec>
 80079e2:	4649      	mov	r1, r9
 80079e4:	2300      	movs	r3, #0
 80079e6:	220a      	movs	r2, #10
 80079e8:	4658      	mov	r0, fp
 80079ea:	f000 f91f 	bl	8007c2c <__multadd>
 80079ee:	42af      	cmp	r7, r5
 80079f0:	4681      	mov	r9, r0
 80079f2:	f04f 0300 	mov.w	r3, #0
 80079f6:	f04f 020a 	mov.w	r2, #10
 80079fa:	4639      	mov	r1, r7
 80079fc:	4658      	mov	r0, fp
 80079fe:	d107      	bne.n	8007a10 <_dtoa_r+0xac8>
 8007a00:	f000 f914 	bl	8007c2c <__multadd>
 8007a04:	4607      	mov	r7, r0
 8007a06:	4605      	mov	r5, r0
 8007a08:	9b07      	ldr	r3, [sp, #28]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	9307      	str	r3, [sp, #28]
 8007a0e:	e774      	b.n	80078fa <_dtoa_r+0x9b2>
 8007a10:	f000 f90c 	bl	8007c2c <__multadd>
 8007a14:	4629      	mov	r1, r5
 8007a16:	4607      	mov	r7, r0
 8007a18:	2300      	movs	r3, #0
 8007a1a:	220a      	movs	r2, #10
 8007a1c:	4658      	mov	r0, fp
 8007a1e:	f000 f905 	bl	8007c2c <__multadd>
 8007a22:	4605      	mov	r5, r0
 8007a24:	e7f0      	b.n	8007a08 <_dtoa_r+0xac0>
 8007a26:	9b08      	ldr	r3, [sp, #32]
 8007a28:	2700      	movs	r7, #0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bfcc      	ite	gt
 8007a2e:	461e      	movgt	r6, r3
 8007a30:	2601      	movle	r6, #1
 8007a32:	4456      	add	r6, sl
 8007a34:	4649      	mov	r1, r9
 8007a36:	2201      	movs	r2, #1
 8007a38:	4658      	mov	r0, fp
 8007a3a:	f000 faa1 	bl	8007f80 <__lshift>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4681      	mov	r9, r0
 8007a42:	f000 fb09 	bl	8008058 <__mcmp>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	dcb0      	bgt.n	80079ac <_dtoa_r+0xa64>
 8007a4a:	d102      	bne.n	8007a52 <_dtoa_r+0xb0a>
 8007a4c:	f018 0f01 	tst.w	r8, #1
 8007a50:	d1ac      	bne.n	80079ac <_dtoa_r+0xa64>
 8007a52:	4633      	mov	r3, r6
 8007a54:	461e      	mov	r6, r3
 8007a56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a5a:	2a30      	cmp	r2, #48	@ 0x30
 8007a5c:	d0fa      	beq.n	8007a54 <_dtoa_r+0xb0c>
 8007a5e:	e5be      	b.n	80075de <_dtoa_r+0x696>
 8007a60:	459a      	cmp	sl, r3
 8007a62:	d1a4      	bne.n	80079ae <_dtoa_r+0xa66>
 8007a64:	9b04      	ldr	r3, [sp, #16]
 8007a66:	3301      	adds	r3, #1
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	2331      	movs	r3, #49	@ 0x31
 8007a6c:	f88a 3000 	strb.w	r3, [sl]
 8007a70:	e5b5      	b.n	80075de <_dtoa_r+0x696>
 8007a72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a74:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ad4 <_dtoa_r+0xb8c>
 8007a78:	b11b      	cbz	r3, 8007a82 <_dtoa_r+0xb3a>
 8007a7a:	f10a 0308 	add.w	r3, sl, #8
 8007a7e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	4650      	mov	r0, sl
 8007a84:	b017      	add	sp, #92	@ 0x5c
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	f77f ae3d 	ble.w	800770c <_dtoa_r+0x7c4>
 8007a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a94:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a96:	2001      	movs	r0, #1
 8007a98:	e65b      	b.n	8007752 <_dtoa_r+0x80a>
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f77f aed6 	ble.w	800784e <_dtoa_r+0x906>
 8007aa2:	4656      	mov	r6, sl
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	f7ff f9c5 	bl	8006e36 <quorem>
 8007aac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ab0:	9b08      	ldr	r3, [sp, #32]
 8007ab2:	f806 8b01 	strb.w	r8, [r6], #1
 8007ab6:	eba6 020a 	sub.w	r2, r6, sl
 8007aba:	4293      	cmp	r3, r2
 8007abc:	ddb3      	ble.n	8007a26 <_dtoa_r+0xade>
 8007abe:	4649      	mov	r1, r9
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	220a      	movs	r2, #10
 8007ac4:	4658      	mov	r0, fp
 8007ac6:	f000 f8b1 	bl	8007c2c <__multadd>
 8007aca:	4681      	mov	r9, r0
 8007acc:	e7ea      	b.n	8007aa4 <_dtoa_r+0xb5c>
 8007ace:	bf00      	nop
 8007ad0:	08009194 	.word	0x08009194
 8007ad4:	08009118 	.word	0x08009118

08007ad8 <_free_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4605      	mov	r5, r0
 8007adc:	2900      	cmp	r1, #0
 8007ade:	d040      	beq.n	8007b62 <_free_r+0x8a>
 8007ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ae4:	1f0c      	subs	r4, r1, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	bfb8      	it	lt
 8007aea:	18e4      	addlt	r4, r4, r3
 8007aec:	f7fe fb0e 	bl	800610c <__malloc_lock>
 8007af0:	4a1c      	ldr	r2, [pc, #112]	@ (8007b64 <_free_r+0x8c>)
 8007af2:	6813      	ldr	r3, [r2, #0]
 8007af4:	b933      	cbnz	r3, 8007b04 <_free_r+0x2c>
 8007af6:	6063      	str	r3, [r4, #4]
 8007af8:	6014      	str	r4, [r2, #0]
 8007afa:	4628      	mov	r0, r5
 8007afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b00:	f7fe bb0a 	b.w	8006118 <__malloc_unlock>
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	d908      	bls.n	8007b1a <_free_r+0x42>
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	1821      	adds	r1, r4, r0
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	bf01      	itttt	eq
 8007b10:	6819      	ldreq	r1, [r3, #0]
 8007b12:	685b      	ldreq	r3, [r3, #4]
 8007b14:	1809      	addeq	r1, r1, r0
 8007b16:	6021      	streq	r1, [r4, #0]
 8007b18:	e7ed      	b.n	8007af6 <_free_r+0x1e>
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	b10b      	cbz	r3, 8007b24 <_free_r+0x4c>
 8007b20:	42a3      	cmp	r3, r4
 8007b22:	d9fa      	bls.n	8007b1a <_free_r+0x42>
 8007b24:	6811      	ldr	r1, [r2, #0]
 8007b26:	1850      	adds	r0, r2, r1
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	d10b      	bne.n	8007b44 <_free_r+0x6c>
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	4401      	add	r1, r0
 8007b30:	1850      	adds	r0, r2, r1
 8007b32:	4283      	cmp	r3, r0
 8007b34:	6011      	str	r1, [r2, #0]
 8007b36:	d1e0      	bne.n	8007afa <_free_r+0x22>
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	4408      	add	r0, r1
 8007b3e:	6010      	str	r0, [r2, #0]
 8007b40:	6053      	str	r3, [r2, #4]
 8007b42:	e7da      	b.n	8007afa <_free_r+0x22>
 8007b44:	d902      	bls.n	8007b4c <_free_r+0x74>
 8007b46:	230c      	movs	r3, #12
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	e7d6      	b.n	8007afa <_free_r+0x22>
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	1821      	adds	r1, r4, r0
 8007b50:	428b      	cmp	r3, r1
 8007b52:	bf01      	itttt	eq
 8007b54:	6819      	ldreq	r1, [r3, #0]
 8007b56:	685b      	ldreq	r3, [r3, #4]
 8007b58:	1809      	addeq	r1, r1, r0
 8007b5a:	6021      	streq	r1, [r4, #0]
 8007b5c:	6063      	str	r3, [r4, #4]
 8007b5e:	6054      	str	r4, [r2, #4]
 8007b60:	e7cb      	b.n	8007afa <_free_r+0x22>
 8007b62:	bd38      	pop	{r3, r4, r5, pc}
 8007b64:	2000059c 	.word	0x2000059c

08007b68 <_Balloc>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	69c6      	ldr	r6, [r0, #28]
 8007b6c:	4604      	mov	r4, r0
 8007b6e:	460d      	mov	r5, r1
 8007b70:	b976      	cbnz	r6, 8007b90 <_Balloc+0x28>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f7fe fa18 	bl	8005fa8 <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	61e0      	str	r0, [r4, #28]
 8007b7c:	b920      	cbnz	r0, 8007b88 <_Balloc+0x20>
 8007b7e:	216b      	movs	r1, #107	@ 0x6b
 8007b80:	4b17      	ldr	r3, [pc, #92]	@ (8007be0 <_Balloc+0x78>)
 8007b82:	4818      	ldr	r0, [pc, #96]	@ (8007be4 <_Balloc+0x7c>)
 8007b84:	f000 fd8a 	bl	800869c <__assert_func>
 8007b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b8c:	6006      	str	r6, [r0, #0]
 8007b8e:	60c6      	str	r6, [r0, #12]
 8007b90:	69e6      	ldr	r6, [r4, #28]
 8007b92:	68f3      	ldr	r3, [r6, #12]
 8007b94:	b183      	cbz	r3, 8007bb8 <_Balloc+0x50>
 8007b96:	69e3      	ldr	r3, [r4, #28]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b9e:	b9b8      	cbnz	r0, 8007bd0 <_Balloc+0x68>
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8007ba6:	1d72      	adds	r2, r6, #5
 8007ba8:	4620      	mov	r0, r4
 8007baa:	0092      	lsls	r2, r2, #2
 8007bac:	f000 fd94 	bl	80086d8 <_calloc_r>
 8007bb0:	b160      	cbz	r0, 8007bcc <_Balloc+0x64>
 8007bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bb6:	e00e      	b.n	8007bd6 <_Balloc+0x6e>
 8007bb8:	2221      	movs	r2, #33	@ 0x21
 8007bba:	2104      	movs	r1, #4
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 fd8b 	bl	80086d8 <_calloc_r>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	60f0      	str	r0, [r6, #12]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e4      	bne.n	8007b96 <_Balloc+0x2e>
 8007bcc:	2000      	movs	r0, #0
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	6802      	ldr	r2, [r0, #0]
 8007bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bdc:	e7f7      	b.n	8007bce <_Balloc+0x66>
 8007bde:	bf00      	nop
 8007be0:	08009125 	.word	0x08009125
 8007be4:	080091a5 	.word	0x080091a5

08007be8 <_Bfree>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	69c6      	ldr	r6, [r0, #28]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b976      	cbnz	r6, 8007c10 <_Bfree+0x28>
 8007bf2:	2010      	movs	r0, #16
 8007bf4:	f7fe f9d8 	bl	8005fa8 <malloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	61e8      	str	r0, [r5, #28]
 8007bfc:	b920      	cbnz	r0, 8007c08 <_Bfree+0x20>
 8007bfe:	218f      	movs	r1, #143	@ 0x8f
 8007c00:	4b08      	ldr	r3, [pc, #32]	@ (8007c24 <_Bfree+0x3c>)
 8007c02:	4809      	ldr	r0, [pc, #36]	@ (8007c28 <_Bfree+0x40>)
 8007c04:	f000 fd4a 	bl	800869c <__assert_func>
 8007c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c0c:	6006      	str	r6, [r0, #0]
 8007c0e:	60c6      	str	r6, [r0, #12]
 8007c10:	b13c      	cbz	r4, 8007c22 <_Bfree+0x3a>
 8007c12:	69eb      	ldr	r3, [r5, #28]
 8007c14:	6862      	ldr	r2, [r4, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c1c:	6021      	str	r1, [r4, #0]
 8007c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	08009125 	.word	0x08009125
 8007c28:	080091a5 	.word	0x080091a5

08007c2c <__multadd>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4607      	mov	r7, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	461e      	mov	r6, r3
 8007c36:	2000      	movs	r0, #0
 8007c38:	690d      	ldr	r5, [r1, #16]
 8007c3a:	f101 0c14 	add.w	ip, r1, #20
 8007c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c42:	3001      	adds	r0, #1
 8007c44:	b299      	uxth	r1, r3
 8007c46:	fb02 6101 	mla	r1, r2, r1, r6
 8007c4a:	0c1e      	lsrs	r6, r3, #16
 8007c4c:	0c0b      	lsrs	r3, r1, #16
 8007c4e:	fb02 3306 	mla	r3, r2, r6, r3
 8007c52:	b289      	uxth	r1, r1
 8007c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c58:	4285      	cmp	r5, r0
 8007c5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c5e:	f84c 1b04 	str.w	r1, [ip], #4
 8007c62:	dcec      	bgt.n	8007c3e <__multadd+0x12>
 8007c64:	b30e      	cbz	r6, 8007caa <__multadd+0x7e>
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dc19      	bgt.n	8007ca0 <__multadd+0x74>
 8007c6c:	6861      	ldr	r1, [r4, #4]
 8007c6e:	4638      	mov	r0, r7
 8007c70:	3101      	adds	r1, #1
 8007c72:	f7ff ff79 	bl	8007b68 <_Balloc>
 8007c76:	4680      	mov	r8, r0
 8007c78:	b928      	cbnz	r0, 8007c86 <__multadd+0x5a>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	21ba      	movs	r1, #186	@ 0xba
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb0 <__multadd+0x84>)
 8007c80:	480c      	ldr	r0, [pc, #48]	@ (8007cb4 <__multadd+0x88>)
 8007c82:	f000 fd0b 	bl	800869c <__assert_func>
 8007c86:	6922      	ldr	r2, [r4, #16]
 8007c88:	f104 010c 	add.w	r1, r4, #12
 8007c8c:	3202      	adds	r2, #2
 8007c8e:	0092      	lsls	r2, r2, #2
 8007c90:	300c      	adds	r0, #12
 8007c92:	f7ff f8c2 	bl	8006e1a <memcpy>
 8007c96:	4621      	mov	r1, r4
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff ffa5 	bl	8007be8 <_Bfree>
 8007c9e:	4644      	mov	r4, r8
 8007ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ca4:	3501      	adds	r5, #1
 8007ca6:	615e      	str	r6, [r3, #20]
 8007ca8:	6125      	str	r5, [r4, #16]
 8007caa:	4620      	mov	r0, r4
 8007cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cb0:	08009194 	.word	0x08009194
 8007cb4:	080091a5 	.word	0x080091a5

08007cb8 <__hi0bits>:
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007cbe:	bf3a      	itte	cc
 8007cc0:	0403      	lslcc	r3, r0, #16
 8007cc2:	2010      	movcc	r0, #16
 8007cc4:	2000      	movcs	r0, #0
 8007cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cca:	bf3c      	itt	cc
 8007ccc:	021b      	lslcc	r3, r3, #8
 8007cce:	3008      	addcc	r0, #8
 8007cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd4:	bf3c      	itt	cc
 8007cd6:	011b      	lslcc	r3, r3, #4
 8007cd8:	3004      	addcc	r0, #4
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cde:	bf3c      	itt	cc
 8007ce0:	009b      	lslcc	r3, r3, #2
 8007ce2:	3002      	addcc	r0, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db05      	blt.n	8007cf4 <__hi0bits+0x3c>
 8007ce8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007cec:	f100 0001 	add.w	r0, r0, #1
 8007cf0:	bf08      	it	eq
 8007cf2:	2020      	moveq	r0, #32
 8007cf4:	4770      	bx	lr

08007cf6 <__lo0bits>:
 8007cf6:	6803      	ldr	r3, [r0, #0]
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f013 0007 	ands.w	r0, r3, #7
 8007cfe:	d00b      	beq.n	8007d18 <__lo0bits+0x22>
 8007d00:	07d9      	lsls	r1, r3, #31
 8007d02:	d421      	bmi.n	8007d48 <__lo0bits+0x52>
 8007d04:	0798      	lsls	r0, r3, #30
 8007d06:	bf49      	itett	mi
 8007d08:	085b      	lsrmi	r3, r3, #1
 8007d0a:	089b      	lsrpl	r3, r3, #2
 8007d0c:	2001      	movmi	r0, #1
 8007d0e:	6013      	strmi	r3, [r2, #0]
 8007d10:	bf5c      	itt	pl
 8007d12:	2002      	movpl	r0, #2
 8007d14:	6013      	strpl	r3, [r2, #0]
 8007d16:	4770      	bx	lr
 8007d18:	b299      	uxth	r1, r3
 8007d1a:	b909      	cbnz	r1, 8007d20 <__lo0bits+0x2a>
 8007d1c:	2010      	movs	r0, #16
 8007d1e:	0c1b      	lsrs	r3, r3, #16
 8007d20:	b2d9      	uxtb	r1, r3
 8007d22:	b909      	cbnz	r1, 8007d28 <__lo0bits+0x32>
 8007d24:	3008      	adds	r0, #8
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	0719      	lsls	r1, r3, #28
 8007d2a:	bf04      	itt	eq
 8007d2c:	091b      	lsreq	r3, r3, #4
 8007d2e:	3004      	addeq	r0, #4
 8007d30:	0799      	lsls	r1, r3, #30
 8007d32:	bf04      	itt	eq
 8007d34:	089b      	lsreq	r3, r3, #2
 8007d36:	3002      	addeq	r0, #2
 8007d38:	07d9      	lsls	r1, r3, #31
 8007d3a:	d403      	bmi.n	8007d44 <__lo0bits+0x4e>
 8007d3c:	085b      	lsrs	r3, r3, #1
 8007d3e:	f100 0001 	add.w	r0, r0, #1
 8007d42:	d003      	beq.n	8007d4c <__lo0bits+0x56>
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	4770      	bx	lr
 8007d48:	2000      	movs	r0, #0
 8007d4a:	4770      	bx	lr
 8007d4c:	2020      	movs	r0, #32
 8007d4e:	4770      	bx	lr

08007d50 <__i2b>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	460c      	mov	r4, r1
 8007d54:	2101      	movs	r1, #1
 8007d56:	f7ff ff07 	bl	8007b68 <_Balloc>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	b928      	cbnz	r0, 8007d6a <__i2b+0x1a>
 8007d5e:	f240 1145 	movw	r1, #325	@ 0x145
 8007d62:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <__i2b+0x24>)
 8007d64:	4804      	ldr	r0, [pc, #16]	@ (8007d78 <__i2b+0x28>)
 8007d66:	f000 fc99 	bl	800869c <__assert_func>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	6144      	str	r4, [r0, #20]
 8007d6e:	6103      	str	r3, [r0, #16]
 8007d70:	bd10      	pop	{r4, pc}
 8007d72:	bf00      	nop
 8007d74:	08009194 	.word	0x08009194
 8007d78:	080091a5 	.word	0x080091a5

08007d7c <__multiply>:
 8007d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	4614      	mov	r4, r2
 8007d82:	690a      	ldr	r2, [r1, #16]
 8007d84:	6923      	ldr	r3, [r4, #16]
 8007d86:	460f      	mov	r7, r1
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	bfa2      	ittt	ge
 8007d8c:	4623      	movge	r3, r4
 8007d8e:	460c      	movge	r4, r1
 8007d90:	461f      	movge	r7, r3
 8007d92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	6861      	ldr	r1, [r4, #4]
 8007d9e:	eb0a 0609 	add.w	r6, sl, r9
 8007da2:	42b3      	cmp	r3, r6
 8007da4:	b085      	sub	sp, #20
 8007da6:	bfb8      	it	lt
 8007da8:	3101      	addlt	r1, #1
 8007daa:	f7ff fedd 	bl	8007b68 <_Balloc>
 8007dae:	b930      	cbnz	r0, 8007dbe <__multiply+0x42>
 8007db0:	4602      	mov	r2, r0
 8007db2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007db6:	4b43      	ldr	r3, [pc, #268]	@ (8007ec4 <__multiply+0x148>)
 8007db8:	4843      	ldr	r0, [pc, #268]	@ (8007ec8 <__multiply+0x14c>)
 8007dba:	f000 fc6f 	bl	800869c <__assert_func>
 8007dbe:	f100 0514 	add.w	r5, r0, #20
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007dca:	4543      	cmp	r3, r8
 8007dcc:	d321      	bcc.n	8007e12 <__multiply+0x96>
 8007dce:	f107 0114 	add.w	r1, r7, #20
 8007dd2:	f104 0214 	add.w	r2, r4, #20
 8007dd6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007dda:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	1b13      	subs	r3, r2, r4
 8007de2:	3b15      	subs	r3, #21
 8007de4:	f023 0303 	bic.w	r3, r3, #3
 8007de8:	3304      	adds	r3, #4
 8007dea:	f104 0715 	add.w	r7, r4, #21
 8007dee:	42ba      	cmp	r2, r7
 8007df0:	bf38      	it	cc
 8007df2:	2304      	movcc	r3, #4
 8007df4:	9301      	str	r3, [sp, #4]
 8007df6:	9b02      	ldr	r3, [sp, #8]
 8007df8:	9103      	str	r1, [sp, #12]
 8007dfa:	428b      	cmp	r3, r1
 8007dfc:	d80c      	bhi.n	8007e18 <__multiply+0x9c>
 8007dfe:	2e00      	cmp	r6, #0
 8007e00:	dd03      	ble.n	8007e0a <__multiply+0x8e>
 8007e02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d05a      	beq.n	8007ec0 <__multiply+0x144>
 8007e0a:	6106      	str	r6, [r0, #16]
 8007e0c:	b005      	add	sp, #20
 8007e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e12:	f843 2b04 	str.w	r2, [r3], #4
 8007e16:	e7d8      	b.n	8007dca <__multiply+0x4e>
 8007e18:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e1c:	f1ba 0f00 	cmp.w	sl, #0
 8007e20:	d023      	beq.n	8007e6a <__multiply+0xee>
 8007e22:	46a9      	mov	r9, r5
 8007e24:	f04f 0c00 	mov.w	ip, #0
 8007e28:	f104 0e14 	add.w	lr, r4, #20
 8007e2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e30:	f8d9 3000 	ldr.w	r3, [r9]
 8007e34:	fa1f fb87 	uxth.w	fp, r7
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e3e:	4463      	add	r3, ip
 8007e40:	f8d9 c000 	ldr.w	ip, [r9]
 8007e44:	0c3f      	lsrs	r7, r7, #16
 8007e46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007e4a:	fb0a c707 	mla	r7, sl, r7, ip
 8007e4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e58:	4572      	cmp	r2, lr
 8007e5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e5e:	f849 3b04 	str.w	r3, [r9], #4
 8007e62:	d8e3      	bhi.n	8007e2c <__multiply+0xb0>
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	f845 c003 	str.w	ip, [r5, r3]
 8007e6a:	9b03      	ldr	r3, [sp, #12]
 8007e6c:	3104      	adds	r1, #4
 8007e6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e72:	f1b9 0f00 	cmp.w	r9, #0
 8007e76:	d021      	beq.n	8007ebc <__multiply+0x140>
 8007e78:	46ae      	mov	lr, r5
 8007e7a:	f04f 0a00 	mov.w	sl, #0
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	f104 0c14 	add.w	ip, r4, #20
 8007e84:	f8bc b000 	ldrh.w	fp, [ip]
 8007e88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	fb09 770b 	mla	r7, r9, fp, r7
 8007e92:	4457      	add	r7, sl
 8007e94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e98:	f84e 3b04 	str.w	r3, [lr], #4
 8007e9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ea0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ea4:	f8be 3000 	ldrh.w	r3, [lr]
 8007ea8:	4562      	cmp	r2, ip
 8007eaa:	fb09 330a 	mla	r3, r9, sl, r3
 8007eae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007eb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eb6:	d8e5      	bhi.n	8007e84 <__multiply+0x108>
 8007eb8:	9f01      	ldr	r7, [sp, #4]
 8007eba:	51eb      	str	r3, [r5, r7]
 8007ebc:	3504      	adds	r5, #4
 8007ebe:	e79a      	b.n	8007df6 <__multiply+0x7a>
 8007ec0:	3e01      	subs	r6, #1
 8007ec2:	e79c      	b.n	8007dfe <__multiply+0x82>
 8007ec4:	08009194 	.word	0x08009194
 8007ec8:	080091a5 	.word	0x080091a5

08007ecc <__pow5mult>:
 8007ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ed0:	4615      	mov	r5, r2
 8007ed2:	f012 0203 	ands.w	r2, r2, #3
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	460e      	mov	r6, r1
 8007eda:	d007      	beq.n	8007eec <__pow5mult+0x20>
 8007edc:	4c25      	ldr	r4, [pc, #148]	@ (8007f74 <__pow5mult+0xa8>)
 8007ede:	3a01      	subs	r2, #1
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ee6:	f7ff fea1 	bl	8007c2c <__multadd>
 8007eea:	4606      	mov	r6, r0
 8007eec:	10ad      	asrs	r5, r5, #2
 8007eee:	d03d      	beq.n	8007f6c <__pow5mult+0xa0>
 8007ef0:	69fc      	ldr	r4, [r7, #28]
 8007ef2:	b97c      	cbnz	r4, 8007f14 <__pow5mult+0x48>
 8007ef4:	2010      	movs	r0, #16
 8007ef6:	f7fe f857 	bl	8005fa8 <malloc>
 8007efa:	4602      	mov	r2, r0
 8007efc:	61f8      	str	r0, [r7, #28]
 8007efe:	b928      	cbnz	r0, 8007f0c <__pow5mult+0x40>
 8007f00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f04:	4b1c      	ldr	r3, [pc, #112]	@ (8007f78 <__pow5mult+0xac>)
 8007f06:	481d      	ldr	r0, [pc, #116]	@ (8007f7c <__pow5mult+0xb0>)
 8007f08:	f000 fbc8 	bl	800869c <__assert_func>
 8007f0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f10:	6004      	str	r4, [r0, #0]
 8007f12:	60c4      	str	r4, [r0, #12]
 8007f14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f1c:	b94c      	cbnz	r4, 8007f32 <__pow5mult+0x66>
 8007f1e:	f240 2171 	movw	r1, #625	@ 0x271
 8007f22:	4638      	mov	r0, r7
 8007f24:	f7ff ff14 	bl	8007d50 <__i2b>
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f30:	6003      	str	r3, [r0, #0]
 8007f32:	f04f 0900 	mov.w	r9, #0
 8007f36:	07eb      	lsls	r3, r5, #31
 8007f38:	d50a      	bpl.n	8007f50 <__pow5mult+0x84>
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	4622      	mov	r2, r4
 8007f3e:	4638      	mov	r0, r7
 8007f40:	f7ff ff1c 	bl	8007d7c <__multiply>
 8007f44:	4680      	mov	r8, r0
 8007f46:	4631      	mov	r1, r6
 8007f48:	4638      	mov	r0, r7
 8007f4a:	f7ff fe4d 	bl	8007be8 <_Bfree>
 8007f4e:	4646      	mov	r6, r8
 8007f50:	106d      	asrs	r5, r5, #1
 8007f52:	d00b      	beq.n	8007f6c <__pow5mult+0xa0>
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	b938      	cbnz	r0, 8007f68 <__pow5mult+0x9c>
 8007f58:	4622      	mov	r2, r4
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	4638      	mov	r0, r7
 8007f5e:	f7ff ff0d 	bl	8007d7c <__multiply>
 8007f62:	6020      	str	r0, [r4, #0]
 8007f64:	f8c0 9000 	str.w	r9, [r0]
 8007f68:	4604      	mov	r4, r0
 8007f6a:	e7e4      	b.n	8007f36 <__pow5mult+0x6a>
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f72:	bf00      	nop
 8007f74:	08009200 	.word	0x08009200
 8007f78:	08009125 	.word	0x08009125
 8007f7c:	080091a5 	.word	0x080091a5

08007f80 <__lshift>:
 8007f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	460c      	mov	r4, r1
 8007f86:	4607      	mov	r7, r0
 8007f88:	4691      	mov	r9, r2
 8007f8a:	6923      	ldr	r3, [r4, #16]
 8007f8c:	6849      	ldr	r1, [r1, #4]
 8007f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f92:	68a3      	ldr	r3, [r4, #8]
 8007f94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f98:	f108 0601 	add.w	r6, r8, #1
 8007f9c:	42b3      	cmp	r3, r6
 8007f9e:	db0b      	blt.n	8007fb8 <__lshift+0x38>
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff fde1 	bl	8007b68 <_Balloc>
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	b948      	cbnz	r0, 8007fbe <__lshift+0x3e>
 8007faa:	4602      	mov	r2, r0
 8007fac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007fb0:	4b27      	ldr	r3, [pc, #156]	@ (8008050 <__lshift+0xd0>)
 8007fb2:	4828      	ldr	r0, [pc, #160]	@ (8008054 <__lshift+0xd4>)
 8007fb4:	f000 fb72 	bl	800869c <__assert_func>
 8007fb8:	3101      	adds	r1, #1
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	e7ee      	b.n	8007f9c <__lshift+0x1c>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f100 0114 	add.w	r1, r0, #20
 8007fc4:	f100 0210 	add.w	r2, r0, #16
 8007fc8:	4618      	mov	r0, r3
 8007fca:	4553      	cmp	r3, sl
 8007fcc:	db33      	blt.n	8008036 <__lshift+0xb6>
 8007fce:	6920      	ldr	r0, [r4, #16]
 8007fd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fd4:	f104 0314 	add.w	r3, r4, #20
 8007fd8:	f019 091f 	ands.w	r9, r9, #31
 8007fdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fe4:	d02b      	beq.n	800803e <__lshift+0xbe>
 8007fe6:	468a      	mov	sl, r1
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f1c9 0e20 	rsb	lr, r9, #32
 8007fee:	6818      	ldr	r0, [r3, #0]
 8007ff0:	fa00 f009 	lsl.w	r0, r0, r9
 8007ff4:	4310      	orrs	r0, r2
 8007ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8007ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ffe:	459c      	cmp	ip, r3
 8008000:	fa22 f20e 	lsr.w	r2, r2, lr
 8008004:	d8f3      	bhi.n	8007fee <__lshift+0x6e>
 8008006:	ebac 0304 	sub.w	r3, ip, r4
 800800a:	3b15      	subs	r3, #21
 800800c:	f023 0303 	bic.w	r3, r3, #3
 8008010:	3304      	adds	r3, #4
 8008012:	f104 0015 	add.w	r0, r4, #21
 8008016:	4584      	cmp	ip, r0
 8008018:	bf38      	it	cc
 800801a:	2304      	movcc	r3, #4
 800801c:	50ca      	str	r2, [r1, r3]
 800801e:	b10a      	cbz	r2, 8008024 <__lshift+0xa4>
 8008020:	f108 0602 	add.w	r6, r8, #2
 8008024:	3e01      	subs	r6, #1
 8008026:	4638      	mov	r0, r7
 8008028:	4621      	mov	r1, r4
 800802a:	612e      	str	r6, [r5, #16]
 800802c:	f7ff fddc 	bl	8007be8 <_Bfree>
 8008030:	4628      	mov	r0, r5
 8008032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008036:	f842 0f04 	str.w	r0, [r2, #4]!
 800803a:	3301      	adds	r3, #1
 800803c:	e7c5      	b.n	8007fca <__lshift+0x4a>
 800803e:	3904      	subs	r1, #4
 8008040:	f853 2b04 	ldr.w	r2, [r3], #4
 8008044:	459c      	cmp	ip, r3
 8008046:	f841 2f04 	str.w	r2, [r1, #4]!
 800804a:	d8f9      	bhi.n	8008040 <__lshift+0xc0>
 800804c:	e7ea      	b.n	8008024 <__lshift+0xa4>
 800804e:	bf00      	nop
 8008050:	08009194 	.word	0x08009194
 8008054:	080091a5 	.word	0x080091a5

08008058 <__mcmp>:
 8008058:	4603      	mov	r3, r0
 800805a:	690a      	ldr	r2, [r1, #16]
 800805c:	6900      	ldr	r0, [r0, #16]
 800805e:	b530      	push	{r4, r5, lr}
 8008060:	1a80      	subs	r0, r0, r2
 8008062:	d10e      	bne.n	8008082 <__mcmp+0x2a>
 8008064:	3314      	adds	r3, #20
 8008066:	3114      	adds	r1, #20
 8008068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800806c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008078:	4295      	cmp	r5, r2
 800807a:	d003      	beq.n	8008084 <__mcmp+0x2c>
 800807c:	d205      	bcs.n	800808a <__mcmp+0x32>
 800807e:	f04f 30ff 	mov.w	r0, #4294967295
 8008082:	bd30      	pop	{r4, r5, pc}
 8008084:	42a3      	cmp	r3, r4
 8008086:	d3f3      	bcc.n	8008070 <__mcmp+0x18>
 8008088:	e7fb      	b.n	8008082 <__mcmp+0x2a>
 800808a:	2001      	movs	r0, #1
 800808c:	e7f9      	b.n	8008082 <__mcmp+0x2a>
	...

08008090 <__mdiff>:
 8008090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	4689      	mov	r9, r1
 8008096:	4606      	mov	r6, r0
 8008098:	4611      	mov	r1, r2
 800809a:	4648      	mov	r0, r9
 800809c:	4614      	mov	r4, r2
 800809e:	f7ff ffdb 	bl	8008058 <__mcmp>
 80080a2:	1e05      	subs	r5, r0, #0
 80080a4:	d112      	bne.n	80080cc <__mdiff+0x3c>
 80080a6:	4629      	mov	r1, r5
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7ff fd5d 	bl	8007b68 <_Balloc>
 80080ae:	4602      	mov	r2, r0
 80080b0:	b928      	cbnz	r0, 80080be <__mdiff+0x2e>
 80080b2:	f240 2137 	movw	r1, #567	@ 0x237
 80080b6:	4b3e      	ldr	r3, [pc, #248]	@ (80081b0 <__mdiff+0x120>)
 80080b8:	483e      	ldr	r0, [pc, #248]	@ (80081b4 <__mdiff+0x124>)
 80080ba:	f000 faef 	bl	800869c <__assert_func>
 80080be:	2301      	movs	r3, #1
 80080c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080c4:	4610      	mov	r0, r2
 80080c6:	b003      	add	sp, #12
 80080c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080cc:	bfbc      	itt	lt
 80080ce:	464b      	movlt	r3, r9
 80080d0:	46a1      	movlt	r9, r4
 80080d2:	4630      	mov	r0, r6
 80080d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080d8:	bfba      	itte	lt
 80080da:	461c      	movlt	r4, r3
 80080dc:	2501      	movlt	r5, #1
 80080de:	2500      	movge	r5, #0
 80080e0:	f7ff fd42 	bl	8007b68 <_Balloc>
 80080e4:	4602      	mov	r2, r0
 80080e6:	b918      	cbnz	r0, 80080f0 <__mdiff+0x60>
 80080e8:	f240 2145 	movw	r1, #581	@ 0x245
 80080ec:	4b30      	ldr	r3, [pc, #192]	@ (80081b0 <__mdiff+0x120>)
 80080ee:	e7e3      	b.n	80080b8 <__mdiff+0x28>
 80080f0:	f100 0b14 	add.w	fp, r0, #20
 80080f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080f8:	f109 0310 	add.w	r3, r9, #16
 80080fc:	60c5      	str	r5, [r0, #12]
 80080fe:	f04f 0c00 	mov.w	ip, #0
 8008102:	f109 0514 	add.w	r5, r9, #20
 8008106:	46d9      	mov	r9, fp
 8008108:	6926      	ldr	r6, [r4, #16]
 800810a:	f104 0e14 	add.w	lr, r4, #20
 800810e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008112:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008116:	9301      	str	r3, [sp, #4]
 8008118:	9b01      	ldr	r3, [sp, #4]
 800811a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800811e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008122:	b281      	uxth	r1, r0
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	fa1f f38a 	uxth.w	r3, sl
 800812a:	1a5b      	subs	r3, r3, r1
 800812c:	0c00      	lsrs	r0, r0, #16
 800812e:	4463      	add	r3, ip
 8008130:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008134:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008138:	b29b      	uxth	r3, r3
 800813a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800813e:	4576      	cmp	r6, lr
 8008140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008144:	f849 3b04 	str.w	r3, [r9], #4
 8008148:	d8e6      	bhi.n	8008118 <__mdiff+0x88>
 800814a:	1b33      	subs	r3, r6, r4
 800814c:	3b15      	subs	r3, #21
 800814e:	f023 0303 	bic.w	r3, r3, #3
 8008152:	3415      	adds	r4, #21
 8008154:	3304      	adds	r3, #4
 8008156:	42a6      	cmp	r6, r4
 8008158:	bf38      	it	cc
 800815a:	2304      	movcc	r3, #4
 800815c:	441d      	add	r5, r3
 800815e:	445b      	add	r3, fp
 8008160:	461e      	mov	r6, r3
 8008162:	462c      	mov	r4, r5
 8008164:	4544      	cmp	r4, r8
 8008166:	d30e      	bcc.n	8008186 <__mdiff+0xf6>
 8008168:	f108 0103 	add.w	r1, r8, #3
 800816c:	1b49      	subs	r1, r1, r5
 800816e:	f021 0103 	bic.w	r1, r1, #3
 8008172:	3d03      	subs	r5, #3
 8008174:	45a8      	cmp	r8, r5
 8008176:	bf38      	it	cc
 8008178:	2100      	movcc	r1, #0
 800817a:	440b      	add	r3, r1
 800817c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008180:	b199      	cbz	r1, 80081aa <__mdiff+0x11a>
 8008182:	6117      	str	r7, [r2, #16]
 8008184:	e79e      	b.n	80080c4 <__mdiff+0x34>
 8008186:	46e6      	mov	lr, ip
 8008188:	f854 1b04 	ldr.w	r1, [r4], #4
 800818c:	fa1f fc81 	uxth.w	ip, r1
 8008190:	44f4      	add	ip, lr
 8008192:	0c08      	lsrs	r0, r1, #16
 8008194:	4471      	add	r1, lr
 8008196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800819a:	b289      	uxth	r1, r1
 800819c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081a4:	f846 1b04 	str.w	r1, [r6], #4
 80081a8:	e7dc      	b.n	8008164 <__mdiff+0xd4>
 80081aa:	3f01      	subs	r7, #1
 80081ac:	e7e6      	b.n	800817c <__mdiff+0xec>
 80081ae:	bf00      	nop
 80081b0:	08009194 	.word	0x08009194
 80081b4:	080091a5 	.word	0x080091a5

080081b8 <__d2b>:
 80081b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80081bc:	2101      	movs	r1, #1
 80081be:	4690      	mov	r8, r2
 80081c0:	4699      	mov	r9, r3
 80081c2:	9e08      	ldr	r6, [sp, #32]
 80081c4:	f7ff fcd0 	bl	8007b68 <_Balloc>
 80081c8:	4604      	mov	r4, r0
 80081ca:	b930      	cbnz	r0, 80081da <__d2b+0x22>
 80081cc:	4602      	mov	r2, r0
 80081ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80081d2:	4b23      	ldr	r3, [pc, #140]	@ (8008260 <__d2b+0xa8>)
 80081d4:	4823      	ldr	r0, [pc, #140]	@ (8008264 <__d2b+0xac>)
 80081d6:	f000 fa61 	bl	800869c <__assert_func>
 80081da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081e2:	b10d      	cbz	r5, 80081e8 <__d2b+0x30>
 80081e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	f1b8 0300 	subs.w	r3, r8, #0
 80081ee:	d024      	beq.n	800823a <__d2b+0x82>
 80081f0:	4668      	mov	r0, sp
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	f7ff fd7f 	bl	8007cf6 <__lo0bits>
 80081f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081fc:	b1d8      	cbz	r0, 8008236 <__d2b+0x7e>
 80081fe:	f1c0 0320 	rsb	r3, r0, #32
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	430b      	orrs	r3, r1
 8008208:	40c2      	lsrs	r2, r0
 800820a:	6163      	str	r3, [r4, #20]
 800820c:	9201      	str	r2, [sp, #4]
 800820e:	9b01      	ldr	r3, [sp, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bf0c      	ite	eq
 8008214:	2201      	moveq	r2, #1
 8008216:	2202      	movne	r2, #2
 8008218:	61a3      	str	r3, [r4, #24]
 800821a:	6122      	str	r2, [r4, #16]
 800821c:	b1ad      	cbz	r5, 800824a <__d2b+0x92>
 800821e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008222:	4405      	add	r5, r0
 8008224:	6035      	str	r5, [r6, #0]
 8008226:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	6018      	str	r0, [r3, #0]
 800822e:	4620      	mov	r0, r4
 8008230:	b002      	add	sp, #8
 8008232:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008236:	6161      	str	r1, [r4, #20]
 8008238:	e7e9      	b.n	800820e <__d2b+0x56>
 800823a:	a801      	add	r0, sp, #4
 800823c:	f7ff fd5b 	bl	8007cf6 <__lo0bits>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	6163      	str	r3, [r4, #20]
 8008246:	3020      	adds	r0, #32
 8008248:	e7e7      	b.n	800821a <__d2b+0x62>
 800824a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800824e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008252:	6030      	str	r0, [r6, #0]
 8008254:	6918      	ldr	r0, [r3, #16]
 8008256:	f7ff fd2f 	bl	8007cb8 <__hi0bits>
 800825a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800825e:	e7e4      	b.n	800822a <__d2b+0x72>
 8008260:	08009194 	.word	0x08009194
 8008264:	080091a5 	.word	0x080091a5

08008268 <__ssputs_r>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	461f      	mov	r7, r3
 800826e:	688e      	ldr	r6, [r1, #8]
 8008270:	4682      	mov	sl, r0
 8008272:	42be      	cmp	r6, r7
 8008274:	460c      	mov	r4, r1
 8008276:	4690      	mov	r8, r2
 8008278:	680b      	ldr	r3, [r1, #0]
 800827a:	d82d      	bhi.n	80082d8 <__ssputs_r+0x70>
 800827c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008280:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008284:	d026      	beq.n	80082d4 <__ssputs_r+0x6c>
 8008286:	6965      	ldr	r5, [r4, #20]
 8008288:	6909      	ldr	r1, [r1, #16]
 800828a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800828e:	eba3 0901 	sub.w	r9, r3, r1
 8008292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008296:	1c7b      	adds	r3, r7, #1
 8008298:	444b      	add	r3, r9
 800829a:	106d      	asrs	r5, r5, #1
 800829c:	429d      	cmp	r5, r3
 800829e:	bf38      	it	cc
 80082a0:	461d      	movcc	r5, r3
 80082a2:	0553      	lsls	r3, r2, #21
 80082a4:	d527      	bpl.n	80082f6 <__ssputs_r+0x8e>
 80082a6:	4629      	mov	r1, r5
 80082a8:	f7fd feb0 	bl	800600c <_malloc_r>
 80082ac:	4606      	mov	r6, r0
 80082ae:	b360      	cbz	r0, 800830a <__ssputs_r+0xa2>
 80082b0:	464a      	mov	r2, r9
 80082b2:	6921      	ldr	r1, [r4, #16]
 80082b4:	f7fe fdb1 	bl	8006e1a <memcpy>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	6126      	str	r6, [r4, #16]
 80082c6:	444e      	add	r6, r9
 80082c8:	6026      	str	r6, [r4, #0]
 80082ca:	463e      	mov	r6, r7
 80082cc:	6165      	str	r5, [r4, #20]
 80082ce:	eba5 0509 	sub.w	r5, r5, r9
 80082d2:	60a5      	str	r5, [r4, #8]
 80082d4:	42be      	cmp	r6, r7
 80082d6:	d900      	bls.n	80082da <__ssputs_r+0x72>
 80082d8:	463e      	mov	r6, r7
 80082da:	4632      	mov	r2, r6
 80082dc:	4641      	mov	r1, r8
 80082de:	6820      	ldr	r0, [r4, #0]
 80082e0:	f000 f9c2 	bl	8008668 <memmove>
 80082e4:	2000      	movs	r0, #0
 80082e6:	68a3      	ldr	r3, [r4, #8]
 80082e8:	1b9b      	subs	r3, r3, r6
 80082ea:	60a3      	str	r3, [r4, #8]
 80082ec:	6823      	ldr	r3, [r4, #0]
 80082ee:	4433      	add	r3, r6
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f6:	462a      	mov	r2, r5
 80082f8:	f000 fa14 	bl	8008724 <_realloc_r>
 80082fc:	4606      	mov	r6, r0
 80082fe:	2800      	cmp	r0, #0
 8008300:	d1e0      	bne.n	80082c4 <__ssputs_r+0x5c>
 8008302:	4650      	mov	r0, sl
 8008304:	6921      	ldr	r1, [r4, #16]
 8008306:	f7ff fbe7 	bl	8007ad8 <_free_r>
 800830a:	230c      	movs	r3, #12
 800830c:	f8ca 3000 	str.w	r3, [sl]
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f04f 30ff 	mov.w	r0, #4294967295
 8008316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	e7e9      	b.n	80082f2 <__ssputs_r+0x8a>
	...

08008320 <_svfiprintf_r>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4698      	mov	r8, r3
 8008326:	898b      	ldrh	r3, [r1, #12]
 8008328:	4607      	mov	r7, r0
 800832a:	061b      	lsls	r3, r3, #24
 800832c:	460d      	mov	r5, r1
 800832e:	4614      	mov	r4, r2
 8008330:	b09d      	sub	sp, #116	@ 0x74
 8008332:	d510      	bpl.n	8008356 <_svfiprintf_r+0x36>
 8008334:	690b      	ldr	r3, [r1, #16]
 8008336:	b973      	cbnz	r3, 8008356 <_svfiprintf_r+0x36>
 8008338:	2140      	movs	r1, #64	@ 0x40
 800833a:	f7fd fe67 	bl	800600c <_malloc_r>
 800833e:	6028      	str	r0, [r5, #0]
 8008340:	6128      	str	r0, [r5, #16]
 8008342:	b930      	cbnz	r0, 8008352 <_svfiprintf_r+0x32>
 8008344:	230c      	movs	r3, #12
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	b01d      	add	sp, #116	@ 0x74
 800834e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008352:	2340      	movs	r3, #64	@ 0x40
 8008354:	616b      	str	r3, [r5, #20]
 8008356:	2300      	movs	r3, #0
 8008358:	9309      	str	r3, [sp, #36]	@ 0x24
 800835a:	2320      	movs	r3, #32
 800835c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008360:	2330      	movs	r3, #48	@ 0x30
 8008362:	f04f 0901 	mov.w	r9, #1
 8008366:	f8cd 800c 	str.w	r8, [sp, #12]
 800836a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008504 <_svfiprintf_r+0x1e4>
 800836e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008372:	4623      	mov	r3, r4
 8008374:	469a      	mov	sl, r3
 8008376:	f813 2b01 	ldrb.w	r2, [r3], #1
 800837a:	b10a      	cbz	r2, 8008380 <_svfiprintf_r+0x60>
 800837c:	2a25      	cmp	r2, #37	@ 0x25
 800837e:	d1f9      	bne.n	8008374 <_svfiprintf_r+0x54>
 8008380:	ebba 0b04 	subs.w	fp, sl, r4
 8008384:	d00b      	beq.n	800839e <_svfiprintf_r+0x7e>
 8008386:	465b      	mov	r3, fp
 8008388:	4622      	mov	r2, r4
 800838a:	4629      	mov	r1, r5
 800838c:	4638      	mov	r0, r7
 800838e:	f7ff ff6b 	bl	8008268 <__ssputs_r>
 8008392:	3001      	adds	r0, #1
 8008394:	f000 80a7 	beq.w	80084e6 <_svfiprintf_r+0x1c6>
 8008398:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800839a:	445a      	add	r2, fp
 800839c:	9209      	str	r2, [sp, #36]	@ 0x24
 800839e:	f89a 3000 	ldrb.w	r3, [sl]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 809f 	beq.w	80084e6 <_svfiprintf_r+0x1c6>
 80083a8:	2300      	movs	r3, #0
 80083aa:	f04f 32ff 	mov.w	r2, #4294967295
 80083ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b2:	f10a 0a01 	add.w	sl, sl, #1
 80083b6:	9304      	str	r3, [sp, #16]
 80083b8:	9307      	str	r3, [sp, #28]
 80083ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083be:	931a      	str	r3, [sp, #104]	@ 0x68
 80083c0:	4654      	mov	r4, sl
 80083c2:	2205      	movs	r2, #5
 80083c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c8:	484e      	ldr	r0, [pc, #312]	@ (8008504 <_svfiprintf_r+0x1e4>)
 80083ca:	f7fe fd18 	bl	8006dfe <memchr>
 80083ce:	9a04      	ldr	r2, [sp, #16]
 80083d0:	b9d8      	cbnz	r0, 800840a <_svfiprintf_r+0xea>
 80083d2:	06d0      	lsls	r0, r2, #27
 80083d4:	bf44      	itt	mi
 80083d6:	2320      	movmi	r3, #32
 80083d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083dc:	0711      	lsls	r1, r2, #28
 80083de:	bf44      	itt	mi
 80083e0:	232b      	movmi	r3, #43	@ 0x2b
 80083e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80083ec:	d015      	beq.n	800841a <_svfiprintf_r+0xfa>
 80083ee:	4654      	mov	r4, sl
 80083f0:	2000      	movs	r0, #0
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	9a07      	ldr	r2, [sp, #28]
 80083f8:	4621      	mov	r1, r4
 80083fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fe:	3b30      	subs	r3, #48	@ 0x30
 8008400:	2b09      	cmp	r3, #9
 8008402:	d94b      	bls.n	800849c <_svfiprintf_r+0x17c>
 8008404:	b1b0      	cbz	r0, 8008434 <_svfiprintf_r+0x114>
 8008406:	9207      	str	r2, [sp, #28]
 8008408:	e014      	b.n	8008434 <_svfiprintf_r+0x114>
 800840a:	eba0 0308 	sub.w	r3, r0, r8
 800840e:	fa09 f303 	lsl.w	r3, r9, r3
 8008412:	4313      	orrs	r3, r2
 8008414:	46a2      	mov	sl, r4
 8008416:	9304      	str	r3, [sp, #16]
 8008418:	e7d2      	b.n	80083c0 <_svfiprintf_r+0xa0>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	1d19      	adds	r1, r3, #4
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	9103      	str	r1, [sp, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	bfbb      	ittet	lt
 8008426:	425b      	neglt	r3, r3
 8008428:	f042 0202 	orrlt.w	r2, r2, #2
 800842c:	9307      	strge	r3, [sp, #28]
 800842e:	9307      	strlt	r3, [sp, #28]
 8008430:	bfb8      	it	lt
 8008432:	9204      	strlt	r2, [sp, #16]
 8008434:	7823      	ldrb	r3, [r4, #0]
 8008436:	2b2e      	cmp	r3, #46	@ 0x2e
 8008438:	d10a      	bne.n	8008450 <_svfiprintf_r+0x130>
 800843a:	7863      	ldrb	r3, [r4, #1]
 800843c:	2b2a      	cmp	r3, #42	@ 0x2a
 800843e:	d132      	bne.n	80084a6 <_svfiprintf_r+0x186>
 8008440:	9b03      	ldr	r3, [sp, #12]
 8008442:	3402      	adds	r4, #2
 8008444:	1d1a      	adds	r2, r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	9203      	str	r2, [sp, #12]
 800844a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800844e:	9305      	str	r3, [sp, #20]
 8008450:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008508 <_svfiprintf_r+0x1e8>
 8008454:	2203      	movs	r2, #3
 8008456:	4650      	mov	r0, sl
 8008458:	7821      	ldrb	r1, [r4, #0]
 800845a:	f7fe fcd0 	bl	8006dfe <memchr>
 800845e:	b138      	cbz	r0, 8008470 <_svfiprintf_r+0x150>
 8008460:	2240      	movs	r2, #64	@ 0x40
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	eba0 000a 	sub.w	r0, r0, sl
 8008468:	4082      	lsls	r2, r0
 800846a:	4313      	orrs	r3, r2
 800846c:	3401      	adds	r4, #1
 800846e:	9304      	str	r3, [sp, #16]
 8008470:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008474:	2206      	movs	r2, #6
 8008476:	4825      	ldr	r0, [pc, #148]	@ (800850c <_svfiprintf_r+0x1ec>)
 8008478:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800847c:	f7fe fcbf 	bl	8006dfe <memchr>
 8008480:	2800      	cmp	r0, #0
 8008482:	d036      	beq.n	80084f2 <_svfiprintf_r+0x1d2>
 8008484:	4b22      	ldr	r3, [pc, #136]	@ (8008510 <_svfiprintf_r+0x1f0>)
 8008486:	bb1b      	cbnz	r3, 80084d0 <_svfiprintf_r+0x1b0>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	3307      	adds	r3, #7
 800848c:	f023 0307 	bic.w	r3, r3, #7
 8008490:	3308      	adds	r3, #8
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008496:	4433      	add	r3, r6
 8008498:	9309      	str	r3, [sp, #36]	@ 0x24
 800849a:	e76a      	b.n	8008372 <_svfiprintf_r+0x52>
 800849c:	460c      	mov	r4, r1
 800849e:	2001      	movs	r0, #1
 80084a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a4:	e7a8      	b.n	80083f8 <_svfiprintf_r+0xd8>
 80084a6:	2300      	movs	r3, #0
 80084a8:	f04f 0c0a 	mov.w	ip, #10
 80084ac:	4619      	mov	r1, r3
 80084ae:	3401      	adds	r4, #1
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	4620      	mov	r0, r4
 80084b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b8:	3a30      	subs	r2, #48	@ 0x30
 80084ba:	2a09      	cmp	r2, #9
 80084bc:	d903      	bls.n	80084c6 <_svfiprintf_r+0x1a6>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0c6      	beq.n	8008450 <_svfiprintf_r+0x130>
 80084c2:	9105      	str	r1, [sp, #20]
 80084c4:	e7c4      	b.n	8008450 <_svfiprintf_r+0x130>
 80084c6:	4604      	mov	r4, r0
 80084c8:	2301      	movs	r3, #1
 80084ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ce:	e7f0      	b.n	80084b2 <_svfiprintf_r+0x192>
 80084d0:	ab03      	add	r3, sp, #12
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	462a      	mov	r2, r5
 80084d6:	4638      	mov	r0, r7
 80084d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008514 <_svfiprintf_r+0x1f4>)
 80084da:	a904      	add	r1, sp, #16
 80084dc:	f7fd fec0 	bl	8006260 <_printf_float>
 80084e0:	1c42      	adds	r2, r0, #1
 80084e2:	4606      	mov	r6, r0
 80084e4:	d1d6      	bne.n	8008494 <_svfiprintf_r+0x174>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	065b      	lsls	r3, r3, #25
 80084ea:	f53f af2d 	bmi.w	8008348 <_svfiprintf_r+0x28>
 80084ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084f0:	e72c      	b.n	800834c <_svfiprintf_r+0x2c>
 80084f2:	ab03      	add	r3, sp, #12
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	462a      	mov	r2, r5
 80084f8:	4638      	mov	r0, r7
 80084fa:	4b06      	ldr	r3, [pc, #24]	@ (8008514 <_svfiprintf_r+0x1f4>)
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	f7fe f94d 	bl	800679c <_printf_i>
 8008502:	e7ed      	b.n	80084e0 <_svfiprintf_r+0x1c0>
 8008504:	08009300 	.word	0x08009300
 8008508:	08009306 	.word	0x08009306
 800850c:	0800930a 	.word	0x0800930a
 8008510:	08006261 	.word	0x08006261
 8008514:	08008269 	.word	0x08008269

08008518 <__sflush_r>:
 8008518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	0716      	lsls	r6, r2, #28
 8008520:	4605      	mov	r5, r0
 8008522:	460c      	mov	r4, r1
 8008524:	d454      	bmi.n	80085d0 <__sflush_r+0xb8>
 8008526:	684b      	ldr	r3, [r1, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc02      	bgt.n	8008532 <__sflush_r+0x1a>
 800852c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800852e:	2b00      	cmp	r3, #0
 8008530:	dd48      	ble.n	80085c4 <__sflush_r+0xac>
 8008532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008534:	2e00      	cmp	r6, #0
 8008536:	d045      	beq.n	80085c4 <__sflush_r+0xac>
 8008538:	2300      	movs	r3, #0
 800853a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800853e:	682f      	ldr	r7, [r5, #0]
 8008540:	6a21      	ldr	r1, [r4, #32]
 8008542:	602b      	str	r3, [r5, #0]
 8008544:	d030      	beq.n	80085a8 <__sflush_r+0x90>
 8008546:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008548:	89a3      	ldrh	r3, [r4, #12]
 800854a:	0759      	lsls	r1, r3, #29
 800854c:	d505      	bpl.n	800855a <__sflush_r+0x42>
 800854e:	6863      	ldr	r3, [r4, #4]
 8008550:	1ad2      	subs	r2, r2, r3
 8008552:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008554:	b10b      	cbz	r3, 800855a <__sflush_r+0x42>
 8008556:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	2300      	movs	r3, #0
 800855c:	4628      	mov	r0, r5
 800855e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008560:	6a21      	ldr	r1, [r4, #32]
 8008562:	47b0      	blx	r6
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	89a3      	ldrh	r3, [r4, #12]
 8008568:	d106      	bne.n	8008578 <__sflush_r+0x60>
 800856a:	6829      	ldr	r1, [r5, #0]
 800856c:	291d      	cmp	r1, #29
 800856e:	d82b      	bhi.n	80085c8 <__sflush_r+0xb0>
 8008570:	4a28      	ldr	r2, [pc, #160]	@ (8008614 <__sflush_r+0xfc>)
 8008572:	410a      	asrs	r2, r1
 8008574:	07d6      	lsls	r6, r2, #31
 8008576:	d427      	bmi.n	80085c8 <__sflush_r+0xb0>
 8008578:	2200      	movs	r2, #0
 800857a:	6062      	str	r2, [r4, #4]
 800857c:	6922      	ldr	r2, [r4, #16]
 800857e:	04d9      	lsls	r1, r3, #19
 8008580:	6022      	str	r2, [r4, #0]
 8008582:	d504      	bpl.n	800858e <__sflush_r+0x76>
 8008584:	1c42      	adds	r2, r0, #1
 8008586:	d101      	bne.n	800858c <__sflush_r+0x74>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b903      	cbnz	r3, 800858e <__sflush_r+0x76>
 800858c:	6560      	str	r0, [r4, #84]	@ 0x54
 800858e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008590:	602f      	str	r7, [r5, #0]
 8008592:	b1b9      	cbz	r1, 80085c4 <__sflush_r+0xac>
 8008594:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008598:	4299      	cmp	r1, r3
 800859a:	d002      	beq.n	80085a2 <__sflush_r+0x8a>
 800859c:	4628      	mov	r0, r5
 800859e:	f7ff fa9b 	bl	8007ad8 <_free_r>
 80085a2:	2300      	movs	r3, #0
 80085a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80085a6:	e00d      	b.n	80085c4 <__sflush_r+0xac>
 80085a8:	2301      	movs	r3, #1
 80085aa:	4628      	mov	r0, r5
 80085ac:	47b0      	blx	r6
 80085ae:	4602      	mov	r2, r0
 80085b0:	1c50      	adds	r0, r2, #1
 80085b2:	d1c9      	bne.n	8008548 <__sflush_r+0x30>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0c6      	beq.n	8008548 <__sflush_r+0x30>
 80085ba:	2b1d      	cmp	r3, #29
 80085bc:	d001      	beq.n	80085c2 <__sflush_r+0xaa>
 80085be:	2b16      	cmp	r3, #22
 80085c0:	d11d      	bne.n	80085fe <__sflush_r+0xe6>
 80085c2:	602f      	str	r7, [r5, #0]
 80085c4:	2000      	movs	r0, #0
 80085c6:	e021      	b.n	800860c <__sflush_r+0xf4>
 80085c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085cc:	b21b      	sxth	r3, r3
 80085ce:	e01a      	b.n	8008606 <__sflush_r+0xee>
 80085d0:	690f      	ldr	r7, [r1, #16]
 80085d2:	2f00      	cmp	r7, #0
 80085d4:	d0f6      	beq.n	80085c4 <__sflush_r+0xac>
 80085d6:	0793      	lsls	r3, r2, #30
 80085d8:	bf18      	it	ne
 80085da:	2300      	movne	r3, #0
 80085dc:	680e      	ldr	r6, [r1, #0]
 80085de:	bf08      	it	eq
 80085e0:	694b      	ldreq	r3, [r1, #20]
 80085e2:	1bf6      	subs	r6, r6, r7
 80085e4:	600f      	str	r7, [r1, #0]
 80085e6:	608b      	str	r3, [r1, #8]
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	ddeb      	ble.n	80085c4 <__sflush_r+0xac>
 80085ec:	4633      	mov	r3, r6
 80085ee:	463a      	mov	r2, r7
 80085f0:	4628      	mov	r0, r5
 80085f2:	6a21      	ldr	r1, [r4, #32]
 80085f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80085f8:	47e0      	blx	ip
 80085fa:	2800      	cmp	r0, #0
 80085fc:	dc07      	bgt.n	800860e <__sflush_r+0xf6>
 80085fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008606:	f04f 30ff 	mov.w	r0, #4294967295
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800860e:	4407      	add	r7, r0
 8008610:	1a36      	subs	r6, r6, r0
 8008612:	e7e9      	b.n	80085e8 <__sflush_r+0xd0>
 8008614:	dfbffffe 	.word	0xdfbffffe

08008618 <_fflush_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	690b      	ldr	r3, [r1, #16]
 800861c:	4605      	mov	r5, r0
 800861e:	460c      	mov	r4, r1
 8008620:	b913      	cbnz	r3, 8008628 <_fflush_r+0x10>
 8008622:	2500      	movs	r5, #0
 8008624:	4628      	mov	r0, r5
 8008626:	bd38      	pop	{r3, r4, r5, pc}
 8008628:	b118      	cbz	r0, 8008632 <_fflush_r+0x1a>
 800862a:	6a03      	ldr	r3, [r0, #32]
 800862c:	b90b      	cbnz	r3, 8008632 <_fflush_r+0x1a>
 800862e:	f7fe fa61 	bl	8006af4 <__sinit>
 8008632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0f3      	beq.n	8008622 <_fflush_r+0xa>
 800863a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800863c:	07d0      	lsls	r0, r2, #31
 800863e:	d404      	bmi.n	800864a <_fflush_r+0x32>
 8008640:	0599      	lsls	r1, r3, #22
 8008642:	d402      	bmi.n	800864a <_fflush_r+0x32>
 8008644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008646:	f7fe fbd8 	bl	8006dfa <__retarget_lock_acquire_recursive>
 800864a:	4628      	mov	r0, r5
 800864c:	4621      	mov	r1, r4
 800864e:	f7ff ff63 	bl	8008518 <__sflush_r>
 8008652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008654:	4605      	mov	r5, r0
 8008656:	07da      	lsls	r2, r3, #31
 8008658:	d4e4      	bmi.n	8008624 <_fflush_r+0xc>
 800865a:	89a3      	ldrh	r3, [r4, #12]
 800865c:	059b      	lsls	r3, r3, #22
 800865e:	d4e1      	bmi.n	8008624 <_fflush_r+0xc>
 8008660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008662:	f7fe fbcb 	bl	8006dfc <__retarget_lock_release_recursive>
 8008666:	e7dd      	b.n	8008624 <_fflush_r+0xc>

08008668 <memmove>:
 8008668:	4288      	cmp	r0, r1
 800866a:	b510      	push	{r4, lr}
 800866c:	eb01 0402 	add.w	r4, r1, r2
 8008670:	d902      	bls.n	8008678 <memmove+0x10>
 8008672:	4284      	cmp	r4, r0
 8008674:	4623      	mov	r3, r4
 8008676:	d807      	bhi.n	8008688 <memmove+0x20>
 8008678:	1e43      	subs	r3, r0, #1
 800867a:	42a1      	cmp	r1, r4
 800867c:	d008      	beq.n	8008690 <memmove+0x28>
 800867e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008686:	e7f8      	b.n	800867a <memmove+0x12>
 8008688:	4601      	mov	r1, r0
 800868a:	4402      	add	r2, r0
 800868c:	428a      	cmp	r2, r1
 800868e:	d100      	bne.n	8008692 <memmove+0x2a>
 8008690:	bd10      	pop	{r4, pc}
 8008692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800869a:	e7f7      	b.n	800868c <memmove+0x24>

0800869c <__assert_func>:
 800869c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800869e:	4614      	mov	r4, r2
 80086a0:	461a      	mov	r2, r3
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <__assert_func+0x2c>)
 80086a4:	4605      	mov	r5, r0
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68d8      	ldr	r0, [r3, #12]
 80086aa:	b954      	cbnz	r4, 80086c2 <__assert_func+0x26>
 80086ac:	4b07      	ldr	r3, [pc, #28]	@ (80086cc <__assert_func+0x30>)
 80086ae:	461c      	mov	r4, r3
 80086b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086b4:	9100      	str	r1, [sp, #0]
 80086b6:	462b      	mov	r3, r5
 80086b8:	4905      	ldr	r1, [pc, #20]	@ (80086d0 <__assert_func+0x34>)
 80086ba:	f000 f86f 	bl	800879c <fiprintf>
 80086be:	f7fd fc6b 	bl	8005f98 <abort>
 80086c2:	4b04      	ldr	r3, [pc, #16]	@ (80086d4 <__assert_func+0x38>)
 80086c4:	e7f4      	b.n	80086b0 <__assert_func+0x14>
 80086c6:	bf00      	nop
 80086c8:	2000001c 	.word	0x2000001c
 80086cc:	08009356 	.word	0x08009356
 80086d0:	08009328 	.word	0x08009328
 80086d4:	0800931b 	.word	0x0800931b

080086d8 <_calloc_r>:
 80086d8:	b570      	push	{r4, r5, r6, lr}
 80086da:	fba1 5402 	umull	r5, r4, r1, r2
 80086de:	b93c      	cbnz	r4, 80086f0 <_calloc_r+0x18>
 80086e0:	4629      	mov	r1, r5
 80086e2:	f7fd fc93 	bl	800600c <_malloc_r>
 80086e6:	4606      	mov	r6, r0
 80086e8:	b928      	cbnz	r0, 80086f6 <_calloc_r+0x1e>
 80086ea:	2600      	movs	r6, #0
 80086ec:	4630      	mov	r0, r6
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	220c      	movs	r2, #12
 80086f2:	6002      	str	r2, [r0, #0]
 80086f4:	e7f9      	b.n	80086ea <_calloc_r+0x12>
 80086f6:	462a      	mov	r2, r5
 80086f8:	4621      	mov	r1, r4
 80086fa:	f7fe faad 	bl	8006c58 <memset>
 80086fe:	e7f5      	b.n	80086ec <_calloc_r+0x14>

08008700 <__ascii_mbtowc>:
 8008700:	b082      	sub	sp, #8
 8008702:	b901      	cbnz	r1, 8008706 <__ascii_mbtowc+0x6>
 8008704:	a901      	add	r1, sp, #4
 8008706:	b142      	cbz	r2, 800871a <__ascii_mbtowc+0x1a>
 8008708:	b14b      	cbz	r3, 800871e <__ascii_mbtowc+0x1e>
 800870a:	7813      	ldrb	r3, [r2, #0]
 800870c:	600b      	str	r3, [r1, #0]
 800870e:	7812      	ldrb	r2, [r2, #0]
 8008710:	1e10      	subs	r0, r2, #0
 8008712:	bf18      	it	ne
 8008714:	2001      	movne	r0, #1
 8008716:	b002      	add	sp, #8
 8008718:	4770      	bx	lr
 800871a:	4610      	mov	r0, r2
 800871c:	e7fb      	b.n	8008716 <__ascii_mbtowc+0x16>
 800871e:	f06f 0001 	mvn.w	r0, #1
 8008722:	e7f8      	b.n	8008716 <__ascii_mbtowc+0x16>

08008724 <_realloc_r>:
 8008724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008728:	4680      	mov	r8, r0
 800872a:	4615      	mov	r5, r2
 800872c:	460c      	mov	r4, r1
 800872e:	b921      	cbnz	r1, 800873a <_realloc_r+0x16>
 8008730:	4611      	mov	r1, r2
 8008732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008736:	f7fd bc69 	b.w	800600c <_malloc_r>
 800873a:	b92a      	cbnz	r2, 8008748 <_realloc_r+0x24>
 800873c:	f7ff f9cc 	bl	8007ad8 <_free_r>
 8008740:	2400      	movs	r4, #0
 8008742:	4620      	mov	r0, r4
 8008744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008748:	f000 f83a 	bl	80087c0 <_malloc_usable_size_r>
 800874c:	4285      	cmp	r5, r0
 800874e:	4606      	mov	r6, r0
 8008750:	d802      	bhi.n	8008758 <_realloc_r+0x34>
 8008752:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008756:	d8f4      	bhi.n	8008742 <_realloc_r+0x1e>
 8008758:	4629      	mov	r1, r5
 800875a:	4640      	mov	r0, r8
 800875c:	f7fd fc56 	bl	800600c <_malloc_r>
 8008760:	4607      	mov	r7, r0
 8008762:	2800      	cmp	r0, #0
 8008764:	d0ec      	beq.n	8008740 <_realloc_r+0x1c>
 8008766:	42b5      	cmp	r5, r6
 8008768:	462a      	mov	r2, r5
 800876a:	4621      	mov	r1, r4
 800876c:	bf28      	it	cs
 800876e:	4632      	movcs	r2, r6
 8008770:	f7fe fb53 	bl	8006e1a <memcpy>
 8008774:	4621      	mov	r1, r4
 8008776:	4640      	mov	r0, r8
 8008778:	f7ff f9ae 	bl	8007ad8 <_free_r>
 800877c:	463c      	mov	r4, r7
 800877e:	e7e0      	b.n	8008742 <_realloc_r+0x1e>

08008780 <__ascii_wctomb>:
 8008780:	4603      	mov	r3, r0
 8008782:	4608      	mov	r0, r1
 8008784:	b141      	cbz	r1, 8008798 <__ascii_wctomb+0x18>
 8008786:	2aff      	cmp	r2, #255	@ 0xff
 8008788:	d904      	bls.n	8008794 <__ascii_wctomb+0x14>
 800878a:	228a      	movs	r2, #138	@ 0x8a
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	4770      	bx	lr
 8008794:	2001      	movs	r0, #1
 8008796:	700a      	strb	r2, [r1, #0]
 8008798:	4770      	bx	lr
	...

0800879c <fiprintf>:
 800879c:	b40e      	push	{r1, r2, r3}
 800879e:	b503      	push	{r0, r1, lr}
 80087a0:	4601      	mov	r1, r0
 80087a2:	ab03      	add	r3, sp, #12
 80087a4:	4805      	ldr	r0, [pc, #20]	@ (80087bc <fiprintf+0x20>)
 80087a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	9301      	str	r3, [sp, #4]
 80087ae:	f000 f837 	bl	8008820 <_vfiprintf_r>
 80087b2:	b002      	add	sp, #8
 80087b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80087b8:	b003      	add	sp, #12
 80087ba:	4770      	bx	lr
 80087bc:	2000001c 	.word	0x2000001c

080087c0 <_malloc_usable_size_r>:
 80087c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c4:	1f18      	subs	r0, r3, #4
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	bfbc      	itt	lt
 80087ca:	580b      	ldrlt	r3, [r1, r0]
 80087cc:	18c0      	addlt	r0, r0, r3
 80087ce:	4770      	bx	lr

080087d0 <__sfputc_r>:
 80087d0:	6893      	ldr	r3, [r2, #8]
 80087d2:	b410      	push	{r4}
 80087d4:	3b01      	subs	r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	6093      	str	r3, [r2, #8]
 80087da:	da07      	bge.n	80087ec <__sfputc_r+0x1c>
 80087dc:	6994      	ldr	r4, [r2, #24]
 80087de:	42a3      	cmp	r3, r4
 80087e0:	db01      	blt.n	80087e6 <__sfputc_r+0x16>
 80087e2:	290a      	cmp	r1, #10
 80087e4:	d102      	bne.n	80087ec <__sfputc_r+0x1c>
 80087e6:	bc10      	pop	{r4}
 80087e8:	f000 b932 	b.w	8008a50 <__swbuf_r>
 80087ec:	6813      	ldr	r3, [r2, #0]
 80087ee:	1c58      	adds	r0, r3, #1
 80087f0:	6010      	str	r0, [r2, #0]
 80087f2:	7019      	strb	r1, [r3, #0]
 80087f4:	4608      	mov	r0, r1
 80087f6:	bc10      	pop	{r4}
 80087f8:	4770      	bx	lr

080087fa <__sfputs_r>:
 80087fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fc:	4606      	mov	r6, r0
 80087fe:	460f      	mov	r7, r1
 8008800:	4614      	mov	r4, r2
 8008802:	18d5      	adds	r5, r2, r3
 8008804:	42ac      	cmp	r4, r5
 8008806:	d101      	bne.n	800880c <__sfputs_r+0x12>
 8008808:	2000      	movs	r0, #0
 800880a:	e007      	b.n	800881c <__sfputs_r+0x22>
 800880c:	463a      	mov	r2, r7
 800880e:	4630      	mov	r0, r6
 8008810:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008814:	f7ff ffdc 	bl	80087d0 <__sfputc_r>
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	d1f3      	bne.n	8008804 <__sfputs_r+0xa>
 800881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008820 <_vfiprintf_r>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	460d      	mov	r5, r1
 8008826:	4614      	mov	r4, r2
 8008828:	4698      	mov	r8, r3
 800882a:	4606      	mov	r6, r0
 800882c:	b09d      	sub	sp, #116	@ 0x74
 800882e:	b118      	cbz	r0, 8008838 <_vfiprintf_r+0x18>
 8008830:	6a03      	ldr	r3, [r0, #32]
 8008832:	b90b      	cbnz	r3, 8008838 <_vfiprintf_r+0x18>
 8008834:	f7fe f95e 	bl	8006af4 <__sinit>
 8008838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800883a:	07d9      	lsls	r1, r3, #31
 800883c:	d405      	bmi.n	800884a <_vfiprintf_r+0x2a>
 800883e:	89ab      	ldrh	r3, [r5, #12]
 8008840:	059a      	lsls	r2, r3, #22
 8008842:	d402      	bmi.n	800884a <_vfiprintf_r+0x2a>
 8008844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008846:	f7fe fad8 	bl	8006dfa <__retarget_lock_acquire_recursive>
 800884a:	89ab      	ldrh	r3, [r5, #12]
 800884c:	071b      	lsls	r3, r3, #28
 800884e:	d501      	bpl.n	8008854 <_vfiprintf_r+0x34>
 8008850:	692b      	ldr	r3, [r5, #16]
 8008852:	b99b      	cbnz	r3, 800887c <_vfiprintf_r+0x5c>
 8008854:	4629      	mov	r1, r5
 8008856:	4630      	mov	r0, r6
 8008858:	f000 f938 	bl	8008acc <__swsetup_r>
 800885c:	b170      	cbz	r0, 800887c <_vfiprintf_r+0x5c>
 800885e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008860:	07dc      	lsls	r4, r3, #31
 8008862:	d504      	bpl.n	800886e <_vfiprintf_r+0x4e>
 8008864:	f04f 30ff 	mov.w	r0, #4294967295
 8008868:	b01d      	add	sp, #116	@ 0x74
 800886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886e:	89ab      	ldrh	r3, [r5, #12]
 8008870:	0598      	lsls	r0, r3, #22
 8008872:	d4f7      	bmi.n	8008864 <_vfiprintf_r+0x44>
 8008874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008876:	f7fe fac1 	bl	8006dfc <__retarget_lock_release_recursive>
 800887a:	e7f3      	b.n	8008864 <_vfiprintf_r+0x44>
 800887c:	2300      	movs	r3, #0
 800887e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008880:	2320      	movs	r3, #32
 8008882:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008886:	2330      	movs	r3, #48	@ 0x30
 8008888:	f04f 0901 	mov.w	r9, #1
 800888c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008890:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008a3c <_vfiprintf_r+0x21c>
 8008894:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008898:	4623      	mov	r3, r4
 800889a:	469a      	mov	sl, r3
 800889c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a0:	b10a      	cbz	r2, 80088a6 <_vfiprintf_r+0x86>
 80088a2:	2a25      	cmp	r2, #37	@ 0x25
 80088a4:	d1f9      	bne.n	800889a <_vfiprintf_r+0x7a>
 80088a6:	ebba 0b04 	subs.w	fp, sl, r4
 80088aa:	d00b      	beq.n	80088c4 <_vfiprintf_r+0xa4>
 80088ac:	465b      	mov	r3, fp
 80088ae:	4622      	mov	r2, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f7ff ffa1 	bl	80087fa <__sfputs_r>
 80088b8:	3001      	adds	r0, #1
 80088ba:	f000 80a7 	beq.w	8008a0c <_vfiprintf_r+0x1ec>
 80088be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c0:	445a      	add	r2, fp
 80088c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c4:	f89a 3000 	ldrb.w	r3, [sl]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 809f 	beq.w	8008a0c <_vfiprintf_r+0x1ec>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f04f 32ff 	mov.w	r2, #4294967295
 80088d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d8:	f10a 0a01 	add.w	sl, sl, #1
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	9307      	str	r3, [sp, #28]
 80088e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80088e6:	4654      	mov	r4, sl
 80088e8:	2205      	movs	r2, #5
 80088ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ee:	4853      	ldr	r0, [pc, #332]	@ (8008a3c <_vfiprintf_r+0x21c>)
 80088f0:	f7fe fa85 	bl	8006dfe <memchr>
 80088f4:	9a04      	ldr	r2, [sp, #16]
 80088f6:	b9d8      	cbnz	r0, 8008930 <_vfiprintf_r+0x110>
 80088f8:	06d1      	lsls	r1, r2, #27
 80088fa:	bf44      	itt	mi
 80088fc:	2320      	movmi	r3, #32
 80088fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008902:	0713      	lsls	r3, r2, #28
 8008904:	bf44      	itt	mi
 8008906:	232b      	movmi	r3, #43	@ 0x2b
 8008908:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800890c:	f89a 3000 	ldrb.w	r3, [sl]
 8008910:	2b2a      	cmp	r3, #42	@ 0x2a
 8008912:	d015      	beq.n	8008940 <_vfiprintf_r+0x120>
 8008914:	4654      	mov	r4, sl
 8008916:	2000      	movs	r0, #0
 8008918:	f04f 0c0a 	mov.w	ip, #10
 800891c:	9a07      	ldr	r2, [sp, #28]
 800891e:	4621      	mov	r1, r4
 8008920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008924:	3b30      	subs	r3, #48	@ 0x30
 8008926:	2b09      	cmp	r3, #9
 8008928:	d94b      	bls.n	80089c2 <_vfiprintf_r+0x1a2>
 800892a:	b1b0      	cbz	r0, 800895a <_vfiprintf_r+0x13a>
 800892c:	9207      	str	r2, [sp, #28]
 800892e:	e014      	b.n	800895a <_vfiprintf_r+0x13a>
 8008930:	eba0 0308 	sub.w	r3, r0, r8
 8008934:	fa09 f303 	lsl.w	r3, r9, r3
 8008938:	4313      	orrs	r3, r2
 800893a:	46a2      	mov	sl, r4
 800893c:	9304      	str	r3, [sp, #16]
 800893e:	e7d2      	b.n	80088e6 <_vfiprintf_r+0xc6>
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	1d19      	adds	r1, r3, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	9103      	str	r1, [sp, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	bfbb      	ittet	lt
 800894c:	425b      	neglt	r3, r3
 800894e:	f042 0202 	orrlt.w	r2, r2, #2
 8008952:	9307      	strge	r3, [sp, #28]
 8008954:	9307      	strlt	r3, [sp, #28]
 8008956:	bfb8      	it	lt
 8008958:	9204      	strlt	r2, [sp, #16]
 800895a:	7823      	ldrb	r3, [r4, #0]
 800895c:	2b2e      	cmp	r3, #46	@ 0x2e
 800895e:	d10a      	bne.n	8008976 <_vfiprintf_r+0x156>
 8008960:	7863      	ldrb	r3, [r4, #1]
 8008962:	2b2a      	cmp	r3, #42	@ 0x2a
 8008964:	d132      	bne.n	80089cc <_vfiprintf_r+0x1ac>
 8008966:	9b03      	ldr	r3, [sp, #12]
 8008968:	3402      	adds	r4, #2
 800896a:	1d1a      	adds	r2, r3, #4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	9203      	str	r2, [sp, #12]
 8008970:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008974:	9305      	str	r3, [sp, #20]
 8008976:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008a40 <_vfiprintf_r+0x220>
 800897a:	2203      	movs	r2, #3
 800897c:	4650      	mov	r0, sl
 800897e:	7821      	ldrb	r1, [r4, #0]
 8008980:	f7fe fa3d 	bl	8006dfe <memchr>
 8008984:	b138      	cbz	r0, 8008996 <_vfiprintf_r+0x176>
 8008986:	2240      	movs	r2, #64	@ 0x40
 8008988:	9b04      	ldr	r3, [sp, #16]
 800898a:	eba0 000a 	sub.w	r0, r0, sl
 800898e:	4082      	lsls	r2, r0
 8008990:	4313      	orrs	r3, r2
 8008992:	3401      	adds	r4, #1
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899a:	2206      	movs	r2, #6
 800899c:	4829      	ldr	r0, [pc, #164]	@ (8008a44 <_vfiprintf_r+0x224>)
 800899e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089a2:	f7fe fa2c 	bl	8006dfe <memchr>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d03f      	beq.n	8008a2a <_vfiprintf_r+0x20a>
 80089aa:	4b27      	ldr	r3, [pc, #156]	@ (8008a48 <_vfiprintf_r+0x228>)
 80089ac:	bb1b      	cbnz	r3, 80089f6 <_vfiprintf_r+0x1d6>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	3307      	adds	r3, #7
 80089b2:	f023 0307 	bic.w	r3, r3, #7
 80089b6:	3308      	adds	r3, #8
 80089b8:	9303      	str	r3, [sp, #12]
 80089ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089bc:	443b      	add	r3, r7
 80089be:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c0:	e76a      	b.n	8008898 <_vfiprintf_r+0x78>
 80089c2:	460c      	mov	r4, r1
 80089c4:	2001      	movs	r0, #1
 80089c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ca:	e7a8      	b.n	800891e <_vfiprintf_r+0xfe>
 80089cc:	2300      	movs	r3, #0
 80089ce:	f04f 0c0a 	mov.w	ip, #10
 80089d2:	4619      	mov	r1, r3
 80089d4:	3401      	adds	r4, #1
 80089d6:	9305      	str	r3, [sp, #20]
 80089d8:	4620      	mov	r0, r4
 80089da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089de:	3a30      	subs	r2, #48	@ 0x30
 80089e0:	2a09      	cmp	r2, #9
 80089e2:	d903      	bls.n	80089ec <_vfiprintf_r+0x1cc>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d0c6      	beq.n	8008976 <_vfiprintf_r+0x156>
 80089e8:	9105      	str	r1, [sp, #20]
 80089ea:	e7c4      	b.n	8008976 <_vfiprintf_r+0x156>
 80089ec:	4604      	mov	r4, r0
 80089ee:	2301      	movs	r3, #1
 80089f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f4:	e7f0      	b.n	80089d8 <_vfiprintf_r+0x1b8>
 80089f6:	ab03      	add	r3, sp, #12
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	462a      	mov	r2, r5
 80089fc:	4630      	mov	r0, r6
 80089fe:	4b13      	ldr	r3, [pc, #76]	@ (8008a4c <_vfiprintf_r+0x22c>)
 8008a00:	a904      	add	r1, sp, #16
 8008a02:	f7fd fc2d 	bl	8006260 <_printf_float>
 8008a06:	4607      	mov	r7, r0
 8008a08:	1c78      	adds	r0, r7, #1
 8008a0a:	d1d6      	bne.n	80089ba <_vfiprintf_r+0x19a>
 8008a0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a0e:	07d9      	lsls	r1, r3, #31
 8008a10:	d405      	bmi.n	8008a1e <_vfiprintf_r+0x1fe>
 8008a12:	89ab      	ldrh	r3, [r5, #12]
 8008a14:	059a      	lsls	r2, r3, #22
 8008a16:	d402      	bmi.n	8008a1e <_vfiprintf_r+0x1fe>
 8008a18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a1a:	f7fe f9ef 	bl	8006dfc <__retarget_lock_release_recursive>
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	065b      	lsls	r3, r3, #25
 8008a22:	f53f af1f 	bmi.w	8008864 <_vfiprintf_r+0x44>
 8008a26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a28:	e71e      	b.n	8008868 <_vfiprintf_r+0x48>
 8008a2a:	ab03      	add	r3, sp, #12
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4630      	mov	r0, r6
 8008a32:	4b06      	ldr	r3, [pc, #24]	@ (8008a4c <_vfiprintf_r+0x22c>)
 8008a34:	a904      	add	r1, sp, #16
 8008a36:	f7fd feb1 	bl	800679c <_printf_i>
 8008a3a:	e7e4      	b.n	8008a06 <_vfiprintf_r+0x1e6>
 8008a3c:	08009300 	.word	0x08009300
 8008a40:	08009306 	.word	0x08009306
 8008a44:	0800930a 	.word	0x0800930a
 8008a48:	08006261 	.word	0x08006261
 8008a4c:	080087fb 	.word	0x080087fb

08008a50 <__swbuf_r>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	460e      	mov	r6, r1
 8008a54:	4614      	mov	r4, r2
 8008a56:	4605      	mov	r5, r0
 8008a58:	b118      	cbz	r0, 8008a62 <__swbuf_r+0x12>
 8008a5a:	6a03      	ldr	r3, [r0, #32]
 8008a5c:	b90b      	cbnz	r3, 8008a62 <__swbuf_r+0x12>
 8008a5e:	f7fe f849 	bl	8006af4 <__sinit>
 8008a62:	69a3      	ldr	r3, [r4, #24]
 8008a64:	60a3      	str	r3, [r4, #8]
 8008a66:	89a3      	ldrh	r3, [r4, #12]
 8008a68:	071a      	lsls	r2, r3, #28
 8008a6a:	d501      	bpl.n	8008a70 <__swbuf_r+0x20>
 8008a6c:	6923      	ldr	r3, [r4, #16]
 8008a6e:	b943      	cbnz	r3, 8008a82 <__swbuf_r+0x32>
 8008a70:	4621      	mov	r1, r4
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f82a 	bl	8008acc <__swsetup_r>
 8008a78:	b118      	cbz	r0, 8008a82 <__swbuf_r+0x32>
 8008a7a:	f04f 37ff 	mov.w	r7, #4294967295
 8008a7e:	4638      	mov	r0, r7
 8008a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	6922      	ldr	r2, [r4, #16]
 8008a86:	b2f6      	uxtb	r6, r6
 8008a88:	1a98      	subs	r0, r3, r2
 8008a8a:	6963      	ldr	r3, [r4, #20]
 8008a8c:	4637      	mov	r7, r6
 8008a8e:	4283      	cmp	r3, r0
 8008a90:	dc05      	bgt.n	8008a9e <__swbuf_r+0x4e>
 8008a92:	4621      	mov	r1, r4
 8008a94:	4628      	mov	r0, r5
 8008a96:	f7ff fdbf 	bl	8008618 <_fflush_r>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d1ed      	bne.n	8008a7a <__swbuf_r+0x2a>
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	60a3      	str	r3, [r4, #8]
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	6022      	str	r2, [r4, #0]
 8008aaa:	701e      	strb	r6, [r3, #0]
 8008aac:	6962      	ldr	r2, [r4, #20]
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d004      	beq.n	8008abe <__swbuf_r+0x6e>
 8008ab4:	89a3      	ldrh	r3, [r4, #12]
 8008ab6:	07db      	lsls	r3, r3, #31
 8008ab8:	d5e1      	bpl.n	8008a7e <__swbuf_r+0x2e>
 8008aba:	2e0a      	cmp	r6, #10
 8008abc:	d1df      	bne.n	8008a7e <__swbuf_r+0x2e>
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	f7ff fda9 	bl	8008618 <_fflush_r>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	d0d9      	beq.n	8008a7e <__swbuf_r+0x2e>
 8008aca:	e7d6      	b.n	8008a7a <__swbuf_r+0x2a>

08008acc <__swsetup_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4b29      	ldr	r3, [pc, #164]	@ (8008b74 <__swsetup_r+0xa8>)
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	6818      	ldr	r0, [r3, #0]
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	b118      	cbz	r0, 8008ae0 <__swsetup_r+0x14>
 8008ad8:	6a03      	ldr	r3, [r0, #32]
 8008ada:	b90b      	cbnz	r3, 8008ae0 <__swsetup_r+0x14>
 8008adc:	f7fe f80a 	bl	8006af4 <__sinit>
 8008ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae4:	0719      	lsls	r1, r3, #28
 8008ae6:	d422      	bmi.n	8008b2e <__swsetup_r+0x62>
 8008ae8:	06da      	lsls	r2, r3, #27
 8008aea:	d407      	bmi.n	8008afc <__swsetup_r+0x30>
 8008aec:	2209      	movs	r2, #9
 8008aee:	602a      	str	r2, [r5, #0]
 8008af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af4:	f04f 30ff 	mov.w	r0, #4294967295
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	e033      	b.n	8008b64 <__swsetup_r+0x98>
 8008afc:	0758      	lsls	r0, r3, #29
 8008afe:	d512      	bpl.n	8008b26 <__swsetup_r+0x5a>
 8008b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b02:	b141      	cbz	r1, 8008b16 <__swsetup_r+0x4a>
 8008b04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b08:	4299      	cmp	r1, r3
 8008b0a:	d002      	beq.n	8008b12 <__swsetup_r+0x46>
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	f7fe ffe3 	bl	8007ad8 <_free_r>
 8008b12:	2300      	movs	r3, #0
 8008b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b16:	89a3      	ldrh	r3, [r4, #12]
 8008b18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	6063      	str	r3, [r4, #4]
 8008b22:	6923      	ldr	r3, [r4, #16]
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	89a3      	ldrh	r3, [r4, #12]
 8008b28:	f043 0308 	orr.w	r3, r3, #8
 8008b2c:	81a3      	strh	r3, [r4, #12]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	b94b      	cbnz	r3, 8008b46 <__swsetup_r+0x7a>
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b3c:	d003      	beq.n	8008b46 <__swsetup_r+0x7a>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f000 f83e 	bl	8008bc2 <__smakebuf_r>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	f013 0201 	ands.w	r2, r3, #1
 8008b4e:	d00a      	beq.n	8008b66 <__swsetup_r+0x9a>
 8008b50:	2200      	movs	r2, #0
 8008b52:	60a2      	str	r2, [r4, #8]
 8008b54:	6962      	ldr	r2, [r4, #20]
 8008b56:	4252      	negs	r2, r2
 8008b58:	61a2      	str	r2, [r4, #24]
 8008b5a:	6922      	ldr	r2, [r4, #16]
 8008b5c:	b942      	cbnz	r2, 8008b70 <__swsetup_r+0xa4>
 8008b5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b62:	d1c5      	bne.n	8008af0 <__swsetup_r+0x24>
 8008b64:	bd38      	pop	{r3, r4, r5, pc}
 8008b66:	0799      	lsls	r1, r3, #30
 8008b68:	bf58      	it	pl
 8008b6a:	6962      	ldrpl	r2, [r4, #20]
 8008b6c:	60a2      	str	r2, [r4, #8]
 8008b6e:	e7f4      	b.n	8008b5a <__swsetup_r+0x8e>
 8008b70:	2000      	movs	r0, #0
 8008b72:	e7f7      	b.n	8008b64 <__swsetup_r+0x98>
 8008b74:	2000001c 	.word	0x2000001c

08008b78 <__swhatbuf_r>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b80:	4615      	mov	r5, r2
 8008b82:	2900      	cmp	r1, #0
 8008b84:	461e      	mov	r6, r3
 8008b86:	b096      	sub	sp, #88	@ 0x58
 8008b88:	da0c      	bge.n	8008ba4 <__swhatbuf_r+0x2c>
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b92:	bf14      	ite	ne
 8008b94:	2340      	movne	r3, #64	@ 0x40
 8008b96:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b9a:	2000      	movs	r0, #0
 8008b9c:	6031      	str	r1, [r6, #0]
 8008b9e:	602b      	str	r3, [r5, #0]
 8008ba0:	b016      	add	sp, #88	@ 0x58
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	466a      	mov	r2, sp
 8008ba6:	f000 f849 	bl	8008c3c <_fstat_r>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	dbed      	blt.n	8008b8a <__swhatbuf_r+0x12>
 8008bae:	9901      	ldr	r1, [sp, #4]
 8008bb0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bb4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bb8:	4259      	negs	r1, r3
 8008bba:	4159      	adcs	r1, r3
 8008bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bc0:	e7eb      	b.n	8008b9a <__swhatbuf_r+0x22>

08008bc2 <__smakebuf_r>:
 8008bc2:	898b      	ldrh	r3, [r1, #12]
 8008bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc6:	079d      	lsls	r5, r3, #30
 8008bc8:	4606      	mov	r6, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	d507      	bpl.n	8008bde <__smakebuf_r+0x1c>
 8008bce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bd2:	6023      	str	r3, [r4, #0]
 8008bd4:	6123      	str	r3, [r4, #16]
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	6163      	str	r3, [r4, #20]
 8008bda:	b003      	add	sp, #12
 8008bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bde:	466a      	mov	r2, sp
 8008be0:	ab01      	add	r3, sp, #4
 8008be2:	f7ff ffc9 	bl	8008b78 <__swhatbuf_r>
 8008be6:	9f00      	ldr	r7, [sp, #0]
 8008be8:	4605      	mov	r5, r0
 8008bea:	4639      	mov	r1, r7
 8008bec:	4630      	mov	r0, r6
 8008bee:	f7fd fa0d 	bl	800600c <_malloc_r>
 8008bf2:	b948      	cbnz	r0, 8008c08 <__smakebuf_r+0x46>
 8008bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf8:	059a      	lsls	r2, r3, #22
 8008bfa:	d4ee      	bmi.n	8008bda <__smakebuf_r+0x18>
 8008bfc:	f023 0303 	bic.w	r3, r3, #3
 8008c00:	f043 0302 	orr.w	r3, r3, #2
 8008c04:	81a3      	strh	r3, [r4, #12]
 8008c06:	e7e2      	b.n	8008bce <__smakebuf_r+0xc>
 8008c08:	89a3      	ldrh	r3, [r4, #12]
 8008c0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c12:	81a3      	strh	r3, [r4, #12]
 8008c14:	9b01      	ldr	r3, [sp, #4]
 8008c16:	6020      	str	r0, [r4, #0]
 8008c18:	b15b      	cbz	r3, 8008c32 <__smakebuf_r+0x70>
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c20:	f000 f81e 	bl	8008c60 <_isatty_r>
 8008c24:	b128      	cbz	r0, 8008c32 <__smakebuf_r+0x70>
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f023 0303 	bic.w	r3, r3, #3
 8008c2c:	f043 0301 	orr.w	r3, r3, #1
 8008c30:	81a3      	strh	r3, [r4, #12]
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	431d      	orrs	r5, r3
 8008c36:	81a5      	strh	r5, [r4, #12]
 8008c38:	e7cf      	b.n	8008bda <__smakebuf_r+0x18>
	...

08008c3c <_fstat_r>:
 8008c3c:	b538      	push	{r3, r4, r5, lr}
 8008c3e:	2300      	movs	r3, #0
 8008c40:	4d06      	ldr	r5, [pc, #24]	@ (8008c5c <_fstat_r+0x20>)
 8008c42:	4604      	mov	r4, r0
 8008c44:	4608      	mov	r0, r1
 8008c46:	4611      	mov	r1, r2
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	f7fa fcbf 	bl	80035cc <_fstat>
 8008c4e:	1c43      	adds	r3, r0, #1
 8008c50:	d102      	bne.n	8008c58 <_fstat_r+0x1c>
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	b103      	cbz	r3, 8008c58 <_fstat_r+0x1c>
 8008c56:	6023      	str	r3, [r4, #0]
 8008c58:	bd38      	pop	{r3, r4, r5, pc}
 8008c5a:	bf00      	nop
 8008c5c:	200006dc 	.word	0x200006dc

08008c60 <_isatty_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	2300      	movs	r3, #0
 8008c64:	4d05      	ldr	r5, [pc, #20]	@ (8008c7c <_isatty_r+0x1c>)
 8008c66:	4604      	mov	r4, r0
 8008c68:	4608      	mov	r0, r1
 8008c6a:	602b      	str	r3, [r5, #0]
 8008c6c:	f7fa fcbd 	bl	80035ea <_isatty>
 8008c70:	1c43      	adds	r3, r0, #1
 8008c72:	d102      	bne.n	8008c7a <_isatty_r+0x1a>
 8008c74:	682b      	ldr	r3, [r5, #0]
 8008c76:	b103      	cbz	r3, 8008c7a <_isatty_r+0x1a>
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	bd38      	pop	{r3, r4, r5, pc}
 8008c7c:	200006dc 	.word	0x200006dc

08008c80 <_init>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	bf00      	nop
 8008c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c86:	bc08      	pop	{r3}
 8008c88:	469e      	mov	lr, r3
 8008c8a:	4770      	bx	lr

08008c8c <_fini>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr
