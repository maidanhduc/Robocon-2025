
F103_RCT6_Mecanum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b544  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  0800b730  0800b730  0000c730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdb8  0800bdb8  0000d078  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdb8  0800bdb8  0000d078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdb8  0800bdb8  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800bdb8  0800bdb8  0000cdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800bdc4  0800bdc4  0000cdc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800bdcc  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000078  0800be44  0000d078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800be44  0000d84c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eb21  00000000  00000000  0000d0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003972  00000000  00000000  0002bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001199  00000000  00000000  00030bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebe8  00000000  00000000  00031d59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017009  00000000  00000000  00050941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6b70  00000000  00000000  0006794a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e4ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e3c  00000000  00000000  0011e500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0012533c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000078 	.word	0x20000078
 8000204:	00000000 	.word	0x00000000
 8000208:	0800b714 	.word	0x0800b714

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000007c 	.word	0x2000007c
 8000224:	0800b714 	.word	0x0800b714

08000228 <__aeabi_fmul>:
 8000228:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800022c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000230:	bf1e      	ittt	ne
 8000232:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000236:	ea92 0f0c 	teqne	r2, ip
 800023a:	ea93 0f0c 	teqne	r3, ip
 800023e:	d06f      	beq.n	8000320 <__aeabi_fmul+0xf8>
 8000240:	441a      	add	r2, r3
 8000242:	ea80 0c01 	eor.w	ip, r0, r1
 8000246:	0240      	lsls	r0, r0, #9
 8000248:	bf18      	it	ne
 800024a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024e:	d01e      	beq.n	800028e <__aeabi_fmul+0x66>
 8000250:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000254:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000258:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800025c:	fba0 3101 	umull	r3, r1, r0, r1
 8000260:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000264:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000268:	bf3e      	ittt	cc
 800026a:	0049      	lslcc	r1, r1, #1
 800026c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000270:	005b      	lslcc	r3, r3, #1
 8000272:	ea40 0001 	orr.w	r0, r0, r1
 8000276:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800027a:	2afd      	cmp	r2, #253	@ 0xfd
 800027c:	d81d      	bhi.n	80002ba <__aeabi_fmul+0x92>
 800027e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000282:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000286:	bf08      	it	eq
 8000288:	f020 0001 	biceq.w	r0, r0, #1
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000296:	bf08      	it	eq
 8000298:	0249      	lsleq	r1, r1, #9
 800029a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002a2:	3a7f      	subs	r2, #127	@ 0x7f
 80002a4:	bfc2      	ittt	gt
 80002a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80002aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002ae:	4770      	bxgt	lr
 80002b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002b4:	f04f 0300 	mov.w	r3, #0
 80002b8:	3a01      	subs	r2, #1
 80002ba:	dc5d      	bgt.n	8000378 <__aeabi_fmul+0x150>
 80002bc:	f112 0f19 	cmn.w	r2, #25
 80002c0:	bfdc      	itt	le
 80002c2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80002c6:	4770      	bxle	lr
 80002c8:	f1c2 0200 	rsb	r2, r2, #0
 80002cc:	0041      	lsls	r1, r0, #1
 80002ce:	fa21 f102 	lsr.w	r1, r1, r2
 80002d2:	f1c2 0220 	rsb	r2, r2, #32
 80002d6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002da:	ea5f 0031 	movs.w	r0, r1, rrx
 80002de:	f140 0000 	adc.w	r0, r0, #0
 80002e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e6:	bf08      	it	eq
 80002e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002ec:	4770      	bx	lr
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80002f6:	bf02      	ittt	eq
 80002f8:	0040      	lsleq	r0, r0, #1
 80002fa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80002fe:	3a01      	subeq	r2, #1
 8000300:	d0f9      	beq.n	80002f6 <__aeabi_fmul+0xce>
 8000302:	ea40 000c 	orr.w	r0, r0, ip
 8000306:	f093 0f00 	teq	r3, #0
 800030a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800030e:	bf02      	ittt	eq
 8000310:	0049      	lsleq	r1, r1, #1
 8000312:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000316:	3b01      	subeq	r3, #1
 8000318:	d0f9      	beq.n	800030e <__aeabi_fmul+0xe6>
 800031a:	ea41 010c 	orr.w	r1, r1, ip
 800031e:	e78f      	b.n	8000240 <__aeabi_fmul+0x18>
 8000320:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000324:	ea92 0f0c 	teq	r2, ip
 8000328:	bf18      	it	ne
 800032a:	ea93 0f0c 	teqne	r3, ip
 800032e:	d00a      	beq.n	8000346 <__aeabi_fmul+0x11e>
 8000330:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000334:	bf18      	it	ne
 8000336:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800033a:	d1d8      	bne.n	80002ee <__aeabi_fmul+0xc6>
 800033c:	ea80 0001 	eor.w	r0, r0, r1
 8000340:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000344:	4770      	bx	lr
 8000346:	f090 0f00 	teq	r0, #0
 800034a:	bf17      	itett	ne
 800034c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000350:	4608      	moveq	r0, r1
 8000352:	f091 0f00 	teqne	r1, #0
 8000356:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800035a:	d014      	beq.n	8000386 <__aeabi_fmul+0x15e>
 800035c:	ea92 0f0c 	teq	r2, ip
 8000360:	d101      	bne.n	8000366 <__aeabi_fmul+0x13e>
 8000362:	0242      	lsls	r2, r0, #9
 8000364:	d10f      	bne.n	8000386 <__aeabi_fmul+0x15e>
 8000366:	ea93 0f0c 	teq	r3, ip
 800036a:	d103      	bne.n	8000374 <__aeabi_fmul+0x14c>
 800036c:	024b      	lsls	r3, r1, #9
 800036e:	bf18      	it	ne
 8000370:	4608      	movne	r0, r1
 8000372:	d108      	bne.n	8000386 <__aeabi_fmul+0x15e>
 8000374:	ea80 0001 	eor.w	r0, r0, r1
 8000378:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800037c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000380:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000384:	4770      	bx	lr
 8000386:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800038a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__gedf2>:
 8000b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b30:	e006      	b.n	8000b40 <__cmpdf2+0x4>
 8000b32:	bf00      	nop

08000b34 <__ledf2>:
 8000b34:	f04f 0c01 	mov.w	ip, #1
 8000b38:	e002      	b.n	8000b40 <__cmpdf2+0x4>
 8000b3a:	bf00      	nop

08000b3c <__cmpdf2>:
 8000b3c:	f04f 0c01 	mov.w	ip, #1
 8000b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b56:	d01b      	beq.n	8000b90 <__cmpdf2+0x54>
 8000b58:	b001      	add	sp, #4
 8000b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b5e:	bf0c      	ite	eq
 8000b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b64:	ea91 0f03 	teqne	r1, r3
 8000b68:	bf02      	ittt	eq
 8000b6a:	ea90 0f02 	teqeq	r0, r2
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	4770      	bxeq	lr
 8000b72:	f110 0f00 	cmn.w	r0, #0
 8000b76:	ea91 0f03 	teq	r1, r3
 8000b7a:	bf58      	it	pl
 8000b7c:	4299      	cmppl	r1, r3
 8000b7e:	bf08      	it	eq
 8000b80:	4290      	cmpeq	r0, r2
 8000b82:	bf2c      	ite	cs
 8000b84:	17d8      	asrcs	r0, r3, #31
 8000b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b8a:	f040 0001 	orr.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d102      	bne.n	8000ba0 <__cmpdf2+0x64>
 8000b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9e:	d107      	bne.n	8000bb0 <__cmpdf2+0x74>
 8000ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d1d6      	bne.n	8000b58 <__cmpdf2+0x1c>
 8000baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bae:	d0d3      	beq.n	8000b58 <__cmpdf2+0x1c>
 8000bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdrcmple>:
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4662      	mov	r2, ip
 8000bbe:	468c      	mov	ip, r1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	e000      	b.n	8000bc8 <__aeabi_cdcmpeq>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdcmpeq>:
 8000bc8:	b501      	push	{r0, lr}
 8000bca:	f7ff ffb7 	bl	8000b3c <__cmpdf2>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	bf48      	it	mi
 8000bd2:	f110 0f00 	cmnmi.w	r0, #0
 8000bd6:	bd01      	pop	{r0, pc}

08000bd8 <__aeabi_dcmpeq>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff fff4 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000be0:	bf0c      	ite	eq
 8000be2:	2001      	moveq	r0, #1
 8000be4:	2000      	movne	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmplt>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffea 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000bf4:	bf34      	ite	cc
 8000bf6:	2001      	movcc	r0, #1
 8000bf8:	2000      	movcs	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmple>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffe0 	bl	8000bc8 <__aeabi_cdcmpeq>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpge>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffce 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c1c:	bf94      	ite	ls
 8000c1e:	2001      	movls	r0, #1
 8000c20:	2000      	movhi	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_dcmpgt>:
 8000c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c2c:	f7ff ffc4 	bl	8000bb8 <__aeabi_cdrcmple>
 8000c30:	bf34      	ite	cc
 8000c32:	2001      	movcc	r0, #1
 8000c34:	2000      	movcs	r0, #0
 8000c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3a:	bf00      	nop

08000c3c <__aeabi_dcmpun>:
 8000c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x10>
 8000c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c4a:	d10a      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x20>
 8000c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_dcmpun+0x26>
 8000c5c:	f04f 0000 	mov.w	r0, #0
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0001 	mov.w	r0, #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2iz>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c70:	d215      	bcs.n	8000c9e <__aeabi_d2iz+0x36>
 8000c72:	d511      	bpl.n	8000c98 <__aeabi_d2iz+0x30>
 8000c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d912      	bls.n	8000ca4 <__aeabi_d2iz+0x3c>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	4770      	bx	lr
 8000c98:	f04f 0000 	mov.w	r0, #0
 8000c9c:	4770      	bx	lr
 8000c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ca2:	d105      	bne.n	8000cb0 <__aeabi_d2iz+0x48>
 8000ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ca8:	bf08      	it	eq
 8000caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cae:	4770      	bx	lr
 8000cb0:	f04f 0000 	mov.w	r0, #0
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2uiz>:
 8000cb8:	004a      	lsls	r2, r1, #1
 8000cba:	d211      	bcs.n	8000ce0 <__aeabi_d2uiz+0x28>
 8000cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cc0:	d211      	bcs.n	8000ce6 <__aeabi_d2uiz+0x2e>
 8000cc2:	d50d      	bpl.n	8000ce0 <__aeabi_d2uiz+0x28>
 8000cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ccc:	d40e      	bmi.n	8000cec <__aeabi_d2uiz+0x34>
 8000cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cda:	fa23 f002 	lsr.w	r0, r3, r2
 8000cde:	4770      	bx	lr
 8000ce0:	f04f 0000 	mov.w	r0, #0
 8000ce4:	4770      	bx	lr
 8000ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cea:	d102      	bne.n	8000cf2 <__aeabi_d2uiz+0x3a>
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	4770      	bx	lr
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2f>:
 8000cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000d00:	bf24      	itt	cs
 8000d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000d0a:	d90d      	bls.n	8000d28 <__aeabi_d2f+0x30>
 8000d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d2c:	d121      	bne.n	8000d72 <__aeabi_d2f+0x7a>
 8000d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d32:	bfbc      	itt	lt
 8000d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d38:	4770      	bxlt	lr
 8000d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d42:	f1c2 0218 	rsb	r2, r2, #24
 8000d46:	f1c2 0c20 	rsb	ip, r2, #32
 8000d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d52:	bf18      	it	ne
 8000d54:	f040 0001 	orrne.w	r0, r0, #1
 8000d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d64:	ea40 000c 	orr.w	r0, r0, ip
 8000d68:	fa23 f302 	lsr.w	r3, r3, r2
 8000d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d70:	e7cc      	b.n	8000d0c <__aeabi_d2f+0x14>
 8000d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d76:	d107      	bne.n	8000d88 <__aeabi_d2f+0x90>
 8000d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d86:	4770      	bxne	lr
 8000d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <__aeabi_frsub>:
 8000d98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000d9c:	e002      	b.n	8000da4 <__addsf3>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_fsub>:
 8000da0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000da4 <__addsf3>:
 8000da4:	0042      	lsls	r2, r0, #1
 8000da6:	bf1f      	itttt	ne
 8000da8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dac:	ea92 0f03 	teqne	r2, r3
 8000db0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000db4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000db8:	d06a      	beq.n	8000e90 <__addsf3+0xec>
 8000dba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dc2:	bfc1      	itttt	gt
 8000dc4:	18d2      	addgt	r2, r2, r3
 8000dc6:	4041      	eorgt	r1, r0
 8000dc8:	4048      	eorgt	r0, r1
 8000dca:	4041      	eorgt	r1, r0
 8000dcc:	bfb8      	it	lt
 8000dce:	425b      	neglt	r3, r3
 8000dd0:	2b19      	cmp	r3, #25
 8000dd2:	bf88      	it	hi
 8000dd4:	4770      	bxhi	lr
 8000dd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000dda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000de2:	bf18      	it	ne
 8000de4:	4240      	negne	r0, r0
 8000de6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000dea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000dee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4249      	negne	r1, r1
 8000df6:	ea92 0f03 	teq	r2, r3
 8000dfa:	d03f      	beq.n	8000e7c <__addsf3+0xd8>
 8000dfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000e00:	fa41 fc03 	asr.w	ip, r1, r3
 8000e04:	eb10 000c 	adds.w	r0, r0, ip
 8000e08:	f1c3 0320 	rsb	r3, r3, #32
 8000e0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e14:	d502      	bpl.n	8000e1c <__addsf3+0x78>
 8000e16:	4249      	negs	r1, r1
 8000e18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000e20:	d313      	bcc.n	8000e4a <__addsf3+0xa6>
 8000e22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e26:	d306      	bcc.n	8000e36 <__addsf3+0x92>
 8000e28:	0840      	lsrs	r0, r0, #1
 8000e2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e2e:	f102 0201 	add.w	r2, r2, #1
 8000e32:	2afe      	cmp	r2, #254	@ 0xfe
 8000e34:	d251      	bcs.n	8000eda <__addsf3+0x136>
 8000e36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	ea40 0003 	orr.w	r0, r0, r3
 8000e48:	4770      	bx	lr
 8000e4a:	0049      	lsls	r1, r1, #1
 8000e4c:	eb40 0000 	adc.w	r0, r0, r0
 8000e50:	3a01      	subs	r2, #1
 8000e52:	bf28      	it	cs
 8000e54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000e58:	d2ed      	bcs.n	8000e36 <__addsf3+0x92>
 8000e5a:	fab0 fc80 	clz	ip, r0
 8000e5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e62:	ebb2 020c 	subs.w	r2, r2, ip
 8000e66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e6a:	bfaa      	itet	ge
 8000e6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e70:	4252      	neglt	r2, r2
 8000e72:	4318      	orrge	r0, r3
 8000e74:	bfbc      	itt	lt
 8000e76:	40d0      	lsrlt	r0, r2
 8000e78:	4318      	orrlt	r0, r3
 8000e7a:	4770      	bx	lr
 8000e7c:	f092 0f00 	teq	r2, #0
 8000e80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000e84:	bf06      	itte	eq
 8000e86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000e8a:	3201      	addeq	r2, #1
 8000e8c:	3b01      	subne	r3, #1
 8000e8e:	e7b5      	b.n	8000dfc <__addsf3+0x58>
 8000e90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e98:	bf18      	it	ne
 8000e9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e9e:	d021      	beq.n	8000ee4 <__addsf3+0x140>
 8000ea0:	ea92 0f03 	teq	r2, r3
 8000ea4:	d004      	beq.n	8000eb0 <__addsf3+0x10c>
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	bf08      	it	eq
 8000eac:	4608      	moveq	r0, r1
 8000eae:	4770      	bx	lr
 8000eb0:	ea90 0f01 	teq	r0, r1
 8000eb4:	bf1c      	itt	ne
 8000eb6:	2000      	movne	r0, #0
 8000eb8:	4770      	bxne	lr
 8000eba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ebe:	d104      	bne.n	8000eca <__addsf3+0x126>
 8000ec0:	0040      	lsls	r0, r0, #1
 8000ec2:	bf28      	it	cs
 8000ec4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ec8:	4770      	bx	lr
 8000eca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ece:	bf3c      	itt	cc
 8000ed0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ed4:	4770      	bxcc	lr
 8000ed6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000eda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ede:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee2:	4770      	bx	lr
 8000ee4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ee8:	bf16      	itet	ne
 8000eea:	4608      	movne	r0, r1
 8000eec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ef0:	4601      	movne	r1, r0
 8000ef2:	0242      	lsls	r2, r0, #9
 8000ef4:	bf06      	itte	eq
 8000ef6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000efa:	ea90 0f01 	teqeq	r0, r1
 8000efe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000f02:	4770      	bx	lr

08000f04 <__aeabi_ui2f>:
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	e004      	b.n	8000f14 <__aeabi_i2f+0x8>
 8000f0a:	bf00      	nop

08000f0c <__aeabi_i2f>:
 8000f0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000f10:	bf48      	it	mi
 8000f12:	4240      	negmi	r0, r0
 8000f14:	ea5f 0c00 	movs.w	ip, r0
 8000f18:	bf08      	it	eq
 8000f1a:	4770      	bxeq	lr
 8000f1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000f20:	4601      	mov	r1, r0
 8000f22:	f04f 0000 	mov.w	r0, #0
 8000f26:	e01c      	b.n	8000f62 <__aeabi_l2f+0x2a>

08000f28 <__aeabi_ul2f>:
 8000f28:	ea50 0201 	orrs.w	r2, r0, r1
 8000f2c:	bf08      	it	eq
 8000f2e:	4770      	bxeq	lr
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	e00a      	b.n	8000f4c <__aeabi_l2f+0x14>
 8000f36:	bf00      	nop

08000f38 <__aeabi_l2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000f44:	d502      	bpl.n	8000f4c <__aeabi_l2f+0x14>
 8000f46:	4240      	negs	r0, r0
 8000f48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f4c:	ea5f 0c01 	movs.w	ip, r1
 8000f50:	bf02      	ittt	eq
 8000f52:	4684      	moveq	ip, r0
 8000f54:	4601      	moveq	r1, r0
 8000f56:	2000      	moveq	r0, #0
 8000f58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000f5c:	bf08      	it	eq
 8000f5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000f66:	fabc f28c 	clz	r2, ip
 8000f6a:	3a08      	subs	r2, #8
 8000f6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f70:	db10      	blt.n	8000f94 <__aeabi_l2f+0x5c>
 8000f72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f76:	4463      	add	r3, ip
 8000f78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f7c:	f1c2 0220 	rsb	r2, r2, #32
 8000f80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	eb43 0002 	adc.w	r0, r3, r2
 8000f8c:	bf08      	it	eq
 8000f8e:	f020 0001 	biceq.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	f102 0220 	add.w	r2, r2, #32
 8000f98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f9c:	f1c2 0220 	rsb	r2, r2, #32
 8000fa0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fa4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fa8:	eb43 0002 	adc.w	r0, r3, r2
 8000fac:	bf08      	it	eq
 8000fae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_f2iz>:
 8000fb4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fbc:	d30f      	bcc.n	8000fde <__aeabi_f2iz+0x2a>
 8000fbe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fc2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fc6:	d90d      	bls.n	8000fe4 <__aeabi_f2iz+0x30>
 8000fc8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fd4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fd8:	bf18      	it	ne
 8000fda:	4240      	negne	r0, r0
 8000fdc:	4770      	bx	lr
 8000fde:	f04f 0000 	mov.w	r0, #0
 8000fe2:	4770      	bx	lr
 8000fe4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fe8:	d101      	bne.n	8000fee <__aeabi_f2iz+0x3a>
 8000fea:	0242      	lsls	r2, r0, #9
 8000fec:	d105      	bne.n	8000ffa <__aeabi_f2iz+0x46>
 8000fee:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000ff2:	bf08      	it	eq
 8000ff4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr

08001000 <_ZN9Motor_PID9quaythuanEs>:
		angle[0] = angle_val;
		if(angle[0] > 0) angle[1] = angle[0] - 900;
		if(angle[0] < 0) angle[1] = angle[0] + 900;
	}

	void quaythuan(int16_t speed){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
		if(speed == 2) speed = 3;
 800100c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d101      	bne.n	8001018 <_ZN9Motor_PID9quaythuanEs+0x18>
 8001014:	2303      	movs	r3, #3
 8001016:	807b      	strh	r3, [r7, #2]
		if(speed < 0) speed = 0;
 8001018:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800101c:	2b00      	cmp	r3, #0
 800101e:	da01      	bge.n	8001024 <_ZN9Motor_PID9quaythuanEs+0x24>
 8001020:	2300      	movs	r3, #0
 8001022:	807b      	strh	r3, [r7, #2]
		switch(mode){
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7d1b      	ldrb	r3, [r3, #20]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d037      	beq.n	800109c <_ZN9Motor_PID9quaythuanEs+0x9c>
 800102c:	2b01      	cmp	r3, #1
 800102e:	d145      	bne.n	80010bc <_ZN9Motor_PID9quaythuanEs+0xbc>
			case PWM:  speed = SPEED_MAX -  speed;
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8001036:	b29b      	uxth	r3, r3
 8001038:	807b      	strh	r3, [r7, #2]

					   HAL_GPIO_WritePin(Port_Dir, Pin_Dir, GPIO_PIN_RESET);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29b      	uxth	r3, r3
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	f006 f941 	bl	80072ce <HAL_GPIO_WritePin>
				   	   //PWM_Write_GPIO(Port_Pwm, Pin_Pwm,speed);
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	899b      	ldrh	r3, [r3, #12]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d106      	bne.n	8001062 <_ZN9Motor_PID9quaythuanEs+0x62>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
				   	   break;
 8001060:	e02c      	b.n	80010bc <_ZN9Motor_PID9quaythuanEs+0xbc>
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	899b      	ldrh	r3, [r3, #12]
 8001066:	2b04      	cmp	r3, #4
 8001068:	d106      	bne.n	8001078 <_ZN9Motor_PID9quaythuanEs+0x78>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001074:	639a      	str	r2, [r3, #56]	@ 0x38
				   	   break;
 8001076:	e021      	b.n	80010bc <_ZN9Motor_PID9quaythuanEs+0xbc>
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	899b      	ldrh	r3, [r3, #12]
 800107c:	2b08      	cmp	r3, #8
 800107e:	d106      	bne.n	800108e <_ZN9Motor_PID9quaythuanEs+0x8e>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800108a:	63da      	str	r2, [r3, #60]	@ 0x3c
				   	   break;
 800108c:	e016      	b.n	80010bc <_ZN9Motor_PID9quaythuanEs+0xbc>
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001098:	641a      	str	r2, [r3, #64]	@ 0x40
				   	   break;
 800109a:	e00f      	b.n	80010bc <_ZN9Motor_PID9quaythuanEs+0xbc>
			case UART:
						if(speed > 255) speed = 255;
 800109c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010a0:	2bff      	cmp	r3, #255	@ 0xff
 80010a2:	dd01      	ble.n	80010a8 <_ZN9Motor_PID9quaythuanEs+0xa8>
 80010a4:	23ff      	movs	r3, #255	@ 0xff
 80010a6:	807b      	strh	r3, [r7, #2]
						Controll_DC_UART(huart, address_DC, HIGH, (uint8_t)(speed));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6918      	ldr	r0, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7d59      	ldrb	r1, [r3, #21]
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2201      	movs	r2, #1
 80010b6:	f003 fda1 	bl	8004bfc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
						break;
 80010ba:	bf00      	nop
		}

	}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZN9Motor_PID10quaynghichEs>:

	void quaynghich(int16_t speed){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
		if(speed == 2) speed = 3;
 80010d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d101      	bne.n	80010dc <_ZN9Motor_PID10quaynghichEs+0x18>
 80010d8:	2303      	movs	r3, #3
 80010da:	807b      	strh	r3, [r7, #2]
		if(speed < 0) speed = 0;
 80010dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	da01      	bge.n	80010e8 <_ZN9Motor_PID10quaynghichEs+0x24>
 80010e4:	2300      	movs	r3, #0
 80010e6:	807b      	strh	r3, [r7, #2]
		switch(mode){
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7d1b      	ldrb	r3, [r3, #20]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d037      	beq.n	8001160 <_ZN9Motor_PID10quaynghichEs+0x9c>
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d145      	bne.n	8001180 <_ZN9Motor_PID10quaynghichEs+0xbc>
			case PWM:  speed = SPEED_MAX - speed;
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	807b      	strh	r3, [r7, #2]
					   HAL_GPIO_WritePin(Port_Dir, Pin_Dir, GPIO_PIN_SET);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	b29b      	uxth	r3, r3
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f006 f8df 	bl	80072ce <HAL_GPIO_WritePin>
				   	   //PWM_Write_GPIO(Port_Pwm, Pin_Pwm,speed);
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	899b      	ldrh	r3, [r3, #12]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d106      	bne.n	8001126 <_ZN9Motor_PID10quaynghichEs+0x62>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34

				   	   break;
 8001124:	e02c      	b.n	8001180 <_ZN9Motor_PID10quaynghichEs+0xbc>
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	899b      	ldrh	r3, [r3, #12]
 800112a:	2b04      	cmp	r3, #4
 800112c:	d106      	bne.n	800113c <_ZN9Motor_PID10quaynghichEs+0x78>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001138:	639a      	str	r2, [r3, #56]	@ 0x38
				   	   break;
 800113a:	e021      	b.n	8001180 <_ZN9Motor_PID10quaynghichEs+0xbc>
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	899b      	ldrh	r3, [r3, #12]
 8001140:	2b08      	cmp	r3, #8
 8001142:	d106      	bne.n	8001152 <_ZN9Motor_PID10quaynghichEs+0x8e>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800114e:	63da      	str	r2, [r3, #60]	@ 0x3c
				   	   break;
 8001150:	e016      	b.n	8001180 <_ZN9Motor_PID10quaynghichEs+0xbc>
					   __HAL_TIM_SET_COMPARE(htim,TIM_CHANNEL,speed);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40
				   	   break;
 800115e:	e00f      	b.n	8001180 <_ZN9Motor_PID10quaynghichEs+0xbc>
			case UART: 	if(speed > 255) speed = 255;
 8001160:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001164:	2bff      	cmp	r3, #255	@ 0xff
 8001166:	dd01      	ble.n	800116c <_ZN9Motor_PID10quaynghichEs+0xa8>
 8001168:	23ff      	movs	r3, #255	@ 0xff
 800116a:	807b      	strh	r3, [r7, #2]
						Controll_DC_UART(huart, address_DC, LOW, (uint8_t)(speed));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6918      	ldr	r0, [r3, #16]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	7d59      	ldrb	r1, [r3, #21]
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2200      	movs	r2, #0
 800117a:	f003 fd3f 	bl	8004bfc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
						break;
 800117e:	bf00      	nop
		}
	}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN11Module_shot11set_encoderEl>:
	Module_shot(UART_HandleTypeDef* huart,uint8_t address_DC,int32_t encode_for_round,int32_t angle_low,int32_t angle_high,GPIO_TypeDef* Port_ChannelA,uint32_t Pin_ChannelA,GPIO_TypeDef* Port_ChannelB,uint32_t Pin_ChannelB)
	: huart(huart),address_DC(address_DC), encoder_for_round(encode_for_round), angle_low(angle_low),angle_high(angle_high),Port_ChannelA(Port_ChannelA),Pin_ChannelA(Pin_ChannelA),Port_ChannelB(Port_ChannelB),Pin_ChannelB(Pin_ChannelB){
		mode = exti;
	}

	void set_encoder(int32_t value){
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
		encoder_module = value;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	639a      	str	r2, [r3, #56]	@ 0x38
		angle_module = encoder_module * 3600 / encoder_for_round;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80011a0:	fb03 f202 	mul.w	r2, r3, r2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	869a      	strh	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COUNTER(htim,value);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <_ZN11Module_shot15update_positionEv>:
			}
		}
	}

			//return encoder_module
		void update_position(){
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
			int16_t current_count = __HAL_TIM_GET_COUNTER(htim);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d6:	81fb      	strh	r3, [r7, #14]
			if(current_count > encoder_limit || current_count < -encoder_limit){
 80011d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dc06      	bgt.n	80011f2 <_ZN11Module_shot15update_positionEv+0x2c>
 80011e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	425b      	negs	r3, r3
 80011ee:	429a      	cmp	r2, r3
 80011f0:	da0d      	bge.n	800120e <_ZN11Module_shot15update_positionEv+0x48>
				level_count += current_count;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80011f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fa:	441a      	add	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	63da      	str	r2, [r3, #60]	@ 0x3c
				__HAL_TIM_SET_COUNTER(htim,0);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
				current_count = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	81fb      	strh	r3, [r7, #14]
			}

			encoder_module = level_count + current_count;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001212:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001216:	441a      	add	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	639a      	str	r2, [r3, #56]	@ 0x38
			angle_module = encoder_module * 3600 / encoder_for_round;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001220:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001224:	fb03 f202 	mul.w	r2, r3, r2
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001230:	b21a      	sxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	869a      	strh	r2, [r3, #52]	@ 0x34
		}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <_ZN11Module_shot9quaythuanEs>:



		void quaythuan(int16_t speed){
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
			if(speed == 2) speed = 3;
 800124c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d101      	bne.n	8001258 <_ZN11Module_shot9quaythuanEs+0x18>
 8001254:	2303      	movs	r3, #3
 8001256:	807b      	strh	r3, [r7, #2]
			update_position();
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ffb4 	bl	80011c6 <_ZN11Module_shot15update_positionEv>
			angle_module = encoder_module * 3600 / encoder_for_round; // Gọi ở loop để giảm tiêu thụ trên ngắt
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001262:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001266:	fb03 f202 	mul.w	r2, r3, r2
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001272:	b21a      	sxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	869a      	strh	r2, [r3, #52]	@ 0x34
			if(angle_module <= angle_high && angle_module >= angle_low){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	429a      	cmp	r2, r3
 8001286:	dc15      	bgt.n	80012b4 <_ZN11Module_shot9quaythuanEs+0x74>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	429a      	cmp	r2, r3
 8001296:	db0d      	blt.n	80012b4 <_ZN11Module_shot9quaythuanEs+0x74>
				Controll_DC_UART(huart, address_DC, HIGH, speed);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7919      	ldrb	r1, [r3, #4]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2201      	movs	r2, #1
 80012a6:	f003 fca9 	bl	8004bfc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
				state_rotate = true;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80012b2:	e00c      	b.n	80012ce <_ZN11Module_shot9quaythuanEs+0x8e>
			}
			else{
				Controll_DC_UART(huart, address_DC, HIGH, 0);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7919      	ldrb	r1, [r3, #4]
 80012bc:	2300      	movs	r3, #0
 80012be:	2201      	movs	r2, #1
 80012c0:	f003 fc9c 	bl	8004bfc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
				state_rotate = false;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			}
		}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZN11Module_shot10quaynghichEs>:

		void quaynghich(int16_t speed){
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]
			if(speed == 2) speed = 3;
 80012e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d101      	bne.n	80012ee <_ZN11Module_shot10quaynghichEs+0x18>
 80012ea:	2303      	movs	r3, #3
 80012ec:	807b      	strh	r3, [r7, #2]
			update_position();
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ff69 	bl	80011c6 <_ZN11Module_shot15update_positionEv>
			angle_module = encoder_module * 3600 / encoder_for_round;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f8:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80012fc:	fb03 f202 	mul.w	r2, r3, r2
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	fb92 f3f3 	sdiv	r3, r2, r3
 8001308:	b21a      	sxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	869a      	strh	r2, [r3, #52]	@ 0x34
			if(angle_module <= angle_high && angle_module >= angle_low){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001314:	461a      	mov	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	429a      	cmp	r2, r3
 800131c:	dc15      	bgt.n	800134a <_ZN11Module_shot10quaynghichEs+0x74>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	429a      	cmp	r2, r3
 800132c:	db0d      	blt.n	800134a <_ZN11Module_shot10quaynghichEs+0x74>
				state_rotate = true;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				Controll_DC_UART(huart, address_DC, LOW, speed);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6818      	ldr	r0, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7919      	ldrb	r1, [r3, #4]
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2200      	movs	r2, #0
 8001344:	f003 fc5a 	bl	8004bfc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
 8001348:	e00c      	b.n	8001364 <_ZN11Module_shot10quaynghichEs+0x8e>
			}
			else{
				state_rotate = false;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
				Controll_DC_UART(huart, address_DC, LOW, 0);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7919      	ldrb	r1, [r3, #4]
 800135a:	2300      	movs	r3, #0
 800135c:	2200      	movs	r2, #0
 800135e:	f003 fc4d 	bl	8004bfc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
			}
		}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <_Z3maplllll>:
#include "math.h"



long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	69b9      	ldr	r1, [r7, #24]
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	1a8a      	subs	r2, r1, r2
 8001386:	fb03 f202 	mul.w	r2, r3, r2
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	fb92 f2f3 	sdiv	r2, r2, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4413      	add	r3, r2
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <_Z10soft_speedPsPmsmh>:
	if(value < down) return down;
	return value;
}


void soft_speed(Variable variable,uint32_t * last_time, int16_t speed,uint32_t time_out,uint8_t delta_speed){ // tốc độ và thời gian khởi động
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4613      	mov	r3, r2
 80013b0:	80fb      	strh	r3, [r7, #6]
  if(HAL_GetTick() - (*last_time) >= time_out) {
 80013b2:	f005 f845 	bl	8006440 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d041      	beq.n	8001452 <_Z10soft_speedPsPmsmh+0xb0>
    if((*variable) < speed){
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dd15      	ble.n	8001408 <_Z10soft_speedPsPmsmh+0x66>
    	(*variable) += delta_speed;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	7e3b      	ldrb	r3, [r7, #24]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	4413      	add	r3, r2
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	801a      	strh	r2, [r3, #0]
    	if((*variable) > speed) *variable = speed;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	da23      	bge.n	8001448 <_Z10soft_speedPsPmsmh+0xa6>
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	88fa      	ldrh	r2, [r7, #6]
 8001404:	801a      	strh	r2, [r3, #0]
 8001406:	e01f      	b.n	8001448 <_Z10soft_speedPsPmsmh+0xa6>
    }else if((*variable) > speed){
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001412:	429a      	cmp	r2, r3
 8001414:	da15      	bge.n	8001442 <_Z10soft_speedPsPmsmh+0xa0>
    	(*variable) -= delta_speed;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	b29a      	uxth	r2, r3
 800141e:	7e3b      	ldrb	r3, [r7, #24]
 8001420:	b29b      	uxth	r3, r3
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	b29b      	uxth	r3, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	801a      	strh	r2, [r3, #0]
		if((*variable) < speed) *variable = speed;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001432:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001436:	429a      	cmp	r2, r3
 8001438:	dd06      	ble.n	8001448 <_Z10soft_speedPsPmsmh+0xa6>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	801a      	strh	r2, [r3, #0]
 8001440:	e002      	b.n	8001448 <_Z10soft_speedPsPmsmh+0xa6>
    }else{
    	(*variable) = speed;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	88fa      	ldrh	r2, [r7, #6]
 8001446:	801a      	strh	r2, [r3, #0]
    }

    (*last_time) = HAL_GetTick();
 8001448:	f004 fffa 	bl	8006440 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	601a      	str	r2, [r3, #0]
  }
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <_Z9get_angles>:


int16_t get_angle(int16_t angle){ // resolution(độ phân giải) : -1800 -> 1800
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	80fb      	strh	r3, [r7, #6]
  angle = angle % 3600;
 8001466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800146a:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <_Z9get_angles+0x6c>)
 800146c:	fb82 1203 	smull	r1, r2, r2, r3
 8001470:	441a      	add	r2, r3
 8001472:	12d1      	asrs	r1, r2, #11
 8001474:	17da      	asrs	r2, r3, #31
 8001476:	1a8a      	subs	r2, r1, r2
 8001478:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800147c:	fb01 f202 	mul.w	r2, r1, r2
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	80fb      	strh	r3, [r7, #6]
  if(angle >= 1800) return angle -= 3600;
 8001484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001488:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 800148c:	db07      	blt.n	800149e <_Z9get_angles+0x42>
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f5a3 6361 	sub.w	r3, r3, #3600	@ 0xe10
 8001494:	b29b      	uxth	r3, r3
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149c:	e00e      	b.n	80014bc <_Z9get_angles+0x60>
  if(angle < -1800) return angle += 3600;
 800149e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a2:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 80014a6:	da07      	bge.n	80014b8 <_Z9get_angles+0x5c>
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	80fb      	strh	r3, [r7, #6]
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	e001      	b.n	80014bc <_Z9get_angles+0x60>
  return angle;
 80014b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]

}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	91a2b3c5 	.word	0x91a2b3c5

080014cc <_Z10PID_rotatess>:


int16_t PID_rotate(int16_t angle_set,int16_t speed_rot){ // góc muốn đến , giới hạn tốc độ
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b087      	sub	sp, #28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	460a      	mov	r2, r1
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	4613      	mov	r3, r2
 80014da:	80bb      	strh	r3, [r7, #4]
  float kp, ki, kd;
  static int16_t error  = 0,last_error = 0;
  int16_t output = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	817b      	strh	r3, [r7, #10]

    error = get_angle(angle_set) - get_angle(compass());
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffb9 	bl	800145c <_Z9get_angles>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29c      	uxth	r4, r3
 80014ee:	f003 fbed 	bl	8004ccc <_Z7compassv>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ffb1 	bl	800145c <_Z9get_angles>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	1ae3      	subs	r3, r4, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	b21a      	sxth	r2, r3
 8001504:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <_Z10PID_rotatess+0x14c>)
 8001506:	801a      	strh	r2, [r3, #0]
    //error = angle_set - compass();

    if(abs(error) >= 1000){
 8001508:	4b43      	ldr	r3, [pc, #268]	@ (8001618 <_Z10PID_rotatess+0x14c>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	bfb8      	it	lt
 8001512:	425b      	neglt	r3, r3
 8001514:	b29b      	uxth	r3, r3
 8001516:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800151a:	d307      	bcc.n	800152c <_Z10PID_rotatess+0x60>
        kp = 0.25, ki = 0.1, kd = 0.15;
 800151c:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	4b3e      	ldr	r3, [pc, #248]	@ (800161c <_Z10PID_rotatess+0x150>)
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b3e      	ldr	r3, [pc, #248]	@ (8001620 <_Z10PID_rotatess+0x154>)
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	e016      	b.n	800155a <_Z10PID_rotatess+0x8e>
      //kp = 0.025, ki = 0.01,  kd = 0.02;
    } else
    if(abs(error) >= 400){
 800152c:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <_Z10PID_rotatess+0x14c>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	2b00      	cmp	r3, #0
 8001534:	bfb8      	it	lt
 8001536:	425b      	neglt	r3, r3
 8001538:	b29b      	uxth	r3, r3
 800153a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800153e:	d306      	bcc.n	800154e <_Z10PID_rotatess+0x82>
      kp = 0.18, ki = 0.1, kd = 0.08;
 8001540:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <_Z10PID_rotatess+0x158>)
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	4b35      	ldr	r3, [pc, #212]	@ (800161c <_Z10PID_rotatess+0x150>)
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	4b37      	ldr	r3, [pc, #220]	@ (8001628 <_Z10PID_rotatess+0x15c>)
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e005      	b.n	800155a <_Z10PID_rotatess+0x8e>
    } else{
        kp = 0.12, ki = 0.05,  kd = 0.04;
 800154e:	4b37      	ldr	r3, [pc, #220]	@ (800162c <_Z10PID_rotatess+0x160>)
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <_Z10PID_rotatess+0x164>)
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <_Z10PID_rotatess+0x168>)
 8001558:	60fb      	str	r3, [r7, #12]

    }

    output = kp * error + ki * (error + last_error) + kd * (error - last_error);
 800155a:	4b2f      	ldr	r3, [pc, #188]	@ (8001618 <_Z10PID_rotatess+0x14c>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fcd3 	bl	8000f0c <__aeabi_i2f>
 8001566:	4603      	mov	r3, r0
 8001568:	6979      	ldr	r1, [r7, #20]
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe5c 	bl	8000228 <__aeabi_fmul>
 8001570:	4603      	mov	r3, r0
 8001572:	461c      	mov	r4, r3
 8001574:	4b28      	ldr	r3, [pc, #160]	@ (8001618 <_Z10PID_rotatess+0x14c>)
 8001576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157a:	461a      	mov	r2, r3
 800157c:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <_Z10PID_rotatess+0x16c>)
 800157e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001582:	4413      	add	r3, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fcc1 	bl	8000f0c <__aeabi_i2f>
 800158a:	4603      	mov	r3, r0
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fe4a 	bl	8000228 <__aeabi_fmul>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	4620      	mov	r0, r4
 800159a:	f7ff fc03 	bl	8000da4 <__addsf3>
 800159e:	4603      	mov	r3, r0
 80015a0:	461c      	mov	r4, r3
 80015a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <_Z10PID_rotatess+0x14c>)
 80015a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <_Z10PID_rotatess+0x16c>)
 80015ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fcaa 	bl	8000f0c <__aeabi_i2f>
 80015b8:	4603      	mov	r3, r0
 80015ba:	68f9      	ldr	r1, [r7, #12]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe33 	bl	8000228 <__aeabi_fmul>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4620      	mov	r0, r4
 80015c8:	f7ff fbec 	bl	8000da4 <__addsf3>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fcf0 	bl	8000fb4 <__aeabi_f2iz>
 80015d4:	4603      	mov	r3, r0
 80015d6:	817b      	strh	r3, [r7, #10]
    output = constrain(output, -speed_rot, speed_rot);
 80015d8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015e0:	425b      	negs	r3, r3
 80015e2:	429a      	cmp	r2, r3
 80015e4:	da04      	bge.n	80015f0 <_Z10PID_rotatess+0x124>
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	425b      	negs	r3, r3
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	e007      	b.n	8001600 <_Z10PID_rotatess+0x134>
 80015f0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015f8:	4293      	cmp	r3, r2
 80015fa:	bfa8      	it	ge
 80015fc:	4613      	movge	r3, r2
 80015fe:	b21b      	sxth	r3, r3
 8001600:	817b      	strh	r3, [r7, #10]
    //Serial.println(output);
    last_error = error;
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <_Z10PID_rotatess+0x14c>)
 8001604:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001608:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <_Z10PID_rotatess+0x16c>)
 800160a:	801a      	strh	r2, [r3, #0]

  return output;
 800160c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001610:	4618      	mov	r0, r3
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	20000094 	.word	0x20000094
 800161c:	3dcccccd 	.word	0x3dcccccd
 8001620:	3e19999a 	.word	0x3e19999a
 8001624:	3e3851ec 	.word	0x3e3851ec
 8001628:	3da3d70a 	.word	0x3da3d70a
 800162c:	3df5c28f 	.word	0x3df5c28f
 8001630:	3d4ccccd 	.word	0x3d4ccccd
 8001634:	3d23d70a 	.word	0x3d23d70a
 8001638:	20000096 	.word	0x20000096

0800163c <_Z6run_dchs>:


void run_dc(uint8_t num_dc,int16_t speed){
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	460a      	mov	r2, r1
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	80bb      	strh	r3, [r7, #4]
  if(speed >= 0){
 800164c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0d      	blt.n	8001670 <_Z6run_dchs+0x34>
    DC[num_dc].quaythuan(speed);
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <_Z6run_dchs+0x60>)
 8001660:	4413      	add	r3, r2
 8001662:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fcc9 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
  }else{
    DC[num_dc].quaynghich(abs(speed));
  }
}
 800166e:	e011      	b.n	8001694 <_Z6run_dchs+0x58>
    DC[num_dc].quaynghich(abs(speed));
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	4613      	mov	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4a08      	ldr	r2, [pc, #32]	@ (800169c <_Z6run_dchs+0x60>)
 800167c:	441a      	add	r2, r3
 800167e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	bfb8      	it	lt
 8001686:	425b      	neglt	r3, r3
 8001688:	b29b      	uxth	r3, r3
 800168a:	b21b      	sxth	r3, r3
 800168c:	4619      	mov	r1, r3
 800168e:	4610      	mov	r0, r2
 8001690:	f7ff fd18 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200005ec 	.word	0x200005ec

080016a0 <_Z4movessssmh>:
void run_dc(uint8_t vec,uint8_t num_dc,uint8_t speed){
	if(vec == 1) DC[num_dc].quaythuan(speed);
	if(vec == 0) DC[num_dc].quaynghich(abs(speed));
}

int16_t move(int16_t angle_set, int16_t speed_rot,int16_t angle_tt, int16_t speed_tt,uint32_t time_soft,uint8_t delta_speed){
 80016a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016a4:	b094      	sub	sp, #80	@ 0x50
 80016a6:	af02      	add	r7, sp, #8
 80016a8:	4604      	mov	r4, r0
 80016aa:	4608      	mov	r0, r1
 80016ac:	4611      	mov	r1, r2
 80016ae:	461a      	mov	r2, r3
 80016b0:	4623      	mov	r3, r4
 80016b2:	80fb      	strh	r3, [r7, #6]
 80016b4:	4603      	mov	r3, r0
 80016b6:	80bb      	strh	r3, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	803b      	strh	r3, [r7, #0]
  // góc muốn đầu robot hướng tới , tốc độ quay, góc tịnh tiến, tốc độ tịnh tiến, thời gian để tăng giảm 1 giá trị speed

  static int16_t speed_run = 0;
  static uint32_t time_soft_speed = 0;
  soft_speed(&speed_run,&time_soft_speed,speed_tt,time_soft,delta_speed);
 80016c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80016c4:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016cc:	493c      	ldr	r1, [pc, #240]	@ (80017c0 <_Z4movessssmh+0x120>)
 80016ce:	483d      	ldr	r0, [pc, #244]	@ (80017c4 <_Z4movessssmh+0x124>)
 80016d0:	f7ff fe67 	bl	80013a2 <_Z10soft_speedPsPmsmh>
  int16_t pwm[4];
  float alpha[4];

  int16_t speed_rotate = PID_rotate(angle_set,speed_rot); // xử lí PID góc
 80016d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80016d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fef4 	bl	80014cc <_Z10PID_rotatess>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

  int16_t angle_diff = get_angle(angle_tt - compass());
 80016ea:	887c      	ldrh	r4, [r7, #2]
 80016ec:	f003 faee 	bl	8004ccc <_Z7compassv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	1ae3      	subs	r3, r4, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff feae 	bl	800145c <_Z9get_angles>
 8001700:	4603      	mov	r3, r0
 8001702:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  static uint8_t left_front, left_back, right_front, right_back, mode;

  // xử lí góc tịnh tiến của robot

  if(angle_diff <= -450 && angle_diff > -1350 ){
 8001706:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800170a:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 800170e:	dc1b      	bgt.n	8001748 <_Z4movessssmh+0xa8>
 8001710:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001714:	4a2c      	ldr	r2, [pc, #176]	@ (80017c8 <_Z4movessssmh+0x128>)
 8001716:	4293      	cmp	r3, r2
 8001718:	db16      	blt.n	8001748 <_Z4movessssmh+0xa8>
    left_front  =   0;  right_front =  3;
 800171a:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <_Z4movessssmh+0x12c>)
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <_Z4movessssmh+0x130>)
 8001722:	2203      	movs	r2, #3
 8001724:	701a      	strb	r2, [r3, #0]
    left_back   =   1;  right_back  =  2;
 8001726:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <_Z4movessssmh+0x134>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <_Z4movessssmh+0x138>)
 800172e:	2202      	movs	r2, #2
 8001730:	701a      	strb	r2, [r3, #0]
    angle_diff += 900;
 8001732:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001736:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 800173a:	b29b      	uxth	r3, r3
 800173c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    mode = 1;
 8001740:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <_Z4movessssmh+0x13c>)
 8001742:	2201      	movs	r2, #1
 8001744:	701a      	strb	r2, [r3, #0]
 8001746:	e07e      	b.n	8001846 <_Z4movessssmh+0x1a6>
  }else if( angle_diff <= 450 && angle_diff > -450){
 8001748:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800174c:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001750:	dc14      	bgt.n	800177c <_Z4movessssmh+0xdc>
 8001752:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001756:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 800175a:	dd0f      	ble.n	800177c <_Z4movessssmh+0xdc>
    left_front  =   1;  right_front =  0;
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <_Z4movessssmh+0x12c>)
 800175e:	2201      	movs	r2, #1
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <_Z4movessssmh+0x130>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
    left_back   =   2;  right_back  =  3;
 8001768:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <_Z4movessssmh+0x134>)
 800176a:	2202      	movs	r2, #2
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <_Z4movessssmh+0x138>)
 8001770:	2203      	movs	r2, #3
 8001772:	701a      	strb	r2, [r3, #0]
    mode = 0;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <_Z4movessssmh+0x13c>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e064      	b.n	8001846 <_Z4movessssmh+0x1a6>
  }else if( angle_diff > 450  && angle_diff <= 1350){
 800177c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001780:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001784:	dd2c      	ble.n	80017e0 <_Z4movessssmh+0x140>
 8001786:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800178a:	f240 5246 	movw	r2, #1350	@ 0x546
 800178e:	4293      	cmp	r3, r2
 8001790:	dc26      	bgt.n	80017e0 <_Z4movessssmh+0x140>
    left_front  =   2;  right_front =  1;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <_Z4movessssmh+0x12c>)
 8001794:	2202      	movs	r2, #2
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <_Z4movessssmh+0x130>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
    left_back   =   3;  right_back  =  0;
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <_Z4movessssmh+0x134>)
 80017a0:	2203      	movs	r2, #3
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <_Z4movessssmh+0x138>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
    angle_diff -= 900;
 80017aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80017ae:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    mode = 1;
 80017b8:	4b08      	ldr	r3, [pc, #32]	@ (80017dc <_Z4movessssmh+0x13c>)
 80017ba:	2201      	movs	r2, #1
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e042      	b.n	8001846 <_Z4movessssmh+0x1a6>
 80017c0:	2000009c 	.word	0x2000009c
 80017c4:	20000098 	.word	0x20000098
 80017c8:	fffffabb 	.word	0xfffffabb
 80017cc:	200000a0 	.word	0x200000a0
 80017d0:	200000a2 	.word	0x200000a2
 80017d4:	200000a1 	.word	0x200000a1
 80017d8:	200000a3 	.word	0x200000a3
 80017dc:	200000a4 	.word	0x200000a4
  }else if(angle_diff > 1350 || angle_diff <= -1350 ){
 80017e0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80017e4:	f240 5246 	movw	r2, #1350	@ 0x546
 80017e8:	4293      	cmp	r3, r2
 80017ea:	dc04      	bgt.n	80017f6 <_Z4movessssmh+0x156>
 80017ec:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80017f0:	4ad1      	ldr	r2, [pc, #836]	@ (8001b38 <_Z4movessssmh+0x498>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	da27      	bge.n	8001846 <_Z4movessssmh+0x1a6>
    left_front  =   3;  right_front =  2;
 80017f6:	4bd1      	ldr	r3, [pc, #836]	@ (8001b3c <_Z4movessssmh+0x49c>)
 80017f8:	2203      	movs	r2, #3
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	4bd0      	ldr	r3, [pc, #832]	@ (8001b40 <_Z4movessssmh+0x4a0>)
 80017fe:	2202      	movs	r2, #2
 8001800:	701a      	strb	r2, [r3, #0]
    left_back   =   0;  right_back  =  1;
 8001802:	4bd0      	ldr	r3, [pc, #832]	@ (8001b44 <_Z4movessssmh+0x4a4>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	4bcf      	ldr	r3, [pc, #828]	@ (8001b48 <_Z4movessssmh+0x4a8>)
 800180a:	2201      	movs	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
    if(angle_diff > 1350) angle_diff -= 1800;
 800180e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8001812:	f240 5246 	movw	r2, #1350	@ 0x546
 8001816:	4293      	cmp	r3, r2
 8001818:	dd06      	ble.n	8001828 <_Z4movessssmh+0x188>
 800181a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800181e:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001822:	b29b      	uxth	r3, r3
 8001824:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    if(angle_diff <= -1350) angle_diff += 1800;
 8001828:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800182c:	4ac2      	ldr	r2, [pc, #776]	@ (8001b38 <_Z4movessssmh+0x498>)
 800182e:	4293      	cmp	r3, r2
 8001830:	da06      	bge.n	8001840 <_Z4movessssmh+0x1a0>
 8001832:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001836:	f503 63e1 	add.w	r3, r3, #1800	@ 0x708
 800183a:	b29b      	uxth	r3, r3
 800183c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    mode = 0;
 8001840:	4bc2      	ldr	r3, [pc, #776]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
  }

  alpha[right_front]  = cos((DC[right_front].angle[mode] - angle_diff) * DEG_TO_RAD / 10);
 8001846:	4bbe      	ldr	r3, [pc, #760]	@ (8001b40 <_Z4movessssmh+0x4a0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4619      	mov	r1, r3
 800184c:	4bbf      	ldr	r3, [pc, #764]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	4abf      	ldr	r2, [pc, #764]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 8001854:	460b      	mov	r3, r1
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	1a5b      	subs	r3, r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4403      	add	r3, r0
 800185e:	3308      	adds	r3, #8
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	4413      	add	r3, r2
 8001864:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001868:	461a      	mov	r2, r3
 800186a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fedf 	bl	8000634 <__aeabi_i2d>
 8001876:	a3ae      	add	r3, pc, #696	@ (adr r3, 8001b30 <_Z4movessssmh+0x490>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe ff44 	bl	8000708 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4bb1      	ldr	r3, [pc, #708]	@ (8001b54 <_Z4movessssmh+0x4b4>)
 800188e:	f7ff f865 	bl	800095c <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f008 fa87 	bl	8009dac <cos>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	49a7      	ldr	r1, [pc, #668]	@ (8001b40 <_Z4movessssmh+0x4a0>)
 80018a4:	7809      	ldrb	r1, [r1, #0]
 80018a6:	460c      	mov	r4, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff fa24 	bl	8000cf8 <__aeabi_d2f>
 80018b0:	4602      	mov	r2, r0
 80018b2:	00a3      	lsls	r3, r4, #2
 80018b4:	3348      	adds	r3, #72	@ 0x48
 80018b6:	443b      	add	r3, r7
 80018b8:	f843 2c1c 	str.w	r2, [r3, #-28]
  alpha[right_back]   = cos((DC[right_back].angle[mode]  - angle_diff) * DEG_TO_RAD / 10);
 80018bc:	4ba2      	ldr	r3, [pc, #648]	@ (8001b48 <_Z4movessssmh+0x4a8>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4ba2      	ldr	r3, [pc, #648]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	4aa1      	ldr	r2, [pc, #644]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 80018ca:	460b      	mov	r3, r1
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a5b      	subs	r3, r3, r1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4403      	add	r3, r0
 80018d4:	3308      	adds	r3, #8
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018de:	461a      	mov	r2, r3
 80018e0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fea4 	bl	8000634 <__aeabi_i2d>
 80018ec:	a390      	add	r3, pc, #576	@ (adr r3, 8001b30 <_Z4movessssmh+0x490>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe ff09 	bl	8000708 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b94      	ldr	r3, [pc, #592]	@ (8001b54 <_Z4movessssmh+0x4b4>)
 8001904:	f7ff f82a 	bl	800095c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f008 fa4c 	bl	8009dac <cos>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	498b      	ldr	r1, [pc, #556]	@ (8001b48 <_Z4movessssmh+0x4a8>)
 800191a:	7809      	ldrb	r1, [r1, #0]
 800191c:	460c      	mov	r4, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f9e9 	bl	8000cf8 <__aeabi_d2f>
 8001926:	4602      	mov	r2, r0
 8001928:	00a3      	lsls	r3, r4, #2
 800192a:	3348      	adds	r3, #72	@ 0x48
 800192c:	443b      	add	r3, r7
 800192e:	f843 2c1c 	str.w	r2, [r3, #-28]
  alpha[left_front]   = cos((DC[left_front].angle[mode] - angle_diff + 1800) * DEG_TO_RAD / 10);
 8001932:	4b82      	ldr	r3, [pc, #520]	@ (8001b3c <_Z4movessssmh+0x49c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	4b84      	ldr	r3, [pc, #528]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	4a84      	ldr	r2, [pc, #528]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 8001940:	460b      	mov	r3, r1
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	1a5b      	subs	r3, r3, r1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4403      	add	r3, r0
 800194a:	3308      	adds	r3, #8
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001954:	461a      	mov	r2, r3
 8001956:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f503 63e1 	add.w	r3, r3, #1800	@ 0x708
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fe67 	bl	8000634 <__aeabi_i2d>
 8001966:	a372      	add	r3, pc, #456	@ (adr r3, 8001b30 <_Z4movessssmh+0x490>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fecc 	bl	8000708 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b75      	ldr	r3, [pc, #468]	@ (8001b54 <_Z4movessssmh+0x4b4>)
 800197e:	f7fe ffed 	bl	800095c <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f008 fa0f 	bl	8009dac <cos>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	496a      	ldr	r1, [pc, #424]	@ (8001b3c <_Z4movessssmh+0x49c>)
 8001994:	7809      	ldrb	r1, [r1, #0]
 8001996:	460c      	mov	r4, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff f9ac 	bl	8000cf8 <__aeabi_d2f>
 80019a0:	4602      	mov	r2, r0
 80019a2:	00a3      	lsls	r3, r4, #2
 80019a4:	3348      	adds	r3, #72	@ 0x48
 80019a6:	443b      	add	r3, r7
 80019a8:	f843 2c1c 	str.w	r2, [r3, #-28]
  alpha[left_back]    = cos((DC[left_back].angle[mode]  - angle_diff + 1800) * DEG_TO_RAD / 10);
 80019ac:	4b65      	ldr	r3, [pc, #404]	@ (8001b44 <_Z4movessssmh+0x4a4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4619      	mov	r1, r3
 80019b2:	4b66      	ldr	r3, [pc, #408]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	4a65      	ldr	r2, [pc, #404]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 80019ba:	460b      	mov	r3, r1
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4403      	add	r3, r0
 80019c4:	3308      	adds	r3, #8
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019ce:	461a      	mov	r2, r3
 80019d0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f503 63e1 	add.w	r3, r3, #1800	@ 0x708
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fe2a 	bl	8000634 <__aeabi_i2d>
 80019e0:	a353      	add	r3, pc, #332	@ (adr r3, 8001b30 <_Z4movessssmh+0x490>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe fe8f 	bl	8000708 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	4b57      	ldr	r3, [pc, #348]	@ (8001b54 <_Z4movessssmh+0x4b4>)
 80019f8:	f7fe ffb0 	bl	800095c <__aeabi_ddiv>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	f008 f9d2 	bl	8009dac <cos>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	494d      	ldr	r1, [pc, #308]	@ (8001b44 <_Z4movessssmh+0x4a4>)
 8001a0e:	7809      	ldrb	r1, [r1, #0]
 8001a10:	460c      	mov	r4, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f96f 	bl	8000cf8 <__aeabi_d2f>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	00a3      	lsls	r3, r4, #2
 8001a1e:	3348      	adds	r3, #72	@ 0x48
 8001a20:	443b      	add	r3, r7
 8001a22:	f843 2c1c 	str.w	r2, [r3, #-28]

  const double theta[2] = {cos(abs(DC[right_front].angle[mode] - DC[right_back].angle[mode]) * DEG_TO_RAD /10),
 8001a26:	4b46      	ldr	r3, [pc, #280]	@ (8001b40 <_Z4movessssmh+0x4a0>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4b47      	ldr	r3, [pc, #284]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	4a47      	ldr	r2, [pc, #284]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 8001a34:	460b      	mov	r3, r1
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	1a5b      	subs	r3, r3, r1
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4403      	add	r3, r0
 8001a3e:	3308      	adds	r3, #8
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b48 <_Z4movessssmh+0x4a8>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4b3e      	ldr	r3, [pc, #248]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	461c      	mov	r4, r3
 8001a56:	4a3e      	ldr	r2, [pc, #248]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 8001a58:	460b      	mov	r3, r1
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	1a5b      	subs	r3, r3, r1
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4423      	add	r3, r4
 8001a62:	3308      	adds	r3, #8
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	4413      	add	r3, r2
 8001a68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a6c:	1ac3      	subs	r3, r0, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bfb8      	it	lt
 8001a72:	425b      	neglt	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fddd 	bl	8000634 <__aeabi_i2d>
 8001a7a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001b30 <_Z4movessssmh+0x490>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fe42 	bl	8000708 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b30      	ldr	r3, [pc, #192]	@ (8001b54 <_Z4movessssmh+0x4b4>)
 8001a92:	f7fe ff63 	bl	800095c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f008 f985 	bl	8009dac <cos>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
                          cos(abs(DC[left_front].angle[mode] -  DC[left_back].angle[mode]) *  DEG_TO_RAD /10)};
 8001aa6:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001aaa:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <_Z4movessssmh+0x49c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	4a26      	ldr	r2, [pc, #152]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 8001ab8:	460b      	mov	r3, r1
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	1a5b      	subs	r3, r3, r1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4403      	add	r3, r0
 8001ac2:	3308      	adds	r3, #8
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001acc:	4618      	mov	r0, r3
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <_Z4movessssmh+0x4a4>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <_Z4movessssmh+0x4ac>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	461c      	mov	r4, r3
 8001ada:	4a1d      	ldr	r2, [pc, #116]	@ (8001b50 <_Z4movessssmh+0x4b0>)
 8001adc:	460b      	mov	r3, r1
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	1a5b      	subs	r3, r3, r1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4423      	add	r3, r4
 8001ae6:	3308      	adds	r3, #8
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4413      	add	r3, r2
 8001aec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001af0:	1ac3      	subs	r3, r0, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bfb8      	it	lt
 8001af6:	425b      	neglt	r3, r3
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd9b 	bl	8000634 <__aeabi_i2d>
 8001afe:	a30c      	add	r3, pc, #48	@ (adr r3, 8001b30 <_Z4movessssmh+0x490>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fe00 	bl	8000708 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <_Z4movessssmh+0x4b4>)
 8001b16:	f7fe ff21 	bl	800095c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f008 f943 	bl	8009dac <cos>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8001b2e:	e013      	b.n	8001b58 <_Z4movessssmh+0x4b8>
 8001b30:	a2529d39 	.word	0xa2529d39
 8001b34:	3f91df46 	.word	0x3f91df46
 8001b38:	fffffabb 	.word	0xfffffabb
 8001b3c:	200000a0 	.word	0x200000a0
 8001b40:	200000a2 	.word	0x200000a2
 8001b44:	200000a1 	.word	0x200000a1
 8001b48:	200000a3 	.word	0x200000a3
 8001b4c:	200000a4 	.word	0x200000a4
 8001b50:	200005ec 	.word	0x200005ec
 8001b54:	40240000 	.word	0x40240000


  const double gama[2] = {(alpha[right_front] * alpha[right_front] + alpha[right_back] * alpha[right_back] - 2 * alpha[right_front] * alpha[right_back] * theta[0]),
 8001b58:	4bcb      	ldr	r3, [pc, #812]	@ (8001e88 <_Z4movessssmh+0x7e8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	3348      	adds	r3, #72	@ 0x48
 8001b60:	443b      	add	r3, r7
 8001b62:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8001b66:	4bc8      	ldr	r3, [pc, #800]	@ (8001e88 <_Z4movessssmh+0x7e8>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	3348      	adds	r3, #72	@ 0x48
 8001b6e:	443b      	add	r3, r7
 8001b70:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001b74:	4619      	mov	r1, r3
 8001b76:	4610      	mov	r0, r2
 8001b78:	f7fe fb56 	bl	8000228 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461c      	mov	r4, r3
 8001b80:	4bc2      	ldr	r3, [pc, #776]	@ (8001e8c <_Z4movessssmh+0x7ec>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	3348      	adds	r3, #72	@ 0x48
 8001b88:	443b      	add	r3, r7
 8001b8a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8001b8e:	4bbf      	ldr	r3, [pc, #764]	@ (8001e8c <_Z4movessssmh+0x7ec>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3348      	adds	r3, #72	@ 0x48
 8001b96:	443b      	add	r3, r7
 8001b98:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	f7fe fb42 	bl	8000228 <__aeabi_fmul>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff f8fb 	bl	8000da4 <__addsf3>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fd51 	bl	8000658 <__aeabi_f2d>
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	460d      	mov	r5, r1
 8001bba:	4bb3      	ldr	r3, [pc, #716]	@ (8001e88 <_Z4movessssmh+0x7e8>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	3348      	adds	r3, #72	@ 0x48
 8001bc2:	443b      	add	r3, r7
 8001bc4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f8ea 	bl	8000da4 <__addsf3>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4bad      	ldr	r3, [pc, #692]	@ (8001e8c <_Z4movessssmh+0x7ec>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	3348      	adds	r3, #72	@ 0x48
 8001bdc:	443b      	add	r3, r7
 8001bde:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4610      	mov	r0, r2
 8001be6:	f7fe fb1f 	bl	8000228 <__aeabi_fmul>
 8001bea:	4603      	mov	r3, r0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fd33 	bl	8000658 <__aeabi_f2d>
 8001bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf6:	f7fe fd87 	bl	8000708 <__aeabi_dmul>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fbc9 	bl	8000398 <__aeabi_dsub>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
                   (alpha[left_front] * alpha[left_front] + alpha[left_back] * alpha[left_back] - 2 * alpha[left_front] * alpha[left_back] * theta[1])};
 8001c0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001c0e:	4ba0      	ldr	r3, [pc, #640]	@ (8001e90 <_Z4movessssmh+0x7f0>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	3348      	adds	r3, #72	@ 0x48
 8001c16:	443b      	add	r3, r7
 8001c18:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8001c1c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e90 <_Z4movessssmh+0x7f0>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3348      	adds	r3, #72	@ 0x48
 8001c24:	443b      	add	r3, r7
 8001c26:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f7fe fafb 	bl	8000228 <__aeabi_fmul>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461c      	mov	r4, r3
 8001c36:	4b97      	ldr	r3, [pc, #604]	@ (8001e94 <_Z4movessssmh+0x7f4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	3348      	adds	r3, #72	@ 0x48
 8001c3e:	443b      	add	r3, r7
 8001c40:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8001c44:	4b93      	ldr	r3, [pc, #588]	@ (8001e94 <_Z4movessssmh+0x7f4>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3348      	adds	r3, #72	@ 0x48
 8001c4c:	443b      	add	r3, r7
 8001c4e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f7fe fae7 	bl	8000228 <__aeabi_fmul>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff f8a0 	bl	8000da4 <__addsf3>
 8001c64:	4603      	mov	r3, r0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fcf6 	bl	8000658 <__aeabi_f2d>
 8001c6c:	4604      	mov	r4, r0
 8001c6e:	460d      	mov	r5, r1
 8001c70:	4b87      	ldr	r3, [pc, #540]	@ (8001e90 <_Z4movessssmh+0x7f0>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	3348      	adds	r3, #72	@ 0x48
 8001c78:	443b      	add	r3, r7
 8001c7a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f88f 	bl	8000da4 <__addsf3>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b82      	ldr	r3, [pc, #520]	@ (8001e94 <_Z4movessssmh+0x7f4>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	3348      	adds	r3, #72	@ 0x48
 8001c92:	443b      	add	r3, r7
 8001c94:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f7fe fac4 	bl	8000228 <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fcd8 	bl	8000658 <__aeabi_f2d>
 8001ca8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cac:	f7fe fd2c 	bl	8000708 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fb6e 	bl	8000398 <__aeabi_dsub>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  //right robot

  // xử lí tốc độ

  pwm[right_front] =  (speed_rotate + speed_run * sqrt(2)) * (alpha[right_front] - alpha[right_back]  * theta[0]) / gama[0];
 8001cc4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fcb3 	bl	8000634 <__aeabi_i2d>
 8001cce:	4604      	mov	r4, r0
 8001cd0:	460d      	mov	r5, r1
 8001cd2:	4b71      	ldr	r3, [pc, #452]	@ (8001e98 <_Z4movessssmh+0x7f8>)
 8001cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fcab 	bl	8000634 <__aeabi_i2d>
 8001cde:	4680      	mov	r8, r0
 8001ce0:	4689      	mov	r9, r1
 8001ce2:	2002      	movs	r0, #2
 8001ce4:	f001 fa96 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4640      	mov	r0, r8
 8001cee:	4649      	mov	r1, r9
 8001cf0:	f7fe fd0a 	bl	8000708 <__aeabi_dmul>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4629      	mov	r1, r5
 8001cfc:	f7fe fb4e 	bl	800039c <__adddf3>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4690      	mov	r8, r2
 8001d06:	4699      	mov	r9, r3
 8001d08:	4b5f      	ldr	r3, [pc, #380]	@ (8001e88 <_Z4movessssmh+0x7e8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	3348      	adds	r3, #72	@ 0x48
 8001d10:	443b      	add	r3, r7
 8001d12:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc9e 	bl	8000658 <__aeabi_f2d>
 8001d1c:	4604      	mov	r4, r0
 8001d1e:	460d      	mov	r5, r1
 8001d20:	4b5a      	ldr	r3, [pc, #360]	@ (8001e8c <_Z4movessssmh+0x7ec>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	3348      	adds	r3, #72	@ 0x48
 8001d28:	443b      	add	r3, r7
 8001d2a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc92 	bl	8000658 <__aeabi_f2d>
 8001d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d38:	f7fe fce6 	bl	8000708 <__aeabi_dmul>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4620      	mov	r0, r4
 8001d42:	4629      	mov	r1, r5
 8001d44:	f7fe fb28 	bl	8000398 <__aeabi_dsub>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4640      	mov	r0, r8
 8001d4e:	4649      	mov	r1, r9
 8001d50:	f7fe fcda 	bl	8000708 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d60:	f7fe fdfc 	bl	800095c <__aeabi_ddiv>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4947      	ldr	r1, [pc, #284]	@ (8001e88 <_Z4movessssmh+0x7e8>)
 8001d6a:	7809      	ldrb	r1, [r1, #0]
 8001d6c:	460c      	mov	r4, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe ff79 	bl	8000c68 <__aeabi_d2iz>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	0063      	lsls	r3, r4, #1
 8001d7c:	3348      	adds	r3, #72	@ 0x48
 8001d7e:	443b      	add	r3, r7
 8001d80:	f823 2c0c 	strh.w	r2, [r3, #-12]
  pwm[right_back]  =  (speed_rotate + speed_run * sqrt(2)) * (alpha[right_back] -  alpha[right_front] * theta[0]) / gama[0];
 8001d84:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fc53 	bl	8000634 <__aeabi_i2d>
 8001d8e:	4604      	mov	r4, r0
 8001d90:	460d      	mov	r5, r1
 8001d92:	4b41      	ldr	r3, [pc, #260]	@ (8001e98 <_Z4movessssmh+0x7f8>)
 8001d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fc4b 	bl	8000634 <__aeabi_i2d>
 8001d9e:	4680      	mov	r8, r0
 8001da0:	4689      	mov	r9, r1
 8001da2:	2002      	movs	r0, #2
 8001da4:	f001 fa36 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4640      	mov	r0, r8
 8001dae:	4649      	mov	r1, r9
 8001db0:	f7fe fcaa 	bl	8000708 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe faee 	bl	800039c <__adddf3>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4690      	mov	r8, r2
 8001dc6:	4699      	mov	r9, r3
 8001dc8:	4b30      	ldr	r3, [pc, #192]	@ (8001e8c <_Z4movessssmh+0x7ec>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	3348      	adds	r3, #72	@ 0x48
 8001dd0:	443b      	add	r3, r7
 8001dd2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fc3e 	bl	8000658 <__aeabi_f2d>
 8001ddc:	4604      	mov	r4, r0
 8001dde:	460d      	mov	r5, r1
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <_Z4movessssmh+0x7e8>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	3348      	adds	r3, #72	@ 0x48
 8001de8:	443b      	add	r3, r7
 8001dea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fc32 	bl	8000658 <__aeabi_f2d>
 8001df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df8:	f7fe fc86 	bl	8000708 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fac8 	bl	8000398 <__aeabi_dsub>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4640      	mov	r0, r8
 8001e0e:	4649      	mov	r1, r9
 8001e10:	f7fe fc7a 	bl	8000708 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e20:	f7fe fd9c 	bl	800095c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4918      	ldr	r1, [pc, #96]	@ (8001e8c <_Z4movessssmh+0x7ec>)
 8001e2a:	7809      	ldrb	r1, [r1, #0]
 8001e2c:	460c      	mov	r4, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe ff19 	bl	8000c68 <__aeabi_d2iz>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	0063      	lsls	r3, r4, #1
 8001e3c:	3348      	adds	r3, #72	@ 0x48
 8001e3e:	443b      	add	r3, r7
 8001e40:	f823 2c0c 	strh.w	r2, [r3, #-12]


  // left robot
  pwm[left_front]  =  (-speed_rotate + speed_run * sqrt(2)) * (alpha[left_front] - alpha[left_back]  * theta[1]) / gama[1];
 8001e44:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001e48:	425b      	negs	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fbf2 	bl	8000634 <__aeabi_i2d>
 8001e50:	4604      	mov	r4, r0
 8001e52:	460d      	mov	r5, r1
 8001e54:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <_Z4movessssmh+0x7f8>)
 8001e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fbea 	bl	8000634 <__aeabi_i2d>
 8001e60:	4680      	mov	r8, r0
 8001e62:	4689      	mov	r9, r1
 8001e64:	2002      	movs	r0, #2
 8001e66:	f001 f9d5 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4640      	mov	r0, r8
 8001e70:	4649      	mov	r1, r9
 8001e72:	f7fe fc49 	bl	8000708 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f7fe fa8d 	bl	800039c <__adddf3>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	e009      	b.n	8001e9c <_Z4movessssmh+0x7fc>
 8001e88:	200000a2 	.word	0x200000a2
 8001e8c:	200000a3 	.word	0x200000a3
 8001e90:	200000a0 	.word	0x200000a0
 8001e94:	200000a1 	.word	0x200000a1
 8001e98:	20000098 	.word	0x20000098
 8001e9c:	4690      	mov	r8, r2
 8001e9e:	4699      	mov	r9, r3
 8001ea0:	4b6d      	ldr	r3, [pc, #436]	@ (8002058 <_Z4movessssmh+0x9b8>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	3348      	adds	r3, #72	@ 0x48
 8001ea8:	443b      	add	r3, r7
 8001eaa:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fbd2 	bl	8000658 <__aeabi_f2d>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	460d      	mov	r5, r1
 8001eb8:	4b68      	ldr	r3, [pc, #416]	@ (800205c <_Z4movessssmh+0x9bc>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	3348      	adds	r3, #72	@ 0x48
 8001ec0:	443b      	add	r3, r7
 8001ec2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fbc6 	bl	8000658 <__aeabi_f2d>
 8001ecc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ed0:	f7fe fc1a 	bl	8000708 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe fa5c 	bl	8000398 <__aeabi_dsub>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4640      	mov	r0, r8
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	f7fe fc0e 	bl	8000708 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef8:	f7fe fd30 	bl	800095c <__aeabi_ddiv>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4955      	ldr	r1, [pc, #340]	@ (8002058 <_Z4movessssmh+0x9b8>)
 8001f02:	7809      	ldrb	r1, [r1, #0]
 8001f04:	460c      	mov	r4, r1
 8001f06:	4610      	mov	r0, r2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7fe fead 	bl	8000c68 <__aeabi_d2iz>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	0063      	lsls	r3, r4, #1
 8001f14:	3348      	adds	r3, #72	@ 0x48
 8001f16:	443b      	add	r3, r7
 8001f18:	f823 2c0c 	strh.w	r2, [r3, #-12]
  pwm[left_back]   =  (-speed_rotate + speed_run * sqrt(2)) * (alpha[left_back]  - alpha[left_front] * theta[1]) / gama[1];
 8001f1c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8001f20:	425b      	negs	r3, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fb86 	bl	8000634 <__aeabi_i2d>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	460d      	mov	r5, r1
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002060 <_Z4movessssmh+0x9c0>)
 8001f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fb7e 	bl	8000634 <__aeabi_i2d>
 8001f38:	4680      	mov	r8, r0
 8001f3a:	4689      	mov	r9, r1
 8001f3c:	2002      	movs	r0, #2
 8001f3e:	f001 f969 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4640      	mov	r0, r8
 8001f48:	4649      	mov	r1, r9
 8001f4a:	f7fe fbdd 	bl	8000708 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe fa21 	bl	800039c <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4690      	mov	r8, r2
 8001f60:	4699      	mov	r9, r3
 8001f62:	4b3e      	ldr	r3, [pc, #248]	@ (800205c <_Z4movessssmh+0x9bc>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	3348      	adds	r3, #72	@ 0x48
 8001f6a:	443b      	add	r3, r7
 8001f6c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fb71 	bl	8000658 <__aeabi_f2d>
 8001f76:	4604      	mov	r4, r0
 8001f78:	460d      	mov	r5, r1
 8001f7a:	4b37      	ldr	r3, [pc, #220]	@ (8002058 <_Z4movessssmh+0x9b8>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	3348      	adds	r3, #72	@ 0x48
 8001f82:	443b      	add	r3, r7
 8001f84:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7fe fb65 	bl	8000658 <__aeabi_f2d>
 8001f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f92:	f7fe fbb9 	bl	8000708 <__aeabi_dmul>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	f7fe f9fb 	bl	8000398 <__aeabi_dsub>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	4649      	mov	r1, r9
 8001faa:	f7fe fbad 	bl	8000708 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fba:	f7fe fccf 	bl	800095c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4926      	ldr	r1, [pc, #152]	@ (800205c <_Z4movessssmh+0x9bc>)
 8001fc4:	7809      	ldrb	r1, [r1, #0]
 8001fc6:	460c      	mov	r4, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fe4c 	bl	8000c68 <__aeabi_d2iz>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	0063      	lsls	r3, r4, #1
 8001fd6:	3348      	adds	r3, #72	@ 0x48
 8001fd8:	443b      	add	r3, r7
 8001fda:	f823 2c0c 	strh.w	r2, [r3, #-12]

  run_dc(right_front,pwm[right_front]);
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <_Z4movessssmh+0x9c4>)
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <_Z4movessssmh+0x9c4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	3348      	adds	r3, #72	@ 0x48
 8001fea:	443b      	add	r3, r7
 8001fec:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f7ff fb22 	bl	800163c <_Z6run_dchs>
  run_dc(right_back ,pwm[right_back] );
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <_Z4movessssmh+0x9c8>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <_Z4movessssmh+0x9c8>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	3348      	adds	r3, #72	@ 0x48
 8002004:	443b      	add	r3, r7
 8002006:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800200a:	4619      	mov	r1, r3
 800200c:	4610      	mov	r0, r2
 800200e:	f7ff fb15 	bl	800163c <_Z6run_dchs>
  run_dc(left_front ,pwm[left_front] );
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <_Z4movessssmh+0x9b8>)
 8002014:	781a      	ldrb	r2, [r3, #0]
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <_Z4movessssmh+0x9b8>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	3348      	adds	r3, #72	@ 0x48
 800201e:	443b      	add	r3, r7
 8002020:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7ff fb08 	bl	800163c <_Z6run_dchs>
  run_dc(left_back  ,pwm[left_back]  );
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <_Z4movessssmh+0x9bc>)
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <_Z4movessssmh+0x9bc>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	3348      	adds	r3, #72	@ 0x48
 8002038:	443b      	add	r3, r7
 800203a:	f933 3c0c 	ldrsh.w	r3, [r3, #-12]
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7ff fafb 	bl	800163c <_Z6run_dchs>
 // Debug("pwm[0] = %d pwm[1] = %d  pwm[2] = %d  pwm[3] = %d",pwm[0],pwm[1],pwm[2],pwm[3] );


  return speed_run;
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <_Z4movessssmh+0x9c0>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]

}
 800204c:	4618      	mov	r0, r3
 800204e:	3748      	adds	r7, #72	@ 0x48
 8002050:	46bd      	mov	sp, r7
 8002052:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002056:	bf00      	nop
 8002058:	200000a0 	.word	0x200000a0
 800205c:	200000a1 	.word	0x200000a1
 8002060:	20000098 	.word	0x20000098
 8002064:	200000a2 	.word	0x200000a2
 8002068:	200000a3 	.word	0x200000a3
 800206c:	00000000 	.word	0x00000000

08002070 <_Z14move_directionssssmh>:



int16_t move_direction(int16_t angle_set, int16_t speed_rot,int16_t angle_tt, int16_t speed_tt,uint32_t time_soft,uint8_t delta_speed){
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b096      	sub	sp, #88	@ 0x58
 8002076:	af02      	add	r7, sp, #8
 8002078:	4604      	mov	r4, r0
 800207a:	4608      	mov	r0, r1
 800207c:	4611      	mov	r1, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4623      	mov	r3, r4
 8002082:	80fb      	strh	r3, [r7, #6]
 8002084:	4603      	mov	r3, r0
 8002086:	80bb      	strh	r3, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	803b      	strh	r3, [r7, #0]

  static int16_t pwm[4];
  static int16_t speed_run = 0;
  static uint32_t time_soft_speed = 0;
  soft_speed(&speed_run,&time_soft_speed,speed_tt,time_soft,delta_speed);
 8002090:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002094:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800209c:	490b      	ldr	r1, [pc, #44]	@ (80020cc <_Z14move_directionssssmh+0x5c>)
 800209e:	480c      	ldr	r0, [pc, #48]	@ (80020d0 <_Z14move_directionssssmh+0x60>)
 80020a0:	f7ff f97f 	bl	80013a2 <_Z10soft_speedPsPmsmh>

  static int16_t speed_rotate = 0;
  speed_rotate = PID_rotate(angle_set,speed_rot);
 80020a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80020a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ac:	4611      	mov	r1, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fa0c 	bl	80014cc <_Z10PID_rotatess>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <_Z14move_directionssssmh+0x64>)
 80020ba:	801a      	strh	r2, [r3, #0]
  int16_t angle = compass();
 80020bc:	f002 fe06 	bl	8004ccc <_Z7compassv>
 80020c0:	4603      	mov	r3, r0
 80020c2:	877b      	strh	r3, [r7, #58]	@ 0x3a

  float alpha[4];

  for(uint8_t i = 0; i < 4; i++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80020ca:	e041      	b.n	8002150 <_Z14move_directionssssmh+0xe0>
 80020cc:	200000b4 	.word	0x200000b4
 80020d0:	200000b0 	.word	0x200000b0
 80020d4:	200000b8 	.word	0x200000b8
    alpha[i] = cos((DC[i].angle[0] - angle_tt + angle) * DEG_TO_RAD / 10);
 80020d8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80020dc:	49ca      	ldr	r1, [pc, #808]	@ (8002408 <_Z14move_directionssssmh+0x398>)
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	3316      	adds	r3, #22
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	461a      	mov	r2, r3
 80020f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020f4:	1ad2      	subs	r2, r2, r3
 80020f6:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 80020fa:	4413      	add	r3, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe fa99 	bl	8000634 <__aeabi_i2d>
 8002102:	a3bf      	add	r3, pc, #764	@ (adr r3, 8002400 <_Z14move_directionssssmh+0x390>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fafe 	bl	8000708 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4bbc      	ldr	r3, [pc, #752]	@ (800240c <_Z14move_directionssssmh+0x39c>)
 800211a:	f7fe fc1f 	bl	800095c <__aeabi_ddiv>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	f007 fe41 	bl	8009dac <cos>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	f7fe fddf 	bl	8000cf8 <__aeabi_d2f>
 800213a:	4602      	mov	r2, r0
 800213c:	00a3      	lsls	r3, r4, #2
 800213e:	3350      	adds	r3, #80	@ 0x50
 8002140:	443b      	add	r3, r7
 8002142:	f843 2c28 	str.w	r2, [r3, #-40]
  for(uint8_t i = 0; i < 4; i++)
 8002146:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800214a:	3301      	adds	r3, #1
 800214c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002150:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002154:	2b03      	cmp	r3, #3
 8002156:	d9bf      	bls.n	80020d8 <_Z14move_directionssssmh+0x68>

  const double theta[2] = {cos(abs(DC[0].angle[0] - DC[3].angle[0]) * DEG_TO_RAD /10), cos(abs(DC[1].angle[0] - DC[2].angle[0]) * DEG_TO_RAD /10)};
 8002158:	4bab      	ldr	r3, [pc, #684]	@ (8002408 <_Z14move_directionssssmh+0x398>)
 800215a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800215e:	461a      	mov	r2, r3
 8002160:	4ba9      	ldr	r3, [pc, #676]	@ (8002408 <_Z14move_directionssssmh+0x398>)
 8002162:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	@ 0x6a
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	bfb8      	it	lt
 800216c:	425b      	neglt	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe fa60 	bl	8000634 <__aeabi_i2d>
 8002174:	a3a2      	add	r3, pc, #648	@ (adr r3, 8002400 <_Z14move_directionssssmh+0x390>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	f7fe fac5 	bl	8000708 <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4ba0      	ldr	r3, [pc, #640]	@ (800240c <_Z14move_directionssssmh+0x39c>)
 800218c:	f7fe fbe6 	bl	800095c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f007 fe08 	bl	8009dac <cos>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80021a4:	4b98      	ldr	r3, [pc, #608]	@ (8002408 <_Z14move_directionssssmh+0x398>)
 80021a6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b96      	ldr	r3, [pc, #600]	@ (8002408 <_Z14move_directionssssmh+0x398>)
 80021ae:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bfb8      	it	lt
 80021b8:	425b      	neglt	r3, r3
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fa3a 	bl	8000634 <__aeabi_i2d>
 80021c0:	a38f      	add	r3, pc, #572	@ (adr r3, 8002400 <_Z14move_directionssssmh+0x390>)
 80021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c6:	f7fe fa9f 	bl	8000708 <__aeabi_dmul>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b8d      	ldr	r3, [pc, #564]	@ (800240c <_Z14move_directionssssmh+0x39c>)
 80021d8:	f7fe fbc0 	bl	800095c <__aeabi_ddiv>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f007 fde2 	bl	8009dac <cos>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	e9c7 2308 	strd	r2, r3, [r7, #32]

  double gama[2] = {(alpha[0] * alpha[0] + alpha[3] * alpha[3] - 2 * alpha[0] * alpha[3] * theta[0]),
 80021f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f816 	bl	8000228 <__aeabi_fmul>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461c      	mov	r4, r3
 8002200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002204:	4611      	mov	r1, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f80e 	bl	8000228 <__aeabi_fmul>
 800220c:	4603      	mov	r3, r0
 800220e:	4619      	mov	r1, r3
 8002210:	4620      	mov	r0, r4
 8002212:	f7fe fdc7 	bl	8000da4 <__addsf3>
 8002216:	4603      	mov	r3, r0
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe fa1d 	bl	8000658 <__aeabi_f2d>
 800221e:	4604      	mov	r4, r0
 8002220:	460d      	mov	r5, r1
 8002222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002224:	4619      	mov	r1, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f7fe fdbc 	bl	8000da4 <__addsf3>
 800222c:	4603      	mov	r3, r0
 800222e:	461a      	mov	r2, r3
 8002230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7fd fff7 	bl	8000228 <__aeabi_fmul>
 800223a:	4603      	mov	r3, r0
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fa0b 	bl	8000658 <__aeabi_f2d>
 8002242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002246:	f7fe fa5f 	bl	8000708 <__aeabi_dmul>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4620      	mov	r0, r4
 8002250:	4629      	mov	r1, r5
 8002252:	f7fe f8a1 	bl	8000398 <__aeabi_dsub>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
                        (alpha[1] * alpha[1] + alpha[2] * alpha[2] - 2 * alpha[1] * alpha[2] * theta[1])};
 800225a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800225e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7fd ffdf 	bl	8000228 <__aeabi_fmul>
 800226a:	4603      	mov	r3, r0
 800226c:	461c      	mov	r4, r3
 800226e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7fd ffd7 	bl	8000228 <__aeabi_fmul>
 800227a:	4603      	mov	r3, r0
 800227c:	4619      	mov	r1, r3
 800227e:	4620      	mov	r0, r4
 8002280:	f7fe fd90 	bl	8000da4 <__addsf3>
 8002284:	4603      	mov	r3, r0
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f9e6 	bl	8000658 <__aeabi_f2d>
 800228c:	4604      	mov	r4, r0
 800228e:	460d      	mov	r5, r1
 8002290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002292:	4619      	mov	r1, r3
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe fd85 	bl	8000da4 <__addsf3>
 800229a:	4603      	mov	r3, r0
 800229c:	461a      	mov	r2, r3
 800229e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7fd ffc0 	bl	8000228 <__aeabi_fmul>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f9d4 	bl	8000658 <__aeabi_f2d>
 80022b0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022b4:	f7fe fa28 	bl	8000708 <__aeabi_dmul>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4620      	mov	r0, r4
 80022be:	4629      	mov	r1, r5
 80022c0:	f7fe f86a 	bl	8000398 <__aeabi_dsub>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  //right robot : DC[0], DC[3]

  pwm[0] = speed_rotate + (speed_run * sqrt(2)) * (alpha[0] - alpha[3] * theta[0]) / gama[0];
 80022cc:	4b50      	ldr	r3, [pc, #320]	@ (8002410 <_Z14move_directionssssmh+0x3a0>)
 80022ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f9ae 	bl	8000634 <__aeabi_i2d>
 80022d8:	4604      	mov	r4, r0
 80022da:	460d      	mov	r5, r1
 80022dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002414 <_Z14move_directionssssmh+0x3a4>)
 80022de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe f9a6 	bl	8000634 <__aeabi_i2d>
 80022e8:	4680      	mov	r8, r0
 80022ea:	4689      	mov	r9, r1
 80022ec:	2002      	movs	r0, #2
 80022ee:	f000 ff91 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4640      	mov	r0, r8
 80022f8:	4649      	mov	r1, r9
 80022fa:	f7fe fa05 	bl	8000708 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4692      	mov	sl, r2
 8002304:	469b      	mov	fp, r3
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe f9a5 	bl	8000658 <__aeabi_f2d>
 800230e:	4680      	mov	r8, r0
 8002310:	4689      	mov	r9, r1
 8002312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f99f 	bl	8000658 <__aeabi_f2d>
 800231a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800231e:	f7fe f9f3 	bl	8000708 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4640      	mov	r0, r8
 8002328:	4649      	mov	r1, r9
 800232a:	f7fe f835 	bl	8000398 <__aeabi_dsub>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4650      	mov	r0, sl
 8002334:	4659      	mov	r1, fp
 8002336:	f7fe f9e7 	bl	8000708 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002346:	f7fe fb09 	bl	800095c <__aeabi_ddiv>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4620      	mov	r0, r4
 8002350:	4629      	mov	r1, r5
 8002352:	f7fe f823 	bl	800039c <__adddf3>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4610      	mov	r0, r2
 800235c:	4619      	mov	r1, r3
 800235e:	f7fe fc83 	bl	8000c68 <__aeabi_d2iz>
 8002362:	4603      	mov	r3, r0
 8002364:	b21a      	sxth	r2, r3
 8002366:	4b2c      	ldr	r3, [pc, #176]	@ (8002418 <_Z14move_directionssssmh+0x3a8>)
 8002368:	801a      	strh	r2, [r3, #0]
  pwm[3] = speed_rotate + (speed_run * sqrt(2)) * (alpha[3] - alpha[0] * theta[0]) / gama[0];
 800236a:	4b29      	ldr	r3, [pc, #164]	@ (8002410 <_Z14move_directionssssmh+0x3a0>)
 800236c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f95f 	bl	8000634 <__aeabi_i2d>
 8002376:	4604      	mov	r4, r0
 8002378:	460d      	mov	r5, r1
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <_Z14move_directionssssmh+0x3a4>)
 800237c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f957 	bl	8000634 <__aeabi_i2d>
 8002386:	4680      	mov	r8, r0
 8002388:	4689      	mov	r9, r1
 800238a:	2002      	movs	r0, #2
 800238c:	f000 ff42 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4640      	mov	r0, r8
 8002396:	4649      	mov	r1, r9
 8002398:	f7fe f9b6 	bl	8000708 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4692      	mov	sl, r2
 80023a2:	469b      	mov	fp, r3
 80023a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe f956 	bl	8000658 <__aeabi_f2d>
 80023ac:	4680      	mov	r8, r0
 80023ae:	4689      	mov	r9, r1
 80023b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f950 	bl	8000658 <__aeabi_f2d>
 80023b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023bc:	f7fe f9a4 	bl	8000708 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4640      	mov	r0, r8
 80023c6:	4649      	mov	r1, r9
 80023c8:	f7fd ffe6 	bl	8000398 <__aeabi_dsub>
 80023cc:	4602      	mov	r2, r0
 80023ce:	460b      	mov	r3, r1
 80023d0:	4650      	mov	r0, sl
 80023d2:	4659      	mov	r1, fp
 80023d4:	f7fe f998 	bl	8000708 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e4:	f7fe faba 	bl	800095c <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	f7fd ffd4 	bl	800039c <__adddf3>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	e00e      	b.n	800241c <_Z14move_directionssssmh+0x3ac>
 80023fe:	bf00      	nop
 8002400:	a2529d39 	.word	0xa2529d39
 8002404:	3f91df46 	.word	0x3f91df46
 8002408:	200005ec 	.word	0x200005ec
 800240c:	40240000 	.word	0x40240000
 8002410:	200000b8 	.word	0x200000b8
 8002414:	200000b0 	.word	0x200000b0
 8002418:	200000a8 	.word	0x200000a8
 800241c:	f7fe fc24 	bl	8000c68 <__aeabi_d2iz>
 8002420:	4603      	mov	r3, r0
 8002422:	b21a      	sxth	r2, r3
 8002424:	4b95      	ldr	r3, [pc, #596]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 8002426:	80da      	strh	r2, [r3, #6]


  // left robot : DC[1] DC[2]
  pwm[1] =  speed_rotate - (speed_run * sqrt(2)) * (alpha[1] - alpha[2] * theta[1]) / gama[1];
 8002428:	4b95      	ldr	r3, [pc, #596]	@ (8002680 <_Z14move_directionssssmh+0x610>)
 800242a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f900 	bl	8000634 <__aeabi_i2d>
 8002434:	4604      	mov	r4, r0
 8002436:	460d      	mov	r5, r1
 8002438:	4b92      	ldr	r3, [pc, #584]	@ (8002684 <_Z14move_directionssssmh+0x614>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe f8f8 	bl	8000634 <__aeabi_i2d>
 8002444:	4680      	mov	r8, r0
 8002446:	4689      	mov	r9, r1
 8002448:	2002      	movs	r0, #2
 800244a:	f000 fee3 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4640      	mov	r0, r8
 8002454:	4649      	mov	r1, r9
 8002456:	f7fe f957 	bl	8000708 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4692      	mov	sl, r2
 8002460:	469b      	mov	fp, r3
 8002462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f8f7 	bl	8000658 <__aeabi_f2d>
 800246a:	4680      	mov	r8, r0
 800246c:	4689      	mov	r9, r1
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f8f1 	bl	8000658 <__aeabi_f2d>
 8002476:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800247a:	f7fe f945 	bl	8000708 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4640      	mov	r0, r8
 8002484:	4649      	mov	r1, r9
 8002486:	f7fd ff87 	bl	8000398 <__aeabi_dsub>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4650      	mov	r0, sl
 8002490:	4659      	mov	r1, fp
 8002492:	f7fe f939 	bl	8000708 <__aeabi_dmul>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	4610      	mov	r0, r2
 800249c:	4619      	mov	r1, r3
 800249e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024a2:	f7fe fa5b 	bl	800095c <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4620      	mov	r0, r4
 80024ac:	4629      	mov	r1, r5
 80024ae:	f7fd ff73 	bl	8000398 <__aeabi_dsub>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	f7fe fbd5 	bl	8000c68 <__aeabi_d2iz>
 80024be:	4603      	mov	r3, r0
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	4b6e      	ldr	r3, [pc, #440]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 80024c4:	805a      	strh	r2, [r3, #2]
  pwm[2] =  speed_rotate - (speed_run * sqrt(2)) * (alpha[2] - alpha[1] * theta[1]) / gama[1];
 80024c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002680 <_Z14move_directionssssmh+0x610>)
 80024c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f8b1 	bl	8000634 <__aeabi_i2d>
 80024d2:	4604      	mov	r4, r0
 80024d4:	460d      	mov	r5, r1
 80024d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002684 <_Z14move_directionssssmh+0x614>)
 80024d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f8a9 	bl	8000634 <__aeabi_i2d>
 80024e2:	4680      	mov	r8, r0
 80024e4:	4689      	mov	r9, r1
 80024e6:	2002      	movs	r0, #2
 80024e8:	f000 fe94 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	4640      	mov	r0, r8
 80024f2:	4649      	mov	r1, r9
 80024f4:	f7fe f908 	bl	8000708 <__aeabi_dmul>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4692      	mov	sl, r2
 80024fe:	469b      	mov	fp, r3
 8002500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f8a8 	bl	8000658 <__aeabi_f2d>
 8002508:	4680      	mov	r8, r0
 800250a:	4689      	mov	r9, r1
 800250c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe f8a2 	bl	8000658 <__aeabi_f2d>
 8002514:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002518:	f7fe f8f6 	bl	8000708 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4640      	mov	r0, r8
 8002522:	4649      	mov	r1, r9
 8002524:	f7fd ff38 	bl	8000398 <__aeabi_dsub>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4650      	mov	r0, sl
 800252e:	4659      	mov	r1, fp
 8002530:	f7fe f8ea 	bl	8000708 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002540:	f7fe fa0c 	bl	800095c <__aeabi_ddiv>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4620      	mov	r0, r4
 800254a:	4629      	mov	r1, r5
 800254c:	f7fd ff24 	bl	8000398 <__aeabi_dsub>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fb86 	bl	8000c68 <__aeabi_d2iz>
 800255c:	4603      	mov	r3, r0
 800255e:	b21a      	sxth	r2, r3
 8002560:	4b46      	ldr	r3, [pc, #280]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 8002562:	809a      	strh	r2, [r3, #4]
//		  pwm[i] = (uint8_t)(abs(pwm[i]));
//	  }
//	  run_dc(vecto[i],i, pwm[i]);
//  }

  double error = 0;
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  for(uint8_t i = 0; i < 4; i++){
 8002570:	2300      	movs	r3, #0
 8002572:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002576:	e020      	b.n	80025ba <_Z14move_directionssssmh+0x54a>
	  if(abs(pwm[i]) > 255){
 8002578:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800257c:	4a3f      	ldr	r2, [pc, #252]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 800257e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	bfb8      	it	lt
 8002586:	425b      	neglt	r3, r3
 8002588:	b29b      	uxth	r3, r3
 800258a:	2bff      	cmp	r3, #255	@ 0xff
 800258c:	d910      	bls.n	80025b0 <_Z14move_directionssssmh+0x540>
		  error = 255 / pwm[i];
 800258e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002592:	4a3a      	ldr	r2, [pc, #232]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 8002594:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002598:	461a      	mov	r2, r3
 800259a:	23ff      	movs	r3, #255	@ 0xff
 800259c:	fb93 f3f2 	sdiv	r3, r3, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe f847 	bl	8000634 <__aeabi_i2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		  break;
 80025ae:	e008      	b.n	80025c2 <_Z14move_directionssssmh+0x552>
  for(uint8_t i = 0; i < 4; i++){
 80025b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025b4:	3301      	adds	r3, #1
 80025b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80025ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d9da      	bls.n	8002578 <_Z14move_directionssssmh+0x508>
	  }
  }

  if(error == 0){
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80025ce:	f7fe fb03 	bl	8000bd8 <__aeabi_dcmpeq>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d018      	beq.n	800260a <_Z14move_directionssssmh+0x59a>
	  for(uint8_t i = 0; i < 4;i++){
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80025de:	e00f      	b.n	8002600 <_Z14move_directionssssmh+0x590>
		  run_dc(i, pwm[i]);
 80025e0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80025e4:	4a25      	ldr	r2, [pc, #148]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 80025e6:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80025ea:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff f823 	bl	800163c <_Z6run_dchs>
	  for(uint8_t i = 0; i < 4;i++){
 80025f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80025fa:	3301      	adds	r3, #1
 80025fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8002600:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8002604:	2b03      	cmp	r3, #3
 8002606:	d9eb      	bls.n	80025e0 <_Z14move_directionssssmh+0x570>
 8002608:	e030      	b.n	800266c <_Z14move_directionssssmh+0x5fc>
	  }
  }else{
	  for(uint8_t i = 0; i < 4;i++){
 800260a:	2300      	movs	r3, #0
 800260c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8002610:	e028      	b.n	8002664 <_Z14move_directionssssmh+0x5f4>
		  pwm[i] = error * pwm[i];
 8002612:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002616:	4a19      	ldr	r2, [pc, #100]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 8002618:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe f809 	bl	8000634 <__aeabi_i2d>
 8002622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002626:	f7fe f86f 	bl	8000708 <__aeabi_dmul>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	f897 403d 	ldrb.w	r4, [r7, #61]	@ 0x3d
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe fb17 	bl	8000c68 <__aeabi_d2iz>
 800263a:	4603      	mov	r3, r0
 800263c:	b21a      	sxth	r2, r3
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 8002640:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		  run_dc(i, pwm[i]);
 8002644:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002648:	4a0c      	ldr	r2, [pc, #48]	@ (800267c <_Z14move_directionssssmh+0x60c>)
 800264a:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 800264e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fff1 	bl	800163c <_Z6run_dchs>
	  for(uint8_t i = 0; i < 4;i++){
 800265a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800265e:	3301      	adds	r3, #1
 8002660:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8002664:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8002668:	2b03      	cmp	r3, #3
 800266a:	d9d2      	bls.n	8002612 <_Z14move_directionssssmh+0x5a2>
  //run_dc(0,pwm[0]);
  //Debug("pwm[0] = %d pwm[1] = %d  pwm[2] = %d  pwm[3] = %d",pwm[0],pwm[1],pwm[2],pwm[3] );

//  Send_speed_UART(&huart3, DC[0].address_DC, pwm[0], DC[1].address_DC, pwm[1], DC[2].address_DC, pwm[2], DC[3].address_DC, pwm[3]);

  return speed_run;
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <_Z14move_directionssssmh+0x614>)
 800266e:	f9b3 3000 	ldrsh.w	r3, [r3]

}
 8002672:	4618      	mov	r0, r3
 8002674:	3750      	adds	r7, #80	@ 0x50
 8002676:	46bd      	mov	sp, r7
 8002678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267c:	200000a8 	.word	0x200000a8
 8002680:	200000b8 	.word	0x200000b8
 8002684:	200000b0 	.word	0x200000b0

08002688 <_Z8rot_lefts>:
	  //Debug("pwm[0] = %d pwm[1] = %d  pwm[2] = %d  pwm[3] = %d",pwm[0],pwm[1],pwm[2],pwm[3] );

	  return speed_run;
}

void rot_left(int16_t speed){
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	80fb      	strh	r3, [r7, #6]
	DC[0].quaythuan(speed);
 8002692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002696:	4619      	mov	r1, r3
 8002698:	480c      	ldr	r0, [pc, #48]	@ (80026cc <_Z8rot_lefts+0x44>)
 800269a:	f7fe fcb1 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
	DC[1].quaythuan(speed);
 800269e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026a2:	4619      	mov	r1, r3
 80026a4:	480a      	ldr	r0, [pc, #40]	@ (80026d0 <_Z8rot_lefts+0x48>)
 80026a6:	f7fe fcab 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
	DC[2].quaythuan(speed);
 80026aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ae:	4619      	mov	r1, r3
 80026b0:	4808      	ldr	r0, [pc, #32]	@ (80026d4 <_Z8rot_lefts+0x4c>)
 80026b2:	f7fe fca5 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
	DC[3].quaythuan(speed);
 80026b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4806      	ldr	r0, [pc, #24]	@ (80026d8 <_Z8rot_lefts+0x50>)
 80026be:	f7fe fc9f 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200005ec 	.word	0x200005ec
 80026d0:	20000608 	.word	0x20000608
 80026d4:	20000624 	.word	0x20000624
 80026d8:	20000640 	.word	0x20000640

080026dc <_Z9rot_rights>:

void rot_right(int16_t speed){
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
	DC[0].quaynghich(speed);
 80026e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ea:	4619      	mov	r1, r3
 80026ec:	480c      	ldr	r0, [pc, #48]	@ (8002720 <_Z9rot_rights+0x44>)
 80026ee:	f7fe fce9 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>
	DC[1].quaynghich(speed);
 80026f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f6:	4619      	mov	r1, r3
 80026f8:	480a      	ldr	r0, [pc, #40]	@ (8002724 <_Z9rot_rights+0x48>)
 80026fa:	f7fe fce3 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>
	DC[2].quaynghich(speed);
 80026fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002702:	4619      	mov	r1, r3
 8002704:	4808      	ldr	r0, [pc, #32]	@ (8002728 <_Z9rot_rights+0x4c>)
 8002706:	f7fe fcdd 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>
	DC[3].quaynghich(speed);
 800270a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800270e:	4619      	mov	r1, r3
 8002710:	4806      	ldr	r0, [pc, #24]	@ (800272c <_Z9rot_rights+0x50>)
 8002712:	f7fe fcd7 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200005ec 	.word	0x200005ec
 8002724:	20000608 	.word	0x20000608
 8002728:	20000624 	.word	0x20000624
 800272c:	20000640 	.word	0x20000640

08002730 <_Z4stopv>:

void stop(){
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	DC[0].quaythuan(0);
 8002734:	2100      	movs	r1, #0
 8002736:	4808      	ldr	r0, [pc, #32]	@ (8002758 <_Z4stopv+0x28>)
 8002738:	f7fe fc62 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
	DC[1].quaythuan(0);
 800273c:	2100      	movs	r1, #0
 800273e:	4807      	ldr	r0, [pc, #28]	@ (800275c <_Z4stopv+0x2c>)
 8002740:	f7fe fc5e 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
	DC[2].quaythuan(0);
 8002744:	2100      	movs	r1, #0
 8002746:	4806      	ldr	r0, [pc, #24]	@ (8002760 <_Z4stopv+0x30>)
 8002748:	f7fe fc5a 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
	DC[3].quaythuan(0);  // muốn phanh điền tham trị 2
 800274c:	2100      	movs	r1, #0
 800274e:	4805      	ldr	r0, [pc, #20]	@ (8002764 <_Z4stopv+0x34>)
 8002750:	f7fe fc56 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
	//Debug("dang phanh");
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200005ec 	.word	0x200005ec
 800275c:	20000608 	.word	0x20000608
 8002760:	20000624 	.word	0x20000624
 8002764:	20000640 	.word	0x20000640

08002768 <_Z13on_xilanh_banv>:

void on_xilanh_ban(){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(gpio_xilanh_ban, pin_xilanh_ban, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002772:	4802      	ldr	r0, [pc, #8]	@ (800277c <_Z13on_xilanh_banv+0x14>)
 8002774:	f004 fdab 	bl	80072ce <HAL_GPIO_WritePin>
}
 8002778:	bf00      	nop
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40011000 	.word	0x40011000

08002780 <_Z14off_xilanh_banv>:
void off_xilanh_ban(){
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(gpio_xilanh_ban, pin_xilanh_ban, GPIO_PIN_RESET);
 8002784:	2200      	movs	r2, #0
 8002786:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800278a:	4802      	ldr	r0, [pc, #8]	@ (8002794 <_Z14off_xilanh_banv+0x14>)
 800278c:	f004 fd9f 	bl	80072ce <HAL_GPIO_WritePin>
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40011000 	.word	0x40011000

08002798 <_Z11on_canh_tayv>:
void on_canh_tay(){
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(gpio_xilanh_dong, pin_xilanh_dong, GPIO_PIN_SET);
 800279c:	2201      	movs	r2, #1
 800279e:	2120      	movs	r1, #32
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <_Z11on_canh_tayv+0x14>)
 80027a2:	f004 fd94 	bl	80072ce <HAL_GPIO_WritePin>
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40010c00 	.word	0x40010c00

080027b0 <_Z12off_canh_tayv>:
void off_canh_tay(){
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(gpio_xilanh_dong, pin_xilanh_dong, GPIO_PIN_RESET);
 80027b4:	2200      	movs	r2, #0
 80027b6:	2120      	movs	r1, #32
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <_Z12off_canh_tayv+0x14>)
 80027ba:	f004 fd88 	bl	80072ce <HAL_GPIO_WritePin>
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40010c00 	.word	0x40010c00

080027c8 <_Z13on_xilanh_dayv>:
void on_xilanh_day(){
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(gpio_xilanh_day, pin_xilanh_day, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2110      	movs	r1, #16
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <_Z13on_xilanh_dayv+0x14>)
 80027d2:	f004 fd7c 	bl	80072ce <HAL_GPIO_WritePin>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40011000 	.word	0x40011000

080027e0 <_Z14off_xilanh_dayv>:
void off_xilanh_day(){
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(gpio_xilanh_day, pin_xilanh_day, GPIO_PIN_SET);
 80027e4:	2201      	movs	r2, #1
 80027e6:	2110      	movs	r1, #16
 80027e8:	4802      	ldr	r0, [pc, #8]	@ (80027f4 <_Z14off_xilanh_dayv+0x14>)
 80027ea:	f004 fd70 	bl	80072ce <HAL_GPIO_WritePin>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	40011000 	.word	0x40011000

080027f8 <_Z8ban_bongv>:



bool state_dap_bong = false;
bool state_ban_bong = false;
void ban_bong(){
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af02      	add	r7, sp, #8
	static int16_t speed_ban = 0;
	static uint32_t time_soft_ban = 0;
	static uint32_t time_wait = 0;

	// KHOI DONG BAN VA TANG TOC BAN //
	if(button_triangle && !button_l2){
 80027fe:	4b95      	ldr	r3, [pc, #596]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002806:	2b00      	cmp	r3, #0
 8002808:	d037      	beq.n	800287a <_Z8ban_bongv+0x82>
 800280a:	4b92      	ldr	r3, [pc, #584]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d131      	bne.n	800287a <_Z8ban_bongv+0x82>
		if(triangle){
 8002816:	4b90      	ldr	r3, [pc, #576]	@ (8002a58 <_Z8ban_bongv+0x260>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d030      	beq.n	8002880 <_Z8ban_bongv+0x88>
			if(!st_ban) {
 800281e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a5c <_Z8ban_bongv+0x264>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	f083 0301 	eor.w	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00b      	beq.n	8002844 <_Z8ban_bongv+0x4c>
				st_ban = true;
 800282c:	4b8b      	ldr	r3, [pc, #556]	@ (8002a5c <_Z8ban_bongv+0x264>)
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
				state_dap_bong = false;
 8002832:	4b8b      	ldr	r3, [pc, #556]	@ (8002a60 <_Z8ban_bongv+0x268>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
				state_ban_bong = true;
 8002838:	4b8a      	ldr	r3, [pc, #552]	@ (8002a64 <_Z8ban_bongv+0x26c>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
				off_canh_tay();
 800283e:	f7ff ffb7 	bl	80027b0 <_Z12off_canh_tayv>
 8002842:	e016      	b.n	8002872 <_Z8ban_bongv+0x7a>
			}
			else{
				if(!button_l2){
 8002844:	4b83      	ldr	r3, [pc, #524]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d110      	bne.n	8002872 <_Z8ban_bongv+0x7a>
//					  }else if(speed_ban < 100){
//						  v_ban += 3;
//					  }else{
//						  v_ban += 5;
//					  }
					  v_ban += 10;
 8002850:	4b85      	ldr	r3, [pc, #532]	@ (8002a68 <_Z8ban_bongv+0x270>)
 8002852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002856:	b29b      	uxth	r3, r3
 8002858:	330a      	adds	r3, #10
 800285a:	b29b      	uxth	r3, r3
 800285c:	b21a      	sxth	r2, r3
 800285e:	4b82      	ldr	r3, [pc, #520]	@ (8002a68 <_Z8ban_bongv+0x270>)
 8002860:	801a      	strh	r2, [r3, #0]
					  if(v_ban > 220) v_ban = 220;
 8002862:	4b81      	ldr	r3, [pc, #516]	@ (8002a68 <_Z8ban_bongv+0x270>)
 8002864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002868:	2bdc      	cmp	r3, #220	@ 0xdc
 800286a:	dd02      	ble.n	8002872 <_Z8ban_bongv+0x7a>
 800286c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a68 <_Z8ban_bongv+0x270>)
 800286e:	22dc      	movs	r2, #220	@ 0xdc
 8002870:	801a      	strh	r2, [r3, #0]
				    }
				}

			triangle = false;
 8002872:	4b79      	ldr	r3, [pc, #484]	@ (8002a58 <_Z8ban_bongv+0x260>)
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
		if(triangle){
 8002878:	e002      	b.n	8002880 <_Z8ban_bongv+0x88>
		}

	}else{
		triangle = true;
 800287a:	4b77      	ldr	r3, [pc, #476]	@ (8002a58 <_Z8ban_bongv+0x260>)
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
	}

	/// GIAM TOC BAN //
	static bool cross = true;
	if(button_cross){
 8002880:	4b74      	ldr	r3, [pc, #464]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01e      	beq.n	80028ca <_Z8ban_bongv+0xd2>
		if(!button_l2 && cross){
 800288c:	4b71      	ldr	r3, [pc, #452]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002894:	2b00      	cmp	r3, #0
 8002896:	d11b      	bne.n	80028d0 <_Z8ban_bongv+0xd8>
 8002898:	4b74      	ldr	r3, [pc, #464]	@ (8002a6c <_Z8ban_bongv+0x274>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <_Z8ban_bongv+0xd8>
			  v_ban -= 5;
 80028a0:	4b71      	ldr	r3, [pc, #452]	@ (8002a68 <_Z8ban_bongv+0x270>)
 80028a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b05      	subs	r3, #5
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b21a      	sxth	r2, r3
 80028ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002a68 <_Z8ban_bongv+0x270>)
 80028b0:	801a      	strh	r2, [r3, #0]
			  if(v_ban < 80) v_ban = 80;
 80028b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a68 <_Z8ban_bongv+0x270>)
 80028b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80028ba:	dc02      	bgt.n	80028c2 <_Z8ban_bongv+0xca>
 80028bc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a68 <_Z8ban_bongv+0x270>)
 80028be:	2250      	movs	r2, #80	@ 0x50
 80028c0:	801a      	strh	r2, [r3, #0]
			  cross = false;
 80028c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002a6c <_Z8ban_bongv+0x274>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
 80028c8:	e002      	b.n	80028d0 <_Z8ban_bongv+0xd8>

			}
	}else{
		cross = true;
 80028ca:	4b68      	ldr	r3, [pc, #416]	@ (8002a6c <_Z8ban_bongv+0x274>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
	}

	//Debug("v_ban = %d   speed_ban = %d",v_ban,speed_ban);

	/// DIEU KHIEN TOC BAN //
	if(st_ban){
 80028d0:	4b62      	ldr	r3, [pc, #392]	@ (8002a5c <_Z8ban_bongv+0x264>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d031      	beq.n	800293c <_Z8ban_bongv+0x144>
		//DC_SHOT[1].PID_position_robot(0, 30);
		 if(speed_ban < 20){
 80028d8:	4b65      	ldr	r3, [pc, #404]	@ (8002a70 <_Z8ban_bongv+0x278>)
 80028da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028de:	2b13      	cmp	r3, #19
 80028e0:	dc0a      	bgt.n	80028f8 <_Z8ban_bongv+0x100>
			  soft_speed(&speed_ban,&time_soft_ban, v_ban, 10, 2);
 80028e2:	4b61      	ldr	r3, [pc, #388]	@ (8002a68 <_Z8ban_bongv+0x270>)
 80028e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028e8:	2302      	movs	r3, #2
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	230a      	movs	r3, #10
 80028ee:	4961      	ldr	r1, [pc, #388]	@ (8002a74 <_Z8ban_bongv+0x27c>)
 80028f0:	485f      	ldr	r0, [pc, #380]	@ (8002a70 <_Z8ban_bongv+0x278>)
 80028f2:	f7fe fd56 	bl	80013a2 <_Z10soft_speedPsPmsmh>
 80028f6:	e019      	b.n	800292c <_Z8ban_bongv+0x134>
		  }else if(speed_ban < 100){
 80028f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002a70 <_Z8ban_bongv+0x278>)
 80028fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028fe:	2b63      	cmp	r3, #99	@ 0x63
 8002900:	dc0a      	bgt.n	8002918 <_Z8ban_bongv+0x120>
			  soft_speed(&speed_ban,&time_soft_ban, v_ban, 5, 1);
 8002902:	4b59      	ldr	r3, [pc, #356]	@ (8002a68 <_Z8ban_bongv+0x270>)
 8002904:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002908:	2301      	movs	r3, #1
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2305      	movs	r3, #5
 800290e:	4959      	ldr	r1, [pc, #356]	@ (8002a74 <_Z8ban_bongv+0x27c>)
 8002910:	4857      	ldr	r0, [pc, #348]	@ (8002a70 <_Z8ban_bongv+0x278>)
 8002912:	f7fe fd46 	bl	80013a2 <_Z10soft_speedPsPmsmh>
 8002916:	e009      	b.n	800292c <_Z8ban_bongv+0x134>
		  }else{
			  soft_speed(&speed_ban,&time_soft_ban, v_ban, 2, 1);
 8002918:	4b53      	ldr	r3, [pc, #332]	@ (8002a68 <_Z8ban_bongv+0x270>)
 800291a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800291e:	2301      	movs	r3, #1
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2302      	movs	r3, #2
 8002924:	4953      	ldr	r1, [pc, #332]	@ (8002a74 <_Z8ban_bongv+0x27c>)
 8002926:	4852      	ldr	r0, [pc, #328]	@ (8002a70 <_Z8ban_bongv+0x278>)
 8002928:	f7fe fd3b 	bl	80013a2 <_Z10soft_speedPsPmsmh>
		  }


		  DC[4].quaynghich(speed_ban);
 800292c:	4b50      	ldr	r3, [pc, #320]	@ (8002a70 <_Z8ban_bongv+0x278>)
 800292e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002932:	4619      	mov	r1, r3
 8002934:	4850      	ldr	r0, [pc, #320]	@ (8002a78 <_Z8ban_bongv+0x280>)
 8002936:	f7fe fbc5 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>
 800293a:	e01a      	b.n	8002972 <_Z8ban_bongv+0x17a>
	}else{
		if(!state_dap_bong){
 800293c:	4b48      	ldr	r3, [pc, #288]	@ (8002a60 <_Z8ban_bongv+0x268>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	f083 0301 	eor.w	r3, r3, #1
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00e      	beq.n	8002968 <_Z8ban_bongv+0x170>
			soft_speed(&speed_ban, &time_soft_ban, 0 ,10, 2);
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	230a      	movs	r3, #10
 8002950:	2200      	movs	r2, #0
 8002952:	4948      	ldr	r1, [pc, #288]	@ (8002a74 <_Z8ban_bongv+0x27c>)
 8002954:	4846      	ldr	r0, [pc, #280]	@ (8002a70 <_Z8ban_bongv+0x278>)
 8002956:	f7fe fd24 	bl	80013a2 <_Z10soft_speedPsPmsmh>
			DC[4].quaynghich(speed_ban);
 800295a:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <_Z8ban_bongv+0x278>)
 800295c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002960:	4619      	mov	r1, r3
 8002962:	4845      	ldr	r0, [pc, #276]	@ (8002a78 <_Z8ban_bongv+0x280>)
 8002964:	f7fe fbae 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>
		}
		time_wait = HAL_GetTick();
 8002968:	f003 fd6a 	bl	8006440 <HAL_GetTick>
 800296c:	4603      	mov	r3, r0
 800296e:	4a43      	ldr	r2, [pc, #268]	@ (8002a7c <_Z8ban_bongv+0x284>)
 8002970:	6013      	str	r3, [r2, #0]

	////  CHO PHEP BAN VA DUNG BAN ////
	static bool circle;
	static uint32_t timer;
	static bool protected_ban;
	if(button_circle && circle && !button_l2){
 8002972:	4b38      	ldr	r3, [pc, #224]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800297a:	2b00      	cmp	r3, #0
 800297c:	d015      	beq.n	80029aa <_Z8ban_bongv+0x1b2>
 800297e:	4b40      	ldr	r3, [pc, #256]	@ (8002a80 <_Z8ban_bongv+0x288>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d011      	beq.n	80029aa <_Z8ban_bongv+0x1b2>
 8002986:	4b33      	ldr	r3, [pc, #204]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 8002988:	881b      	ldrh	r3, [r3, #0]
 800298a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <_Z8ban_bongv+0x1b2>

		protected_ban = true;
 8002992:	4b3c      	ldr	r3, [pc, #240]	@ (8002a84 <_Z8ban_bongv+0x28c>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
		timer = HAL_GetTick();
 8002998:	f003 fd52 	bl	8006440 <HAL_GetTick>
 800299c:	4603      	mov	r3, r0
 800299e:	4a3a      	ldr	r2, [pc, #232]	@ (8002a88 <_Z8ban_bongv+0x290>)
 80029a0:	6013      	str	r3, [r2, #0]
		circle = false;
 80029a2:	4b37      	ldr	r3, [pc, #220]	@ (8002a80 <_Z8ban_bongv+0x288>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e019      	b.n	80029de <_Z8ban_bongv+0x1e6>

	}else if(button_circle && circle && button_l2){
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <_Z8ban_bongv+0x1e0>
 80029b6:	4b32      	ldr	r3, [pc, #200]	@ (8002a80 <_Z8ban_bongv+0x288>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <_Z8ban_bongv+0x1e0>
 80029be:	4b25      	ldr	r3, [pc, #148]	@ (8002a54 <_Z8ban_bongv+0x25c>)
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <_Z8ban_bongv+0x1e0>
		state_ban_bong = false;
 80029ca:	4b26      	ldr	r3, [pc, #152]	@ (8002a64 <_Z8ban_bongv+0x26c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
		st_ban = false;
 80029d0:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <_Z8ban_bongv+0x264>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e002      	b.n	80029de <_Z8ban_bongv+0x1e6>

	}else{
		circle = true;
 80029d8:	4b29      	ldr	r3, [pc, #164]	@ (8002a80 <_Z8ban_bongv+0x288>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
	}

	if(protected_ban && speed_ban >= 100 && HAL_GetTick() - time_wait >= 4000){
 80029de:	4b29      	ldr	r3, [pc, #164]	@ (8002a84 <_Z8ban_bongv+0x28c>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00f      	beq.n	8002a06 <_Z8ban_bongv+0x20e>
 80029e6:	4b22      	ldr	r3, [pc, #136]	@ (8002a70 <_Z8ban_bongv+0x278>)
 80029e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ec:	2b63      	cmp	r3, #99	@ 0x63
 80029ee:	dd0a      	ble.n	8002a06 <_Z8ban_bongv+0x20e>
 80029f0:	f003 fd26 	bl	8006440 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <_Z8ban_bongv+0x284>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002a00:	d301      	bcc.n	8002a06 <_Z8ban_bongv+0x20e>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <_Z8ban_bongv+0x210>
 8002a06:	2300      	movs	r3, #0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01f      	beq.n	8002a4c <_Z8ban_bongv+0x254>
		if(HAL_GetTick() - time_wait >= 4500 && HAL_GetTick() - timer >= 1000){
 8002a0c:	f003 fd18 	bl	8006440 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <_Z8ban_bongv+0x284>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f241 1293 	movw	r2, #4499	@ 0x1193
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d90a      	bls.n	8002a36 <_Z8ban_bongv+0x23e>
 8002a20:	f003 fd0e 	bl	8006440 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b18      	ldr	r3, [pc, #96]	@ (8002a88 <_Z8ban_bongv+0x290>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a30:	d301      	bcc.n	8002a36 <_Z8ban_bongv+0x23e>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <_Z8ban_bongv+0x240>
 8002a36:	2300      	movs	r3, #0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <_Z8ban_bongv+0x250>
			off_xilanh_ban();
 8002a3c:	f7ff fea0 	bl	8002780 <_Z14off_xilanh_banv>
			//state_ban_bong = false;
			//st_ban = false;
			protected_ban = false;
 8002a40:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <_Z8ban_bongv+0x28c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	701a      	strb	r2, [r3, #0]
		}else{
			on_xilanh_ban();

		}
	}
}
 8002a46:	e001      	b.n	8002a4c <_Z8ban_bongv+0x254>
			on_xilanh_ban();
 8002a48:	f7ff fe8e 	bl	8002768 <_Z13on_xilanh_banv>
}
 8002a4c:	bf00      	nop
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000246 	.word	0x20000246
 8002a58:	200000bc 	.word	0x200000bc
 8002a5c:	200000bd 	.word	0x200000bd
 8002a60:	200000ba 	.word	0x200000ba
 8002a64:	200000bb 	.word	0x200000bb
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000002 	.word	0x20000002
 8002a70:	200000be 	.word	0x200000be
 8002a74:	200000c0 	.word	0x200000c0
 8002a78:	2000065c 	.word	0x2000065c
 8002a7c:	200000c4 	.word	0x200000c4
 8002a80:	200000c8 	.word	0x200000c8
 8002a84:	200000d0 	.word	0x200000d0
 8002a88:	200000cc 	.word	0x200000cc

08002a8c <_Z8dap_bongv>:



const int16_t v_dap = 100;
void dap_bong(){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af02      	add	r7, sp, #8
	static int16_t speed_dap;
	static uint32_t time_soft;
	static uint32_t time_wait;

	// BAT DAU CHINH DAP BONG // mo canh tay va keo xi lanh xuong
	if(button_square && square && !button_l2){
 8002a92:	4b5f      	ldr	r3, [pc, #380]	@ (8002c10 <_Z8dap_bongv+0x184>)
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01a      	beq.n	8002ad4 <_Z8dap_bongv+0x48>
 8002a9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002c14 <_Z8dap_bongv+0x188>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <_Z8dap_bongv+0x48>
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	@ (8002c10 <_Z8dap_bongv+0x184>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d110      	bne.n	8002ad4 <_Z8dap_bongv+0x48>
		state[0] = true;
 8002ab2:	4b59      	ldr	r3, [pc, #356]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	701a      	strb	r2, [r3, #0]
		off_canh_tay();
 8002ab8:	f7ff fe7a 	bl	80027b0 <_Z12off_canh_tayv>
		off_xilanh_day();
 8002abc:	f7ff fe90 	bl	80027e0 <_Z14off_xilanh_dayv>
		state_dap_bong = true;
 8002ac0:	4b56      	ldr	r3, [pc, #344]	@ (8002c1c <_Z8dap_bongv+0x190>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	701a      	strb	r2, [r3, #0]
		state_ban_bong = false;
 8002ac6:	4b56      	ldr	r3, [pc, #344]	@ (8002c20 <_Z8dap_bongv+0x194>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
		square = false;
 8002acc:	4b51      	ldr	r3, [pc, #324]	@ (8002c14 <_Z8dap_bongv+0x188>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e002      	b.n	8002ada <_Z8dap_bongv+0x4e>
	}else{
		square = true;
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c14 <_Z8dap_bongv+0x188>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
	}

	// KHOI DONG DONG CO //
	if(state[0]){
 8002ada:	4b4f      	ldr	r3, [pc, #316]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02c      	beq.n	8002b3c <_Z8dap_bongv+0xb0>
		//int16_t error_angle = DC_SHOT[1].PID_position_robot(100, 10);
		if(speed_dap < v_dap){
 8002ae2:	4b50      	ldr	r3, [pc, #320]	@ (8002c24 <_Z8dap_bongv+0x198>)
 8002ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae8:	2b63      	cmp	r3, #99	@ 0x63
 8002aea:	dc0d      	bgt.n	8002b08 <_Z8dap_bongv+0x7c>
			soft_speed(&speed_dap,&time_soft, v_dap,1, 20);
 8002aec:	2314      	movs	r3, #20
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2301      	movs	r3, #1
 8002af2:	2264      	movs	r2, #100	@ 0x64
 8002af4:	494c      	ldr	r1, [pc, #304]	@ (8002c28 <_Z8dap_bongv+0x19c>)
 8002af6:	484b      	ldr	r0, [pc, #300]	@ (8002c24 <_Z8dap_bongv+0x198>)
 8002af8:	f7fe fc53 	bl	80013a2 <_Z10soft_speedPsPmsmh>
			time_wait = HAL_GetTick();
 8002afc:	f003 fca0 	bl	8006440 <HAL_GetTick>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a4a      	ldr	r2, [pc, #296]	@ (8002c2c <_Z8dap_bongv+0x1a0>)
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e019      	b.n	8002b3c <_Z8dap_bongv+0xb0>
		}else{
//			if(HAL_GetTick() - time_wait >= 300 && abs(error_angle) <= 5 ){
			if(HAL_GetTick() - time_wait >= 2500  ){
 8002b08:	f003 fc9a 	bl	8006440 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b47      	ldr	r3, [pc, #284]	@ (8002c2c <_Z8dap_bongv+0x1a0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	bf8c      	ite	hi
 8002b1c:	2301      	movhi	r3, #1
 8002b1e:	2300      	movls	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <_Z8dap_bongv+0xb0>

				state[0] = false;
 8002b26:	4b3c      	ldr	r3, [pc, #240]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
				state[1] = true;
 8002b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	705a      	strb	r2, [r3, #1]
				time_wait = HAL_GetTick();
 8002b32:	f003 fc85 	bl	8006440 <HAL_GetTick>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4a3c      	ldr	r2, [pc, #240]	@ (8002c2c <_Z8dap_bongv+0x1a0>)
 8002b3a:	6013      	str	r3, [r2, #0]
			}
		}
	}

	// DAP BONG //
	if(state[1]){
 8002b3c:	4b36      	ldr	r3, [pc, #216]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002b3e:	785b      	ldrb	r3, [r3, #1]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d021      	beq.n	8002b88 <_Z8dap_bongv+0xfc>
		if(HAL_GetTick() - time_wait >= 500){
 8002b44:	f003 fc7c 	bl	8006440 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <_Z8dap_bongv+0x1a0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002b54:	4293      	cmp	r3, r2
 8002b56:	bf8c      	ite	hi
 8002b58:	2301      	movhi	r3, #1
 8002b5a:	2300      	movls	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d010      	beq.n	8002b84 <_Z8dap_bongv+0xf8>
			off_xilanh_ban();
 8002b62:	f7ff fe0d 	bl	8002780 <_Z14off_xilanh_banv>
			speed_dap = 0;
 8002b66:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <_Z8dap_bongv+0x198>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	801a      	strh	r2, [r3, #0]
			state[1] = false;
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	705a      	strb	r2, [r3, #1]
			state[2] = true;
 8002b72:	4b29      	ldr	r3, [pc, #164]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	709a      	strb	r2, [r3, #2]
			time_wait = HAL_GetTick();
 8002b78:	f003 fc62 	bl	8006440 <HAL_GetTick>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <_Z8dap_bongv+0x1a0>)
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e001      	b.n	8002b88 <_Z8dap_bongv+0xfc>
		}else{
			on_xilanh_ban();
 8002b84:	f7ff fdf0 	bl	8002768 <_Z13on_xilanh_banv>
		}
	}

	// DO BONG //
	if(state[2]){
 8002b88:	4b23      	ldr	r3, [pc, #140]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002b8a:	789b      	ldrb	r3, [r3, #2]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d02e      	beq.n	8002bee <_Z8dap_bongv+0x162>
		if(HAL_GetTick() - time_wait >= 500){
 8002b90:	f003 fc56 	bl	8006440 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <_Z8dap_bongv+0x1a0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	bf8c      	ite	hi
 8002ba4:	2301      	movhi	r3, #1
 8002ba6:	2300      	movls	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d01f      	beq.n	8002bee <_Z8dap_bongv+0x162>
			on_xilanh_day();
 8002bae:	f7ff fe0b 	bl	80027c8 <_Z13on_xilanh_dayv>
			if(HAL_GetTick() - time_wait >= 1000 || HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) ){
 8002bb2:	f003 fc45 	bl	8006440 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <_Z8dap_bongv+0x1a0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bc2:	d207      	bcs.n	8002bd4 <_Z8dap_bongv+0x148>
 8002bc4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002bc8:	4819      	ldr	r0, [pc, #100]	@ (8002c30 <_Z8dap_bongv+0x1a4>)
 8002bca:	f004 fb69 	bl	80072a0 <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <_Z8dap_bongv+0x14c>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <_Z8dap_bongv+0x14e>
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <_Z8dap_bongv+0x162>
				on_canh_tay();
 8002bde:	f7ff fddb 	bl	8002798 <_Z11on_canh_tayv>
				state_dap_bong = false;
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <_Z8dap_bongv+0x190>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
				state[2] = false;
 8002be8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c18 <_Z8dap_bongv+0x18c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	709a      	strb	r2, [r3, #2]
			}
		}
	}

	if(!state_ban_bong){
 8002bee:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <_Z8dap_bongv+0x194>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f083 0301 	eor.w	r3, r3, #1
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d006      	beq.n	8002c0a <_Z8dap_bongv+0x17e>
		DC[4].quaynghich(speed_dap);
 8002bfc:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <_Z8dap_bongv+0x198>)
 8002bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c02:	4619      	mov	r1, r3
 8002c04:	480b      	ldr	r0, [pc, #44]	@ (8002c34 <_Z8dap_bongv+0x1a8>)
 8002c06:	f7fe fa5d 	bl	80010c4 <_ZN9Motor_PID10quaynghichEs>

	}

}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000246 	.word	0x20000246
 8002c14:	200000d8 	.word	0x200000d8
 8002c18:	200000d4 	.word	0x200000d4
 8002c1c:	200000ba 	.word	0x200000ba
 8002c20:	200000bb 	.word	0x200000bb
 8002c24:	200000da 	.word	0x200000da
 8002c28:	200000dc 	.word	0x200000dc
 8002c2c:	200000e0 	.word	0x200000e0
 8002c30:	40011000 	.word	0x40011000
 8002c34:	2000065c 	.word	0x2000065c

08002c38 <_Z9run_basicv>:




const uint8_t err_num = 255;
void run_basic(){
 8002c38:	b590      	push	{r4, r7, lr}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af02      	add	r7, sp, #8
	static int16_t v_speed;
	static uint32_t time_soft_speed;
	static uint8_t delta_speed;

	if(button_r2){
 8002c3e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ed8 <_Z9run_basicv+0x2a0>)
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <_Z9run_basicv+0x1a>
		  v_speed = 135;
 8002c4a:	4ba4      	ldr	r3, [pc, #656]	@ (8002edc <_Z9run_basicv+0x2a4>)
 8002c4c:	2287      	movs	r2, #135	@ 0x87
 8002c4e:	801a      	strh	r2, [r3, #0]
 8002c50:	e002      	b.n	8002c58 <_Z9run_basicv+0x20>
	  }else{
		  v_speed = 30;
 8002c52:	4ba2      	ldr	r3, [pc, #648]	@ (8002edc <_Z9run_basicv+0x2a4>)
 8002c54:	221e      	movs	r2, #30
 8002c56:	801a      	strh	r2, [r3, #0]
	 }

	if(v_speed < 50){
 8002c58:	4ba0      	ldr	r3, [pc, #640]	@ (8002edc <_Z9run_basicv+0x2a4>)
 8002c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5e:	2b31      	cmp	r3, #49	@ 0x31
 8002c60:	dc06      	bgt.n	8002c70 <_Z9run_basicv+0x38>
		time_soft_speed = 8;
 8002c62:	4b9f      	ldr	r3, [pc, #636]	@ (8002ee0 <_Z9run_basicv+0x2a8>)
 8002c64:	2208      	movs	r2, #8
 8002c66:	601a      	str	r2, [r3, #0]
		delta_speed = 1;
 8002c68:	4b9e      	ldr	r3, [pc, #632]	@ (8002ee4 <_Z9run_basicv+0x2ac>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	e011      	b.n	8002c94 <_Z9run_basicv+0x5c>
	}else if(v_speed < 80){
 8002c70:	4b9a      	ldr	r3, [pc, #616]	@ (8002edc <_Z9run_basicv+0x2a4>)
 8002c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c76:	2b4f      	cmp	r3, #79	@ 0x4f
 8002c78:	dc06      	bgt.n	8002c88 <_Z9run_basicv+0x50>
		time_soft_speed = 9;
 8002c7a:	4b99      	ldr	r3, [pc, #612]	@ (8002ee0 <_Z9run_basicv+0x2a8>)
 8002c7c:	2209      	movs	r2, #9
 8002c7e:	601a      	str	r2, [r3, #0]
		delta_speed = 2;
 8002c80:	4b98      	ldr	r3, [pc, #608]	@ (8002ee4 <_Z9run_basicv+0x2ac>)
 8002c82:	2202      	movs	r2, #2
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	e005      	b.n	8002c94 <_Z9run_basicv+0x5c>
	}else{
		time_soft_speed = 10;
 8002c88:	4b95      	ldr	r3, [pc, #596]	@ (8002ee0 <_Z9run_basicv+0x2a8>)
 8002c8a:	220a      	movs	r2, #10
 8002c8c:	601a      	str	r2, [r3, #0]
		delta_speed = 2;
 8002c8e:	4b95      	ldr	r3, [pc, #596]	@ (8002ee4 <_Z9run_basicv+0x2ac>)
 8002c90:	2202      	movs	r2, #2
 8002c92:	701a      	strb	r2, [r3, #0]


	static int16_t ag_rot = 0;
	static int16_t ag_tt = 0;
	//static uint32_t time_update = 0;
	  if((abs(LX) >= err_num || abs(LY) >= err_num || abs(RY) >= err_num || abs(RX) >= err_num) && !button_l2){
 8002c94:	4b94      	ldr	r3, [pc, #592]	@ (8002ee8 <_Z9run_basicv+0x2b0>)
 8002c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	bfb8      	it	lt
 8002c9e:	425b      	neglt	r3, r3
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2bfe      	cmp	r3, #254	@ 0xfe
 8002ca4:	d81b      	bhi.n	8002cde <_Z9run_basicv+0xa6>
 8002ca6:	4b91      	ldr	r3, [pc, #580]	@ (8002eec <_Z9run_basicv+0x2b4>)
 8002ca8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bfb8      	it	lt
 8002cb0:	425b      	neglt	r3, r3
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2bfe      	cmp	r3, #254	@ 0xfe
 8002cb6:	d812      	bhi.n	8002cde <_Z9run_basicv+0xa6>
 8002cb8:	4b8d      	ldr	r3, [pc, #564]	@ (8002ef0 <_Z9run_basicv+0x2b8>)
 8002cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bfb8      	it	lt
 8002cc2:	425b      	neglt	r3, r3
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8002cc8:	d809      	bhi.n	8002cde <_Z9run_basicv+0xa6>
 8002cca:	4b8a      	ldr	r3, [pc, #552]	@ (8002ef4 <_Z9run_basicv+0x2bc>)
 8002ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bfb8      	it	lt
 8002cd4:	425b      	neglt	r3, r3
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2bfe      	cmp	r3, #254	@ 0xfe
 8002cda:	f240 80b2 	bls.w	8002e42 <_Z9run_basicv+0x20a>
 8002cde:	4b7e      	ldr	r3, [pc, #504]	@ (8002ed8 <_Z9run_basicv+0x2a0>)
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 80ab 	bne.w	8002e42 <_Z9run_basicv+0x20a>
		int16_t speed;
		if( abs(LX) >= err_num || abs(LY) >= err_num){
 8002cec:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee8 <_Z9run_basicv+0x2b0>)
 8002cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	bfb8      	it	lt
 8002cf6:	425b      	neglt	r3, r3
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2bfe      	cmp	r3, #254	@ 0xfe
 8002cfc:	d808      	bhi.n	8002d10 <_Z9run_basicv+0xd8>
 8002cfe:	4b7b      	ldr	r3, [pc, #492]	@ (8002eec <_Z9run_basicv+0x2b4>)
 8002d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bfb8      	it	lt
 8002d08:	425b      	neglt	r3, r3
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8002d0e:	d94e      	bls.n	8002dae <_Z9run_basicv+0x176>
			ag_tt = atan2(LY,LX) * RAD_TO_DEG * 10;
 8002d10:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <_Z9run_basicv+0x2b4>)
 8002d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d16:	4a74      	ldr	r2, [pc, #464]	@ (8002ee8 <_Z9run_basicv+0x2b0>)
 8002d18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d1c:	4611      	mov	r1, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fa8c 	bl	800323c <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002d24:	a36a      	add	r3, pc, #424	@ (adr r3, 8002ed0 <_Z9run_basicv+0x298>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fced 	bl	8000708 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef8 <_Z9run_basicv+0x2c0>)
 8002d3c:	f7fd fce4 	bl	8000708 <__aeabi_dmul>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd ff8e 	bl	8000c68 <__aeabi_d2iz>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	4b6a      	ldr	r3, [pc, #424]	@ (8002efc <_Z9run_basicv+0x2c4>)
 8002d52:	801a      	strh	r2, [r3, #0]
			speed = sqrt(LX * LX + LY * LY);
 8002d54:	4b64      	ldr	r3, [pc, #400]	@ (8002ee8 <_Z9run_basicv+0x2b0>)
 8002d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b62      	ldr	r3, [pc, #392]	@ (8002ee8 <_Z9run_basicv+0x2b0>)
 8002d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d62:	fb03 f202 	mul.w	r2, r3, r2
 8002d66:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <_Z9run_basicv+0x2b4>)
 8002d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002eec <_Z9run_basicv+0x2b4>)
 8002d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fa4a 	bl	8003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f7fd ff6e 	bl	8000c68 <__aeabi_d2iz>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	80fb      	strh	r3, [r7, #6]
			speed = map(speed, 0, 508, 20, v_speed);
 8002d90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002d94:	4b51      	ldr	r3, [pc, #324]	@ (8002edc <_Z9run_basicv+0x2a4>)
 8002d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2314      	movs	r3, #20
 8002d9e:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8002da2:	2100      	movs	r1, #0
 8002da4:	f7fe fae2 	bl	800136c <_Z3maplllll>
 8002da8:	4603      	mov	r3, r0
 8002daa:	80fb      	strh	r3, [r7, #6]
 8002dac:	e001      	b.n	8002db2 <_Z9run_basicv+0x17a>

		}else{
			speed = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	80fb      	strh	r3, [r7, #6]
		}

		if(abs(RY) >= err_num || abs(RX) >= err_num){
 8002db2:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef0 <_Z9run_basicv+0x2b8>)
 8002db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bfb8      	it	lt
 8002dbc:	425b      	neglt	r3, r3
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2bfe      	cmp	r3, #254	@ 0xfe
 8002dc2:	d808      	bhi.n	8002dd6 <_Z9run_basicv+0x19e>
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef4 <_Z9run_basicv+0x2bc>)
 8002dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bfb8      	it	lt
 8002dce:	425b      	neglt	r3, r3
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2bfe      	cmp	r3, #254	@ 0xfe
 8002dd4:	d921      	bls.n	8002e1a <_Z9run_basicv+0x1e2>
		  ag_rot = atan2(RY,RX) * RAD_TO_DEG * 10;
 8002dd6:	4b46      	ldr	r3, [pc, #280]	@ (8002ef0 <_Z9run_basicv+0x2b8>)
 8002dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ddc:	4a45      	ldr	r2, [pc, #276]	@ (8002ef4 <_Z9run_basicv+0x2bc>)
 8002dde:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fa29 	bl	800323c <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002dea:	a339      	add	r3, pc, #228	@ (adr r3, 8002ed0 <_Z9run_basicv+0x298>)
 8002dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df0:	f7fd fc8a 	bl	8000708 <__aeabi_dmul>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	4b3d      	ldr	r3, [pc, #244]	@ (8002ef8 <_Z9run_basicv+0x2c0>)
 8002e02:	f7fd fc81 	bl	8000708 <__aeabi_dmul>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f7fd ff2b 	bl	8000c68 <__aeabi_d2iz>
 8002e12:	4603      	mov	r3, r0
 8002e14:	b21a      	sxth	r2, r3
 8002e16:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <_Z9run_basicv+0x2c8>)
 8002e18:	801a      	strh	r2, [r3, #0]
		}
		move_direction(ag_rot,70,ag_tt,speed,time_soft_speed,delta_speed);
 8002e1a:	4b39      	ldr	r3, [pc, #228]	@ (8002f00 <_Z9run_basicv+0x2c8>)
 8002e1c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002e20:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <_Z9run_basicv+0x2c4>)
 8002e22:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002e26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee0 <_Z9run_basicv+0x2a8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ee4 <_Z9run_basicv+0x2ac>)
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8002e32:	9201      	str	r2, [sp, #4]
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	4623      	mov	r3, r4
 8002e38:	460a      	mov	r2, r1
 8002e3a:	2146      	movs	r1, #70	@ 0x46
 8002e3c:	f7ff f918 	bl	8002070 <_Z14move_directionssssmh>

	  }else
 8002e40:	e126      	b.n	8003090 <_Z9run_basicv+0x458>

	  if(button_up){
 8002e42:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <_Z9run_basicv+0x2a0>)
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d019      	beq.n	8002e82 <_Z9run_basicv+0x24a>
		ag_tt = ag_rot;
 8002e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f00 <_Z9run_basicv+0x2c8>)
 8002e50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e54:	4b29      	ldr	r3, [pc, #164]	@ (8002efc <_Z9run_basicv+0x2c4>)
 8002e56:	801a      	strh	r2, [r3, #0]
		move(ag_rot,70,ag_tt,v_speed,time_soft_speed,delta_speed); // dùng như hàm move
 8002e58:	4b29      	ldr	r3, [pc, #164]	@ (8002f00 <_Z9run_basicv+0x2c8>)
 8002e5a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002e5e:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <_Z9run_basicv+0x2c4>)
 8002e60:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002e64:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <_Z9run_basicv+0x2a4>)
 8002e66:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <_Z9run_basicv+0x2a8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee4 <_Z9run_basicv+0x2ac>)
 8002e70:	7812      	ldrb	r2, [r2, #0]
 8002e72:	9201      	str	r2, [sp, #4]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	4623      	mov	r3, r4
 8002e78:	460a      	mov	r2, r1
 8002e7a:	2146      	movs	r1, #70	@ 0x46
 8002e7c:	f7fe fc10 	bl	80016a0 <_Z4movessssmh>
 8002e80:	e106      	b.n	8003090 <_Z9run_basicv+0x458>

	  }else if(button_down){
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <_Z9run_basicv+0x2a0>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d03a      	beq.n	8002f04 <_Z9run_basicv+0x2cc>
		ag_tt = ag_rot + 1800;
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f00 <_Z9run_basicv+0x2c8>)
 8002e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	f503 63e1 	add.w	r3, r3, #1800	@ 0x708
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	b21a      	sxth	r2, r3
 8002e9e:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <_Z9run_basicv+0x2c4>)
 8002ea0:	801a      	strh	r2, [r3, #0]
		move_direction(ag_rot,70,ag_tt,v_speed,time_soft_speed,delta_speed);
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <_Z9run_basicv+0x2c8>)
 8002ea4:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002ea8:	4b14      	ldr	r3, [pc, #80]	@ (8002efc <_Z9run_basicv+0x2c4>)
 8002eaa:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002eae:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <_Z9run_basicv+0x2a4>)
 8002eb0:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <_Z9run_basicv+0x2a8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <_Z9run_basicv+0x2ac>)
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	9201      	str	r2, [sp, #4]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	4623      	mov	r3, r4
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	2146      	movs	r1, #70	@ 0x46
 8002ec6:	f7ff f8d3 	bl	8002070 <_Z14move_directionssssmh>
 8002eca:	e0e1      	b.n	8003090 <_Z9run_basicv+0x458>
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	1a63c1f8 	.word	0x1a63c1f8
 8002ed4:	404ca5dc 	.word	0x404ca5dc
 8002ed8:	20000246 	.word	0x20000246
 8002edc:	200000e4 	.word	0x200000e4
 8002ee0:	200000e8 	.word	0x200000e8
 8002ee4:	200000ec 	.word	0x200000ec
 8002ee8:	20000248 	.word	0x20000248
 8002eec:	2000024a 	.word	0x2000024a
 8002ef0:	2000024e 	.word	0x2000024e
 8002ef4:	2000024c 	.word	0x2000024c
 8002ef8:	40240000 	.word	0x40240000
 8002efc:	200000f0 	.word	0x200000f0
 8002f00:	200000ee 	.word	0x200000ee

	  }else if(button_left){
 8002f04:	4ba1      	ldr	r3, [pc, #644]	@ (800318c <_Z9run_basicv+0x554>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	f003 0308 	and.w	r3, r3, #8
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d01e      	beq.n	8002f4e <_Z9run_basicv+0x316>
		ag_tt = ag_rot + 900;
 8002f10:	4b9f      	ldr	r3, [pc, #636]	@ (8003190 <_Z9run_basicv+0x558>)
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b21a      	sxth	r2, r3
 8002f20:	4b9c      	ldr	r3, [pc, #624]	@ (8003194 <_Z9run_basicv+0x55c>)
 8002f22:	801a      	strh	r2, [r3, #0]
		move_direction(ag_rot,70,ag_tt,v_speed,time_soft_speed,delta_speed);
 8002f24:	4b9a      	ldr	r3, [pc, #616]	@ (8003190 <_Z9run_basicv+0x558>)
 8002f26:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002f2a:	4b9a      	ldr	r3, [pc, #616]	@ (8003194 <_Z9run_basicv+0x55c>)
 8002f2c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002f30:	4b99      	ldr	r3, [pc, #612]	@ (8003198 <_Z9run_basicv+0x560>)
 8002f32:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002f36:	4b99      	ldr	r3, [pc, #612]	@ (800319c <_Z9run_basicv+0x564>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a99      	ldr	r2, [pc, #612]	@ (80031a0 <_Z9run_basicv+0x568>)
 8002f3c:	7812      	ldrb	r2, [r2, #0]
 8002f3e:	9201      	str	r2, [sp, #4]
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	4623      	mov	r3, r4
 8002f44:	460a      	mov	r2, r1
 8002f46:	2146      	movs	r1, #70	@ 0x46
 8002f48:	f7ff f892 	bl	8002070 <_Z14move_directionssssmh>
 8002f4c:	e0a0      	b.n	8003090 <_Z9run_basicv+0x458>

	  }else if(button_right){
 8002f4e:	4b8f      	ldr	r3, [pc, #572]	@ (800318c <_Z9run_basicv+0x554>)
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01e      	beq.n	8002f98 <_Z9run_basicv+0x360>
		ag_tt = ag_rot - 900;
 8002f5a:	4b8d      	ldr	r3, [pc, #564]	@ (8003190 <_Z9run_basicv+0x558>)
 8002f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	b21a      	sxth	r2, r3
 8002f6a:	4b8a      	ldr	r3, [pc, #552]	@ (8003194 <_Z9run_basicv+0x55c>)
 8002f6c:	801a      	strh	r2, [r3, #0]
		move_direction(ag_rot,70,ag_tt,v_speed,time_soft_speed,delta_speed);
 8002f6e:	4b88      	ldr	r3, [pc, #544]	@ (8003190 <_Z9run_basicv+0x558>)
 8002f70:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002f74:	4b87      	ldr	r3, [pc, #540]	@ (8003194 <_Z9run_basicv+0x55c>)
 8002f76:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002f7a:	4b87      	ldr	r3, [pc, #540]	@ (8003198 <_Z9run_basicv+0x560>)
 8002f7c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002f80:	4b86      	ldr	r3, [pc, #536]	@ (800319c <_Z9run_basicv+0x564>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a86      	ldr	r2, [pc, #536]	@ (80031a0 <_Z9run_basicv+0x568>)
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	9201      	str	r2, [sp, #4]
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	460a      	mov	r2, r1
 8002f90:	2146      	movs	r1, #70	@ 0x46
 8002f92:	f7ff f86d 	bl	8002070 <_Z14move_directionssssmh>
 8002f96:	e07b      	b.n	8003090 <_Z9run_basicv+0x458>

	  }else if(button_r1 && !button_l2){
 8002f98:	4b7c      	ldr	r3, [pc, #496]	@ (800318c <_Z9run_basicv+0x554>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00f      	beq.n	8002fc4 <_Z9run_basicv+0x38c>
 8002fa4:	4b79      	ldr	r3, [pc, #484]	@ (800318c <_Z9run_basicv+0x554>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d109      	bne.n	8002fc4 <_Z9run_basicv+0x38c>
		rot_right(20);
 8002fb0:	2014      	movs	r0, #20
 8002fb2:	f7ff fb93 	bl	80026dc <_Z9rot_rights>
		ag_rot = compass();
 8002fb6:	f001 fe89 	bl	8004ccc <_Z7compassv>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b74      	ldr	r3, [pc, #464]	@ (8003190 <_Z9run_basicv+0x558>)
 8002fc0:	801a      	strh	r2, [r3, #0]
 8002fc2:	e065      	b.n	8003090 <_Z9run_basicv+0x458>
		//time_update = HAL_GetTick();

	  }else if(button_l1 && !button_l2){
 8002fc4:	4b71      	ldr	r3, [pc, #452]	@ (800318c <_Z9run_basicv+0x554>)
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00f      	beq.n	8002ff0 <_Z9run_basicv+0x3b8>
 8002fd0:	4b6e      	ldr	r3, [pc, #440]	@ (800318c <_Z9run_basicv+0x554>)
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <_Z9run_basicv+0x3b8>
		rot_left(20);
 8002fdc:	2014      	movs	r0, #20
 8002fde:	f7ff fb53 	bl	8002688 <_Z8rot_lefts>
		ag_rot = compass();
 8002fe2:	f001 fe73 	bl	8004ccc <_Z7compassv>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b69      	ldr	r3, [pc, #420]	@ (8003190 <_Z9run_basicv+0x558>)
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	e04f      	b.n	8003090 <_Z9run_basicv+0x458>


	  }else{
		  static uint32_t time_end;
		  static uint8_t delta_end;
		  if(!state_ban_bong && !state_dap_bong){
 8002ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80031a4 <_Z9run_basicv+0x56c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d036      	beq.n	800306c <_Z9run_basicv+0x434>
 8002ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <_Z9run_basicv+0x570>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	f083 0301 	eor.w	r3, r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02f      	beq.n	800306c <_Z9run_basicv+0x434>
			  int16_t speed_soft = move_direction(ag_rot,20 , ag_tt, 0 , time_end,delta_end);
 800300c:	4b60      	ldr	r3, [pc, #384]	@ (8003190 <_Z9run_basicv+0x558>)
 800300e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003012:	4b60      	ldr	r3, [pc, #384]	@ (8003194 <_Z9run_basicv+0x55c>)
 8003014:	f9b3 1000 	ldrsh.w	r1, [r3]
 8003018:	4b64      	ldr	r3, [pc, #400]	@ (80031ac <_Z9run_basicv+0x574>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a64      	ldr	r2, [pc, #400]	@ (80031b0 <_Z9run_basicv+0x578>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	9201      	str	r2, [sp, #4]
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	2300      	movs	r3, #0
 8003026:	460a      	mov	r2, r1
 8003028:	2114      	movs	r1, #20
 800302a:	f7ff f821 	bl	8002070 <_Z14move_directionssssmh>
 800302e:	4603      	mov	r3, r0
 8003030:	80bb      	strh	r3, [r7, #4]
				  if(speed_soft < 30){
 8003032:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003036:	2b1d      	cmp	r3, #29
 8003038:	dc06      	bgt.n	8003048 <_Z9run_basicv+0x410>
					  time_end = 10;
 800303a:	4b5c      	ldr	r3, [pc, #368]	@ (80031ac <_Z9run_basicv+0x574>)
 800303c:	220a      	movs	r2, #10
 800303e:	601a      	str	r2, [r3, #0]
					  delta_end = 1;
 8003040:	4b5b      	ldr	r3, [pc, #364]	@ (80031b0 <_Z9run_basicv+0x578>)
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
					  delta_end = 2;
				  }else if(speed_soft == 0 ){
					  stop();
				  }
				  //Debug("khong phanh");
		  }else{
 8003046:	e022      	b.n	800308e <_Z9run_basicv+0x456>
				  }else if(speed_soft < 180){
 8003048:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800304c:	2bb3      	cmp	r3, #179	@ 0xb3
 800304e:	dc06      	bgt.n	800305e <_Z9run_basicv+0x426>
					  time_end = 10;
 8003050:	4b56      	ldr	r3, [pc, #344]	@ (80031ac <_Z9run_basicv+0x574>)
 8003052:	220a      	movs	r2, #10
 8003054:	601a      	str	r2, [r3, #0]
					  delta_end = 2;
 8003056:	4b56      	ldr	r3, [pc, #344]	@ (80031b0 <_Z9run_basicv+0x578>)
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
		  }else{
 800305c:	e017      	b.n	800308e <_Z9run_basicv+0x456>
				  }else if(speed_soft == 0 ){
 800305e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d113      	bne.n	800308e <_Z9run_basicv+0x456>
					  stop();
 8003066:	f7ff fb63 	bl	8002730 <_Z4stopv>
		  }else{
 800306a:	e010      	b.n	800308e <_Z9run_basicv+0x456>
			  //stop();
			  //Debug("dang phanh");
				DC[0].quaythuan(2);
 800306c:	2102      	movs	r1, #2
 800306e:	4851      	ldr	r0, [pc, #324]	@ (80031b4 <_Z9run_basicv+0x57c>)
 8003070:	f7fd ffc6 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
				DC[1].quaythuan(2);
 8003074:	2102      	movs	r1, #2
 8003076:	4850      	ldr	r0, [pc, #320]	@ (80031b8 <_Z9run_basicv+0x580>)
 8003078:	f7fd ffc2 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
				DC[2].quaythuan(2);
 800307c:	2102      	movs	r1, #2
 800307e:	484f      	ldr	r0, [pc, #316]	@ (80031bc <_Z9run_basicv+0x584>)
 8003080:	f7fd ffbe 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
				DC[3].quaythuan(2);
 8003084:	2102      	movs	r1, #2
 8003086:	484e      	ldr	r0, [pc, #312]	@ (80031c0 <_Z9run_basicv+0x588>)
 8003088:	f7fd ffba 	bl	8001000 <_ZN9Motor_PID9quaythuanEs>
 800308c:	e000      	b.n	8003090 <_Z9run_basicv+0x458>
		  }else{
 800308e:	bf00      	nop
		  }

	  }
/////// RESET ANGLE ////////////
	  static bool st_reset = true;
	  if(button_l3){
 8003090:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <_Z9run_basicv+0x554>)
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d017      	beq.n	80030cc <_Z9run_basicv+0x494>
		  if(st_reset){
 800309c:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <_Z9run_basicv+0x58c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d016      	beq.n	80030d2 <_Z9run_basicv+0x49a>
			  reset_compass();
 80030a4:	f001 fe5e 	bl	8004d64 <_Z13reset_compassv>
			  DC_SHOT[1].set_encoder(0);
 80030a8:	2100      	movs	r1, #0
 80030aa:	4847      	ldr	r0, [pc, #284]	@ (80031c8 <_Z9run_basicv+0x590>)
 80030ac:	f7fe f86c 	bl	8001188 <_ZN11Module_shot11set_encoderEl>
			  DC_SHOT[0].set_encoder(0);
 80030b0:	2100      	movs	r1, #0
 80030b2:	4846      	ldr	r0, [pc, #280]	@ (80031cc <_Z9run_basicv+0x594>)
 80030b4:	f7fe f868 	bl	8001188 <_ZN11Module_shot11set_encoderEl>
			  ag_rot = compass();
 80030b8:	f001 fe08 	bl	8004ccc <_Z7compassv>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	4b33      	ldr	r3, [pc, #204]	@ (8003190 <_Z9run_basicv+0x558>)
 80030c2:	801a      	strh	r2, [r3, #0]
			  st_reset	= false;
 80030c4:	4b3f      	ldr	r3, [pc, #252]	@ (80031c4 <_Z9run_basicv+0x58c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e002      	b.n	80030d2 <_Z9run_basicv+0x49a>
		  }
	  }else st_reset = true;
 80030cc:	4b3d      	ldr	r3, [pc, #244]	@ (80031c4 <_Z9run_basicv+0x58c>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]

	  static bool state_r3;
	  static bool st_xilanh_canhtay = true;
	  if(button_r3 && button_l2){
 80030d2:	4b2e      	ldr	r3, [pc, #184]	@ (800318c <_Z9run_basicv+0x554>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b21b      	sxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da1d      	bge.n	8003118 <_Z9run_basicv+0x4e0>
 80030dc:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <_Z9run_basicv+0x554>)
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d017      	beq.n	8003118 <_Z9run_basicv+0x4e0>
		  if(state_r3){
 80030e8:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <_Z9run_basicv+0x598>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d016      	beq.n	800311e <_Z9run_basicv+0x4e6>
			  st_xilanh_canhtay = !st_xilanh_canhtay;
 80030f0:	4b38      	ldr	r3, [pc, #224]	@ (80031d4 <_Z9run_basicv+0x59c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	f083 0301 	eor.w	r3, r3, #1
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <_Z9run_basicv+0x59c>)
 80030fc:	701a      	strb	r2, [r3, #0]
			  if(st_xilanh_canhtay) on_canh_tay(); else off_canh_tay();
 80030fe:	4b35      	ldr	r3, [pc, #212]	@ (80031d4 <_Z9run_basicv+0x59c>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <_Z9run_basicv+0x4d4>
 8003106:	f7ff fb47 	bl	8002798 <_Z11on_canh_tayv>
 800310a:	e001      	b.n	8003110 <_Z9run_basicv+0x4d8>
 800310c:	f7ff fb50 	bl	80027b0 <_Z12off_canh_tayv>
			  state_r3 = false;
 8003110:	4b2f      	ldr	r3, [pc, #188]	@ (80031d0 <_Z9run_basicv+0x598>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
		  if(state_r3){
 8003116:	e002      	b.n	800311e <_Z9run_basicv+0x4e6>

		  }
	  }else{
		  state_r3 = true;
 8003118:	4b2d      	ldr	r3, [pc, #180]	@ (80031d0 <_Z9run_basicv+0x598>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
	  }

//// DIEU KHIEN CO CAU QUAY   ////////
	  if(button_r1 && button_l2){
 800311e:	4b1b      	ldr	r3, [pc, #108]	@ (800318c <_Z9run_basicv+0x554>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00a      	beq.n	8003140 <_Z9run_basicv+0x508>
 800312a:	4b18      	ldr	r3, [pc, #96]	@ (800318c <_Z9run_basicv+0x554>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <_Z9run_basicv+0x508>
	  	  //test = DC_SHOT[0].PID_position_robot(-900, 20);
	  	  DC_SHOT[0].quaynghich(6);
 8003136:	2106      	movs	r1, #6
 8003138:	4824      	ldr	r0, [pc, #144]	@ (80031cc <_Z9run_basicv+0x594>)
 800313a:	f7fe f8cc 	bl	80012d6 <_ZN11Module_shot10quaynghichEs>
 800313e:	e014      	b.n	800316a <_Z9run_basicv+0x532>
	    }else if(button_l1 && button_l2){
 8003140:	4b12      	ldr	r3, [pc, #72]	@ (800318c <_Z9run_basicv+0x554>)
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	f003 0310 	and.w	r3, r3, #16
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <_Z9run_basicv+0x52a>
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <_Z9run_basicv+0x554>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <_Z9run_basicv+0x52a>
	  	  DC_SHOT[0].quaythuan(6);
 8003158:	2106      	movs	r1, #6
 800315a:	481c      	ldr	r0, [pc, #112]	@ (80031cc <_Z9run_basicv+0x594>)
 800315c:	f7fe f870 	bl	8001240 <_ZN11Module_shot9quaythuanEs>
 8003160:	e003      	b.n	800316a <_Z9run_basicv+0x532>
	    }else{
	  	  DC_SHOT[0].quaythuan(2);
 8003162:	2102      	movs	r1, #2
 8003164:	4819      	ldr	r0, [pc, #100]	@ (80031cc <_Z9run_basicv+0x594>)
 8003166:	f7fe f86b 	bl	8001240 <_ZN11Module_shot9quaythuanEs>
	    }

	    if(button_triangle && button_l2){
 800316a:	4b08      	ldr	r3, [pc, #32]	@ (800318c <_Z9run_basicv+0x554>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003172:	2b00      	cmp	r3, #0
 8003174:	d030      	beq.n	80031d8 <_Z9run_basicv+0x5a0>
 8003176:	4b05      	ldr	r3, [pc, #20]	@ (800318c <_Z9run_basicv+0x554>)
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d02a      	beq.n	80031d8 <_Z9run_basicv+0x5a0>
	  	  DC_SHOT[1].quaythuan(40);
 8003182:	2128      	movs	r1, #40	@ 0x28
 8003184:	4810      	ldr	r0, [pc, #64]	@ (80031c8 <_Z9run_basicv+0x590>)
 8003186:	f7fe f85b 	bl	8001240 <_ZN11Module_shot9quaythuanEs>
 800318a:	e03b      	b.n	8003204 <_Z9run_basicv+0x5cc>
 800318c:	20000246 	.word	0x20000246
 8003190:	200000ee 	.word	0x200000ee
 8003194:	200000f0 	.word	0x200000f0
 8003198:	200000e4 	.word	0x200000e4
 800319c:	200000e8 	.word	0x200000e8
 80031a0:	200000ec 	.word	0x200000ec
 80031a4:	200000bb 	.word	0x200000bb
 80031a8:	200000ba 	.word	0x200000ba
 80031ac:	200000f4 	.word	0x200000f4
 80031b0:	200000f8 	.word	0x200000f8
 80031b4:	200005ec 	.word	0x200005ec
 80031b8:	20000608 	.word	0x20000608
 80031bc:	20000624 	.word	0x20000624
 80031c0:	20000640 	.word	0x20000640
 80031c4:	20000003 	.word	0x20000003
 80031c8:	200006b8 	.word	0x200006b8
 80031cc:	20000678 	.word	0x20000678
 80031d0:	200000f9 	.word	0x200000f9
 80031d4:	20000004 	.word	0x20000004

	    }else if(button_cross && button_l2){
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <_Z9run_basicv+0x5d4>)
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <_Z9run_basicv+0x5c2>
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <_Z9run_basicv+0x5d4>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <_Z9run_basicv+0x5c2>
	  	  DC_SHOT[1].quaynghich(40);
 80031f0:	2128      	movs	r1, #40	@ 0x28
 80031f2:	4807      	ldr	r0, [pc, #28]	@ (8003210 <_Z9run_basicv+0x5d8>)
 80031f4:	f7fe f86f 	bl	80012d6 <_ZN11Module_shot10quaynghichEs>
 80031f8:	e004      	b.n	8003204 <_Z9run_basicv+0x5cc>

	    }else{
	  	  DC_SHOT[1].quaythuan(0);
 80031fa:	2100      	movs	r1, #0
 80031fc:	4804      	ldr	r0, [pc, #16]	@ (8003210 <_Z9run_basicv+0x5d8>)
 80031fe:	f7fe f81f 	bl	8001240 <_ZN11Module_shot9quaythuanEs>
	    }




}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	20000246 	.word	0x20000246
 8003210:	200006b8 	.word	0x200006b8

08003214 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7fd fa09 	bl	8000634 <__aeabi_i2d>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f006 fd9b 	bl	8009d64 <sqrt>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	460a      	mov	r2, r1
 8003246:	80fb      	strh	r3, [r7, #6]
 8003248:	4613      	mov	r3, r2
 800324a:	80bb      	strh	r3, [r7, #4]
      return atan2(__type(__y), __type(__x));
 800324c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fd f9ef 	bl	8000634 <__aeabi_i2d>
 8003256:	4604      	mov	r4, r0
 8003258:	460d      	mov	r5, r1
 800325a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f9e8 	bl	8000634 <__aeabi_i2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4620      	mov	r0, r4
 800326a:	4629      	mov	r1, r5
 800326c:	f006 fd78 	bl	8009d60 <atan2>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
    }
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003280 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){


}

void ENABLE_GPIO_CLK(GPIO_TypeDef* GPIO){
 8003280:	b480      	push	{r7}
 8003282:	b087      	sub	sp, #28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	if(GPIO == GPIOA)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x98>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d10c      	bne.n	80032aa <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x2a>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	4b22      	ldr	r3, [pc, #136]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a21      	ldr	r2, [pc, #132]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8003296:	f043 0304 	orr.w	r3, r3, #4
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b1f      	ldr	r3, [pc, #124]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	697b      	ldr	r3, [r7, #20]
	}else if(GPIO == GPIOD)
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();

	}
}
 80032a8:	e031      	b.n	800330e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOB)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003320 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d10c      	bne.n	80032cc <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x4c>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80032b2:	4b1a      	ldr	r3, [pc, #104]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	4a19      	ldr	r2, [pc, #100]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	6193      	str	r3, [r2, #24]
 80032be:	4b17      	ldr	r3, [pc, #92]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
}
 80032ca:	e020      	b.n	800330e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOC){
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a15      	ldr	r2, [pc, #84]	@ (8003324 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa4>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d10c      	bne.n	80032ee <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x6e>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80032d4:	4b11      	ldr	r3, [pc, #68]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a10      	ldr	r2, [pc, #64]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032da:	f043 0310 	orr.w	r3, r3, #16
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b0e      	ldr	r3, [pc, #56]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
}
 80032ec:	e00f      	b.n	800330e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOD)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10b      	bne.n	800330e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80032f6:	4b09      	ldr	r3, [pc, #36]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	4a08      	ldr	r2, [pc, #32]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 80032fc:	f043 0320 	orr.w	r3, r3, #32
 8003300:	6193      	str	r3, [r2, #24]
 8003302:	4b06      	ldr	r3, [pc, #24]	@ (800331c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
}
 800330e:	bf00      	nop
 8003310:	371c      	adds	r7, #28
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	40010800 	.word	0x40010800
 800331c:	40021000 	.word	0x40021000
 8003320:	40010c00 	.word	0x40010c00
 8003324:	40011000 	.word	0x40011000
 8003328:	40011400 	.word	0x40011400

0800332c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>:

void GPIO_OUT_Init(GPIO_TypeDef* GPIO,uint32_t GPIO_PIN,uint32_t SPEED_FREQ){
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]

	ENABLE_GPIO_CLK(GPIO);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff ffa1 	bl	8003280 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333e:	f107 0310 	add.w	r3, r7, #16
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	605a      	str	r2, [r3, #4]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003350:	2301      	movs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = SPEED_FREQ;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIO, &GPIO_InitStruct);
 800335c:	f107 0310 	add.w	r3, r7, #16
 8003360:	4619      	mov	r1, r3
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f003 fe08 	bl	8006f78 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO, GPIO_PIN, GPIO_PIN_RESET);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	b29b      	uxth	r3, r3
 800336c:	2200      	movs	r2, #0
 800336e:	4619      	mov	r1, r3
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f003 ffac 	bl	80072ce <HAL_GPIO_WritePin>

}
 8003376:	bf00      	nop
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	6039      	str	r1, [r7, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <_ZNKSt4hashIbEclEb>:
      operator()(_Tp __val) const noexcept              \
      { return static_cast<size_t>(__val); }            \
    };

  /// Explicit specialization for bool.
  _Cxx_hashtable_define_trivial_hash(bool)
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	70fb      	strb	r3, [r7, #3]
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <_ZNKSt4hashItEclEt>:

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr

080033c4 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	60b9      	str	r1, [r7, #8]
 80033e8:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	fb01 f202 	mul.w	r2, r1, r2
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr

08003426 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>:
    bool status;

    GPIO_TIM_Mapping() :GPIO(nullptr), Pin(0),TIMx(nullptr), TIM_CHANNEL(0), status(false) {
    	Error_Handler();
    }
    GPIO_TIM_Mapping(GPIO_TypeDef* GPIO, uint32_t Pin, TIM_TypeDef* TIMx, uint32_t TIM_CHANNEL,bool status)
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
    : GPIO(GPIO), Pin(Pin), TIMx(TIMx), TIM_CHANNEL(TIM_CHANNEL),status(status) {}
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	601a      	str	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	60da      	str	r2, [r3, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	7f3a      	ldrb	r2, [r7, #28]
 8003466:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <_ZNK16GPIO_TIM_MappingeqERKS_>:

    // Để bảng băm làm việc với class, bạn cần cung cấp operator== và một hàm băm (hash function).
    bool operator==(const GPIO_TIM_Mapping & other) const {
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
        return (GPIO == other.GPIO && Pin == other.Pin);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d107      	bne.n	800349c <_ZNK16GPIO_TIM_MappingeqERKS_+0x26>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d101      	bne.n	800349c <_ZNK16GPIO_TIM_MappingeqERKS_+0x26>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <_ZNK16GPIO_TIM_MappingeqERKS_+0x28>
 800349c:	2300      	movs	r3, #0
    }
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <_ZNK11GPIOPinHashclERK16GPIO_TIM_Mapping>:
};



struct GPIOPinHash {
    size_t operator()(const GPIO_TIM_Mapping& mapping) const {
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
        // Sử dụng địa chỉ GPIO và Pin để tạo ra một giá trị hash
        return (reinterpret_cast<size_t>(mapping.GPIO) ^ std::hash<uint16_t>()(mapping.Pin) ^ std::hash<bool>()(mapping.status));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461c      	mov	r4, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	f107 0308 	add.w	r3, r7, #8
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff71 	bl	80033ac <_ZNKSt4hashItEclEt>
 80034ca:	4603      	mov	r3, r0
 80034cc:	405c      	eors	r4, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80034d4:	f107 030c 	add.w	r3, r7, #12
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff ff5a 	bl	8003394 <_ZNKSt4hashIbEclEb>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4063      	eors	r3, r4
    }
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd90      	pop	{r4, r7, pc}

080034ec <_ZNSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f9d9 	bl	80038ac <_ZNSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EEC1Ev>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ffed 	bl	80034ec <_ZNSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EEC1Ev>
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f9d4 	bl	80038c0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EEC1Ev>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9de 	bl	80038ec <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEED1Ev>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f9c6 	bl	80038d4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EEC1Ev>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ffe1 	bl	8003522 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EED1Ev>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ffc6 	bl	8003504 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7ff ffde 	bl	800353a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEEC1Ev>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f103 0218 	add.w	r2, r3, #24
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3308      	adds	r3, #8
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff16 	bl	80033c4 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3310      	adds	r3, #16
 80035a2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff ff2c 	bl	8003404 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	619a      	str	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_multimap() = default;
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff ffcf 	bl	800356a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>:
		Error_Handler();
	}
}

// Khi cần thêm các ánh xạ
void AddMapping(GPIO_TypeDef* GPIO, uint16_t Pin, TIM_TypeDef* TIMx, uint32_t TIM_CHANNEL, bool status) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0b4      	sub	sp, #208	@ 0xd0
 80035dc:	af02      	add	r7, sp, #8
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	603b      	str	r3, [r7, #0]
 80035e4:	460b      	mov	r3, r1
 80035e6:	817b      	strh	r3, [r7, #10]
    gpioMap.emplace(GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status),
 80035e8:	897a      	ldrh	r2, [r7, #10]
 80035ea:	f107 0010 	add.w	r0, r7, #16
 80035ee:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 80035f2:	9301      	str	r3, [sp, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	f7ff ff1e 	bl	800343c <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
                    GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status));
 8003600:	897a      	ldrh	r2, [r7, #10]
 8003602:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8003606:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	f7ff ff12 	bl	800343c <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
    gpioMap.emplace(GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status),
 8003618:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 800361c:	f107 0310 	add.w	r3, r7, #16
 8003620:	4619      	mov	r1, r3
 8003622:	4803      	ldr	r0, [pc, #12]	@ (8003630 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb+0x58>)
 8003624:	f000 f980 	bl	8003928 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJS0_S0_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>
}
 8003628:	bf00      	nop
 800362a:	37c8      	adds	r7, #200	@ 0xc8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200000fc 	.word	0x200000fc

08003634 <_Z19Add_Map_STM32F103xxv>:
//	__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,200);

}

void Add_Map_STM32F103xx()
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af02      	add	r7, sp, #8

/**/	AddMapping(GPIOA, GPIO_PIN_0, TIM2, TIM_CHANNEL_1, false);
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2300      	movs	r3, #0
 8003640:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003644:	2101      	movs	r1, #1
 8003646:	4891      	ldr	r0, [pc, #580]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 8003648:	f7ff ffc6 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_0, TIM5, TIM_CHANNEL_1, false);
 800364c:	2300      	movs	r3, #0
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	4a8f      	ldr	r2, [pc, #572]	@ (8003890 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8003654:	2101      	movs	r1, #1
 8003656:	488d      	ldr	r0, [pc, #564]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 8003658:	f7ff ffbe 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_1, TIM2, TIM_CHANNEL_2, false);
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2304      	movs	r3, #4
 8003662:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003666:	2102      	movs	r1, #2
 8003668:	4888      	ldr	r0, [pc, #544]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 800366a:	f7ff ffb5 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_1, TIM5, TIM_CHANNEL_2, false);
 800366e:	2300      	movs	r3, #0
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2304      	movs	r3, #4
 8003674:	4a86      	ldr	r2, [pc, #536]	@ (8003890 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8003676:	2102      	movs	r1, #2
 8003678:	4884      	ldr	r0, [pc, #528]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 800367a:	f7ff ffad 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_2, TIM2, TIM_CHANNEL_3, false);
 800367e:	2300      	movs	r3, #0
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2308      	movs	r3, #8
 8003684:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003688:	2104      	movs	r1, #4
 800368a:	4880      	ldr	r0, [pc, #512]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 800368c:	f7ff ffa4 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_2, TIM5, TIM_CHANNEL_3, false);
 8003690:	2300      	movs	r3, #0
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2308      	movs	r3, #8
 8003696:	4a7e      	ldr	r2, [pc, #504]	@ (8003890 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8003698:	2104      	movs	r1, #4
 800369a:	487c      	ldr	r0, [pc, #496]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 800369c:	f7ff ff9c 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_3, TIM2, TIM_CHANNEL_4, false);
 80036a0:	2300      	movs	r3, #0
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	230c      	movs	r3, #12
 80036a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036aa:	2108      	movs	r1, #8
 80036ac:	4877      	ldr	r0, [pc, #476]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 80036ae:	f7ff ff93 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_3, TIM5, TIM_CHANNEL_4, false);
 80036b2:	2300      	movs	r3, #0
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	230c      	movs	r3, #12
 80036b8:	4a75      	ldr	r2, [pc, #468]	@ (8003890 <_Z19Add_Map_STM32F103xxv+0x25c>)
 80036ba:	2108      	movs	r1, #8
 80036bc:	4873      	ldr	r0, [pc, #460]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 80036be:	f7ff ff8b 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_6, TIM3, TIM_CHANNEL_1, false);
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	4a72      	ldr	r2, [pc, #456]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 80036ca:	2140      	movs	r1, #64	@ 0x40
 80036cc:	486f      	ldr	r0, [pc, #444]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 80036ce:	f7ff ff83 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_7, TIM3, TIM_CHANNEL_2, false);
 80036d2:	2300      	movs	r3, #0
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2304      	movs	r3, #4
 80036d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 80036da:	2180      	movs	r1, #128	@ 0x80
 80036dc:	486b      	ldr	r0, [pc, #428]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 80036de:	f7ff ff7b 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_8, TIM1, TIM_CHANNEL_1, false);
 80036e2:	2300      	movs	r3, #0
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	2300      	movs	r3, #0
 80036e8:	4a6b      	ldr	r2, [pc, #428]	@ (8003898 <_Z19Add_Map_STM32F103xxv+0x264>)
 80036ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036ee:	4867      	ldr	r0, [pc, #412]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 80036f0:	f7ff ff72 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_9, TIM1, TIM_CHANNEL_2, false);
 80036f4:	2300      	movs	r3, #0
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2304      	movs	r3, #4
 80036fa:	4a67      	ldr	r2, [pc, #412]	@ (8003898 <_Z19Add_Map_STM32F103xxv+0x264>)
 80036fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003700:	4862      	ldr	r0, [pc, #392]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 8003702:	f7ff ff69 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_10, TIM1, TIM_CHANNEL_3, false);
 8003706:	2300      	movs	r3, #0
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2308      	movs	r3, #8
 800370c:	4a62      	ldr	r2, [pc, #392]	@ (8003898 <_Z19Add_Map_STM32F103xxv+0x264>)
 800370e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003712:	485e      	ldr	r0, [pc, #376]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 8003714:	f7ff ff60 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_11, TIM1, TIM_CHANNEL_4, false);
 8003718:	2300      	movs	r3, #0
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	230c      	movs	r3, #12
 800371e:	4a5e      	ldr	r2, [pc, #376]	@ (8003898 <_Z19Add_Map_STM32F103xxv+0x264>)
 8003720:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003724:	4859      	ldr	r0, [pc, #356]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 8003726:	f7ff ff57 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_15, TIM2, TIM_CHANNEL_1, false);
 800372a:	2300      	movs	r3, #0
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2300      	movs	r3, #0
 8003730:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003734:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003738:	4854      	ldr	r0, [pc, #336]	@ (800388c <_Z19Add_Map_STM32F103xxv+0x258>)
 800373a:	f7ff ff4d 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_0, TIM3, TIM_CHANNEL_3, false);
 800373e:	2300      	movs	r3, #0
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2308      	movs	r3, #8
 8003744:	4a53      	ldr	r2, [pc, #332]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003746:	2101      	movs	r1, #1
 8003748:	4854      	ldr	r0, [pc, #336]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 800374a:	f7ff ff45 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_1, TIM3, TIM_CHANNEL_4, false);
 800374e:	2300      	movs	r3, #0
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	230c      	movs	r3, #12
 8003754:	4a4f      	ldr	r2, [pc, #316]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003756:	2102      	movs	r1, #2
 8003758:	4850      	ldr	r0, [pc, #320]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 800375a:	f7ff ff3d 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_3, TIM2, TIM_CHANNEL_2, false);
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2304      	movs	r3, #4
 8003764:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003768:	2108      	movs	r1, #8
 800376a:	484c      	ldr	r0, [pc, #304]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 800376c:	f7ff ff34 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_4, TIM3, TIM_CHANNEL_1, false);
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	4a47      	ldr	r2, [pc, #284]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003778:	2110      	movs	r1, #16
 800377a:	4848      	ldr	r0, [pc, #288]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 800377c:	f7ff ff2c 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_5, TIM3, TIM_CHANNEL_2, false);
 8003780:	2300      	movs	r3, #0
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2304      	movs	r3, #4
 8003786:	4a43      	ldr	r2, [pc, #268]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003788:	2120      	movs	r1, #32
 800378a:	4844      	ldr	r0, [pc, #272]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 800378c:	f7ff ff24 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_6, TIM4, TIM_CHANNEL_1, false);
 8003790:	2300      	movs	r3, #0
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2300      	movs	r3, #0
 8003796:	4a42      	ldr	r2, [pc, #264]	@ (80038a0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 8003798:	2140      	movs	r1, #64	@ 0x40
 800379a:	4840      	ldr	r0, [pc, #256]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 800379c:	f7ff ff1c 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_7, TIM4, TIM_CHANNEL_2, false);
 80037a0:	2300      	movs	r3, #0
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	2304      	movs	r3, #4
 80037a6:	4a3e      	ldr	r2, [pc, #248]	@ (80038a0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80037a8:	2180      	movs	r1, #128	@ 0x80
 80037aa:	483c      	ldr	r0, [pc, #240]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 80037ac:	f7ff ff14 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_8, TIM4, TIM_CHANNEL_3, false);
 80037b0:	2300      	movs	r3, #0
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2308      	movs	r3, #8
 80037b6:	4a3a      	ldr	r2, [pc, #232]	@ (80038a0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80037b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037bc:	4837      	ldr	r0, [pc, #220]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 80037be:	f7ff ff0b 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_9, TIM4, TIM_CHANNEL_4, false);
 80037c2:	2300      	movs	r3, #0
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	230c      	movs	r3, #12
 80037c8:	4a35      	ldr	r2, [pc, #212]	@ (80038a0 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80037ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037ce:	4833      	ldr	r0, [pc, #204]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 80037d0:	f7ff ff02 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_10, TIM2, TIM_CHANNEL_3, false);
 80037d4:	2300      	movs	r3, #0
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2308      	movs	r3, #8
 80037da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80037e2:	482e      	ldr	r0, [pc, #184]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 80037e4:	f7ff fef8 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_11, TIM2, TIM_CHANNEL_4, false);
 80037e8:	2300      	movs	r3, #0
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	230c      	movs	r3, #12
 80037ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80037f6:	4829      	ldr	r0, [pc, #164]	@ (800389c <_Z19Add_Map_STM32F103xxv+0x268>)
 80037f8:	f7ff feee 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_6, TIM3, TIM_CHANNEL_1, false);
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2300      	movs	r3, #0
 8003802:	4a24      	ldr	r2, [pc, #144]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003804:	2140      	movs	r1, #64	@ 0x40
 8003806:	4827      	ldr	r0, [pc, #156]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8003808:	f7ff fee6 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_6, TIM8, TIM_CHANNEL_1, false);
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	4a25      	ldr	r2, [pc, #148]	@ (80038a8 <_Z19Add_Map_STM32F103xxv+0x274>)
 8003814:	2140      	movs	r1, #64	@ 0x40
 8003816:	4823      	ldr	r0, [pc, #140]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8003818:	f7ff fede 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_7, TIM3, TIM_CHANNEL_2, false);
 800381c:	2300      	movs	r3, #0
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	2304      	movs	r3, #4
 8003822:	4a1c      	ldr	r2, [pc, #112]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003824:	2180      	movs	r1, #128	@ 0x80
 8003826:	481f      	ldr	r0, [pc, #124]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8003828:	f7ff fed6 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_7, TIM8, TIM_CHANNEL_2, false);
 800382c:	2300      	movs	r3, #0
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2304      	movs	r3, #4
 8003832:	4a1d      	ldr	r2, [pc, #116]	@ (80038a8 <_Z19Add_Map_STM32F103xxv+0x274>)
 8003834:	2180      	movs	r1, #128	@ 0x80
 8003836:	481b      	ldr	r0, [pc, #108]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8003838:	f7ff fece 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_8, TIM3, TIM_CHANNEL_3, false);
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2308      	movs	r3, #8
 8003842:	4a14      	ldr	r2, [pc, #80]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003844:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003848:	4816      	ldr	r0, [pc, #88]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 800384a:	f7ff fec5 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_8, TIM8, TIM_CHANNEL_3, false);
 800384e:	2300      	movs	r3, #0
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2308      	movs	r3, #8
 8003854:	4a14      	ldr	r2, [pc, #80]	@ (80038a8 <_Z19Add_Map_STM32F103xxv+0x274>)
 8003856:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800385a:	4812      	ldr	r0, [pc, #72]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 800385c:	f7ff febc 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_9, TIM3, TIM_CHANNEL_4, false);
 8003860:	2300      	movs	r3, #0
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	230c      	movs	r3, #12
 8003866:	4a0b      	ldr	r2, [pc, #44]	@ (8003894 <_Z19Add_Map_STM32F103xxv+0x260>)
 8003868:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800386c:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 800386e:	f7ff feb3 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_9, TIM8, TIM_CHANNEL_4, false);
 8003872:	2300      	movs	r3, #0
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	230c      	movs	r3, #12
 8003878:	4a0b      	ldr	r2, [pc, #44]	@ (80038a8 <_Z19Add_Map_STM32F103xxv+0x274>)
 800387a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800387e:	4809      	ldr	r0, [pc, #36]	@ (80038a4 <_Z19Add_Map_STM32F103xxv+0x270>)
 8003880:	f7ff feaa 	bl	80035d8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>



}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40010800 	.word	0x40010800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40000400 	.word	0x40000400
 8003898:	40012c00 	.word	0x40012c00
 800389c:	40010c00 	.word	0x40010c00
 80038a0:	40000800 	.word	0x40000800
 80038a4:	40011000 	.word	0x40011000
 80038a8:	40013400 	.word	0x40013400

080038ac <_ZNSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EEC1Ev>:
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr

080038d4 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EEC1Ev>:
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f859 	bl	8003994 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEEC1Ev>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4618      	mov	r0, r3
 80038e6:	3708      	adds	r7, #8
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f859 	bl	80039ac <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEED1Ev>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f857 	bl	80039c0 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5clearEv>
      _M_deallocate_buckets();
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f874 	bl	8003a00 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>
    }
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fe1a 	bl	8003552 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEED1Ev>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJS0_S0_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>:
       *
       *  Insertion requires amortized constant time.
       */
      template<typename... _Args>
	iterator
	emplace(_Args&&... __args)
 8003928:	b5b0      	push	{r4, r5, r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
	{ return _M_h.emplace(std::forward<_Args>(__args)...); }
 8003934:	68fc      	ldr	r4, [r7, #12]
 8003936:	68b8      	ldr	r0, [r7, #8]
 8003938:	f000 f872 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800393c:	4605      	mov	r5, r0
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f86e 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003944:	4603      	mov	r3, r0
 8003946:	461a      	mov	r2, r3
 8003948:	4629      	mov	r1, r5
 800394a:	4620      	mov	r0, r4
 800394c:	f000 f872 	bl	8003a34 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>
 8003950:	4603      	mov	r3, r0
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bdb0      	pop	{r4, r5, r7, pc}

0800395a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>:
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	6039      	str	r1, [r7, #0]
      { return __x._M_cur != __y._M_cur; }
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr

08003980 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 f87e 	bl	8003a9e <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEC1Ev>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4618      	mov	r0, r3
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr

080039c0 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f872 	bl	8003ab2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 80039ce:	4603      	mov	r3, r0
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f878 	bl	8003ac8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_>
      __builtin_memset(_M_buckets, 0,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4610      	mov	r0, r2
 80039e4:	461a      	mov	r2, r3
 80039e6:	2100      	movs	r1, #0
 80039e8:	f007 fdb6 	bl	800b558 <memset>
      _M_element_count = 0;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
    }
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	461a      	mov	r2, r3
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f870 	bl	8003af8 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>:
	emplace(_Args&&... __args)
 8003a34:	b5b0      	push	{r4, r5, r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
	{ return _M_emplace(__unique_keys{}, std::forward<_Args>(__args)...); }
 8003a40:	68b8      	ldr	r0, [r7, #8]
 8003a42:	f7ff ffed 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003a46:	4604      	mov	r4, r0
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ffe9 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	4622      	mov	r2, r4
 8003a52:	4629      	mov	r1, r5
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f866 	bl	8003b26 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bdb0      	pop	{r4, r5, r7, pc}

08003a64 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>:
      _M_incr() noexcept
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 f877 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>:
      _M_valptr() noexcept
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f873 	bl	8003b7a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr

08003ab2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>:
      _M_begin() const
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8003ad2:	e009      	b.n	8003ae8 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_+0x20>
	{
	  __node_ptr __tmp = __n;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8003ad8:	6838      	ldr	r0, [r7, #0]
 8003ada:	f000 f843 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8003ade:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f855 	bl	8003b92 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>
      while (__n)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1f2      	bne.n	8003ad4 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_+0xc>
	}
    }
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f85e 	bl	8003bc8 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d105      	bne.n	8003b1e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68b9      	ldr	r1, [r7, #8]
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 f86d 	bl	8003bf6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 8003b1c:	e000      	b.n	8003b20 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x28>
	  return;
 8003b1e:	bf00      	nop
      }
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
	_M_emplace(false_type __uks, _Args&&... __args)
 8003b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b28:	b087      	sub	sp, #28
 8003b2a:	af02      	add	r7, sp, #8
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	7239      	strb	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	603b      	str	r3, [r7, #0]
	{ return _M_emplace(cend(), __uks, std::forward<_Args>(__args)...); }
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 f881 	bl	8003c3c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff ff6f 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b42:	4605      	mov	r5, r0
 8003b44:	6838      	ldr	r0, [r7, #0]
 8003b46:	f7ff ff6b 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	462b      	mov	r3, r5
 8003b50:	4632      	mov	r2, r6
 8003b52:	4621      	mov	r1, r4
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f880 	bl	8003c5a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>:
      _M_next() const noexcept
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f924 	bl	8003dd0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 8003b92:	b590      	push	{r4, r7, lr}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f940 	bl	8003e22 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff6b 	bl	8003a84 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 f941 	bl	8003e3a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE7destroyIS5_EEvRS7_PT_>
      _M_deallocate_node_ptr(__n);
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f94a 	bl	8003e54 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE22_M_deallocate_node_ptrEPS6_>
    }
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd90      	pop	{r4, r7, pc}

08003bc8 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3318      	adds	r3, #24
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf14      	ite	ne
 8003be6:	2301      	movne	r3, #1
 8003be8:	2300      	moveq	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr

08003bf6 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 f93c 	bl	8003e80 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8003c08:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f909 	bl	8003e22 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f107 0310 	add.w	r3, r7, #16
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f93d 	bl	8003e98 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 8003c1e:	f107 0310 	add.w	r3, r7, #16
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6979      	ldr	r1, [r7, #20]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f94f 	bl	8003eca <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 8003c2c:	f107 0310 	add.w	r3, r7, #16
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f93e 	bl	8003eb2 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>:
      cend() const noexcept
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
      { return const_iterator(nullptr); }
 8003c44:	f107 030c 	add.w	r3, r7, #12
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 f94c 	bl	8003ee8 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003c5a:	b590      	push	{r4, r7, lr}
 8003c5c:	b08d      	sub	sp, #52	@ 0x34
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	713a      	strb	r2, [r7, #4]
 8003c66:	603b      	str	r3, [r7, #0]
	_Scoped_node __node { this, std::forward<_Args>(__args)...  };
 8003c68:	6838      	ldr	r0, [r7, #0]
 8003c6a:	f7ff fed9 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003c72:	f7ff fed5 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f107 0020 	add.w	r0, r7, #32
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	f000 f941 	bl	8003f06 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJS0_S0_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>
	const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	3304      	adds	r3, #4
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 f971 	bl	8003f70 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 f976 	bl	8003f88 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>
 8003c9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	auto __res = this->_M_compute_hash_code(__hint, __k);
 8003c9e:	f107 0018 	add.w	r0, r7, #24
 8003ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca4:	68ba      	ldr	r2, [r7, #8]
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	f000 f97b 	bl	8003fa2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_>
	  = _M_insert_multi_node(__res.first._M_cur, __res.second,
 8003cac:	69b9      	ldr	r1, [r7, #24]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fa0d 	bl	80040d2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	617b      	str	r3, [r7, #20]
	__node._M_node = nullptr;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
	return __pos;
 8003cc0:	697c      	ldr	r4, [r7, #20]
      }
 8003cc2:	f107 0320 	add.w	r3, r7, #32
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f93d 	bl	8003f46 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev>
	return __pos;
 8003ccc:	4623      	mov	r3, r4
      }
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3734      	adds	r7, #52	@ 0x34
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd90      	pop	{r4, r7, pc}

08003cd6 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4sizeEv>:
      size() const noexcept
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 8003cf0:	f000 faa5 	bl	800423e <_ZNSt8__detail22_Hashtable_hash_traitsI11GPIOPinHashE22__small_size_thresholdEv>
 8003cf4:	4603      	mov	r3, r0
      }
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_key_equals(const _Key& __k,
 8003cfa:	b590      	push	{r4, r7, lr}
 8003cfc:	b087      	sub	sp, #28
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 faa0 	bl	800424c <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE5_M_eqEv>
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f844 	bl	8003d9e <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 8003d16:	4602      	mov	r2, r0
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f849 	bl	8003db6 <_ZNKSt8__detail10_Select1stclIRKSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS9_>
 8003d24:	4603      	mov	r3, r0
 8003d26:	461a      	mov	r2, r3
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	4620      	mov	r0, r4
 8003d2c:	f000 fa9a 	bl	8004264 <_ZNKSt8equal_toI16GPIO_TIM_MappingEclERKS0_S3_>
 8003d30:	4603      	mov	r3, r0
      }
 8003d32:	4618      	mov	r0, r3
 8003d34:	371c      	adds	r7, #28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}

08003d3a <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS3_>:
      _M_hash_code(const _Key& __k) const
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fa9c 	bl	8004282 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff fbaa 	bl	80034a8 <_ZNK11GPIOPinHashclERK16GPIO_TIM_Mapping>
 8003d54:	4603      	mov	r3, r0
      }
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa92 	bl	800429a <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEjj>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f828 	bl	8003de4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>:
      _M_v() const noexcept
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 face 	bl	8004348 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_ZNKSt8__detail10_Select1stclIRKSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS9_>:
      operator()(_Tp&& __x) const noexcept
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8003dc0:	6838      	ldr	r0, [r7, #0]
 8003dc2:	f000 face 	bl	8004362 <_ZSt7forwardIRKSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>:
      _M_addr() noexcept
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003dd8:	687b      	ldr	r3, [r7, #4]
      }
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4618      	mov	r0, r3
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6839      	ldr	r1, [r7, #0]
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 faaf 	bl	8004376 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fab7 	bl	800439e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EE6_M_getEv>
 8003e30:	4603      	mov	r3, r0
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE7destroyIS5_EEvRS7_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b082      	sub	sp, #8
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8003e44:	6839      	ldr	r1, [r7, #0]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 fab3 	bl	80043b2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE7destroyIS5_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE22_M_deallocate_node_ptrEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8003e5e:	6838      	ldr	r0, [r7, #0]
 8003e60:	f000 fab1 	bl	80043c6 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEES6_Lb0EE10pointer_toERS6_>
 8003e64:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ffdb 	bl	8003e22 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2201      	movs	r2, #1
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 fab3 	bl	80043de <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE10deallocateERS7_PS6_j>
    }
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fab7 	bl	80043fc <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fab6 	bl	8004414 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fab4 	bl	8004428 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 faae 	bl	800443c <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_const_iterator(__node_type* __p) noexcept
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff ff74 	bl	8003de4 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4618      	mov	r0, r3
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJS0_S0_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8003f06:	b5b0      	push	{r4, r5, r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8003f1a:	68bc      	ldr	r4, [r7, #8]
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fd7f 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f22:	4605      	mov	r5, r0
 8003f24:	6838      	ldr	r0, [r7, #0]
 8003f26:	f7ff fd7b 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4629      	mov	r1, r5
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 faa0 	bl	8004476 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJS3_S3_EEEPS6_DpOT_>
 8003f36:	4602      	mov	r2, r0
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	605a      	str	r2, [r3, #4]
	  { }
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bdb0      	pop	{r4, r5, r7, pc}

08003f46 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d007      	beq.n	8003f66 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev+0x20>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7ff fe16 	bl	8003b92 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>:
      _M_v() noexcept
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fd83 	bl	8003a84 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>:
      operator()(_Tp&& __x) const noexcept
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8003f92:	6838      	ldr	r0, [r7, #0]
 8003f94:	f000 faa7 	bl	80044e6 <_ZSt7forwardIRSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS5_E4typeE>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003fa2:	b590      	push	{r4, r7, lr}
 8003fa4:	b08d      	sub	sp, #52	@ 0x34
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
      if (size() <= __small_size_threshold())
 8003fb0:	68b8      	ldr	r0, [r7, #8]
 8003fb2:	f7ff fe90 	bl	8003cd6 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4sizeEv>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	f7ff fe98 	bl	8003cec <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22__small_size_thresholdEv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	bf94      	ite	ls
 8003fc2:	2301      	movls	r3, #1
 8003fc4:	2300      	movhi	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d071      	beq.n	80040b0 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x10e>
	  if (__hint != cend())
 8003fcc:	68b8      	ldr	r0, [r7, #8]
 8003fce:	f7ff fe35 	bl	8003c3c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	f107 021c 	add.w	r2, r7, #28
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fcbb 	bl	800395a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d032      	beq.n	8004050 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xae>
	      for (auto __it = __hint; __it != cend(); ++__it)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e01f      	b.n	8004030 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x8e>
		if (this->_M_key_equals(__k, *__it._M_cur))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6839      	ldr	r1, [r7, #0]
 8003ff8:	68b8      	ldr	r0, [r7, #8]
 8003ffa:	f7ff fe7e 	bl	8003cfa <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x84>
		  return { __it, this->_M_hash_code(*__it._M_cur) };
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	68b8      	ldr	r0, [r7, #8]
 800400c:	f000 fa82 	bl	8004514 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>
 8004010:	4603      	mov	r3, r0
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	f107 0220 	add.w	r2, r7, #32
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	4619      	mov	r1, r3
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f000 fa85 	bl	800452e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 8004024:	e051      	b.n	80040ca <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x128>
	      for (auto __it = __hint; __it != cend(); ++__it)
 8004026:	f107 0318 	add.w	r3, r7, #24
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa65 	bl	80044fa <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 8004030:	68b8      	ldr	r0, [r7, #8]
 8004032:	f7ff fe03 	bl	8003c3c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 8004036:	4603      	mov	r3, r0
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800403e:	f107 0318 	add.w	r3, r7, #24
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fc88 	bl	800395a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1cf      	bne.n	8003ff0 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x4e>
	  for (auto __it = cbegin(); __it != __hint; ++__it)
 8004050:	68b8      	ldr	r0, [r7, #8]
 8004052:	f000 fa85 	bl	8004560 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE6cbeginEv>
 8004056:	4603      	mov	r3, r0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	e01f      	b.n	800409c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xfa>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	3304      	adds	r3, #4
 8004060:	461a      	mov	r2, r3
 8004062:	6839      	ldr	r1, [r7, #0]
 8004064:	68b8      	ldr	r0, [r7, #8]
 8004066:	f7ff fe48 	bl	8003cfa <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xf0>
	      return { __it, this->_M_hash_code(*__it._M_cur) };
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	3304      	adds	r3, #4
 8004074:	4619      	mov	r1, r3
 8004076:	68b8      	ldr	r0, [r7, #8]
 8004078:	f000 fa4c 	bl	8004514 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>
 800407c:	4603      	mov	r3, r0
 800407e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004080:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4619      	mov	r1, r3
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa4f 	bl	800452e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 8004090:	e01b      	b.n	80040ca <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x128>
	  for (auto __it = cbegin(); __it != __hint; ++__it)
 8004092:	f107 0314 	add.w	r3, r7, #20
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fa2f 	bl	80044fa <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 800409c:	1d3a      	adds	r2, r7, #4
 800409e:	f107 0314 	add.w	r3, r7, #20
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fc58 	bl	800395a <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1d5      	bne.n	800405c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xba>
      return { __hint, this->_M_hash_code(__k) };
 80040b0:	6839      	ldr	r1, [r7, #0]
 80040b2:	68b8      	ldr	r0, [r7, #8]
 80040b4:	f7ff fe41 	bl	8003d3a <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS3_>
 80040b8:	4603      	mov	r3, r0
 80040ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80040c0:	1d3b      	adds	r3, r7, #4
 80040c2:	4619      	mov	r1, r3
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa32 	bl	800452e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	3734      	adds	r7, #52	@ 0x34
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd90      	pop	{r4, r7, pc}

080040d2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80040d2:	b590      	push	{r4, r7, lr}
 80040d4:	b091      	sub	sp, #68	@ 0x44
 80040d6:	af02      	add	r7, sp, #8
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3310      	adds	r3, #16
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f99e 	bl	8003426 <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 80040ea:	4603      	mov	r3, r0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	f107 0318 	add.w	r3, r7, #24
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f103 0110 	add.w	r1, r3, #16
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f107 0010 	add.w	r0, r7, #16
 8004106:	2401      	movs	r4, #1
 8004108:	9400      	str	r4, [sp, #0]
 800410a:	f005 fdc7 	bl	8009c9c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 800410e:	7c3b      	ldrb	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x4e>
	_M_rehash(__do_rehash.second, __saved_state);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004118:	4619      	mov	r1, r3
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 fa33 	bl	8004586 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_rehashEjRKj>
      this->_M_store_code(*__node, __code);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	33bc      	adds	r3, #188	@ 0xbc
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4619      	mov	r1, r3
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fa3b 	bl	80045a4 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEj>
      const key_type& __k = _ExtractKey{}(__node->_M_v());
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	3304      	adds	r3, #4
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff ff1c 	bl	8003f70 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 8004138:	4602      	mov	r2, r0
 800413a:	f107 031c 	add.w	r3, r7, #28
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff ff21 	bl	8003f88 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>
 8004146:	6338      	str	r0, [r7, #48]	@ 0x30
      size_type __bkt = _M_bucket_index(__code);
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff fe07 	bl	8003d5e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexEj>
 8004150:	62f8      	str	r0, [r7, #44]	@ 0x2c
	= __builtin_expect(__hint != nullptr, false)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
	    ? __hint
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00c      	beq.n	800417c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xaa>
	  && this->_M_equals(__k, __code, *__hint)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	3304      	adds	r3, #4
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 fa28 	bl	80045c0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 8004170:	4603      	mov	r3, r0
 8004172:	f083 0301 	eor.w	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xba>
	    : _M_find_before_node(__bkt, __k, __code);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004180:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f89b 	bl	80042be <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j>
 8004188:	4603      	mov	r3, r0
	    ? __hint
 800418a:	e000      	b.n	800418e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xbc>
 800418c:	68bb      	ldr	r3, [r7, #8]
      __node_base_ptr __prev
 800418e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (__prev)
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03e      	beq.n	8004214 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x142>
	  __node->_M_nxt = __prev->_M_nxt;
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	601a      	str	r2, [r3, #0]
	  __prev->_M_nxt = __node;
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	601a      	str	r2, [r3, #0]
	  if (__builtin_expect(__prev == __hint, false))
 80041a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d033      	beq.n	800421e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
	    if (__node->_M_nxt
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
		&& !this->_M_equals(__k, __code, *__node->_M_next()))
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d011      	beq.n	80041e2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x110>
 80041be:	6838      	ldr	r0, [r7, #0]
 80041c0:	f7ff fcd0 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80041c4:	4603      	mov	r3, r0
 80041c6:	3304      	adds	r3, #4
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f9f7 	bl	80045c0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f083 0301 	eor.w	r3, r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x110>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x112>
 80041e2:	2300      	movs	r3, #0
	    if (__node->_M_nxt
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01a      	beq.n	800421e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
		size_type __next_bkt = _M_bucket_index(*__node->_M_next());
 80041e8:	6838      	ldr	r0, [r7, #0]
 80041ea:	f7ff fcbb 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80041ee:	4603      	mov	r3, r0
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f7ff fe03 	bl	8003e00 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 80041fa:	6278      	str	r0, [r7, #36]	@ 0x24
		if (__next_bkt != __bkt)
 80041fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004200:	429a      	cmp	r2, r3
 8004202:	d00c      	beq.n	800421e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
		  _M_buckets[__next_bkt] = __node;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	e004      	b.n	800421e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
	_M_insert_bucket_begin(__bkt, __node);
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f9f0 	bl	80045fe <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE>
      ++_M_element_count;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 8004228:	f107 0320 	add.w	r3, r7, #32
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fda6 	bl	8003d80 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8004234:	6a3b      	ldr	r3, [r7, #32]
    }
 8004236:	4618      	mov	r0, r3
 8004238:	373c      	adds	r7, #60	@ 0x3c
 800423a:	46bd      	mov	sp, r7
 800423c:	bd90      	pop	{r4, r7, pc}

0800423e <_ZNSt8__detail22_Hashtable_hash_traitsI11GPIOPinHashE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 8004242:	2300      	movs	r3, #0
 8004244:	4618      	mov	r0, r3
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fa19 	bl	800468c <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EE7_M_cgetEv>
 800425a:	4603      	mov	r3, r0
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_ZNKSt8equal_toI16GPIO_TIM_MappingEclERKS0_S3_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	68b8      	ldr	r0, [r7, #8]
 8004274:	f7ff f8ff 	bl	8003476 <_ZNK16GPIO_TIM_MappingeqERKS_>
 8004278:	4603      	mov	r3, r0
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa08 	bl	80046a0 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EE7_M_cgetEv>
 8004290:	4603      	mov	r3, r0
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 800429a:	b580      	push	{r7, lr}
 800429c:	b086      	sub	sp, #24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff f895 	bl	80033de <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 80042b4:	4603      	mov	r3, r0
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80042be:	b580      	push	{r7, lr}
 80042c0:	b086      	sub	sp, #24
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	4413      	add	r3, r2
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x26>
	return nullptr;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e02d      	b.n	8004340 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	3304      	adds	r3, #4
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 f964 	bl	80045c0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x44>
	    return __prev_p;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	e01e      	b.n	8004340 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00c      	beq.n	8004324 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x66>
 800430a:	6938      	ldr	r0, [r7, #16]
 800430c:	f7ff fc2a 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8004310:	4603      	mov	r3, r0
 8004312:	3304      	adds	r3, #4
 8004314:	4619      	mov	r1, r3
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff fd72 	bl	8003e00 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 800431c:	4602      	mov	r2, r0
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4293      	cmp	r3, r2
 8004322:	d001      	beq.n	8004328 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x6a>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x6c>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x7e>
	  __prev_p = __p;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 8004332:	6938      	ldr	r0, [r7, #16]
 8004334:	f7ff fc16 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8004338:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 800433a:	e7d6      	b.n	80042ea <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x2c>
	    break;
 800433c:	bf00      	nop
      return nullptr;
 800433e:	2300      	movs	r3, #0
    }
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>:
      _M_valptr() const noexcept
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 f9ae 	bl	80046b4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>
 8004358:	4603      	mov	r3, r0
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <_ZSt7forwardIRKSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff f825 	bl	80033de <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8004394:	4603      	mov	r3, r0
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr

080043b2 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE7destroyIS5_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEES6_Lb0EE10pointer_toERS6_>:
      pointer_to(element_type& __r) noexcept
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f97c 	bl	80046cc <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f978 	bl	80046e4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE10deallocateEPS6_j>
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f980 	bl	800470a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 800440a:	4603      	mov	r3, r0
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4618      	mov	r0, r3
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4619      	mov	r1, r3
 800444e:	68b8      	ldr	r0, [r7, #8]
 8004450:	f005 fbca 	bl	8009be8 <_ZdlPvj>
      }
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <_ZNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1Ev>:
    struct _Hash_node
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4618      	mov	r0, r3
 8004468:	f7fe ffac 	bl	80033c4 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJS3_S3_EEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 8004476:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004478:	b087      	sub	sp, #28
 800447a:	af00      	add	r7, sp, #0
 800447c:	60f8      	str	r0, [r7, #12]
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fccd 	bl	8003e22 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8004488:	4603      	mov	r3, r0
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f946 	bl	800471e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE8allocateERS7_j>
 8004492:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 8004494:	6978      	ldr	r0, [r7, #20]
 8004496:	f000 f951 	bl	800473c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_S8_>
 800449a:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4619      	mov	r1, r3
 80044a0:	20c0      	movs	r0, #192	@ 0xc0
 80044a2:	f7fe ff6c 	bl	800337e <_ZnwjPv>
 80044a6:	4603      	mov	r3, r0
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ffd7 	bl	800445c <_ZNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7ff fcb7 	bl	8003e22 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 80044b4:	4604      	mov	r4, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff fae2 	bl	8003a84 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 80044c0:	4605      	mov	r5, r0
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	f7ff faac 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80044c8:	4606      	mov	r6, r0
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff faa8 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80044d0:	4603      	mov	r3, r0
 80044d2:	4632      	mov	r2, r6
 80044d4:	4629      	mov	r1, r5
 80044d6:	4620      	mov	r0, r4
 80044d8:	f000 f93a 	bl	8004750 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JS3_S3_EEEvRS7_PT_DpOT0_>
	    return __n;
 80044dc:	693b      	ldr	r3, [r7, #16]
      }
 80044de:	4618      	mov	r0, r3
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044e6 <_ZSt7forwardIRSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>:
      operator++() noexcept
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b082      	sub	sp, #8
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff faad 	bl	8003a64 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>
	return *this;
 800450a:	687b      	ldr	r3, [r7, #4]
      }
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_hash_code(const _Hash_node_value<_Value, true>& __n) const
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
      { return __n._M_hash_code; }
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800453a:	68b8      	ldr	r0, [r7, #8]
 800453c:	f000 f920 	bl	8004780 <_ZSt7forwardIRNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fa19 	bl	8003980 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 800454e:	4603      	mov	r3, r0
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE6cbeginEv>:
      cbegin() const noexcept
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
      { return const_iterator(_M_begin()); }
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff faa2 	bl	8003ab2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 030c 	add.w	r3, r7, #12
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fcb6 	bl	8003ee8 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	60f8      	str	r0, [r7, #12]
 800458e:	60b9      	str	r1, [r7, #8]
 8004590:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 8004592:	461a      	mov	r2, r3
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f8fc 	bl	8004794 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEj>:
      _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
      { __n._M_hash_code = __c; }
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	33b8      	adds	r3, #184	@ 0xb8
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f99b 	bl	8004910 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb1EEE>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x34>
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7ff fb88 	bl	8003cfa <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x34>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x36>
 80045f4:	2300      	movs	r3, #0
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80045fe:	b590      	push	{r4, r7, lr}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	601a      	str	r2, [r3, #0]
    }
 800463c:	e022      	b.n	8004684 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00f      	beq.n	8004674 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681c      	ldr	r4, [r3, #0]
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff fa83 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 800465e:	4603      	mov	r3, r0
 8004660:	3304      	adds	r3, #4
 8004662:	4619      	mov	r1, r3
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7ff fbcb 	bl	8003e00 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 800466a:	4603      	mov	r3, r0
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4423      	add	r3, r4
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	3208      	adds	r2, #8
 8004682:	601a      	str	r2, [r3, #0]
    }
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bd90      	pop	{r4, r7, pc}

0800468c <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <_ZNKSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EE7_M_cgetEv>:
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr

080046b4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f939 	bl	8004934 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>:
    addressof(_Tp& __r) noexcept
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f937 	bl	8004948 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>
 80046da:	4603      	mov	r3, r0
 80046dc:	4618      	mov	r0, r3
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	4413      	add	r3, r2
 80046f8:	019b      	lsls	r3, r3, #6
 80046fa:	4619      	mov	r1, r3
 80046fc:	68b8      	ldr	r0, [r7, #8]
 80046fe:	f005 fa73 	bl	8009be8 <_ZdlPvj>
      }
 8004702:	bf00      	nop
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	bc80      	pop	{r7}
 800471c:	4770      	bx	lr

0800471e <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004728:	2200      	movs	r2, #0
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f915 	bl	800495c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv>
 8004732:	4603      	mov	r3, r0
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_S8_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 8004744:	687b      	ldr	r3, [r7, #4]
    }
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr

08004750 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JS3_S3_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff f95e 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004764:	4604      	mov	r4, r0
 8004766:	6838      	ldr	r0, [r7, #0]
 8004768:	f7ff f95a 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800476c:	4603      	mov	r3, r0
 800476e:	4622      	mov	r2, r4
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f920 	bl	80049b8 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JS3_S3_EEEvPT_DpOT0_>
	}
 8004778:	bf00      	nop
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	bd90      	pop	{r4, r7, pc}

08004780 <_ZSt7forwardIRNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8004794:	b580      	push	{r7, lr}
 8004796:	b08e      	sub	sp, #56	@ 0x38
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, false_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 80047a0:	68b9      	ldr	r1, [r7, #8]
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 f926 	bl	80049f4 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj>
 80047a8:	6238      	str	r0, [r7, #32]
      __node_ptr __p = _M_begin();
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f7ff f981 	bl	8003ab2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 80047b0:	6378      	str	r0, [r7, #52]	@ 0x34
      _M_before_begin._M_nxt = nullptr;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
      std::size_t __prev_bkt = 0;
 80047bc:	2300      	movs	r3, #0
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      __node_ptr __prev_p = nullptr;
 80047c0:	2300      	movs	r3, #0
 80047c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      bool __check_bucket = false;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      while (__p)
 80047ca:	e074      	b.n	80048b6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x122>
	{
	  __node_ptr __next = __p->_M_next();
 80047cc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80047ce:	f7ff f9c9 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80047d2:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 80047d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d6:	3304      	adds	r3, #4
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	4619      	mov	r1, r3
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fdca 	bl	8004376 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 80047e2:	6178      	str	r0, [r7, #20]

	  if (__prev_p && __prev_bkt == __bkt)
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00e      	beq.n	8004808 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x74>
 80047ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d10a      	bne.n	8004808 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x74>
	    {
	      // Previous insert was already in this bucket, we insert after
	      // the previously inserted one to preserve equivalent elements
	      // relative order.
	      __p->_M_nxt = __prev_p->_M_nxt;
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f8:	601a      	str	r2, [r3, #0]
	      __prev_p->_M_nxt = __p;
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047fe:	601a      	str	r2, [r3, #0]
	      // Inserting after a node in a bucket require to check that we
	      // haven't change the bucket last node, in this case next
	      // bucket containing its before begin node must be updated. We
	      // schedule a check as soon as we move out of the sequence of
	      // equivalent nodes to limit the number of checks.
	      __check_bucket = true;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004806:	e050      	b.n	80048aa <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x116>
	    }
	  else
	    {
	      if (__check_bucket)
 8004808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01b      	beq.n	8004848 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xb4>
		{
		  // Check if we shall update the next bucket because of
		  // insertions into __prev_bkt bucket.
		  if (__prev_p->_M_nxt)
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d014      	beq.n	8004842 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xae>
		    {
		      std::size_t __next_bkt
			= __hash_code_base::_M_bucket_index(
			  *__prev_p->_M_next(), __bkt_count);
 8004818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800481a:	f7ff f9a3 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 800481e:	4603      	mov	r3, r0
			= __hash_code_base::_M_bucket_index(
 8004820:	3304      	adds	r3, #4
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4619      	mov	r1, r3
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f7ff fda5 	bl	8004376 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 800482c:	6138      	str	r0, [r7, #16]
		      if (__next_bkt != __prev_bkt)
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004832:	429a      	cmp	r2, r3
 8004834:	d005      	beq.n	8004842 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xae>
			__new_buckets[__next_bkt] = __prev_p;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	4413      	add	r3, r2
 800483e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004840:	601a      	str	r2, [r3, #0]
		    }
		  __check_bucket = false;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

	      if (!__new_buckets[__bkt])
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	4413      	add	r3, r2
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11a      	bne.n	800488c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xf8>
		{
		  __p->_M_nxt = _M_before_begin._M_nxt;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800485c:	601a      	str	r2, [r3, #0]
		  _M_before_begin._M_nxt = __p;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004862:	609a      	str	r2, [r3, #8]
		  __new_buckets[__bkt] = &_M_before_begin;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	6a3a      	ldr	r2, [r7, #32]
 800486a:	4413      	add	r3, r2
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	3208      	adds	r2, #8
 8004870:	601a      	str	r2, [r3, #0]
		  if (__p->_M_nxt)
 8004872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xf2>
		    __new_buckets[__bbegin_bkt] = __p;
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	6a3a      	ldr	r2, [r7, #32]
 8004880:	4413      	add	r3, r2
 8004882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004884:	601a      	str	r2, [r3, #0]
		  __bbegin_bkt = __bkt;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	633b      	str	r3, [r7, #48]	@ 0x30
 800488a:	e00e      	b.n	80048aa <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x116>
		}
	      else
		{
		  __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	6a3a      	ldr	r2, [r7, #32]
 8004892:	4413      	add	r3, r2
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489a:	601a      	str	r2, [r3, #0]
		  __new_buckets[__bkt]->_M_nxt = __p;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	4413      	add	r3, r2
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048a8:	601a      	str	r2, [r3, #0]
		}
	    }
	  __prev_p = __p;
 80048aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	  __prev_bkt = __bkt;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  __p = __next;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__p)
 80048b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d187      	bne.n	80047cc <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x38>
	}

      if (__check_bucket && __prev_p->_M_nxt)
 80048bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d018      	beq.n	80048f6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d014      	beq.n	80048f6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
	{
	  std::size_t __next_bkt
	    = __hash_code_base::_M_bucket_index(*__prev_p->_M_next(),
 80048cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ce:	f7ff f949 	bl	8003b64 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80048d2:	4603      	mov	r3, r0
 80048d4:	3304      	adds	r3, #4
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	4619      	mov	r1, r3
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff fd4b 	bl	8004376 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 80048e0:	61f8      	str	r0, [r7, #28]
						__bkt_count);
	  if (__next_bkt != __prev_bkt)
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d005      	beq.n	80048f6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
	    __new_buckets[__next_bkt] = __prev_p;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	6a3a      	ldr	r2, [r7, #32]
 80048f0:	4413      	add	r3, r2
 80048f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f4:	601a      	str	r2, [r3, #0]
	}

      _M_deallocate_buckets();
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff f882 	bl	8003a00 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a3a      	ldr	r2, [r7, #32]
 8004906:	601a      	str	r2, [r3, #0]
    }
 8004908:	bf00      	nop
 800490a:	3738      	adds	r7, #56	@ 0x38
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb1EEE>:
      _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
      { return __c == __n._M_hash_code; }
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	bc80      	pop	{r7}
 8004932:	4770      	bx	lr

08004934 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>:
      _M_addr() const noexcept
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 800493c:	687b      	ldr	r3, [r7, #4]
      }
 800493e:	4618      	mov	r0, r3
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr

0800495c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f861 	bl	8004a30 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv>
 800496e:	4602      	mov	r2, r0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4293      	cmp	r3, r2
 8004974:	bf8c      	ite	hi
 8004976:	2301      	movhi	r3, #1
 8004978:	2300      	movls	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf14      	ite	ne
 8004980:	2301      	movne	r3, #1
 8004982:	2300      	moveq	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d007      	beq.n	800499a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	4a09      	ldr	r2, [pc, #36]	@ (80049b4 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x58>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004992:	f005 f93f 	bl	8009c14 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004996:	f005 f93a 	bl	8009c0e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	019b      	lsls	r3, r3, #6
 80049a4:	4618      	mov	r0, r3
 80049a6:	f005 f921 	bl	8009bec <_Znwj>
 80049aa:	4603      	mov	r3, r0
      }
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	01555555 	.word	0x01555555

080049b8 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JS3_S3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80049b8:	b5b0      	push	{r4, r5, r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	4619      	mov	r1, r3
 80049ca:	20b8      	movs	r0, #184	@ 0xb8
 80049cc:	f7fe fcd7 	bl	800337e <_ZnwjPv>
 80049d0:	4604      	mov	r4, r0
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff f824 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80049d8:	4605      	mov	r5, r0
 80049da:	6838      	ldr	r0, [r7, #0]
 80049dc:	f7ff f820 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	4629      	mov	r1, r5
 80049e6:	4620      	mov	r0, r4
 80049e8:	f000 f82e 	bl	8004a48 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS0_S0_Lb1EEEOT_OT0_>
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bdb0      	pop	{r4, r5, r7, pc}

080049f4 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	bf0c      	ite	eq
 8004a04:	2301      	moveq	r3, #1
 8004a06:	2300      	movne	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3318      	adds	r3, #24
 8004a18:	e005      	b.n	8004a26 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f834 	bl	8004a8a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_allocate_bucketsEj>
 8004a22:	4603      	mov	r3, r0
 8004a24:	bf00      	nop
      }
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004a38:	4b02      	ldr	r3, [pc, #8]	@ (8004a44 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	00aaaaaa 	.word	0x00aaaaaa

08004a48 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS0_S0_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004a54:	68b8      	ldr	r0, [r7, #8]
 8004a56:	f7fe ffe3 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	4611      	mov	r1, r2
 8004a62:	235c      	movs	r3, #92	@ 0x5c
 8004a64:	461a      	mov	r2, r3
 8004a66:	f006 fdff 	bl	800b668 <memcpy>
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fe ffd8 	bl	8003a20 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	335c      	adds	r3, #92	@ 0x5c
 8004a76:	4611      	mov	r1, r2
 8004a78:	225c      	movs	r2, #92	@ 0x5c
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f006 fdf4 	bl	800b668 <memcpy>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8004a8a:	b590      	push	{r4, r7, lr}
 8004a8c:	b087      	sub	sp, #28
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
 8004a92:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff f9c4 	bl	8003e22 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff f9f8 	bl	8003e98 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8004aa8:	f107 030c 	add.w	r3, r7, #12
 8004aac:	6839      	ldr	r1, [r7, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f818 	bl	8004ae4 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8004ab4:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8004ab6:	6978      	ldr	r0, [r7, #20]
 8004ab8:	f000 f823 	bl	8004b02 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8004abc:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	2100      	movs	r1, #0
 8004aca:	f006 fd45 	bl	800b558 <memset>
      return __p;
 8004ace:	693c      	ldr	r4, [r7, #16]
    }
 8004ad0:	f107 030c 	add.w	r3, r7, #12
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff f9ec 	bl	8003eb2 <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8004ada:	4623      	mov	r3, r4
    }
 8004adc:	4618      	mov	r0, r3
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd90      	pop	{r4, r7, pc}

08004ae4 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8004aee:	2200      	movs	r2, #0
 8004af0:	6839      	ldr	r1, [r7, #0]
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f80f 	bl	8004b16 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
      return __ptr;
 8004b0a:	687b      	ldr	r3, [r7, #4]
    }
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f820 	bl	8004b68 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	bf8c      	ite	hi
 8004b30:	2301      	movhi	r3, #1
 8004b32:	2300      	movls	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d007      	beq.n	8004b54 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b4a:	d301      	bcc.n	8004b50 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004b4c:	f005 f862 	bl	8009c14 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004b50:	f005 f85d 	bl	8009c0e <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f005 f847 	bl	8009bec <_Znwj>
 8004b5e:	4603      	mov	r3, r0
      }
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004b70:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEED1Ev>:
    class unordered_multimap
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7fe febb 	bl	8003904 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEED1Ev>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4618      	mov	r0, r3
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <_Z41__static_initialization_and_destruction_0ii>:
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d107      	bne.n	8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d102      	bne.n	8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::unordered_multimap<GPIO_TIM_Mapping, GPIO_TIM_Mapping, GPIOPinHash> gpioMap;
 8004bb2:	4809      	ldr	r0, [pc, #36]	@ (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004bb4:	f7fe fd02 	bl	80035bc <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEEC1Ev>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d102      	bne.n	8004bce <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004bc8:	4803      	ldr	r0, [pc, #12]	@ (8004bd8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004bca:	f7ff ffd8 	bl	8004b7e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEED1Ev>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	200000fc 	.word	0x200000fc

08004bdc <_GLOBAL__sub_I_gpioMap>:
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004be4:	2001      	movs	r0, #1
 8004be6:	f7ff ffd7 	bl	8004b98 <_Z41__static_initialization_and_destruction_0ii>
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_GLOBAL__sub_D_gpioMap>:
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7ff ffcf 	bl	8004b98 <_Z41__static_initialization_and_destruction_0ii>
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>:
uint8_t uart_tx_buffer[UART_BUFFER_SIZE][3];
uint8_t uart_tx_head = 0;
uint8_t uart_tx_tail = 0;
bool flag_send_speed = true;

void Controll_DC_UART(UART_HandleTypeDef* huart, uint8_t add_DC, uint8_t dir, uint8_t pwm_DC) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	4608      	mov	r0, r1
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	70fb      	strb	r3, [r7, #3]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	70bb      	strb	r3, [r7, #2]
 8004c12:	4613      	mov	r3, r2
 8004c14:	707b      	strb	r3, [r7, #1]
	uint8_t next_head = (uart_tx_head + 1) % UART_BUFFER_SIZE;
 8004c16:	4b29      	ldr	r3, [pc, #164]	@ (8004cbc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc0>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	425a      	negs	r2, r3
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	f002 0207 	and.w	r2, r2, #7
 8004c26:	bf58      	it	pl
 8004c28:	4253      	negpl	r3, r2
 8004c2a:	73fb      	strb	r3, [r7, #15]

	if (next_head == uart_tx_tail) return;
 8004c2c:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc4>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	7bfa      	ldrb	r2, [r7, #15]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d03d      	beq.n	8004cb2 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xb6>

	uart_tx_buffer[uart_tx_head][0] = add_DC + dir * 128;
 8004c36:	78bb      	ldrb	r3, [r7, #2]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004cbc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc0>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	4619      	mov	r1, r3
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	4413      	add	r3, r2
 8004c46:	b2d8      	uxtb	r0, r3
 8004c48:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc4 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc8>)
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	440b      	add	r3, r1
 8004c50:	4413      	add	r3, r2
 8004c52:	4602      	mov	r2, r0
 8004c54:	701a      	strb	r2, [r3, #0]
	uart_tx_buffer[uart_tx_head][1] = pwm_DC;
 8004c56:	4b19      	ldr	r3, [pc, #100]	@ (8004cbc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc0>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4a19      	ldr	r2, [pc, #100]	@ (8004cc4 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc8>)
 8004c5e:	460b      	mov	r3, r1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	440b      	add	r3, r1
 8004c64:	4413      	add	r3, r2
 8004c66:	3301      	adds	r3, #1
 8004c68:	787a      	ldrb	r2, [r7, #1]
 8004c6a:	701a      	strb	r2, [r3, #0]
	uart_tx_buffer[uart_tx_head][2] = 0xFF;
 8004c6c:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc0>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	4a14      	ldr	r2, [pc, #80]	@ (8004cc4 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc8>)
 8004c74:	460b      	mov	r3, r1
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	440b      	add	r3, r1
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	22ff      	movs	r2, #255	@ 0xff
 8004c80:	701a      	strb	r2, [r3, #0]
	uart_tx_head = next_head;
 8004c82:	4a0e      	ldr	r2, [pc, #56]	@ (8004cbc <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc0>)
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
 8004c86:	7013      	strb	r3, [r2, #0]

	// Nếu không đang gửi, bắt đầu truyền
	if (flag_send_speed) {
 8004c88:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc8 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xcc>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d011      	beq.n	8004cb4 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xb8>
		flag_send_speed = false;
 8004c90:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc8 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xcc>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(huart, uart_tx_buffer[uart_tx_tail], 3);
 8004c96:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc4>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	4a08      	ldr	r2, [pc, #32]	@ (8004cc4 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xc8>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f003 ffd2 	bl	8008c54 <HAL_UART_Transmit_DMA>
 8004cb0:	e000      	b.n	8004cb4 <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh+0xb8>
	if (next_head == uart_tx_tail) return;
 8004cb2:	bf00      	nop
	}
}
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000130 	.word	0x20000130
 8004cc0:	20000131 	.word	0x20000131
 8004cc4:	20000118 	.word	0x20000118
 8004cc8:	20000005 	.word	0x20000005

08004ccc <_Z7compassv>:
UART5_stages uart5_stages = STAGE_NO_READ_COMPASS;
int16_t value_compass = 0;
uint8_t Buffer[2]; // Nhận giá trị góc gửi về
bool stage_send = true;
int16_t delta_value_compass;
int16_t compass(){
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
	static uint32_t time = 0;

	if(uart5_stages == STAGE_NO_READ_COMPASS){
 8004cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d50 <_Z7compassv+0x84>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <_Z7compassv+0x40>
		char data = 'z';
 8004cda:	237a      	movs	r3, #122	@ 0x7a
 8004cdc:	71fb      	strb	r3, [r7, #7]
		if(HAL_UART_Transmit_IT(&huart5,(uint8_t *)&data, 1) == HAL_OK){
 8004cde:	1dfb      	adds	r3, r7, #7
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	481b      	ldr	r0, [pc, #108]	@ (8004d54 <_Z7compassv+0x88>)
 8004ce6:	f003 ff5a 	bl	8008b9e <HAL_UART_Transmit_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d01a      	beq.n	8004d30 <_Z7compassv+0x64>
			time = HAL_GetTick();
 8004cfa:	f001 fba1 	bl	8006440 <HAL_GetTick>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4a15      	ldr	r2, [pc, #84]	@ (8004d58 <_Z7compassv+0x8c>)
 8004d02:	6013      	str	r3, [r2, #0]
			uart5_stages = STAGE_READ_START;
 8004d04:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <_Z7compassv+0x84>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e011      	b.n	8004d30 <_Z7compassv+0x64>
		}
	}else{
		if(HAL_GetTick() - time >= 1000){
 8004d0c:	f001 fb98 	bl	8006440 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	4b11      	ldr	r3, [pc, #68]	@ (8004d58 <_Z7compassv+0x8c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	bf8c      	ite	hi
 8004d20:	2301      	movhi	r3, #1
 8004d22:	2300      	movls	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <_Z7compassv+0x64>
			uart5_stages = STAGE_NO_READ_COMPASS;
 8004d2a:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <_Z7compassv+0x84>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
		}
	}
	return value_compass - delta_value_compass;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	@ (8004d5c <_Z7compassv+0x90>)
 8004d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	4b09      	ldr	r3, [pc, #36]	@ (8004d60 <_Z7compassv+0x94>)
 8004d3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	b21b      	sxth	r3, r3
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000132 	.word	0x20000132
 8004d54:	2000044c 	.word	0x2000044c
 8004d58:	2000013c 	.word	0x2000013c
 8004d5c:	20000134 	.word	0x20000134
 8004d60:	2000013a 	.word	0x2000013a

08004d64 <_Z13reset_compassv>:

static bool st_reset_angle = true;
void reset_compass(){
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
//
//		uart5_stages = STAGE_RESET_COMPASS;
//		HAL_UART_Transmit_IT(&huart5, (uint8_t*)&flag_reset, 1);
//		st_reset_angle = false;
//	}
	delta_value_compass = value_compass;
 8004d68:	4b04      	ldr	r3, [pc, #16]	@ (8004d7c <_Z13reset_compassv+0x18>)
 8004d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004d6e:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <_Z13reset_compassv+0x1c>)
 8004d70:	801a      	strh	r2, [r3, #0]


//	HAL_UART_Transmit_IT(&huart5, (uint8_t*)&flag_reset, 1);
//	uart5_stages = STAGE_RESET_COMPASS;
}
 8004d72:	bf00      	nop
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	20000134 	.word	0x20000134
 8004d80:	2000013a 	.word	0x2000013a

08004d84 <_Z3ps4v>:
UART3_stages uart3_stages = STAGE_NO_READ;
uint16_t button;
char flag_esp32 = '0';
int16_t LX,LY,RX,RY;
bool st_debug = false;
void ps4(){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0

	static uint32_t time = 0;

	if(uart3_stages == STAGE_NO_READ && flag_esp32 == '0'){
 8004d8a:	4b22      	ldr	r3, [pc, #136]	@ (8004e14 <_Z3ps4v+0x90>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d126      	bne.n	8004de0 <_Z3ps4v+0x5c>
 8004d92:	4b21      	ldr	r3, [pc, #132]	@ (8004e18 <_Z3ps4v+0x94>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b30      	cmp	r3, #48	@ 0x30
 8004d98:	d122      	bne.n	8004de0 <_Z3ps4v+0x5c>
		char start = '!';
 8004d9a:	2321      	movs	r3, #33	@ 0x21
 8004d9c:	71fb      	strb	r3, [r7, #7]
		uart3_stages = STAGE_READ_BUTTON;
 8004d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <_Z3ps4v+0x90>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
		time = HAL_GetTick();
 8004da4:	f001 fb4c 	bl	8006440 <HAL_GetTick>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a1c      	ldr	r2, [pc, #112]	@ (8004e1c <_Z3ps4v+0x98>)
 8004dac:	6013      	str	r3, [r2, #0]
		if(len_uart3 == 0){
 8004dae:	4b1c      	ldr	r3, [pc, #112]	@ (8004e20 <_Z3ps4v+0x9c>)
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d106      	bne.n	8004dc4 <_Z3ps4v+0x40>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)&start, 1);
 8004db6:	1dfb      	adds	r3, r7, #7
 8004db8:	2201      	movs	r2, #1
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4819      	ldr	r0, [pc, #100]	@ (8004e24 <_Z3ps4v+0xa0>)
 8004dbe:	f003 ff49 	bl	8008c54 <HAL_UART_Transmit_DMA>
		}else{
			buffer[0] = start;
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer, len_uart3);
			len_uart3 = 0;
		}
	}else{
 8004dc2:	e023      	b.n	8004e0c <_Z3ps4v+0x88>
			buffer[0] = start;
 8004dc4:	79fa      	ldrb	r2, [r7, #7]
 8004dc6:	4b18      	ldr	r3, [pc, #96]	@ (8004e28 <_Z3ps4v+0xa4>)
 8004dc8:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*)&buffer, len_uart3);
 8004dca:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <_Z3ps4v+0x9c>)
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4915      	ldr	r1, [pc, #84]	@ (8004e28 <_Z3ps4v+0xa4>)
 8004dd2:	4814      	ldr	r0, [pc, #80]	@ (8004e24 <_Z3ps4v+0xa0>)
 8004dd4:	f003 ff3e 	bl	8008c54 <HAL_UART_Transmit_DMA>
			len_uart3 = 0;
 8004dd8:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <_Z3ps4v+0x9c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	801a      	strh	r2, [r3, #0]
	}else{
 8004dde:	e015      	b.n	8004e0c <_Z3ps4v+0x88>
		if(HAL_GetTick() - time >= 1500){
 8004de0:	f001 fb2e 	bl	8006440 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <_Z3ps4v+0x98>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f240 52db 	movw	r2, #1499	@ 0x5db
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bf8c      	ite	hi
 8004df4:	2301      	movhi	r3, #1
 8004df6:	2300      	movls	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d006      	beq.n	8004e0c <_Z3ps4v+0x88>
			uart3_stages = STAGE_NO_READ;
 8004dfe:	4b05      	ldr	r3, [pc, #20]	@ (8004e14 <_Z3ps4v+0x90>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
			flag_esp32 = '0';
 8004e04:	4b04      	ldr	r3, [pc, #16]	@ (8004e18 <_Z3ps4v+0x94>)
 8004e06:	2230      	movs	r2, #48	@ 0x30
 8004e08:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8004e0a:	e7ff      	b.n	8004e0c <_Z3ps4v+0x88>
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000244 	.word	0x20000244
 8004e18:	20000007 	.word	0x20000007
 8004e1c:	20000250 	.word	0x20000250
 8004e20:	20000242 	.word	0x20000242
 8004e24:	20000494 	.word	0x20000494
 8004e28:	20000140 	.word	0x20000140

08004e2c <HAL_UART_TxCpltCallback>:





void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	//////////////*********** UART4  *******************///////
	if(huart->Instance == huart4.Instance){ // 4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	4b2c      	ldr	r3, [pc, #176]	@ (8004eec <HAL_UART_TxCpltCallback+0xc0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d123      	bne.n	8004e88 <HAL_UART_TxCpltCallback+0x5c>

		//flag_send_speed = true;
	    uart_tx_tail = (uart_tx_tail + 1) % UART_BUFFER_SIZE;
 8004e40:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef0 <HAL_UART_TxCpltCallback+0xc4>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	3301      	adds	r3, #1
 8004e46:	425a      	negs	r2, r3
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	f002 0207 	and.w	r2, r2, #7
 8004e50:	bf58      	it	pl
 8004e52:	4253      	negpl	r3, r2
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4b26      	ldr	r3, [pc, #152]	@ (8004ef0 <HAL_UART_TxCpltCallback+0xc4>)
 8004e58:	701a      	strb	r2, [r3, #0]

	    if (uart_tx_tail != uart_tx_head) {
 8004e5a:	4b25      	ldr	r3, [pc, #148]	@ (8004ef0 <HAL_UART_TxCpltCallback+0xc4>)
 8004e5c:	781a      	ldrb	r2, [r3, #0]
 8004e5e:	4b25      	ldr	r3, [pc, #148]	@ (8004ef4 <HAL_UART_TxCpltCallback+0xc8>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d00d      	beq.n	8004e82 <HAL_UART_TxCpltCallback+0x56>
	        HAL_UART_Transmit_DMA(huart, uart_tx_buffer[uart_tx_tail], 3);
 8004e66:	4b22      	ldr	r3, [pc, #136]	@ (8004ef0 <HAL_UART_TxCpltCallback+0xc4>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	4a21      	ldr	r2, [pc, #132]	@ (8004ef8 <HAL_UART_TxCpltCallback+0xcc>)
 8004e74:	4413      	add	r3, r2
 8004e76:	2203      	movs	r2, #3
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f003 feea 	bl	8008c54 <HAL_UART_Transmit_DMA>
 8004e80:	e002      	b.n	8004e88 <HAL_UART_TxCpltCallback+0x5c>
	    } else {
	        flag_send_speed = true;
 8004e82:	4b1e      	ldr	r3, [pc, #120]	@ (8004efc <HAL_UART_TxCpltCallback+0xd0>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
	    }
		//flag_send_speed = true;
	}

	///////************** UART5  ******************//////////
	if(huart->Instance == huart5.Instance){
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <HAL_UART_TxCpltCallback+0xd4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d10f      	bne.n	8004eb4 <HAL_UART_TxCpltCallback+0x88>
		if(uart5_stages == STAGE_RESET_COMPASS){
 8004e94:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <HAL_UART_TxCpltCallback+0xd8>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d106      	bne.n	8004eaa <HAL_UART_TxCpltCallback+0x7e>
			st_reset_angle = true;
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f08 <HAL_UART_TxCpltCallback+0xdc>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	701a      	strb	r2, [r3, #0]
			uart5_stages = STAGE_NO_READ_COMPASS;
 8004ea2:	4b18      	ldr	r3, [pc, #96]	@ (8004f04 <HAL_UART_TxCpltCallback+0xd8>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
 8004ea8:	e004      	b.n	8004eb4 <HAL_UART_TxCpltCallback+0x88>
		}else{
			HAL_UART_Receive_IT(huart, (uint8_t*)&Buffer, 2);
 8004eaa:	2202      	movs	r2, #2
 8004eac:	4917      	ldr	r1, [pc, #92]	@ (8004f0c <HAL_UART_TxCpltCallback+0xe0>)
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f003 feaa 	bl	8008c08 <HAL_UART_Receive_IT>
		}

	}

	if(huart->Instance == huart3.Instance){
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <HAL_UART_TxCpltCallback+0xe4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d110      	bne.n	8004ee2 <HAL_UART_TxCpltCallback+0xb6>
		if(uart3_stages == STAGE_READ_BUTTON){
 8004ec0:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <HAL_UART_TxCpltCallback+0xe8>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d105      	bne.n	8004ed4 <HAL_UART_TxCpltCallback+0xa8>
			HAL_UART_Receive_DMA(huart, (uint8_t*)&flag_esp32, 1);
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4913      	ldr	r1, [pc, #76]	@ (8004f18 <HAL_UART_TxCpltCallback+0xec>)
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f003 ff31 	bl	8008d34 <HAL_UART_Receive_DMA>
		}else if(uart3_stages == STAGE_DEBUG){
			uart3_stages = STAGE_NO_READ;
		}

	}
}
 8004ed2:	e006      	b.n	8004ee2 <HAL_UART_TxCpltCallback+0xb6>
		}else if(uart3_stages == STAGE_DEBUG){
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <HAL_UART_TxCpltCallback+0xe8>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	2b06      	cmp	r3, #6
 8004eda:	d102      	bne.n	8004ee2 <HAL_UART_TxCpltCallback+0xb6>
			uart3_stages = STAGE_NO_READ;
 8004edc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f14 <HAL_UART_TxCpltCallback+0xe8>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
}
 8004ee2:	bf00      	nop
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000404 	.word	0x20000404
 8004ef0:	20000131 	.word	0x20000131
 8004ef4:	20000130 	.word	0x20000130
 8004ef8:	20000118 	.word	0x20000118
 8004efc:	20000005 	.word	0x20000005
 8004f00:	2000044c 	.word	0x2000044c
 8004f04:	20000132 	.word	0x20000132
 8004f08:	20000006 	.word	0x20000006
 8004f0c:	20000138 	.word	0x20000138
 8004f10:	20000494 	.word	0x20000494
 8004f14:	20000244 	.word	0x20000244
 8004f18:	20000007 	.word	0x20000007

08004f1c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]

	if(huart->Instance == huart5.Instance){
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b35      	ldr	r3, [pc, #212]	@ (8005000 <HAL_UART_RxCpltCallback+0xe4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d10d      	bne.n	8004f4c <HAL_UART_RxCpltCallback+0x30>

		value_compass = (int16_t)((Buffer[0] << 8) | Buffer[1]);
 8004f30:	4b34      	ldr	r3, [pc, #208]	@ (8005004 <HAL_UART_RxCpltCallback+0xe8>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	b21a      	sxth	r2, r3
 8004f38:	4b32      	ldr	r3, [pc, #200]	@ (8005004 <HAL_UART_RxCpltCallback+0xe8>)
 8004f3a:	785b      	ldrb	r3, [r3, #1]
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b21a      	sxth	r2, r3
 8004f42:	4b31      	ldr	r3, [pc, #196]	@ (8005008 <HAL_UART_RxCpltCallback+0xec>)
 8004f44:	801a      	strh	r2, [r3, #0]
		uart5_stages = STAGE_NO_READ_COMPASS;
 8004f46:	4b31      	ldr	r3, [pc, #196]	@ (800500c <HAL_UART_RxCpltCallback+0xf0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
	}


	if(huart->Instance == huart3.Instance){
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b2f      	ldr	r3, [pc, #188]	@ (8005010 <HAL_UART_RxCpltCallback+0xf4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d150      	bne.n	8004ffa <HAL_UART_RxCpltCallback+0xde>

			if(flag_esp32 != '{'){
 8004f58:	4b2e      	ldr	r3, [pc, #184]	@ (8005014 <HAL_UART_RxCpltCallback+0xf8>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b7b      	cmp	r3, #123	@ 0x7b
 8004f5e:	d005      	beq.n	8004f6c <HAL_UART_RxCpltCallback+0x50>
				HAL_UART_Receive_DMA(&huart3, (uint8_t*)&flag_esp32, 1);
 8004f60:	2201      	movs	r2, #1
 8004f62:	492c      	ldr	r1, [pc, #176]	@ (8005014 <HAL_UART_RxCpltCallback+0xf8>)
 8004f64:	482a      	ldr	r0, [pc, #168]	@ (8005010 <HAL_UART_RxCpltCallback+0xf4>)
 8004f66:	f003 fee5 	bl	8008d34 <HAL_UART_Receive_DMA>
				return;
 8004f6a:	e046      	b.n	8004ffa <HAL_UART_RxCpltCallback+0xde>
			}else{
				switch(uart3_stages){
 8004f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005018 <HAL_UART_RxCpltCallback+0xfc>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b06      	cmp	r3, #6
 8004f72:	d842      	bhi.n	8004ffa <HAL_UART_RxCpltCallback+0xde>
 8004f74:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <HAL_UART_RxCpltCallback+0x60>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004ff3 	.word	0x08004ff3
 8004f80:	08004f99 	.word	0x08004f99
 8004f84:	08004fab 	.word	0x08004fab
 8004f88:	08004fbd 	.word	0x08004fbd
 8004f8c:	08004fcf 	.word	0x08004fcf
 8004f90:	08004fe1 	.word	0x08004fe1
 8004f94:	08004ffb 	.word	0x08004ffb

				case STAGE_READ_BUTTON:
					uart3_stages = STAGE_READ_LX;
 8004f98:	4b1f      	ldr	r3, [pc, #124]	@ (8005018 <HAL_UART_RxCpltCallback+0xfc>)
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(huart, (uint8_t*)&button, 2);
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	491e      	ldr	r1, [pc, #120]	@ (800501c <HAL_UART_RxCpltCallback+0x100>)
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f003 fec6 	bl	8008d34 <HAL_UART_Receive_DMA>
					break;
 8004fa8:	e027      	b.n	8004ffa <HAL_UART_RxCpltCallback+0xde>

				case STAGE_READ_LX:
					uart3_stages = STAGE_READ_LY;
 8004faa:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_UART_RxCpltCallback+0xfc>)
 8004fac:	2203      	movs	r2, #3
 8004fae:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(huart, (uint8_t*)&LX, 2);
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	491b      	ldr	r1, [pc, #108]	@ (8005020 <HAL_UART_RxCpltCallback+0x104>)
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f003 febd 	bl	8008d34 <HAL_UART_Receive_DMA>
					break;
 8004fba:	e01e      	b.n	8004ffa <HAL_UART_RxCpltCallback+0xde>

				case STAGE_READ_LY:
					uart3_stages = STAGE_READ_RX;
 8004fbc:	4b16      	ldr	r3, [pc, #88]	@ (8005018 <HAL_UART_RxCpltCallback+0xfc>)
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(huart, (uint8_t*)&LY, 2);
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	4917      	ldr	r1, [pc, #92]	@ (8005024 <HAL_UART_RxCpltCallback+0x108>)
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f003 feb4 	bl	8008d34 <HAL_UART_Receive_DMA>
					break;
 8004fcc:	e015      	b.n	8004ffa <HAL_UART_RxCpltCallback+0xde>

				case STAGE_READ_RX:
					uart3_stages = STAGE_READ_RY;
 8004fce:	4b12      	ldr	r3, [pc, #72]	@ (8005018 <HAL_UART_RxCpltCallback+0xfc>)
 8004fd0:	2205      	movs	r2, #5
 8004fd2:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(huart, (uint8_t*)&RX, 2);
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	4914      	ldr	r1, [pc, #80]	@ (8005028 <HAL_UART_RxCpltCallback+0x10c>)
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f003 feab 	bl	8008d34 <HAL_UART_Receive_DMA>
					break;
 8004fde:	e00c      	b.n	8004ffa <HAL_UART_RxCpltCallback+0xde>

				case STAGE_READ_RY:
					uart3_stages = STAGE_NO_READ;
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <HAL_UART_RxCpltCallback+0xfc>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_DMA(huart, (uint8_t*)&RY, 2);
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	4910      	ldr	r1, [pc, #64]	@ (800502c <HAL_UART_RxCpltCallback+0x110>)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f003 fea2 	bl	8008d34 <HAL_UART_Receive_DMA>
					break;
 8004ff0:	e003      	b.n	8004ffa <HAL_UART_RxCpltCallback+0xde>

				case STAGE_NO_READ:
					//st_data_dg = true;
					flag_esp32 = '0';
 8004ff2:	4b08      	ldr	r3, [pc, #32]	@ (8005014 <HAL_UART_RxCpltCallback+0xf8>)
 8004ff4:	2230      	movs	r2, #48	@ 0x30
 8004ff6:	701a      	strb	r2, [r3, #0]
					break;
 8004ff8:	bf00      	nop


		}


}
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2000044c 	.word	0x2000044c
 8005004:	20000138 	.word	0x20000138
 8005008:	20000134 	.word	0x20000134
 800500c:	20000132 	.word	0x20000132
 8005010:	20000494 	.word	0x20000494
 8005014:	20000007 	.word	0x20000007
 8005018:	20000244 	.word	0x20000244
 800501c:	20000246 	.word	0x20000246
 8005020:	20000248 	.word	0x20000248
 8005024:	2000024a 	.word	0x2000024a
 8005028:	2000024c 	.word	0x2000024c
 800502c:	2000024e 	.word	0x2000024e

08005030 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefts>:
	Motor_PID(GPIO_TypeDef* Port_Dir, uint32_t Pin_Dir , TIM_HandleTypeDef* htim,uint16_t TIM_CHANNEL,int16_t angle_val):
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
		Port_Dir(Port_Dir),Pin_Dir(Pin_Dir),htim(htim),TIM_CHANNEL(TIM_CHANNEL){
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8b3a      	ldrh	r2, [r7, #24]
 8005054:	819a      	strh	r2, [r3, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	611a      	str	r2, [r3, #16]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	751a      	strb	r2, [r3, #20]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	755a      	strb	r2, [r3, #21]
	    if(st_add_map){
 8005068:	4b1e      	ldr	r3, [pc, #120]	@ (80050e4 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefts+0xb4>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <_ZN9Motor_PIDC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefts+0x4a>
	    	Add_Map_STM32F103xx();
 8005070:	f7fe fae0 	bl	8003634 <_Z19Add_Map_STM32F103xxv>
	    	st_add_map = false;
 8005074:	4b1b      	ldr	r3, [pc, #108]	@ (80050e4 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefts+0xb4>)
 8005076:	2200      	movs	r2, #0
 8005078:	701a      	strb	r2, [r3, #0]
		angle[0] = angle_val;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8bba      	ldrh	r2, [r7, #28]
 800507e:	82da      	strh	r2, [r3, #22]
	    mode = true;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	751a      	strb	r2, [r3, #20]
		GPIO_OUT_Init(Port_Dir, Pin_Dir, GPIO_SPEED_FREQ_HIGH);
 8005086:	2203      	movs	r2, #3
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	68b8      	ldr	r0, [r7, #8]
 800508c:	f7fe f94e 	bl	800332c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>
		HAL_GPIO_WritePin(Port_Dir, Pin_Dir, GPIO_PIN_SET);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	b29b      	uxth	r3, r3
 8005094:	2201      	movs	r2, #1
 8005096:	4619      	mov	r1, r3
 8005098:	68b8      	ldr	r0, [r7, #8]
 800509a:	f002 f918 	bl	80072ce <HAL_GPIO_WritePin>
		if(angle[0] > 0) angle[1] = angle[0] - 900;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	dd09      	ble.n	80050bc <_ZN9Motor_PIDC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefts+0x8c>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	b21a      	sxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	831a      	strh	r2, [r3, #24]
		if(angle[0] < 0) angle[1] = angle[0] + 900;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	da09      	bge.n	80050da <_ZN9Motor_PIDC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefts+0xaa>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	831a      	strh	r2, [r3, #24]
	}
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000008 	.word	0x20000008

080050e8 <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefhs>:
	Motor_PID(UART_HandleTypeDef* huart,uint8_t address_DC,int16_t angle_val) : huart(huart), address_DC(address_DC){
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	460b      	mov	r3, r1
 80050f8:	71fb      	strb	r3, [r7, #7]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80bb      	strh	r3, [r7, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	611a      	str	r2, [r3, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2201      	movs	r2, #1
 8005114:	751a      	strb	r2, [r3, #20]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	79fa      	ldrb	r2, [r7, #7]
 800511a:	755a      	strb	r2, [r3, #21]
		mode = false;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	751a      	strb	r2, [r3, #20]
		angle[0] = angle_val;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88ba      	ldrh	r2, [r7, #4]
 8005126:	82da      	strh	r2, [r3, #22]
		if(angle[0] > 0) angle[1] = angle[0] - 900;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800512e:	2b00      	cmp	r3, #0
 8005130:	dd09      	ble.n	8005146 <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefhs+0x5e>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 800513e:	b29b      	uxth	r3, r3
 8005140:	b21a      	sxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	831a      	strh	r2, [r3, #24]
		if(angle[0] < 0) angle[1] = angle[0] + 900;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800514c:	2b00      	cmp	r3, #0
 800514e:	da09      	bge.n	8005164 <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefhs+0x7c>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 800515c:	b29b      	uxth	r3, r3
 800515e:	b21a      	sxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	831a      	strh	r2, [r3, #24]
	}
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr

08005170 <_ZN11Module_shotC1EP20__UART_HandleTypeDefhlllP17TIM_HandleTypeDefl>:
	Module_shot(UART_HandleTypeDef* huart,uint8_t address_DC,int32_t encode_for_round,int32_t angle_low,int32_t angle_high,TIM_HandleTypeDef* htim,int32_t encoder_limit)
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
	: huart(huart),address_DC(address_DC), encoder_for_round(encode_for_round), angle_low(angle_low),angle_high(angle_high),htim(htim),encoder_limit(encoder_limit){
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	79fa      	ldrb	r2, [r7, #7]
 800518a:	711a      	strb	r2, [r3, #4]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	715a      	strb	r2, [r3, #5]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	609a      	str	r2, [r3, #8]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	60da      	str	r2, [r3, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	611a      	str	r2, [r3, #16]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	615a      	str	r2, [r3, #20]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ae:	619a      	str	r2, [r3, #24]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	61da      	str	r2, [r3, #28]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	621a      	str	r2, [r3, #32]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	869a      	strh	r2, [r3, #52]	@ 0x34
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	63da      	str	r2, [r3, #60]	@ 0x3c
		mode = tim;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	715a      	strb	r2, [r3, #5]
	}
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005204:	f001 f8c4 	bl	8006390 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005208:	f000 f862 	bl	80052d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800520c:	f000 fbc4 	bl	8005998 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8005210:	f000 fb88 	bl	8005924 <_ZL11MX_DMA_Initv>
  MX_TIM4_Init();
 8005214:	f000 fa00 	bl	8005618 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 8005218:	f000 fa5c 	bl	80056d4 <_ZL12MX_TIM5_Initv>
  MX_TIM2_Init();
 800521c:	f000 f940 	bl	80054a0 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8005220:	f000 f99c 	bl	800555c <_ZL12MX_TIM3_Initv>
  MX_UART4_Init();
 8005224:	f000 faf4 	bl	8005810 <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8005228:	f000 fb20 	bl	800586c <_ZL13MX_UART5_Initv>
  MX_USART3_UART_Init();
 800522c:	f000 fb4c 	bl	80058c8 <_ZL19MX_USART3_UART_Initv>
  MX_TIM6_Init();
 8005230:	f000 faae 	bl	8005790 <_ZL12MX_TIM6_Initv>
  MX_TIM1_Init();
 8005234:	f000 f89c 	bl	8005370 <_ZL12MX_TIM1_Initv>
  /* USER CODE BEGIN 2 */
  GPIO_OUT_Init(GPIOC, GPIO_PIN_8, GPIO_SPEED_FREQ_LOW);
 8005238:	2202      	movs	r2, #2
 800523a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800523e:	481c      	ldr	r0, [pc, #112]	@ (80052b0 <main+0xb0>)
 8005240:	f7fe f874 	bl	800332c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>
  GPIO_OUT_Init(GPIOB, GPIO_PIN_5, GPIO_SPEED_FREQ_LOW);
 8005244:	2202      	movs	r2, #2
 8005246:	2120      	movs	r1, #32
 8005248:	481a      	ldr	r0, [pc, #104]	@ (80052b4 <main+0xb4>)
 800524a:	f7fe f86f 	bl	800332c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>
  GPIO_OUT_Init(GPIOC, GPIO_PIN_4, GPIO_SPEED_FREQ_LOW);
 800524e:	2202      	movs	r2, #2
 8005250:	2110      	movs	r1, #16
 8005252:	4817      	ldr	r0, [pc, #92]	@ (80052b0 <main+0xb0>)
 8005254:	f7fe f86a 	bl	800332c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>
  GPIO_OUT_Init(GPIOB, GPIO_PIN_7, GPIO_SPEED_FREQ_LOW);
 8005258:	2202      	movs	r2, #2
 800525a:	2180      	movs	r1, #128	@ 0x80
 800525c:	4815      	ldr	r0, [pc, #84]	@ (80052b4 <main+0xb4>)
 800525e:	f7fe f865 	bl	800332c <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>
  off_xilanh_ban();
 8005262:	f7fd fa8d 	bl	8002780 <_Z14off_xilanh_banv>
  off_xilanh_day();
 8005266:	f7fd fabb 	bl	80027e0 <_Z14off_xilanh_dayv>
  on_canh_tay();
 800526a:	f7fd fa95 	bl	8002798 <_Z11on_canh_tayv>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800526e:	213c      	movs	r1, #60	@ 0x3c
 8005270:	4811      	ldr	r0, [pc, #68]	@ (80052b8 <main+0xb8>)
 8005272:	f002 feb1 	bl	8007fd8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8005276:	213c      	movs	r1, #60	@ 0x3c
 8005278:	4810      	ldr	r0, [pc, #64]	@ (80052bc <main+0xbc>)
 800527a:	f002 fead 	bl	8007fd8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800527e:	213c      	movs	r1, #60	@ 0x3c
 8005280:	480f      	ldr	r0, [pc, #60]	@ (80052c0 <main+0xc0>)
 8005282:	f002 fea9 	bl	8007fd8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8005286:	213c      	movs	r1, #60	@ 0x3c
 8005288:	480e      	ldr	r0, [pc, #56]	@ (80052c4 <main+0xc4>)
 800528a:	f002 fea5 	bl	8007fd8 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800528e:	2100      	movs	r1, #0
 8005290:	480d      	ldr	r0, [pc, #52]	@ (80052c8 <main+0xc8>)
 8005292:	f002 fd45 	bl	8007d20 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8005296:	480d      	ldr	r0, [pc, #52]	@ (80052cc <main+0xcc>)
 8005298:	f002 fc92 	bl	8007bc0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ps4();
 800529c:	f7ff fd72 	bl	8004d84 <_Z3ps4v>
//	  int16_t en_4 = __HAL_TIM_GET_COUNTER(&htim4);
//	  Debug("angle = %d  en_1 = %d  en_2 = %d  en_3 = %d  en_4 = %d ",angle,en_1,en_2,en_3,en_4);
	  //DC_SHOT[1].update_position();
//	  Debug("encoder goc ban : %d   angle_module : %d",DC_SHOT[1].encoder_module,DC_SHOT[1].angle_module);
	 // Debug("encoder goc ban = %d   counter = %d  level_couter = %d",DC_SHOT[1].encoder_module,en_3,DC_SHOT[1].level_count);
	  run_basic();
 80052a0:	f7fd fcca 	bl	8002c38 <_Z9run_basicv>
	  dap_bong();
 80052a4:	f7fd fbf2 	bl	8002a8c <_Z8dap_bongv>
	  ban_bong();
 80052a8:	f7fd faa6 	bl	80027f8 <_Z8ban_bongv>
	  ps4();
 80052ac:	bf00      	nop
 80052ae:	e7f5      	b.n	800529c <main+0x9c>
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40010c00 	.word	0x40010c00
 80052b8:	200002e4 	.word	0x200002e4
 80052bc:	2000029c 	.word	0x2000029c
 80052c0:	2000032c 	.word	0x2000032c
 80052c4:	20000374 	.word	0x20000374
 80052c8:	20000254 	.word	0x20000254
 80052cc:	200003bc 	.word	0x200003bc

080052d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b090      	sub	sp, #64	@ 0x40
 80052d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80052d6:	f107 0318 	add.w	r3, r7, #24
 80052da:	2228      	movs	r2, #40	@ 0x28
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f006 f93a 	bl	800b558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80052f2:	2301      	movs	r3, #1
 80052f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80052f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80052fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80052fc:	2300      	movs	r3, #0
 80052fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005300:	2301      	movs	r3, #1
 8005302:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005304:	2302      	movs	r3, #2
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800530e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8005312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005314:	f107 0318 	add.w	r3, r7, #24
 8005318:	4618      	mov	r0, r3
 800531a:	f001 fff1 	bl	8007300 <HAL_RCC_OscConfig>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800532e:	f000 fb6d 	bl	8005a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005332:	230f      	movs	r3, #15
 8005334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005336:	2302      	movs	r3, #2
 8005338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800533e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005348:	1d3b      	adds	r3, r7, #4
 800534a:	2102      	movs	r1, #2
 800534c:	4618      	mov	r0, r3
 800534e:	f002 fa59 	bl	8007804 <HAL_RCC_ClockConfig>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	bf14      	ite	ne
 8005358:	2301      	movne	r3, #1
 800535a:	2300      	moveq	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 8005362:	f000 fb53 	bl	8005a0c <Error_Handler>
  }
}
 8005366:	bf00      	nop
 8005368:	3740      	adds	r7, #64	@ 0x40
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <_ZL12MX_TIM1_Initv>:
  * @retval None
  */


static void MX_TIM1_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b092      	sub	sp, #72	@ 0x48
 8005374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005376:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005380:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	605a      	str	r2, [r3, #4]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	611a      	str	r2, [r3, #16]
 8005390:	615a      	str	r2, [r3, #20]
 8005392:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	2220      	movs	r2, #32
 8005398:	2100      	movs	r1, #0
 800539a:	4618      	mov	r0, r3
 800539c:	f006 f8dc 	bl	800b558 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80053a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053a2:	4a3e      	ldr	r2, [pc, #248]	@ (800549c <_ZL12MX_TIM1_Initv+0x12c>)
 80053a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 239;
 80053a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053a8:	22ef      	movs	r2, #239	@ 0xef
 80053aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 299;
 80053b2:	4b39      	ldr	r3, [pc, #228]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053b4:	f240 122b 	movw	r2, #299	@ 0x12b
 80053b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ba:	4b37      	ldr	r3, [pc, #220]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053bc:	2200      	movs	r2, #0
 80053be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80053c0:	4b35      	ldr	r3, [pc, #212]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053c6:	4b34      	ldr	r3, [pc, #208]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80053cc:	4832      	ldr	r0, [pc, #200]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053ce:	f002 fc57 	bl	8007c80 <HAL_TIM_PWM_Init>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80053e2:	f000 fb13 	bl	8005a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053e6:	2300      	movs	r3, #0
 80053e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80053f2:	4619      	mov	r1, r3
 80053f4:	4828      	ldr	r0, [pc, #160]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 80053f6:	f003 fab3 	bl	8008960 <HAL_TIMEx_MasterConfigSynchronization>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800540a:	f000 faff 	bl	8005a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800540e:	2360      	movs	r3, #96	@ 0x60
 8005410:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005416:	2300      	movs	r3, #0
 8005418:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800541a:	2300      	movs	r3, #0
 800541c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800541e:	2300      	movs	r3, #0
 8005420:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005422:	2300      	movs	r3, #0
 8005424:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800542a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800542e:	2200      	movs	r2, #0
 8005430:	4619      	mov	r1, r3
 8005432:	4819      	ldr	r0, [pc, #100]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 8005434:	f002 ff4e 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf14      	ite	ne
 800543e:	2301      	movne	r3, #1
 8005440:	2300      	moveq	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8005448:	f000 fae0 	bl	8005a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800544c:	2300      	movs	r3, #0
 800544e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800545c:	2300      	movs	r3, #0
 800545e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005460:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005464:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005466:	2300      	movs	r3, #0
 8005468:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800546a:	1d3b      	adds	r3, r7, #4
 800546c:	4619      	mov	r1, r3
 800546e:	480a      	ldr	r0, [pc, #40]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 8005470:	f003 fae2 	bl	8008a38 <HAL_TIMEx_ConfigBreakDeadTime>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf14      	ite	ne
 800547a:	2301      	movne	r3, #1
 800547c:	2300      	moveq	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8005484:	f000 fac2 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005488:	4803      	ldr	r0, [pc, #12]	@ (8005498 <_ZL12MX_TIM1_Initv+0x128>)
 800548a:	f000 fce7 	bl	8005e5c <HAL_TIM_MspPostInit>

}
 800548e:	bf00      	nop
 8005490:	3748      	adds	r7, #72	@ 0x48
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000254 	.word	0x20000254
 800549c:	40012c00 	.word	0x40012c00

080054a0 <_ZL12MX_TIM2_Initv>:


static void MX_TIM2_Init(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08c      	sub	sp, #48	@ 0x30
 80054a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	2224      	movs	r2, #36	@ 0x24
 80054ac:	2100      	movs	r1, #0
 80054ae:	4618      	mov	r0, r3
 80054b0:	f006 f852 	bl	800b558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80054bc:	4b26      	ldr	r3, [pc, #152]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 80054be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80054c4:	4b24      	ldr	r3, [pc, #144]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ca:	4b23      	ldr	r3, [pc, #140]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80054d0:	4b21      	ldr	r3, [pc, #132]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 80054d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80054d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054d8:	4b1f      	ldr	r3, [pc, #124]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 80054da:	2200      	movs	r2, #0
 80054dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054de:	4b1e      	ldr	r3, [pc, #120]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80054e4:	2303      	movs	r3, #3
 80054e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054e8:	2300      	movs	r3, #0
 80054ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054f8:	2300      	movs	r3, #0
 80054fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054fc:	2301      	movs	r3, #1
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005500:	2300      	movs	r3, #0
 8005502:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	4619      	mov	r1, r3
 800550e:	4812      	ldr	r0, [pc, #72]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 8005510:	f002 fcc0 	bl	8007e94 <HAL_TIM_Encoder_Init>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8005524:	f000 fa72 	bl	8005a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005528:	2300      	movs	r3, #0
 800552a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800552c:	2300      	movs	r3, #0
 800552e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005530:	1d3b      	adds	r3, r7, #4
 8005532:	4619      	mov	r1, r3
 8005534:	4808      	ldr	r0, [pc, #32]	@ (8005558 <_ZL12MX_TIM2_Initv+0xb8>)
 8005536:	f003 fa13 	bl	8008960 <HAL_TIMEx_MasterConfigSynchronization>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	bf14      	ite	ne
 8005540:	2301      	movne	r3, #1
 8005542:	2300      	moveq	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800554a:	f000 fa5f 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800554e:	bf00      	nop
 8005550:	3730      	adds	r7, #48	@ 0x30
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	2000029c 	.word	0x2000029c

0800555c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08c      	sub	sp, #48	@ 0x30
 8005560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005562:	f107 030c 	add.w	r3, r7, #12
 8005566:	2224      	movs	r2, #36	@ 0x24
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f005 fff4 	bl	800b558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005570:	1d3b      	adds	r3, r7, #4
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005578:	4b25      	ldr	r3, [pc, #148]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 800557a:	4a26      	ldr	r2, [pc, #152]	@ (8005614 <_ZL12MX_TIM3_Initv+0xb8>)
 800557c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800557e:	4b24      	ldr	r3, [pc, #144]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 8005580:	2200      	movs	r2, #0
 8005582:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005584:	4b22      	ldr	r3, [pc, #136]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 8005586:	2200      	movs	r2, #0
 8005588:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800558a:	4b21      	ldr	r3, [pc, #132]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 800558c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005590:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005592:	4b1f      	ldr	r3, [pc, #124]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 8005594:	2200      	movs	r2, #0
 8005596:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005598:	4b1d      	ldr	r3, [pc, #116]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 800559a:	2200      	movs	r2, #0
 800559c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800559e:	2303      	movs	r3, #3
 80055a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80055a6:	2301      	movs	r3, #1
 80055a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80055b2:	2300      	movs	r3, #0
 80055b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80055b6:	2301      	movs	r3, #1
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80055ba:	2300      	movs	r3, #0
 80055bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80055c2:	f107 030c 	add.w	r3, r7, #12
 80055c6:	4619      	mov	r1, r3
 80055c8:	4811      	ldr	r0, [pc, #68]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 80055ca:	f002 fc63 	bl	8007e94 <HAL_TIM_Encoder_Init>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80055de:	f000 fa15 	bl	8005a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055e2:	2300      	movs	r3, #0
 80055e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	4808      	ldr	r0, [pc, #32]	@ (8005610 <_ZL12MX_TIM3_Initv+0xb4>)
 80055f0:	f003 f9b6 	bl	8008960 <HAL_TIMEx_MasterConfigSynchronization>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	bf14      	ite	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	2300      	moveq	r3, #0
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8005604:	f000 fa02 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005608:	bf00      	nop
 800560a:	3730      	adds	r7, #48	@ 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	200002e4 	.word	0x200002e4
 8005614:	40000400 	.word	0x40000400

08005618 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08c      	sub	sp, #48	@ 0x30
 800561c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800561e:	f107 030c 	add.w	r3, r7, #12
 8005622:	2224      	movs	r2, #36	@ 0x24
 8005624:	2100      	movs	r1, #0
 8005626:	4618      	mov	r0, r3
 8005628:	f005 ff96 	bl	800b558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800562c:	1d3b      	adds	r3, r7, #4
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005634:	4b25      	ldr	r3, [pc, #148]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 8005636:	4a26      	ldr	r2, [pc, #152]	@ (80056d0 <_ZL12MX_TIM4_Initv+0xb8>)
 8005638:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800563a:	4b24      	ldr	r3, [pc, #144]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 800563c:	2200      	movs	r2, #0
 800563e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005640:	4b22      	ldr	r3, [pc, #136]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 8005642:	2200      	movs	r2, #0
 8005644:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005646:	4b21      	ldr	r3, [pc, #132]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 8005648:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800564c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800564e:	4b1f      	ldr	r3, [pc, #124]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 8005650:	2200      	movs	r2, #0
 8005652:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005654:	4b1d      	ldr	r3, [pc, #116]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 8005656:	2200      	movs	r2, #0
 8005658:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800565a:	2303      	movs	r3, #3
 800565c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005662:	2301      	movs	r3, #1
 8005664:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800566e:	2300      	movs	r3, #0
 8005670:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005672:	2301      	movs	r3, #1
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005676:	2300      	movs	r3, #0
 8005678:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800567e:	f107 030c 	add.w	r3, r7, #12
 8005682:	4619      	mov	r1, r3
 8005684:	4811      	ldr	r0, [pc, #68]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 8005686:	f002 fc05 	bl	8007e94 <HAL_TIM_Encoder_Init>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800569a:	f000 f9b7 	bl	8005a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4808      	ldr	r0, [pc, #32]	@ (80056cc <_ZL12MX_TIM4_Initv+0xb4>)
 80056ac:	f003 f958 	bl	8008960 <HAL_TIMEx_MasterConfigSynchronization>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	bf14      	ite	ne
 80056b6:	2301      	movne	r3, #1
 80056b8:	2300      	moveq	r3, #0
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 80056c0:	f000 f9a4 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80056c4:	bf00      	nop
 80056c6:	3730      	adds	r7, #48	@ 0x30
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	2000032c 	.word	0x2000032c
 80056d0:	40000800 	.word	0x40000800

080056d4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08c      	sub	sp, #48	@ 0x30
 80056d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	2224      	movs	r2, #36	@ 0x24
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f005 ff38 	bl	800b558 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056e8:	1d3b      	adds	r3, r7, #4
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80056f0:	4b25      	ldr	r3, [pc, #148]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 80056f2:	4a26      	ldr	r2, [pc, #152]	@ (800578c <_ZL12MX_TIM5_Initv+0xb8>)
 80056f4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80056f6:	4b24      	ldr	r3, [pc, #144]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056fc:	4b22      	ldr	r3, [pc, #136]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 80056fe:	2200      	movs	r2, #0
 8005700:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8005702:	4b21      	ldr	r3, [pc, #132]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 8005704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005708:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800570a:	4b1f      	ldr	r3, [pc, #124]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 800570c:	2200      	movs	r2, #0
 800570e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005710:	4b1d      	ldr	r3, [pc, #116]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 8005712:	2200      	movs	r2, #0
 8005714:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005716:	2303      	movs	r3, #3
 8005718:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800571e:	2301      	movs	r3, #1
 8005720:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800572a:	2300      	movs	r3, #0
 800572c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800572e:	2301      	movs	r3, #1
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005732:	2300      	movs	r3, #0
 8005734:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800573a:	f107 030c 	add.w	r3, r7, #12
 800573e:	4619      	mov	r1, r3
 8005740:	4811      	ldr	r0, [pc, #68]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 8005742:	f002 fba7 	bl	8007e94 <HAL_TIM_Encoder_Init>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8005756:	f000 f959 	bl	8005a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800575e:	2300      	movs	r3, #0
 8005760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4808      	ldr	r0, [pc, #32]	@ (8005788 <_ZL12MX_TIM5_Initv+0xb4>)
 8005768:	f003 f8fa 	bl	8008960 <HAL_TIMEx_MasterConfigSynchronization>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 800577c:	f000 f946 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005780:	bf00      	nop
 8005782:	3730      	adds	r7, #48	@ 0x30
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000374 	.word	0x20000374
 800578c:	40000c00 	.word	0x40000c00

08005790 <_ZL12MX_TIM6_Initv>:

static void MX_TIM6_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005796:	463b      	mov	r3, r7
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800579e:	4b1a      	ldr	r3, [pc, #104]	@ (8005808 <_ZL12MX_TIM6_Initv+0x78>)
 80057a0:	4a1a      	ldr	r2, [pc, #104]	@ (800580c <_ZL12MX_TIM6_Initv+0x7c>)
 80057a2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 80057a4:	4b18      	ldr	r3, [pc, #96]	@ (8005808 <_ZL12MX_TIM6_Initv+0x78>)
 80057a6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80057aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ac:	4b16      	ldr	r3, [pc, #88]	@ (8005808 <_ZL12MX_TIM6_Initv+0x78>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 80057b2:	4b15      	ldr	r3, [pc, #84]	@ (8005808 <_ZL12MX_TIM6_Initv+0x78>)
 80057b4:	2231      	movs	r2, #49	@ 0x31
 80057b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057b8:	4b13      	ldr	r3, [pc, #76]	@ (8005808 <_ZL12MX_TIM6_Initv+0x78>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80057be:	4812      	ldr	r0, [pc, #72]	@ (8005808 <_ZL12MX_TIM6_Initv+0x78>)
 80057c0:	f002 f9ae 	bl	8007b20 <HAL_TIM_Base_Init>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf14      	ite	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	2300      	moveq	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 80057d4:	f000 f91a 	bl	8005a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057d8:	2300      	movs	r3, #0
 80057da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80057e0:	463b      	mov	r3, r7
 80057e2:	4619      	mov	r1, r3
 80057e4:	4808      	ldr	r0, [pc, #32]	@ (8005808 <_ZL12MX_TIM6_Initv+0x78>)
 80057e6:	f003 f8bb 	bl	8008960 <HAL_TIMEx_MasterConfigSynchronization>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf14      	ite	ne
 80057f0:	2301      	movne	r3, #1
 80057f2:	2300      	moveq	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 80057fa:	f000 f907 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	200003bc 	.word	0x200003bc
 800580c:	40001000 	.word	0x40001000

08005810 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005814:	4b13      	ldr	r3, [pc, #76]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 8005816:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <_ZL13MX_UART4_Initv+0x58>)
 8005818:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800581a:	4b12      	ldr	r3, [pc, #72]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 800581c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005820:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005822:	4b10      	ldr	r3, [pc, #64]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 8005824:	2200      	movs	r2, #0
 8005826:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005828:	4b0e      	ldr	r3, [pc, #56]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 800582a:	2200      	movs	r2, #0
 800582c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800582e:	4b0d      	ldr	r3, [pc, #52]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 8005830:	2200      	movs	r2, #0
 8005832:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005834:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 8005836:	220c      	movs	r2, #12
 8005838:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800583a:	4b0a      	ldr	r3, [pc, #40]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005840:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 8005842:	2200      	movs	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005846:	4807      	ldr	r0, [pc, #28]	@ (8005864 <_ZL13MX_UART4_Initv+0x54>)
 8005848:	f003 f959 	bl	8008afe <HAL_UART_Init>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 800585c:	f000 f8d6 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005860:	bf00      	nop
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000404 	.word	0x20000404
 8005868:	40004c00 	.word	0x40004c00

0800586c <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005870:	4b13      	ldr	r3, [pc, #76]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 8005872:	4a14      	ldr	r2, [pc, #80]	@ (80058c4 <_ZL13MX_UART5_Initv+0x58>)
 8005874:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005876:	4b12      	ldr	r3, [pc, #72]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 8005878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800587c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800587e:	4b10      	ldr	r3, [pc, #64]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 8005880:	2200      	movs	r2, #0
 8005882:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005884:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 8005886:	2200      	movs	r2, #0
 8005888:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800588a:	4b0d      	ldr	r3, [pc, #52]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 800588c:	2200      	movs	r2, #0
 800588e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005890:	4b0b      	ldr	r3, [pc, #44]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 8005892:	220c      	movs	r2, #12
 8005894:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005896:	4b0a      	ldr	r3, [pc, #40]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 8005898:	2200      	movs	r2, #0
 800589a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800589c:	4b08      	ldr	r3, [pc, #32]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 800589e:	2200      	movs	r2, #0
 80058a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80058a2:	4807      	ldr	r0, [pc, #28]	@ (80058c0 <_ZL13MX_UART5_Initv+0x54>)
 80058a4:	f003 f92b 	bl	8008afe <HAL_UART_Init>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 80058b8:	f000 f8a8 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80058bc:	bf00      	nop
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	2000044c 	.word	0x2000044c
 80058c4:	40005000 	.word	0x40005000

080058c8 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80058cc:	4b13      	ldr	r3, [pc, #76]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058ce:	4a14      	ldr	r2, [pc, #80]	@ (8005920 <_ZL19MX_USART3_UART_Initv+0x58>)
 80058d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80058d2:	4b12      	ldr	r3, [pc, #72]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80058d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058da:	4b10      	ldr	r3, [pc, #64]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058dc:	2200      	movs	r2, #0
 80058de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058e0:	4b0e      	ldr	r3, [pc, #56]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80058e6:	4b0d      	ldr	r3, [pc, #52]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058ee:	220c      	movs	r2, #12
 80058f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058f2:	4b0a      	ldr	r3, [pc, #40]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80058f8:	4b08      	ldr	r3, [pc, #32]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80058fe:	4807      	ldr	r0, [pc, #28]	@ (800591c <_ZL19MX_USART3_UART_Initv+0x54>)
 8005900:	f003 f8fd 	bl	8008afe <HAL_UART_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf14      	ite	ne
 800590a:	2301      	movne	r3, #1
 800590c:	2300      	moveq	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8005914:	f000 f87a 	bl	8005a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005918:	bf00      	nop
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20000494 	.word	0x20000494
 8005920:	40004800 	.word	0x40004800

08005924 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800592a:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <_ZL11MX_DMA_Initv+0x70>)
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <_ZL11MX_DMA_Initv+0x70>)
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	6153      	str	r3, [r2, #20]
 8005936:	4b17      	ldr	r3, [pc, #92]	@ (8005994 <_ZL11MX_DMA_Initv+0x70>)
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0302 	and.w	r3, r3, #2
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005942:	4b14      	ldr	r3, [pc, #80]	@ (8005994 <_ZL11MX_DMA_Initv+0x70>)
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	4a13      	ldr	r2, [pc, #76]	@ (8005994 <_ZL11MX_DMA_Initv+0x70>)
 8005948:	f043 0301 	orr.w	r3, r3, #1
 800594c:	6153      	str	r3, [r2, #20]
 800594e:	4b11      	ldr	r3, [pc, #68]	@ (8005994 <_ZL11MX_DMA_Initv+0x70>)
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800595a:	2200      	movs	r2, #0
 800595c:	2100      	movs	r1, #0
 800595e:	200c      	movs	r0, #12
 8005960:	f000 fe4f 	bl	8006602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005964:	200c      	movs	r0, #12
 8005966:	f000 fe68 	bl	800663a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800596a:	2200      	movs	r2, #0
 800596c:	2100      	movs	r1, #0
 800596e:	200d      	movs	r0, #13
 8005970:	f000 fe47 	bl	8006602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8005974:	200d      	movs	r0, #13
 8005976:	f000 fe60 	bl	800663a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_5_IRQn, 0, 0);
 800597a:	2200      	movs	r2, #0
 800597c:	2100      	movs	r1, #0
 800597e:	203b      	movs	r0, #59	@ 0x3b
 8005980:	f000 fe3f 	bl	8006602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_5_IRQn);
 8005984:	203b      	movs	r0, #59	@ 0x3b
 8005986:	f000 fe58 	bl	800663a <HAL_NVIC_EnableIRQ>

}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40021000 	.word	0x40021000

08005998 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800599e:	4b1a      	ldr	r3, [pc, #104]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	4a19      	ldr	r2, [pc, #100]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059a4:	f043 0320 	orr.w	r3, r3, #32
 80059a8:	6193      	str	r3, [r2, #24]
 80059aa:	4b17      	ldr	r3, [pc, #92]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b6:	4b14      	ldr	r3, [pc, #80]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	4a13      	ldr	r2, [pc, #76]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059bc:	f043 0304 	orr.w	r3, r3, #4
 80059c0:	6193      	str	r3, [r2, #24]
 80059c2:	4b11      	ldr	r3, [pc, #68]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	60bb      	str	r3, [r7, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059d4:	f043 0308 	orr.w	r3, r3, #8
 80059d8:	6193      	str	r3, [r2, #24]
 80059da:	4b0b      	ldr	r3, [pc, #44]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80059e6:	4b08      	ldr	r3, [pc, #32]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	4a07      	ldr	r2, [pc, #28]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059ec:	f043 0310 	orr.w	r3, r3, #16
 80059f0:	6193      	str	r3, [r2, #24]
 80059f2:	4b05      	ldr	r3, [pc, #20]	@ (8005a08 <_ZL12MX_GPIO_Initv+0x70>)
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr
 8005a08:	40021000 	.word	0x40021000

08005a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a10:	b672      	cpsid	i
}
 8005a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a14:	bf00      	nop
 8005a16:	e7fd      	b.n	8005a14 <Error_Handler+0x8>

08005a18 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005a18:	b590      	push	{r4, r7, lr}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af04      	add	r7, sp, #16
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d152      	bne.n	8005ace <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d14d      	bne.n	8005ace <_Z41__static_initialization_and_destruction_0ii+0xb6>
};
 8005a32:	4c29      	ldr	r4, [pc, #164]	@ (8005ad8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005a34:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005a38:	2203      	movs	r2, #3
 8005a3a:	4928      	ldr	r1, [pc, #160]	@ (8005adc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005a3c:	4620      	mov	r0, r4
 8005a3e:	f7ff fb53 	bl	80050e8 <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefhs>
 8005a42:	341c      	adds	r4, #28
 8005a44:	4b26      	ldr	r3, [pc, #152]	@ (8005ae0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005a46:	2204      	movs	r2, #4
 8005a48:	4924      	ldr	r1, [pc, #144]	@ (8005adc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fb4c 	bl	80050e8 <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefhs>
 8005a50:	341c      	adds	r4, #28
 8005a52:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005a56:	2205      	movs	r2, #5
 8005a58:	4920      	ldr	r1, [pc, #128]	@ (8005adc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f7ff fb44 	bl	80050e8 <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefhs>
 8005a60:	341c      	adds	r4, #28
 8005a62:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005a64:	2206      	movs	r2, #6
 8005a66:	491d      	ldr	r1, [pc, #116]	@ (8005adc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f7ff fb3d 	bl	80050e8 <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefhs>
 8005a6e:	f104 001c 	add.w	r0, r4, #28
 8005a72:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	4b19      	ldr	r3, [pc, #100]	@ (8005ae4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005a7e:	2280      	movs	r2, #128	@ 0x80
 8005a80:	4919      	ldr	r1, [pc, #100]	@ (8005ae8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005a82:	f7ff fad5 	bl	8005030 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmP17TIM_HandleTypeDefts>
};
 8005a86:	4c19      	ldr	r4, [pc, #100]	@ (8005aec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8005a88:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	4b18      	ldr	r3, [pc, #96]	@ (8005af0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	f241 5318 	movw	r3, #5400	@ 0x1518
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	4b16      	ldr	r3, [pc, #88]	@ (8005af4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	f641 235e 	movw	r3, #6750	@ 0x1a5e
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	490e      	ldr	r1, [pc, #56]	@ (8005adc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f7ff fb63 	bl	8005170 <_ZN11Module_shotC1EP20__UART_HandleTypeDefhlllP17TIM_HandleTypeDefl>
 8005aaa:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8005aae:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8005ab2:	9303      	str	r3, [sp, #12]
 8005ab4:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	4b0f      	ldr	r3, [pc, #60]	@ (8005afc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	f246 7320 	movw	r3, #26400	@ 0x6720
 8005ac6:	2209      	movs	r2, #9
 8005ac8:	4904      	ldr	r1, [pc, #16]	@ (8005adc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005aca:	f7ff fb51 	bl	8005170 <_ZN11Module_shotC1EP20__UART_HandleTypeDefhlllP17TIM_HandleTypeDefl>
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd90      	pop	{r4, r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200005ec 	.word	0x200005ec
 8005adc:	20000404 	.word	0x20000404
 8005ae0:	fffffe3e 	.word	0xfffffe3e
 8005ae4:	20000254 	.word	0x20000254
 8005ae8:	40010c00 	.word	0x40010c00
 8005aec:	20000678 	.word	0x20000678
 8005af0:	20000374 	.word	0x20000374
 8005af4:	ffffeae8 	.word	0xffffeae8
 8005af8:	200002e4 	.word	0x200002e4
 8005afc:	ffff9e58 	.word	0xffff9e58

08005b00 <_GLOBAL__sub_I_htim1>:
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b08:	2001      	movs	r0, #1
 8005b0a:	f7ff ff85 	bl	8005a18 <_Z41__static_initialization_and_destruction_0ii>
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005b16:	4b15      	ldr	r3, [pc, #84]	@ (8005b6c <HAL_MspInit+0x5c>)
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	4a14      	ldr	r2, [pc, #80]	@ (8005b6c <HAL_MspInit+0x5c>)
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	6193      	str	r3, [r2, #24]
 8005b22:	4b12      	ldr	r3, [pc, #72]	@ (8005b6c <HAL_MspInit+0x5c>)
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	60bb      	str	r3, [r7, #8]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b6c <HAL_MspInit+0x5c>)
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	4a0e      	ldr	r2, [pc, #56]	@ (8005b6c <HAL_MspInit+0x5c>)
 8005b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b38:	61d3      	str	r3, [r2, #28]
 8005b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b6c <HAL_MspInit+0x5c>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b42:	607b      	str	r3, [r7, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005b46:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <HAL_MspInit+0x60>)
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	4a04      	ldr	r2, [pc, #16]	@ (8005b70 <HAL_MspInit+0x60>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	40010000 	.word	0x40010000

08005b74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a09      	ldr	r2, [pc, #36]	@ (8005ba8 <HAL_TIM_PWM_MspInit+0x34>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d10b      	bne.n	8005b9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <HAL_TIM_PWM_MspInit+0x38>)
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	4a08      	ldr	r2, [pc, #32]	@ (8005bac <HAL_TIM_PWM_MspInit+0x38>)
 8005b8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b90:	6193      	str	r3, [r2, #24]
 8005b92:	4b06      	ldr	r3, [pc, #24]	@ (8005bac <HAL_TIM_PWM_MspInit+0x38>)
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005b9e:	bf00      	nop
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bc80      	pop	{r7}
 8005ba6:	4770      	bx	lr
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40021000 	.word	0x40021000

08005bb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b092      	sub	sp, #72	@ 0x48
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	609a      	str	r2, [r3, #8]
 8005bc4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bce:	d14f      	bne.n	8005c70 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bd0:	4b71      	ldr	r3, [pc, #452]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4a70      	ldr	r2, [pc, #448]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005bd6:	f043 0301 	orr.w	r3, r3, #1
 8005bda:	61d3      	str	r3, [r2, #28]
 8005bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005bde:	69db      	ldr	r3, [r3, #28]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be8:	4b6b      	ldr	r3, [pc, #428]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	4a6a      	ldr	r2, [pc, #424]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005bee:	f043 0304 	orr.w	r3, r3, #4
 8005bf2:	6193      	str	r3, [r2, #24]
 8005bf4:	4b68      	ldr	r3, [pc, #416]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c00:	4b65      	ldr	r3, [pc, #404]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	4a64      	ldr	r2, [pc, #400]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c06:	f043 0308 	orr.w	r3, r3, #8
 8005c0a:	6193      	str	r3, [r2, #24]
 8005c0c:	4b62      	ldr	r3, [pc, #392]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c22:	2301      	movs	r3, #1
 8005c24:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	485b      	ldr	r0, [pc, #364]	@ (8005d9c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005c2e:	f001 f9a3 	bl	8006f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005c32:	2308      	movs	r3, #8
 8005c34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c36:	2300      	movs	r3, #0
 8005c38:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005c42:	4619      	mov	r1, r3
 8005c44:	4856      	ldr	r0, [pc, #344]	@ (8005da0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005c46:	f001 f997 	bl	8006f78 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8005c4a:	4b56      	ldr	r3, [pc, #344]	@ (8005da4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c56:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c5a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005c5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c68:	4a4e      	ldr	r2, [pc, #312]	@ (8005da4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8005c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c6c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005c6e:	e08e      	b.n	8005d8e <HAL_TIM_Encoder_MspInit+0x1de>
  else if(htim_encoder->Instance==TIM3)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a4c      	ldr	r2, [pc, #304]	@ (8005da8 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d136      	bne.n	8005ce8 <HAL_TIM_Encoder_MspInit+0x138>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c7a:	4b47      	ldr	r3, [pc, #284]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	4a46      	ldr	r2, [pc, #280]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c80:	f043 0302 	orr.w	r3, r3, #2
 8005c84:	61d3      	str	r3, [r2, #28]
 8005c86:	4b44      	ldr	r3, [pc, #272]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	623b      	str	r3, [r7, #32]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c92:	4b41      	ldr	r3, [pc, #260]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	4a40      	ldr	r2, [pc, #256]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005c98:	f043 0310 	orr.w	r3, r3, #16
 8005c9c:	6193      	str	r3, [r2, #24]
 8005c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	61fb      	str	r3, [r7, #28]
 8005ca8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005caa:	23c0      	movs	r3, #192	@ 0xc0
 8005cac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cb6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005cba:	4619      	mov	r1, r3
 8005cbc:	483b      	ldr	r0, [pc, #236]	@ (8005dac <HAL_TIM_Encoder_MspInit+0x1fc>)
 8005cbe:	f001 f95b 	bl	8006f78 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8005cc2:	4b38      	ldr	r3, [pc, #224]	@ (8005da4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cd2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8005cd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cda:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8005cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ce0:	4a30      	ldr	r2, [pc, #192]	@ (8005da4 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8005ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce4:	6053      	str	r3, [r2, #4]
}
 8005ce6:	e052      	b.n	8005d8e <HAL_TIM_Encoder_MspInit+0x1de>
  else if(htim_encoder->Instance==TIM4)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a30      	ldr	r2, [pc, #192]	@ (8005db0 <HAL_TIM_Encoder_MspInit+0x200>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d124      	bne.n	8005d3c <HAL_TIM_Encoder_MspInit+0x18c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005cf2:	4b29      	ldr	r3, [pc, #164]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	4a28      	ldr	r2, [pc, #160]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005cf8:	f043 0304 	orr.w	r3, r3, #4
 8005cfc:	61d3      	str	r3, [r2, #28]
 8005cfe:	4b26      	ldr	r3, [pc, #152]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	61bb      	str	r3, [r7, #24]
 8005d08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d0a:	4b23      	ldr	r3, [pc, #140]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	4a22      	ldr	r2, [pc, #136]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d10:	f043 0308 	orr.w	r3, r3, #8
 8005d14:	6193      	str	r3, [r2, #24]
 8005d16:	4b20      	ldr	r3, [pc, #128]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d22:	23c0      	movs	r3, #192	@ 0xc0
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d26:	2300      	movs	r3, #0
 8005d28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005d32:	4619      	mov	r1, r3
 8005d34:	481a      	ldr	r0, [pc, #104]	@ (8005da0 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8005d36:	f001 f91f 	bl	8006f78 <HAL_GPIO_Init>
}
 8005d3a:	e028      	b.n	8005d8e <HAL_TIM_Encoder_MspInit+0x1de>
  else if(htim_encoder->Instance==TIM5)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1c      	ldr	r2, [pc, #112]	@ (8005db4 <HAL_TIM_Encoder_MspInit+0x204>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d123      	bne.n	8005d8e <HAL_TIM_Encoder_MspInit+0x1de>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d46:	4b14      	ldr	r3, [pc, #80]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	4a13      	ldr	r2, [pc, #76]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d4c:	f043 0308 	orr.w	r3, r3, #8
 8005d50:	61d3      	str	r3, [r2, #28]
 8005d52:	4b11      	ldr	r3, [pc, #68]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	4a0d      	ldr	r2, [pc, #52]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d64:	f043 0304 	orr.w	r3, r3, #4
 8005d68:	6193      	str	r3, [r2, #24]
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005d76:	2303      	movs	r3, #3
 8005d78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	63bb      	str	r3, [r7, #56]	@ 0x38
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005d86:	4619      	mov	r1, r3
 8005d88:	4804      	ldr	r0, [pc, #16]	@ (8005d9c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8005d8a:	f001 f8f5 	bl	8006f78 <HAL_GPIO_Init>
}
 8005d8e:	bf00      	nop
 8005d90:	3748      	adds	r7, #72	@ 0x48
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	40021000 	.word	0x40021000
 8005d9c:	40010800 	.word	0x40010800
 8005da0:	40010c00 	.word	0x40010c00
 8005da4:	40010000 	.word	0x40010000
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40011000 	.word	0x40011000
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00

08005db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a21      	ldr	r2, [pc, #132]	@ (8005e4c <HAL_TIM_Base_MspInit+0x94>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d13b      	bne.n	8005e42 <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005dca:	4b21      	ldr	r3, [pc, #132]	@ (8005e50 <HAL_TIM_Base_MspInit+0x98>)
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4a20      	ldr	r2, [pc, #128]	@ (8005e50 <HAL_TIM_Base_MspInit+0x98>)
 8005dd0:	f043 0310 	orr.w	r3, r3, #16
 8005dd4:	61d3      	str	r3, [r2, #28]
 8005dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e50 <HAL_TIM_Base_MspInit+0x98>)
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 DMA Init */
    /* TIM6_UP Init */
    hdma_tim6_up.Instance = DMA2_Channel3;
 8005de2:	4b1c      	ldr	r3, [pc, #112]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005de4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <HAL_TIM_Base_MspInit+0xa0>)
 8005de6:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005de8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dee:	4b19      	ldr	r3, [pc, #100]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8005df4:	4b17      	ldr	r3, [pc, #92]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005df6:	2280      	movs	r2, #128	@ 0x80
 8005df8:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005dfa:	4b16      	ldr	r3, [pc, #88]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005dfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e00:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e02:	4b14      	ldr	r3, [pc, #80]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005e04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e08:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8005e0a:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_LOW;
 8005e10:	4b10      	ldr	r3, [pc, #64]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8005e16:	480f      	ldr	r0, [pc, #60]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005e18:	f000 fc2a 	bl	8006670 <HAL_DMA_Init>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d001      	beq.n	8005e26 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8005e22:	f7ff fdf3 	bl	8005a0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a0a      	ldr	r2, [pc, #40]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005e2a:	621a      	str	r2, [r3, #32]
 8005e2c:	4a09      	ldr	r2, [pc, #36]	@ (8005e54 <HAL_TIM_Base_MspInit+0x9c>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6253      	str	r3, [r2, #36]	@ 0x24

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	2036      	movs	r0, #54	@ 0x36
 8005e38:	f000 fbe3 	bl	8006602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8005e3c:	2036      	movs	r0, #54	@ 0x36
 8005e3e:	f000 fbfc 	bl	800663a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40001000 	.word	0x40001000
 8005e50:	40021000 	.word	0x40021000
 8005e54:	200005a8 	.word	0x200005a8
 8005e58:	40020430 	.word	0x40020430

08005e5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b088      	sub	sp, #32
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e64:	f107 0310 	add.w	r3, r7, #16
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	605a      	str	r2, [r3, #4]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a10      	ldr	r2, [pc, #64]	@ (8005eb8 <HAL_TIM_MspPostInit+0x5c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d118      	bne.n	8005eae <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005ebc <HAL_TIM_MspPostInit+0x60>)
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	4a0e      	ldr	r2, [pc, #56]	@ (8005ebc <HAL_TIM_MspPostInit+0x60>)
 8005e82:	f043 0304 	orr.w	r3, r3, #4
 8005e86:	6193      	str	r3, [r2, #24]
 8005e88:	4b0c      	ldr	r3, [pc, #48]	@ (8005ebc <HAL_TIM_MspPostInit+0x60>)
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005e94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ea2:	f107 0310 	add.w	r3, r7, #16
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4805      	ldr	r0, [pc, #20]	@ (8005ec0 <HAL_TIM_MspPostInit+0x64>)
 8005eaa:	f001 f865 	bl	8006f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005eae:	bf00      	nop
 8005eb0:	3720      	adds	r7, #32
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40021000 	.word	0x40021000
 8005ec0:	40010800 	.word	0x40010800

08005ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08e      	sub	sp, #56	@ 0x38
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ecc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	609a      	str	r2, [r3, #8]
 8005ed8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a9f      	ldr	r2, [pc, #636]	@ (800615c <HAL_UART_MspInit+0x298>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d160      	bne.n	8005fa6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ee4:	4b9e      	ldr	r3, [pc, #632]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	4a9d      	ldr	r2, [pc, #628]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005eea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eee:	61d3      	str	r3, [r2, #28]
 8005ef0:	4b9b      	ldr	r3, [pc, #620]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005efc:	4b98      	ldr	r3, [pc, #608]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	4a97      	ldr	r2, [pc, #604]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005f02:	f043 0310 	orr.w	r3, r3, #16
 8005f06:	6193      	str	r3, [r2, #24]
 8005f08:	4b95      	ldr	r3, [pc, #596]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	623b      	str	r3, [r7, #32]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005f14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005f26:	4619      	mov	r1, r3
 8005f28:	488e      	ldr	r0, [pc, #568]	@ (8006164 <HAL_UART_MspInit+0x2a0>)
 8005f2a:	f001 f825 	bl	8006f78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005f2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f34:	2300      	movs	r3, #0
 8005f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005f40:	4619      	mov	r1, r3
 8005f42:	4888      	ldr	r0, [pc, #544]	@ (8006164 <HAL_UART_MspInit+0x2a0>)
 8005f44:	f001 f818 	bl	8006f78 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 8005f48:	4b87      	ldr	r3, [pc, #540]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f4a:	4a88      	ldr	r2, [pc, #544]	@ (800616c <HAL_UART_MspInit+0x2a8>)
 8005f4c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f4e:	4b86      	ldr	r3, [pc, #536]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f50:	2210      	movs	r2, #16
 8005f52:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f54:	4b84      	ldr	r3, [pc, #528]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005f5a:	4b83      	ldr	r3, [pc, #524]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f5c:	2280      	movs	r2, #128	@ 0x80
 8005f5e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005f60:	4b81      	ldr	r3, [pc, #516]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f66:	4b80      	ldr	r3, [pc, #512]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f72:	4b7d      	ldr	r3, [pc, #500]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005f78:	487b      	ldr	r0, [pc, #492]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f7a:	f000 fb79 	bl	8006670 <HAL_DMA_Init>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8005f84:	f7ff fd42 	bl	8005a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a77      	ldr	r2, [pc, #476]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f8e:	4a76      	ldr	r2, [pc, #472]	@ (8006168 <HAL_UART_MspInit+0x2a4>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6253      	str	r3, [r2, #36]	@ 0x24

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005f94:	2200      	movs	r2, #0
 8005f96:	2100      	movs	r1, #0
 8005f98:	2034      	movs	r0, #52	@ 0x34
 8005f9a:	f000 fb32 	bl	8006602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005f9e:	2034      	movs	r0, #52	@ 0x34
 8005fa0:	f000 fb4b 	bl	800663a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005fa4:	e0d6      	b.n	8006154 <HAL_UART_MspInit+0x290>
  else if(huart->Instance==UART5)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a71      	ldr	r2, [pc, #452]	@ (8006170 <HAL_UART_MspInit+0x2ac>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d145      	bne.n	800603c <HAL_UART_MspInit+0x178>
    __HAL_RCC_UART5_CLK_ENABLE();
 8005fb0:	4b6b      	ldr	r3, [pc, #428]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fb2:	69db      	ldr	r3, [r3, #28]
 8005fb4:	4a6a      	ldr	r2, [pc, #424]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fba:	61d3      	str	r3, [r2, #28]
 8005fbc:	4b68      	ldr	r3, [pc, #416]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fc4:	61fb      	str	r3, [r7, #28]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fc8:	4b65      	ldr	r3, [pc, #404]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	4a64      	ldr	r2, [pc, #400]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fce:	f043 0310 	orr.w	r3, r3, #16
 8005fd2:	6193      	str	r3, [r2, #24]
 8005fd4:	4b62      	ldr	r3, [pc, #392]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fe0:	4b5f      	ldr	r3, [pc, #380]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	4a5e      	ldr	r2, [pc, #376]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fe6:	f043 0320 	orr.w	r3, r3, #32
 8005fea:	6193      	str	r3, [r2, #24]
 8005fec:	4b5c      	ldr	r3, [pc, #368]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005ff8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffe:	2302      	movs	r3, #2
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006002:	2303      	movs	r3, #3
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006006:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800600a:	4619      	mov	r1, r3
 800600c:	4855      	ldr	r0, [pc, #340]	@ (8006164 <HAL_UART_MspInit+0x2a0>)
 800600e:	f000 ffb3 	bl	8006f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006012:	2304      	movs	r3, #4
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006016:	2300      	movs	r3, #0
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800601a:	2301      	movs	r3, #1
 800601c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800601e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006022:	4619      	mov	r1, r3
 8006024:	4853      	ldr	r0, [pc, #332]	@ (8006174 <HAL_UART_MspInit+0x2b0>)
 8006026:	f000 ffa7 	bl	8006f78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800602a:	2200      	movs	r2, #0
 800602c:	2100      	movs	r1, #0
 800602e:	2035      	movs	r0, #53	@ 0x35
 8006030:	f000 fae7 	bl	8006602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006034:	2035      	movs	r0, #53	@ 0x35
 8006036:	f000 fb00 	bl	800663a <HAL_NVIC_EnableIRQ>
}
 800603a:	e08b      	b.n	8006154 <HAL_UART_MspInit+0x290>
  else if(huart->Instance==USART3)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4d      	ldr	r2, [pc, #308]	@ (8006178 <HAL_UART_MspInit+0x2b4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	f040 8086 	bne.w	8006154 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006048:	4b45      	ldr	r3, [pc, #276]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	4a44      	ldr	r2, [pc, #272]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 800604e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006052:	61d3      	str	r3, [r2, #28]
 8006054:	4b42      	ldr	r3, [pc, #264]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006060:	4b3f      	ldr	r3, [pc, #252]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	4a3e      	ldr	r2, [pc, #248]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 8006066:	f043 0308 	orr.w	r3, r3, #8
 800606a:	6193      	str	r3, [r2, #24]
 800606c:	4b3c      	ldr	r3, [pc, #240]	@ (8006160 <HAL_UART_MspInit+0x29c>)
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006078:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800607c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607e:	2302      	movs	r3, #2
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006082:	2303      	movs	r3, #3
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006086:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800608a:	4619      	mov	r1, r3
 800608c:	483b      	ldr	r0, [pc, #236]	@ (800617c <HAL_UART_MspInit+0x2b8>)
 800608e:	f000 ff73 	bl	8006f78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006092:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006098:	2300      	movs	r3, #0
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800609c:	2301      	movs	r3, #1
 800609e:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80060a4:	4619      	mov	r1, r3
 80060a6:	4835      	ldr	r0, [pc, #212]	@ (800617c <HAL_UART_MspInit+0x2b8>)
 80060a8:	f000 ff66 	bl	8006f78 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80060ac:	4b34      	ldr	r3, [pc, #208]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060ae:	4a35      	ldr	r2, [pc, #212]	@ (8006184 <HAL_UART_MspInit+0x2c0>)
 80060b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060b2:	4b33      	ldr	r3, [pc, #204]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060b8:	4b31      	ldr	r3, [pc, #196]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060be:	4b30      	ldr	r3, [pc, #192]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060c0:	2280      	movs	r2, #128	@ 0x80
 80060c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80060d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060d8:	2200      	movs	r2, #0
 80060da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80060dc:	4828      	ldr	r0, [pc, #160]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060de:	f000 fac7 	bl	8006670 <HAL_DMA_Init>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_UART_MspInit+0x228>
      Error_Handler();
 80060e8:	f7ff fc90 	bl	8005a0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a24      	ldr	r2, [pc, #144]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060f0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80060f2:	4a23      	ldr	r2, [pc, #140]	@ (8006180 <HAL_UART_MspInit+0x2bc>)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80060f8:	4b23      	ldr	r3, [pc, #140]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 80060fa:	4a24      	ldr	r2, [pc, #144]	@ (800618c <HAL_UART_MspInit+0x2c8>)
 80060fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060fe:	4b22      	ldr	r3, [pc, #136]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 8006100:	2210      	movs	r2, #16
 8006102:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006104:	4b20      	ldr	r3, [pc, #128]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800610a:	4b1f      	ldr	r3, [pc, #124]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 800610c:	2280      	movs	r2, #128	@ 0x80
 800610e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006110:	4b1d      	ldr	r3, [pc, #116]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 8006112:	2200      	movs	r2, #0
 8006114:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006116:	4b1c      	ldr	r3, [pc, #112]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 8006118:	2200      	movs	r2, #0
 800611a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800611c:	4b1a      	ldr	r3, [pc, #104]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 800611e:	2200      	movs	r2, #0
 8006120:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006122:	4b19      	ldr	r3, [pc, #100]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 8006124:	2200      	movs	r2, #0
 8006126:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8006128:	4817      	ldr	r0, [pc, #92]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 800612a:	f000 faa1 	bl	8006670 <HAL_DMA_Init>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8006134:	f7ff fc6a 	bl	8005a0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a13      	ldr	r2, [pc, #76]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 800613c:	639a      	str	r2, [r3, #56]	@ 0x38
 800613e:	4a12      	ldr	r2, [pc, #72]	@ (8006188 <HAL_UART_MspInit+0x2c4>)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006144:	2200      	movs	r2, #0
 8006146:	2100      	movs	r1, #0
 8006148:	2027      	movs	r0, #39	@ 0x27
 800614a:	f000 fa5a 	bl	8006602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800614e:	2027      	movs	r0, #39	@ 0x27
 8006150:	f000 fa73 	bl	800663a <HAL_NVIC_EnableIRQ>
}
 8006154:	bf00      	nop
 8006156:	3738      	adds	r7, #56	@ 0x38
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40004c00 	.word	0x40004c00
 8006160:	40021000 	.word	0x40021000
 8006164:	40011000 	.word	0x40011000
 8006168:	200004dc 	.word	0x200004dc
 800616c:	40020458 	.word	0x40020458
 8006170:	40005000 	.word	0x40005000
 8006174:	40011400 	.word	0x40011400
 8006178:	40004800 	.word	0x40004800
 800617c:	40010c00 	.word	0x40010c00
 8006180:	20000520 	.word	0x20000520
 8006184:	40020030 	.word	0x40020030
 8006188:	20000564 	.word	0x20000564
 800618c:	4002001c 	.word	0x4002001c

08006190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <NMI_Handler+0x4>

08006198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800619c:	bf00      	nop
 800619e:	e7fd      	b.n	800619c <HardFault_Handler+0x4>

080061a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <MemManage_Handler+0x4>

080061a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80061ac:	bf00      	nop
 80061ae:	e7fd      	b.n	80061ac <BusFault_Handler+0x4>

080061b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80061b4:	bf00      	nop
 80061b6:	e7fd      	b.n	80061b4 <UsageFault_Handler+0x4>

080061b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80061bc:	bf00      	nop
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80061c8:	bf00      	nop
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061d4:	bf00      	nop
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061e0:	f000 f91c 	bl	800641c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061e4:	bf00      	nop
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80061ec:	4802      	ldr	r0, [pc, #8]	@ (80061f8 <DMA1_Channel2_IRQHandler+0x10>)
 80061ee:	f000 fc59 	bl	8006aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000564 	.word	0x20000564

080061fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006200:	4802      	ldr	r0, [pc, #8]	@ (800620c <DMA1_Channel3_IRQHandler+0x10>)
 8006202:	f000 fc4f 	bl	8006aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006206:	bf00      	nop
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000520 	.word	0x20000520

08006210 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006214:	4802      	ldr	r0, [pc, #8]	@ (8006220 <USART3_IRQHandler+0x10>)
 8006216:	f002 fdb3 	bl	8008d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000494 	.word	0x20000494

08006224 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006228:	4802      	ldr	r0, [pc, #8]	@ (8006234 <UART4_IRQHandler+0x10>)
 800622a:	f002 fda9 	bl	8008d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800622e:	bf00      	nop
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000404 	.word	0x20000404

08006238 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800623c:	4802      	ldr	r0, [pc, #8]	@ (8006248 <UART5_IRQHandler+0x10>)
 800623e:	f002 fd9f 	bl	8008d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006242:	bf00      	nop
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	2000044c 	.word	0x2000044c

0800624c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006250:	4802      	ldr	r0, [pc, #8]	@ (800625c <TIM6_IRQHandler+0x10>)
 8006252:	f001 ff4f 	bl	80080f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8006256:	bf00      	nop
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	200003bc 	.word	0x200003bc

08006260 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8006264:	4802      	ldr	r0, [pc, #8]	@ (8006270 <DMA2_Channel3_IRQHandler+0x10>)
 8006266:	f000 fc1d 	bl	8006aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	200005a8 	.word	0x200005a8

08006274 <DMA2_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 and channel5 global interrupts.
  */
void DMA2_Channel4_5_IRQHandler(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 0 */

  /* USER CODE END DMA2_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006278:	4802      	ldr	r0, [pc, #8]	@ (8006284 <DMA2_Channel4_5_IRQHandler+0x10>)
 800627a:	f000 fc13 	bl	8006aa4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_5_IRQn 1 */

  /* USER CODE END DMA2_Channel4_5_IRQn 1 */
}
 800627e:	bf00      	nop
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	200004dc 	.word	0x200004dc

08006288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006288:	b480      	push	{r7}
 800628a:	af00      	add	r7, sp, #0
  return 1;
 800628c:	2301      	movs	r3, #1
}
 800628e:	4618      	mov	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <_kill>:

int _kill(int pid, int sig)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80062a0:	f005 f9b6 	bl	800b610 <__errno>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2216      	movs	r2, #22
 80062a8:	601a      	str	r2, [r3, #0]
  return -1;
 80062aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <_exit>:

void _exit (int status)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80062be:	f04f 31ff 	mov.w	r1, #4294967295
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7ff ffe7 	bl	8006296 <_kill>
  while (1) {}    /* Make sure we hang here */
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <_exit+0x12>

080062cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80062d4:	4a14      	ldr	r2, [pc, #80]	@ (8006328 <_sbrk+0x5c>)
 80062d6:	4b15      	ldr	r3, [pc, #84]	@ (800632c <_sbrk+0x60>)
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80062e0:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <_sbrk+0x64>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d102      	bne.n	80062ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062e8:	4b11      	ldr	r3, [pc, #68]	@ (8006330 <_sbrk+0x64>)
 80062ea:	4a12      	ldr	r2, [pc, #72]	@ (8006334 <_sbrk+0x68>)
 80062ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062ee:	4b10      	ldr	r3, [pc, #64]	@ (8006330 <_sbrk+0x64>)
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4413      	add	r3, r2
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d207      	bcs.n	800630c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062fc:	f005 f988 	bl	800b610 <__errno>
 8006300:	4603      	mov	r3, r0
 8006302:	220c      	movs	r2, #12
 8006304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006306:	f04f 33ff 	mov.w	r3, #4294967295
 800630a:	e009      	b.n	8006320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800630c:	4b08      	ldr	r3, [pc, #32]	@ (8006330 <_sbrk+0x64>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006312:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <_sbrk+0x64>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	4a05      	ldr	r2, [pc, #20]	@ (8006330 <_sbrk+0x64>)
 800631c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800631e:	68fb      	ldr	r3, [r7, #12]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	2000c000 	.word	0x2000c000
 800632c:	00000400 	.word	0x00000400
 8006330:	200006f8 	.word	0x200006f8
 8006334:	20000850 	.word	0x20000850

08006338 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800633c:	bf00      	nop
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006344:	f7ff fff8 	bl	8006338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006348:	480b      	ldr	r0, [pc, #44]	@ (8006378 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800634a:	490c      	ldr	r1, [pc, #48]	@ (800637c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800634c:	4a0c      	ldr	r2, [pc, #48]	@ (8006380 <LoopFillZerobss+0x16>)
  movs r3, #0
 800634e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006350:	e002      	b.n	8006358 <LoopCopyDataInit>

08006352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006356:	3304      	adds	r3, #4

08006358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800635a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800635c:	d3f9      	bcc.n	8006352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800635e:	4a09      	ldr	r2, [pc, #36]	@ (8006384 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006360:	4c09      	ldr	r4, [pc, #36]	@ (8006388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006364:	e001      	b.n	800636a <LoopFillZerobss>

08006366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006368:	3204      	adds	r2, #4

0800636a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800636a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800636c:	d3fb      	bcc.n	8006366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800636e:	f005 f955 	bl	800b61c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006372:	f7fe ff45 	bl	8005200 <main>
  bx lr
 8006376:	4770      	bx	lr
  ldr r0, =_sdata
 8006378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800637c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8006380:	0800bdcc 	.word	0x0800bdcc
  ldr r2, =_sbss
 8006384:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8006388:	2000084c 	.word	0x2000084c

0800638c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800638c:	e7fe      	b.n	800638c <ADC1_2_IRQHandler>
	...

08006390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006394:	4b08      	ldr	r3, [pc, #32]	@ (80063b8 <HAL_Init+0x28>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a07      	ldr	r2, [pc, #28]	@ (80063b8 <HAL_Init+0x28>)
 800639a:	f043 0310 	orr.w	r3, r3, #16
 800639e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063a0:	2003      	movs	r0, #3
 80063a2:	f000 f923 	bl	80065ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063a6:	2002      	movs	r0, #2
 80063a8:	f000 f808 	bl	80063bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063ac:	f7ff fbb0 	bl	8005b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40022000 	.word	0x40022000

080063bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063c4:	4b12      	ldr	r3, [pc, #72]	@ (8006410 <HAL_InitTick+0x54>)
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	4b12      	ldr	r3, [pc, #72]	@ (8006414 <HAL_InitTick+0x58>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80063d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80063d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 f93b 	bl	8006656 <HAL_SYSTICK_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e00e      	b.n	8006408 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b0f      	cmp	r3, #15
 80063ee:	d80a      	bhi.n	8006406 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063f0:	2200      	movs	r2, #0
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	f04f 30ff 	mov.w	r0, #4294967295
 80063f8:	f000 f903 	bl	8006602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063fc:	4a06      	ldr	r2, [pc, #24]	@ (8006418 <HAL_InitTick+0x5c>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	e000      	b.n	8006408 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	2000000c 	.word	0x2000000c
 8006414:	20000014 	.word	0x20000014
 8006418:	20000010 	.word	0x20000010

0800641c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006420:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <HAL_IncTick+0x1c>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	4b05      	ldr	r3, [pc, #20]	@ (800643c <HAL_IncTick+0x20>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4413      	add	r3, r2
 800642c:	4a03      	ldr	r2, [pc, #12]	@ (800643c <HAL_IncTick+0x20>)
 800642e:	6013      	str	r3, [r2, #0]
}
 8006430:	bf00      	nop
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr
 8006438:	20000014 	.word	0x20000014
 800643c:	200006fc 	.word	0x200006fc

08006440 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0
  return uwTick;
 8006444:	4b02      	ldr	r3, [pc, #8]	@ (8006450 <HAL_GetTick+0x10>)
 8006446:	681b      	ldr	r3, [r3, #0]
}
 8006448:	4618      	mov	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	bc80      	pop	{r7}
 800644e:	4770      	bx	lr
 8006450:	200006fc 	.word	0x200006fc

08006454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006464:	4b0c      	ldr	r3, [pc, #48]	@ (8006498 <__NVIC_SetPriorityGrouping+0x44>)
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006470:	4013      	ands	r3, r2
 8006472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800647c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006486:	4a04      	ldr	r2, [pc, #16]	@ (8006498 <__NVIC_SetPriorityGrouping+0x44>)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	60d3      	str	r3, [r2, #12]
}
 800648c:	bf00      	nop
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	e000ed00 	.word	0xe000ed00

0800649c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064a0:	4b04      	ldr	r3, [pc, #16]	@ (80064b4 <__NVIC_GetPriorityGrouping+0x18>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	f003 0307 	and.w	r3, r3, #7
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	e000ed00 	.word	0xe000ed00

080064b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	db0b      	blt.n	80064e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ca:	79fb      	ldrb	r3, [r7, #7]
 80064cc:	f003 021f 	and.w	r2, r3, #31
 80064d0:	4906      	ldr	r1, [pc, #24]	@ (80064ec <__NVIC_EnableIRQ+0x34>)
 80064d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d6:	095b      	lsrs	r3, r3, #5
 80064d8:	2001      	movs	r0, #1
 80064da:	fa00 f202 	lsl.w	r2, r0, r2
 80064de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bc80      	pop	{r7}
 80064ea:	4770      	bx	lr
 80064ec:	e000e100 	.word	0xe000e100

080064f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	6039      	str	r1, [r7, #0]
 80064fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006500:	2b00      	cmp	r3, #0
 8006502:	db0a      	blt.n	800651a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	b2da      	uxtb	r2, r3
 8006508:	490c      	ldr	r1, [pc, #48]	@ (800653c <__NVIC_SetPriority+0x4c>)
 800650a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650e:	0112      	lsls	r2, r2, #4
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	440b      	add	r3, r1
 8006514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006518:	e00a      	b.n	8006530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	4908      	ldr	r1, [pc, #32]	@ (8006540 <__NVIC_SetPriority+0x50>)
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	3b04      	subs	r3, #4
 8006528:	0112      	lsls	r2, r2, #4
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	440b      	add	r3, r1
 800652e:	761a      	strb	r2, [r3, #24]
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	bc80      	pop	{r7}
 8006538:	4770      	bx	lr
 800653a:	bf00      	nop
 800653c:	e000e100 	.word	0xe000e100
 8006540:	e000ed00 	.word	0xe000ed00

08006544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	@ 0x24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	f1c3 0307 	rsb	r3, r3, #7
 800655e:	2b04      	cmp	r3, #4
 8006560:	bf28      	it	cs
 8006562:	2304      	movcs	r3, #4
 8006564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	3304      	adds	r3, #4
 800656a:	2b06      	cmp	r3, #6
 800656c:	d902      	bls.n	8006574 <NVIC_EncodePriority+0x30>
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	3b03      	subs	r3, #3
 8006572:	e000      	b.n	8006576 <NVIC_EncodePriority+0x32>
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	43da      	mvns	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	401a      	ands	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800658c:	f04f 31ff 	mov.w	r1, #4294967295
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	fa01 f303 	lsl.w	r3, r1, r3
 8006596:	43d9      	mvns	r1, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800659c:	4313      	orrs	r3, r2
         );
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3724      	adds	r7, #36	@ 0x24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065b8:	d301      	bcc.n	80065be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065ba:	2301      	movs	r3, #1
 80065bc:	e00f      	b.n	80065de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065be:	4a0a      	ldr	r2, [pc, #40]	@ (80065e8 <SysTick_Config+0x40>)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065c6:	210f      	movs	r1, #15
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	f7ff ff90 	bl	80064f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <SysTick_Config+0x40>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065d6:	4b04      	ldr	r3, [pc, #16]	@ (80065e8 <SysTick_Config+0x40>)
 80065d8:	2207      	movs	r2, #7
 80065da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3708      	adds	r7, #8
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	e000e010 	.word	0xe000e010

080065ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff ff2d 	bl	8006454 <__NVIC_SetPriorityGrouping>
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	4603      	mov	r3, r0
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006614:	f7ff ff42 	bl	800649c <__NVIC_GetPriorityGrouping>
 8006618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	6978      	ldr	r0, [r7, #20]
 8006620:	f7ff ff90 	bl	8006544 <NVIC_EncodePriority>
 8006624:	4602      	mov	r2, r0
 8006626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff ff5f 	bl	80064f0 <__NVIC_SetPriority>
}
 8006632:	bf00      	nop
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	4603      	mov	r3, r0
 8006642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff ff35 	bl	80064b8 <__NVIC_EnableIRQ>
}
 800664e:	bf00      	nop
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b082      	sub	sp, #8
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f7ff ffa2 	bl	80065a8 <SysTick_Config>
 8006664:	4603      	mov	r3, r0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
	...

08006670 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e059      	b.n	800673a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	4b2d      	ldr	r3, [pc, #180]	@ (8006744 <HAL_DMA_Init+0xd4>)
 800668e:	429a      	cmp	r2, r3
 8006690:	d80f      	bhi.n	80066b2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	4b2b      	ldr	r3, [pc, #172]	@ (8006748 <HAL_DMA_Init+0xd8>)
 800669a:	4413      	add	r3, r2
 800669c:	4a2b      	ldr	r2, [pc, #172]	@ (800674c <HAL_DMA_Init+0xdc>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	009a      	lsls	r2, r3, #2
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a28      	ldr	r2, [pc, #160]	@ (8006750 <HAL_DMA_Init+0xe0>)
 80066ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80066b0:	e00e      	b.n	80066d0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	4b26      	ldr	r3, [pc, #152]	@ (8006754 <HAL_DMA_Init+0xe4>)
 80066ba:	4413      	add	r3, r2
 80066bc:	4a23      	ldr	r2, [pc, #140]	@ (800674c <HAL_DMA_Init+0xdc>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	091b      	lsrs	r3, r3, #4
 80066c4:	009a      	lsls	r2, r3, #2
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a22      	ldr	r2, [pc, #136]	@ (8006758 <HAL_DMA_Init+0xe8>)
 80066ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80066e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80066ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80066f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800670c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr
 8006744:	40020407 	.word	0x40020407
 8006748:	bffdfff8 	.word	0xbffdfff8
 800674c:	cccccccd 	.word	0xcccccccd
 8006750:	40020000 	.word	0x40020000
 8006754:	bffdfbf8 	.word	0xbffdfbf8
 8006758:	40020400 	.word	0x40020400

0800675c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006774:	2b01      	cmp	r3, #1
 8006776:	d101      	bne.n	800677c <HAL_DMA_Start_IT+0x20>
 8006778:	2302      	movs	r3, #2
 800677a:	e04b      	b.n	8006814 <HAL_DMA_Start_IT+0xb8>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d13a      	bne.n	8006806 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fbb1 	bl	8006f1c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 020e 	orr.w	r2, r2, #14
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e00f      	b.n	80067f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 020a 	orr.w	r2, r2, #10
 80067f2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0201 	orr.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]
 8006804:	e005      	b.n	8006812 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800680e:	2302      	movs	r3, #2
 8006810:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d008      	beq.n	8006846 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2204      	movs	r2, #4
 8006838:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e020      	b.n	8006888 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 020e 	bic.w	r2, r2, #14
 8006854:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686e:	2101      	movs	r1, #1
 8006870:	fa01 f202 	lsl.w	r2, r1, r2
 8006874:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr
	...

08006894 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d005      	beq.n	80068b8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2204      	movs	r2, #4
 80068b0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	73fb      	strb	r3, [r7, #15]
 80068b6:	e0d6      	b.n	8006a66 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 020e 	bic.w	r2, r2, #14
 80068c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0201 	bic.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	4b64      	ldr	r3, [pc, #400]	@ (8006a70 <HAL_DMA_Abort_IT+0x1dc>)
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d958      	bls.n	8006996 <HAL_DMA_Abort_IT+0x102>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a62      	ldr	r2, [pc, #392]	@ (8006a74 <HAL_DMA_Abort_IT+0x1e0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d04f      	beq.n	800698e <HAL_DMA_Abort_IT+0xfa>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a61      	ldr	r2, [pc, #388]	@ (8006a78 <HAL_DMA_Abort_IT+0x1e4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d048      	beq.n	800698a <HAL_DMA_Abort_IT+0xf6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a5f      	ldr	r2, [pc, #380]	@ (8006a7c <HAL_DMA_Abort_IT+0x1e8>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d040      	beq.n	8006984 <HAL_DMA_Abort_IT+0xf0>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a5e      	ldr	r2, [pc, #376]	@ (8006a80 <HAL_DMA_Abort_IT+0x1ec>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d038      	beq.n	800697e <HAL_DMA_Abort_IT+0xea>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a5c      	ldr	r2, [pc, #368]	@ (8006a84 <HAL_DMA_Abort_IT+0x1f0>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d030      	beq.n	8006978 <HAL_DMA_Abort_IT+0xe4>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a5b      	ldr	r2, [pc, #364]	@ (8006a88 <HAL_DMA_Abort_IT+0x1f4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d028      	beq.n	8006972 <HAL_DMA_Abort_IT+0xde>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a52      	ldr	r2, [pc, #328]	@ (8006a70 <HAL_DMA_Abort_IT+0x1dc>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d020      	beq.n	800696c <HAL_DMA_Abort_IT+0xd8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a57      	ldr	r2, [pc, #348]	@ (8006a8c <HAL_DMA_Abort_IT+0x1f8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d019      	beq.n	8006968 <HAL_DMA_Abort_IT+0xd4>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a55      	ldr	r2, [pc, #340]	@ (8006a90 <HAL_DMA_Abort_IT+0x1fc>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d012      	beq.n	8006964 <HAL_DMA_Abort_IT+0xd0>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a54      	ldr	r2, [pc, #336]	@ (8006a94 <HAL_DMA_Abort_IT+0x200>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00a      	beq.n	800695e <HAL_DMA_Abort_IT+0xca>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a52      	ldr	r2, [pc, #328]	@ (8006a98 <HAL_DMA_Abort_IT+0x204>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d102      	bne.n	8006958 <HAL_DMA_Abort_IT+0xc4>
 8006952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006956:	e01b      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 8006958:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800695c:	e018      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 800695e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006962:	e015      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 8006964:	2310      	movs	r3, #16
 8006966:	e013      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 8006968:	2301      	movs	r3, #1
 800696a:	e011      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 800696c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006970:	e00e      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 8006972:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006976:	e00b      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 8006978:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800697c:	e008      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 800697e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006982:	e005      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 8006984:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006988:	e002      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 800698a:	2310      	movs	r3, #16
 800698c:	e000      	b.n	8006990 <HAL_DMA_Abort_IT+0xfc>
 800698e:	2301      	movs	r3, #1
 8006990:	4a42      	ldr	r2, [pc, #264]	@ (8006a9c <HAL_DMA_Abort_IT+0x208>)
 8006992:	6053      	str	r3, [r2, #4]
 8006994:	e057      	b.n	8006a46 <HAL_DMA_Abort_IT+0x1b2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a36      	ldr	r2, [pc, #216]	@ (8006a74 <HAL_DMA_Abort_IT+0x1e0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d04f      	beq.n	8006a40 <HAL_DMA_Abort_IT+0x1ac>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a34      	ldr	r2, [pc, #208]	@ (8006a78 <HAL_DMA_Abort_IT+0x1e4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d048      	beq.n	8006a3c <HAL_DMA_Abort_IT+0x1a8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a33      	ldr	r2, [pc, #204]	@ (8006a7c <HAL_DMA_Abort_IT+0x1e8>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d040      	beq.n	8006a36 <HAL_DMA_Abort_IT+0x1a2>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a31      	ldr	r2, [pc, #196]	@ (8006a80 <HAL_DMA_Abort_IT+0x1ec>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d038      	beq.n	8006a30 <HAL_DMA_Abort_IT+0x19c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a30      	ldr	r2, [pc, #192]	@ (8006a84 <HAL_DMA_Abort_IT+0x1f0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d030      	beq.n	8006a2a <HAL_DMA_Abort_IT+0x196>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006a88 <HAL_DMA_Abort_IT+0x1f4>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d028      	beq.n	8006a24 <HAL_DMA_Abort_IT+0x190>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a26      	ldr	r2, [pc, #152]	@ (8006a70 <HAL_DMA_Abort_IT+0x1dc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d020      	beq.n	8006a1e <HAL_DMA_Abort_IT+0x18a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a2a      	ldr	r2, [pc, #168]	@ (8006a8c <HAL_DMA_Abort_IT+0x1f8>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d019      	beq.n	8006a1a <HAL_DMA_Abort_IT+0x186>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a29      	ldr	r2, [pc, #164]	@ (8006a90 <HAL_DMA_Abort_IT+0x1fc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d012      	beq.n	8006a16 <HAL_DMA_Abort_IT+0x182>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a27      	ldr	r2, [pc, #156]	@ (8006a94 <HAL_DMA_Abort_IT+0x200>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d00a      	beq.n	8006a10 <HAL_DMA_Abort_IT+0x17c>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a26      	ldr	r2, [pc, #152]	@ (8006a98 <HAL_DMA_Abort_IT+0x204>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d102      	bne.n	8006a0a <HAL_DMA_Abort_IT+0x176>
 8006a04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a08:	e01b      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a0e:	e018      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a14:	e015      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a16:	2310      	movs	r3, #16
 8006a18:	e013      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e011      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006a22:	e00e      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006a28:	e00b      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a2e:	e008      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a34:	e005      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a3a:	e002      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	e000      	b.n	8006a42 <HAL_DMA_Abort_IT+0x1ae>
 8006a40:	2301      	movs	r3, #1
 8006a42:	4a17      	ldr	r2, [pc, #92]	@ (8006aa0 <HAL_DMA_Abort_IT+0x20c>)
 8006a44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	4798      	blx	r3
    } 
  }
  return status;
 8006a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	40020080 	.word	0x40020080
 8006a74:	40020008 	.word	0x40020008
 8006a78:	4002001c 	.word	0x4002001c
 8006a7c:	40020030 	.word	0x40020030
 8006a80:	40020044 	.word	0x40020044
 8006a84:	40020058 	.word	0x40020058
 8006a88:	4002006c 	.word	0x4002006c
 8006a8c:	40020408 	.word	0x40020408
 8006a90:	4002041c 	.word	0x4002041c
 8006a94:	40020430 	.word	0x40020430
 8006a98:	40020444 	.word	0x40020444
 8006a9c:	40020400 	.word	0x40020400
 8006aa0:	40020000 	.word	0x40020000

08006aa4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 80f1 	beq.w	8006cb0 <HAL_DMA_IRQHandler+0x20c>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f000 80eb 	beq.w	8006cb0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d107      	bne.n	8006af8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0204 	bic.w	r2, r2, #4
 8006af6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	4b5f      	ldr	r3, [pc, #380]	@ (8006c7c <HAL_DMA_IRQHandler+0x1d8>)
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d958      	bls.n	8006bb6 <HAL_DMA_IRQHandler+0x112>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a5d      	ldr	r2, [pc, #372]	@ (8006c80 <HAL_DMA_IRQHandler+0x1dc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d04f      	beq.n	8006bae <HAL_DMA_IRQHandler+0x10a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a5c      	ldr	r2, [pc, #368]	@ (8006c84 <HAL_DMA_IRQHandler+0x1e0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d048      	beq.n	8006baa <HAL_DMA_IRQHandler+0x106>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8006c88 <HAL_DMA_IRQHandler+0x1e4>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d040      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x100>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a59      	ldr	r2, [pc, #356]	@ (8006c8c <HAL_DMA_IRQHandler+0x1e8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d038      	beq.n	8006b9e <HAL_DMA_IRQHandler+0xfa>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a57      	ldr	r2, [pc, #348]	@ (8006c90 <HAL_DMA_IRQHandler+0x1ec>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d030      	beq.n	8006b98 <HAL_DMA_IRQHandler+0xf4>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a56      	ldr	r2, [pc, #344]	@ (8006c94 <HAL_DMA_IRQHandler+0x1f0>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d028      	beq.n	8006b92 <HAL_DMA_IRQHandler+0xee>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a4d      	ldr	r2, [pc, #308]	@ (8006c7c <HAL_DMA_IRQHandler+0x1d8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d020      	beq.n	8006b8c <HAL_DMA_IRQHandler+0xe8>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a52      	ldr	r2, [pc, #328]	@ (8006c98 <HAL_DMA_IRQHandler+0x1f4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d019      	beq.n	8006b88 <HAL_DMA_IRQHandler+0xe4>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a50      	ldr	r2, [pc, #320]	@ (8006c9c <HAL_DMA_IRQHandler+0x1f8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d012      	beq.n	8006b84 <HAL_DMA_IRQHandler+0xe0>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a4f      	ldr	r2, [pc, #316]	@ (8006ca0 <HAL_DMA_IRQHandler+0x1fc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d00a      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xda>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8006ca4 <HAL_DMA_IRQHandler+0x200>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d102      	bne.n	8006b78 <HAL_DMA_IRQHandler+0xd4>
 8006b72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006b76:	e01b      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b78:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006b7c:	e018      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b82:	e015      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b84:	2340      	movs	r3, #64	@ 0x40
 8006b86:	e013      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	e011      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b8c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006b90:	e00e      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006b96:	e00b      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006b9c:	e008      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006b9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006ba2:	e005      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006ba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ba8:	e002      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006baa:	2340      	movs	r3, #64	@ 0x40
 8006bac:	e000      	b.n	8006bb0 <HAL_DMA_IRQHandler+0x10c>
 8006bae:	2304      	movs	r3, #4
 8006bb0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ca8 <HAL_DMA_IRQHandler+0x204>)
 8006bb2:	6053      	str	r3, [r2, #4]
 8006bb4:	e057      	b.n	8006c66 <HAL_DMA_IRQHandler+0x1c2>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a31      	ldr	r2, [pc, #196]	@ (8006c80 <HAL_DMA_IRQHandler+0x1dc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04f      	beq.n	8006c60 <HAL_DMA_IRQHandler+0x1bc>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a2f      	ldr	r2, [pc, #188]	@ (8006c84 <HAL_DMA_IRQHandler+0x1e0>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d048      	beq.n	8006c5c <HAL_DMA_IRQHandler+0x1b8>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2e      	ldr	r2, [pc, #184]	@ (8006c88 <HAL_DMA_IRQHandler+0x1e4>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_DMA_IRQHandler+0x1b2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006c8c <HAL_DMA_IRQHandler+0x1e8>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d038      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x1ac>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a2b      	ldr	r2, [pc, #172]	@ (8006c90 <HAL_DMA_IRQHandler+0x1ec>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d030      	beq.n	8006c4a <HAL_DMA_IRQHandler+0x1a6>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a29      	ldr	r2, [pc, #164]	@ (8006c94 <HAL_DMA_IRQHandler+0x1f0>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d028      	beq.n	8006c44 <HAL_DMA_IRQHandler+0x1a0>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a21      	ldr	r2, [pc, #132]	@ (8006c7c <HAL_DMA_IRQHandler+0x1d8>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d020      	beq.n	8006c3e <HAL_DMA_IRQHandler+0x19a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a25      	ldr	r2, [pc, #148]	@ (8006c98 <HAL_DMA_IRQHandler+0x1f4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d019      	beq.n	8006c3a <HAL_DMA_IRQHandler+0x196>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a24      	ldr	r2, [pc, #144]	@ (8006c9c <HAL_DMA_IRQHandler+0x1f8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d012      	beq.n	8006c36 <HAL_DMA_IRQHandler+0x192>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a22      	ldr	r2, [pc, #136]	@ (8006ca0 <HAL_DMA_IRQHandler+0x1fc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d00a      	beq.n	8006c30 <HAL_DMA_IRQHandler+0x18c>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a21      	ldr	r2, [pc, #132]	@ (8006ca4 <HAL_DMA_IRQHandler+0x200>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d102      	bne.n	8006c2a <HAL_DMA_IRQHandler+0x186>
 8006c24:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c28:	e01b      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c2a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006c2e:	e018      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c34:	e015      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c36:	2340      	movs	r3, #64	@ 0x40
 8006c38:	e013      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c3a:	2304      	movs	r3, #4
 8006c3c:	e011      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006c42:	e00e      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c44:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006c48:	e00b      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c4a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006c4e:	e008      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006c54:	e005      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006c5a:	e002      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c5c:	2340      	movs	r3, #64	@ 0x40
 8006c5e:	e000      	b.n	8006c62 <HAL_DMA_IRQHandler+0x1be>
 8006c60:	2304      	movs	r3, #4
 8006c62:	4a12      	ldr	r2, [pc, #72]	@ (8006cac <HAL_DMA_IRQHandler+0x208>)
 8006c64:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 8136 	beq.w	8006edc <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006c78:	e130      	b.n	8006edc <HAL_DMA_IRQHandler+0x438>
 8006c7a:	bf00      	nop
 8006c7c:	40020080 	.word	0x40020080
 8006c80:	40020008 	.word	0x40020008
 8006c84:	4002001c 	.word	0x4002001c
 8006c88:	40020030 	.word	0x40020030
 8006c8c:	40020044 	.word	0x40020044
 8006c90:	40020058 	.word	0x40020058
 8006c94:	4002006c 	.word	0x4002006c
 8006c98:	40020408 	.word	0x40020408
 8006c9c:	4002041c 	.word	0x4002041c
 8006ca0:	40020430 	.word	0x40020430
 8006ca4:	40020444 	.word	0x40020444
 8006ca8:	40020400 	.word	0x40020400
 8006cac:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb4:	2202      	movs	r2, #2
 8006cb6:	409a      	lsls	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 80dd 	beq.w	8006e7c <HAL_DMA_IRQHandler+0x3d8>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80d7 	beq.w	8006e7c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 020a 	bic.w	r2, r2, #10
 8006cea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8006ee8 <HAL_DMA_IRQHandler+0x444>)
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d958      	bls.n	8006db2 <HAL_DMA_IRQHandler+0x30e>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a79      	ldr	r2, [pc, #484]	@ (8006eec <HAL_DMA_IRQHandler+0x448>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d04f      	beq.n	8006daa <HAL_DMA_IRQHandler+0x306>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a78      	ldr	r2, [pc, #480]	@ (8006ef0 <HAL_DMA_IRQHandler+0x44c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d048      	beq.n	8006da6 <HAL_DMA_IRQHandler+0x302>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a76      	ldr	r2, [pc, #472]	@ (8006ef4 <HAL_DMA_IRQHandler+0x450>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d040      	beq.n	8006da0 <HAL_DMA_IRQHandler+0x2fc>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a75      	ldr	r2, [pc, #468]	@ (8006ef8 <HAL_DMA_IRQHandler+0x454>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d038      	beq.n	8006d9a <HAL_DMA_IRQHandler+0x2f6>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a73      	ldr	r2, [pc, #460]	@ (8006efc <HAL_DMA_IRQHandler+0x458>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d030      	beq.n	8006d94 <HAL_DMA_IRQHandler+0x2f0>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a72      	ldr	r2, [pc, #456]	@ (8006f00 <HAL_DMA_IRQHandler+0x45c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d028      	beq.n	8006d8e <HAL_DMA_IRQHandler+0x2ea>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a69      	ldr	r2, [pc, #420]	@ (8006ee8 <HAL_DMA_IRQHandler+0x444>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d020      	beq.n	8006d88 <HAL_DMA_IRQHandler+0x2e4>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a6e      	ldr	r2, [pc, #440]	@ (8006f04 <HAL_DMA_IRQHandler+0x460>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d019      	beq.n	8006d84 <HAL_DMA_IRQHandler+0x2e0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a6c      	ldr	r2, [pc, #432]	@ (8006f08 <HAL_DMA_IRQHandler+0x464>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d012      	beq.n	8006d80 <HAL_DMA_IRQHandler+0x2dc>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8006f0c <HAL_DMA_IRQHandler+0x468>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00a      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x2d6>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a69      	ldr	r2, [pc, #420]	@ (8006f10 <HAL_DMA_IRQHandler+0x46c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d102      	bne.n	8006d74 <HAL_DMA_IRQHandler+0x2d0>
 8006d6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d72:	e01b      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d78:	e018      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d7e:	e015      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d80:	2320      	movs	r3, #32
 8006d82:	e013      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e011      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d8c:	e00e      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d8e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006d92:	e00b      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d98:	e008      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006d9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006d9e:	e005      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006da4:	e002      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006da6:	2320      	movs	r3, #32
 8006da8:	e000      	b.n	8006dac <HAL_DMA_IRQHandler+0x308>
 8006daa:	2302      	movs	r3, #2
 8006dac:	4a59      	ldr	r2, [pc, #356]	@ (8006f14 <HAL_DMA_IRQHandler+0x470>)
 8006dae:	6053      	str	r3, [r2, #4]
 8006db0:	e057      	b.n	8006e62 <HAL_DMA_IRQHandler+0x3be>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a4d      	ldr	r2, [pc, #308]	@ (8006eec <HAL_DMA_IRQHandler+0x448>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d04f      	beq.n	8006e5c <HAL_DMA_IRQHandler+0x3b8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8006ef0 <HAL_DMA_IRQHandler+0x44c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d048      	beq.n	8006e58 <HAL_DMA_IRQHandler+0x3b4>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a4a      	ldr	r2, [pc, #296]	@ (8006ef4 <HAL_DMA_IRQHandler+0x450>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d040      	beq.n	8006e52 <HAL_DMA_IRQHandler+0x3ae>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a48      	ldr	r2, [pc, #288]	@ (8006ef8 <HAL_DMA_IRQHandler+0x454>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d038      	beq.n	8006e4c <HAL_DMA_IRQHandler+0x3a8>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a47      	ldr	r2, [pc, #284]	@ (8006efc <HAL_DMA_IRQHandler+0x458>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d030      	beq.n	8006e46 <HAL_DMA_IRQHandler+0x3a2>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a45      	ldr	r2, [pc, #276]	@ (8006f00 <HAL_DMA_IRQHandler+0x45c>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d028      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x39c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a3d      	ldr	r2, [pc, #244]	@ (8006ee8 <HAL_DMA_IRQHandler+0x444>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d020      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x396>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a41      	ldr	r2, [pc, #260]	@ (8006f04 <HAL_DMA_IRQHandler+0x460>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d019      	beq.n	8006e36 <HAL_DMA_IRQHandler+0x392>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a40      	ldr	r2, [pc, #256]	@ (8006f08 <HAL_DMA_IRQHandler+0x464>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d012      	beq.n	8006e32 <HAL_DMA_IRQHandler+0x38e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a3e      	ldr	r2, [pc, #248]	@ (8006f0c <HAL_DMA_IRQHandler+0x468>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d00a      	beq.n	8006e2c <HAL_DMA_IRQHandler+0x388>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8006f10 <HAL_DMA_IRQHandler+0x46c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d102      	bne.n	8006e26 <HAL_DMA_IRQHandler+0x382>
 8006e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e24:	e01b      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e2a:	e018      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e30:	e015      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e32:	2320      	movs	r3, #32
 8006e34:	e013      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e011      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e3e:	e00e      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e40:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006e44:	e00b      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e46:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006e4a:	e008      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e50:	e005      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e56:	e002      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e58:	2320      	movs	r3, #32
 8006e5a:	e000      	b.n	8006e5e <HAL_DMA_IRQHandler+0x3ba>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	4a2e      	ldr	r2, [pc, #184]	@ (8006f18 <HAL_DMA_IRQHandler+0x474>)
 8006e60:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d034      	beq.n	8006edc <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006e7a:	e02f      	b.n	8006edc <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	2208      	movs	r2, #8
 8006e82:	409a      	lsls	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4013      	ands	r3, r2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d028      	beq.n	8006ede <HAL_DMA_IRQHandler+0x43a>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d023      	beq.n	8006ede <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 020e 	bic.w	r2, r2, #14
 8006ea4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eae:	2101      	movs	r1, #1
 8006eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d004      	beq.n	8006ede <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3
    }
  }
  return;
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
}
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40020080 	.word	0x40020080
 8006eec:	40020008 	.word	0x40020008
 8006ef0:	4002001c 	.word	0x4002001c
 8006ef4:	40020030 	.word	0x40020030
 8006ef8:	40020044 	.word	0x40020044
 8006efc:	40020058 	.word	0x40020058
 8006f00:	4002006c 	.word	0x4002006c
 8006f04:	40020408 	.word	0x40020408
 8006f08:	4002041c 	.word	0x4002041c
 8006f0c:	40020430 	.word	0x40020430
 8006f10:	40020444 	.word	0x40020444
 8006f14:	40020400 	.word	0x40020400
 8006f18:	40020000 	.word	0x40020000

08006f1c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f32:	2101      	movs	r1, #1
 8006f34:	fa01 f202 	lsl.w	r2, r1, r2
 8006f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d108      	bne.n	8006f5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f5a:	e007      	b.n	8006f6c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]
}
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bc80      	pop	{r7}
 8006f74:	4770      	bx	lr
	...

08006f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b08b      	sub	sp, #44	@ 0x2c
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006f86:	2300      	movs	r3, #0
 8006f88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f8a:	e179      	b.n	8007280 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69fa      	ldr	r2, [r7, #28]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	f040 8168 	bne.w	800727a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4a96      	ldr	r2, [pc, #600]	@ (8007208 <HAL_GPIO_Init+0x290>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d05e      	beq.n	8007072 <HAL_GPIO_Init+0xfa>
 8006fb4:	4a94      	ldr	r2, [pc, #592]	@ (8007208 <HAL_GPIO_Init+0x290>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d875      	bhi.n	80070a6 <HAL_GPIO_Init+0x12e>
 8006fba:	4a94      	ldr	r2, [pc, #592]	@ (800720c <HAL_GPIO_Init+0x294>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d058      	beq.n	8007072 <HAL_GPIO_Init+0xfa>
 8006fc0:	4a92      	ldr	r2, [pc, #584]	@ (800720c <HAL_GPIO_Init+0x294>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d86f      	bhi.n	80070a6 <HAL_GPIO_Init+0x12e>
 8006fc6:	4a92      	ldr	r2, [pc, #584]	@ (8007210 <HAL_GPIO_Init+0x298>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d052      	beq.n	8007072 <HAL_GPIO_Init+0xfa>
 8006fcc:	4a90      	ldr	r2, [pc, #576]	@ (8007210 <HAL_GPIO_Init+0x298>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d869      	bhi.n	80070a6 <HAL_GPIO_Init+0x12e>
 8006fd2:	4a90      	ldr	r2, [pc, #576]	@ (8007214 <HAL_GPIO_Init+0x29c>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d04c      	beq.n	8007072 <HAL_GPIO_Init+0xfa>
 8006fd8:	4a8e      	ldr	r2, [pc, #568]	@ (8007214 <HAL_GPIO_Init+0x29c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d863      	bhi.n	80070a6 <HAL_GPIO_Init+0x12e>
 8006fde:	4a8e      	ldr	r2, [pc, #568]	@ (8007218 <HAL_GPIO_Init+0x2a0>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d046      	beq.n	8007072 <HAL_GPIO_Init+0xfa>
 8006fe4:	4a8c      	ldr	r2, [pc, #560]	@ (8007218 <HAL_GPIO_Init+0x2a0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d85d      	bhi.n	80070a6 <HAL_GPIO_Init+0x12e>
 8006fea:	2b12      	cmp	r3, #18
 8006fec:	d82a      	bhi.n	8007044 <HAL_GPIO_Init+0xcc>
 8006fee:	2b12      	cmp	r3, #18
 8006ff0:	d859      	bhi.n	80070a6 <HAL_GPIO_Init+0x12e>
 8006ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <HAL_GPIO_Init+0x80>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007073 	.word	0x08007073
 8006ffc:	0800704d 	.word	0x0800704d
 8007000:	0800705f 	.word	0x0800705f
 8007004:	080070a1 	.word	0x080070a1
 8007008:	080070a7 	.word	0x080070a7
 800700c:	080070a7 	.word	0x080070a7
 8007010:	080070a7 	.word	0x080070a7
 8007014:	080070a7 	.word	0x080070a7
 8007018:	080070a7 	.word	0x080070a7
 800701c:	080070a7 	.word	0x080070a7
 8007020:	080070a7 	.word	0x080070a7
 8007024:	080070a7 	.word	0x080070a7
 8007028:	080070a7 	.word	0x080070a7
 800702c:	080070a7 	.word	0x080070a7
 8007030:	080070a7 	.word	0x080070a7
 8007034:	080070a7 	.word	0x080070a7
 8007038:	080070a7 	.word	0x080070a7
 800703c:	08007055 	.word	0x08007055
 8007040:	08007069 	.word	0x08007069
 8007044:	4a75      	ldr	r2, [pc, #468]	@ (800721c <HAL_GPIO_Init+0x2a4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800704a:	e02c      	b.n	80070a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	623b      	str	r3, [r7, #32]
          break;
 8007052:	e029      	b.n	80070a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	623b      	str	r3, [r7, #32]
          break;
 800705c:	e024      	b.n	80070a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	3308      	adds	r3, #8
 8007064:	623b      	str	r3, [r7, #32]
          break;
 8007066:	e01f      	b.n	80070a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	330c      	adds	r3, #12
 800706e:	623b      	str	r3, [r7, #32]
          break;
 8007070:	e01a      	b.n	80070a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800707a:	2304      	movs	r3, #4
 800707c:	623b      	str	r3, [r7, #32]
          break;
 800707e:	e013      	b.n	80070a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d105      	bne.n	8007094 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007088:	2308      	movs	r3, #8
 800708a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	611a      	str	r2, [r3, #16]
          break;
 8007092:	e009      	b.n	80070a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007094:	2308      	movs	r3, #8
 8007096:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	615a      	str	r2, [r3, #20]
          break;
 800709e:	e003      	b.n	80070a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
          break;
 80070a4:	e000      	b.n	80070a8 <HAL_GPIO_Init+0x130>
          break;
 80070a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	2bff      	cmp	r3, #255	@ 0xff
 80070ac:	d801      	bhi.n	80070b2 <HAL_GPIO_Init+0x13a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	e001      	b.n	80070b6 <HAL_GPIO_Init+0x13e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	2bff      	cmp	r3, #255	@ 0xff
 80070bc:	d802      	bhi.n	80070c4 <HAL_GPIO_Init+0x14c>
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	e002      	b.n	80070ca <HAL_GPIO_Init+0x152>
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	3b08      	subs	r3, #8
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	210f      	movs	r1, #15
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	fa01 f303 	lsl.w	r3, r1, r3
 80070d8:	43db      	mvns	r3, r3
 80070da:	401a      	ands	r2, r3
 80070dc:	6a39      	ldr	r1, [r7, #32]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	fa01 f303 	lsl.w	r3, r1, r3
 80070e4:	431a      	orrs	r2, r3
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80c1 	beq.w	800727a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80070f8:	4b49      	ldr	r3, [pc, #292]	@ (8007220 <HAL_GPIO_Init+0x2a8>)
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	4a48      	ldr	r2, [pc, #288]	@ (8007220 <HAL_GPIO_Init+0x2a8>)
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	6193      	str	r3, [r2, #24]
 8007104:	4b46      	ldr	r3, [pc, #280]	@ (8007220 <HAL_GPIO_Init+0x2a8>)
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007110:	4a44      	ldr	r2, [pc, #272]	@ (8007224 <HAL_GPIO_Init+0x2ac>)
 8007112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007114:	089b      	lsrs	r3, r3, #2
 8007116:	3302      	adds	r3, #2
 8007118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800711c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	220f      	movs	r2, #15
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	43db      	mvns	r3, r3
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4013      	ands	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	4a3c      	ldr	r2, [pc, #240]	@ (8007228 <HAL_GPIO_Init+0x2b0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d01f      	beq.n	800717c <HAL_GPIO_Init+0x204>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a3b      	ldr	r2, [pc, #236]	@ (800722c <HAL_GPIO_Init+0x2b4>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d019      	beq.n	8007178 <HAL_GPIO_Init+0x200>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a3a      	ldr	r2, [pc, #232]	@ (8007230 <HAL_GPIO_Init+0x2b8>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <HAL_GPIO_Init+0x1fc>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a39      	ldr	r2, [pc, #228]	@ (8007234 <HAL_GPIO_Init+0x2bc>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00d      	beq.n	8007170 <HAL_GPIO_Init+0x1f8>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a38      	ldr	r2, [pc, #224]	@ (8007238 <HAL_GPIO_Init+0x2c0>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d007      	beq.n	800716c <HAL_GPIO_Init+0x1f4>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a37      	ldr	r2, [pc, #220]	@ (800723c <HAL_GPIO_Init+0x2c4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d101      	bne.n	8007168 <HAL_GPIO_Init+0x1f0>
 8007164:	2305      	movs	r3, #5
 8007166:	e00a      	b.n	800717e <HAL_GPIO_Init+0x206>
 8007168:	2306      	movs	r3, #6
 800716a:	e008      	b.n	800717e <HAL_GPIO_Init+0x206>
 800716c:	2304      	movs	r3, #4
 800716e:	e006      	b.n	800717e <HAL_GPIO_Init+0x206>
 8007170:	2303      	movs	r3, #3
 8007172:	e004      	b.n	800717e <HAL_GPIO_Init+0x206>
 8007174:	2302      	movs	r3, #2
 8007176:	e002      	b.n	800717e <HAL_GPIO_Init+0x206>
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <HAL_GPIO_Init+0x206>
 800717c:	2300      	movs	r3, #0
 800717e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007180:	f002 0203 	and.w	r2, r2, #3
 8007184:	0092      	lsls	r2, r2, #2
 8007186:	4093      	lsls	r3, r2
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800718e:	4925      	ldr	r1, [pc, #148]	@ (8007224 <HAL_GPIO_Init+0x2ac>)
 8007190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007192:	089b      	lsrs	r3, r3, #2
 8007194:	3302      	adds	r3, #2
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80071a8:	4b25      	ldr	r3, [pc, #148]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	4924      	ldr	r1, [pc, #144]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	608b      	str	r3, [r1, #8]
 80071b4:	e006      	b.n	80071c4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80071b6:	4b22      	ldr	r3, [pc, #136]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	43db      	mvns	r3, r3
 80071be:	4920      	ldr	r1, [pc, #128]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d006      	beq.n	80071de <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80071d0:	4b1b      	ldr	r3, [pc, #108]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	491a      	ldr	r1, [pc, #104]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60cb      	str	r3, [r1, #12]
 80071dc:	e006      	b.n	80071ec <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80071de:	4b18      	ldr	r3, [pc, #96]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	43db      	mvns	r3, r3
 80071e6:	4916      	ldr	r1, [pc, #88]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071e8:	4013      	ands	r3, r2
 80071ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d025      	beq.n	8007244 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80071f8:	4b11      	ldr	r3, [pc, #68]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4910      	ldr	r1, [pc, #64]	@ (8007240 <HAL_GPIO_Init+0x2c8>)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	4313      	orrs	r3, r2
 8007202:	604b      	str	r3, [r1, #4]
 8007204:	e025      	b.n	8007252 <HAL_GPIO_Init+0x2da>
 8007206:	bf00      	nop
 8007208:	10320000 	.word	0x10320000
 800720c:	10310000 	.word	0x10310000
 8007210:	10220000 	.word	0x10220000
 8007214:	10210000 	.word	0x10210000
 8007218:	10120000 	.word	0x10120000
 800721c:	10110000 	.word	0x10110000
 8007220:	40021000 	.word	0x40021000
 8007224:	40010000 	.word	0x40010000
 8007228:	40010800 	.word	0x40010800
 800722c:	40010c00 	.word	0x40010c00
 8007230:	40011000 	.word	0x40011000
 8007234:	40011400 	.word	0x40011400
 8007238:	40011800 	.word	0x40011800
 800723c:	40011c00 	.word	0x40011c00
 8007240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007244:	4b15      	ldr	r3, [pc, #84]	@ (800729c <HAL_GPIO_Init+0x324>)
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	43db      	mvns	r3, r3
 800724c:	4913      	ldr	r1, [pc, #76]	@ (800729c <HAL_GPIO_Init+0x324>)
 800724e:	4013      	ands	r3, r2
 8007250:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d006      	beq.n	800726c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800725e:	4b0f      	ldr	r3, [pc, #60]	@ (800729c <HAL_GPIO_Init+0x324>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	490e      	ldr	r1, [pc, #56]	@ (800729c <HAL_GPIO_Init+0x324>)
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	4313      	orrs	r3, r2
 8007268:	600b      	str	r3, [r1, #0]
 800726a:	e006      	b.n	800727a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800726c:	4b0b      	ldr	r3, [pc, #44]	@ (800729c <HAL_GPIO_Init+0x324>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	43db      	mvns	r3, r3
 8007274:	4909      	ldr	r1, [pc, #36]	@ (800729c <HAL_GPIO_Init+0x324>)
 8007276:	4013      	ands	r3, r2
 8007278:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	3301      	adds	r3, #1
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	f47f ae7e 	bne.w	8006f8c <HAL_GPIO_Init+0x14>
  }
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	372c      	adds	r7, #44	@ 0x2c
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr
 800729c:	40010400 	.word	0x40010400

080072a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	887b      	ldrh	r3, [r7, #2]
 80072b2:	4013      	ands	r3, r2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072b8:	2301      	movs	r3, #1
 80072ba:	73fb      	strb	r3, [r7, #15]
 80072bc:	e001      	b.n	80072c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr

080072ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
 80072d6:	460b      	mov	r3, r1
 80072d8:	807b      	strh	r3, [r7, #2]
 80072da:	4613      	mov	r3, r2
 80072dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072de:	787b      	ldrb	r3, [r7, #1]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d003      	beq.n	80072ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80072e4:	887a      	ldrh	r2, [r7, #2]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80072ea:	e003      	b.n	80072f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80072ec:	887b      	ldrh	r3, [r7, #2]
 80072ee:	041a      	lsls	r2, r3, #16
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	611a      	str	r2, [r3, #16]
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bc80      	pop	{r7}
 80072fc:	4770      	bx	lr
	...

08007300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e272      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 8087 	beq.w	800742e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007320:	4b92      	ldr	r3, [pc, #584]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f003 030c 	and.w	r3, r3, #12
 8007328:	2b04      	cmp	r3, #4
 800732a:	d00c      	beq.n	8007346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800732c:	4b8f      	ldr	r3, [pc, #572]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f003 030c 	and.w	r3, r3, #12
 8007334:	2b08      	cmp	r3, #8
 8007336:	d112      	bne.n	800735e <HAL_RCC_OscConfig+0x5e>
 8007338:	4b8c      	ldr	r3, [pc, #560]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007344:	d10b      	bne.n	800735e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007346:	4b89      	ldr	r3, [pc, #548]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d06c      	beq.n	800742c <HAL_RCC_OscConfig+0x12c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d168      	bne.n	800742c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e24c      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007366:	d106      	bne.n	8007376 <HAL_RCC_OscConfig+0x76>
 8007368:	4b80      	ldr	r3, [pc, #512]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a7f      	ldr	r2, [pc, #508]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 800736e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	e02e      	b.n	80073d4 <HAL_RCC_OscConfig+0xd4>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10c      	bne.n	8007398 <HAL_RCC_OscConfig+0x98>
 800737e:	4b7b      	ldr	r3, [pc, #492]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a7a      	ldr	r2, [pc, #488]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	4b78      	ldr	r3, [pc, #480]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a77      	ldr	r2, [pc, #476]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	e01d      	b.n	80073d4 <HAL_RCC_OscConfig+0xd4>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80073a0:	d10c      	bne.n	80073bc <HAL_RCC_OscConfig+0xbc>
 80073a2:	4b72      	ldr	r3, [pc, #456]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a71      	ldr	r2, [pc, #452]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	4b6f      	ldr	r3, [pc, #444]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a6e      	ldr	r2, [pc, #440]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	e00b      	b.n	80073d4 <HAL_RCC_OscConfig+0xd4>
 80073bc:	4b6b      	ldr	r3, [pc, #428]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a6a      	ldr	r2, [pc, #424]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	4b68      	ldr	r3, [pc, #416]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a67      	ldr	r2, [pc, #412]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80073d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d013      	beq.n	8007404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073dc:	f7ff f830 	bl	8006440 <HAL_GetTick>
 80073e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	e008      	b.n	80073f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073e4:	f7ff f82c 	bl	8006440 <HAL_GetTick>
 80073e8:	4602      	mov	r2, r0
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	2b64      	cmp	r3, #100	@ 0x64
 80073f0:	d901      	bls.n	80073f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e200      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f6:	4b5d      	ldr	r3, [pc, #372]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0f0      	beq.n	80073e4 <HAL_RCC_OscConfig+0xe4>
 8007402:	e014      	b.n	800742e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007404:	f7ff f81c 	bl	8006440 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800740c:	f7ff f818 	bl	8006440 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	@ 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e1ec      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741e:	4b53      	ldr	r3, [pc, #332]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f0      	bne.n	800740c <HAL_RCC_OscConfig+0x10c>
 800742a:	e000      	b.n	800742e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800742c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d063      	beq.n	8007502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800743a:	4b4c      	ldr	r3, [pc, #304]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f003 030c 	and.w	r3, r3, #12
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00b      	beq.n	800745e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007446:	4b49      	ldr	r3, [pc, #292]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b08      	cmp	r3, #8
 8007450:	d11c      	bne.n	800748c <HAL_RCC_OscConfig+0x18c>
 8007452:	4b46      	ldr	r3, [pc, #280]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d116      	bne.n	800748c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800745e:	4b43      	ldr	r3, [pc, #268]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d005      	beq.n	8007476 <HAL_RCC_OscConfig+0x176>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d001      	beq.n	8007476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e1c0      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007476:	4b3d      	ldr	r3, [pc, #244]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	695b      	ldr	r3, [r3, #20]
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	4939      	ldr	r1, [pc, #228]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007486:	4313      	orrs	r3, r2
 8007488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748a:	e03a      	b.n	8007502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d020      	beq.n	80074d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007494:	4b36      	ldr	r3, [pc, #216]	@ (8007570 <HAL_RCC_OscConfig+0x270>)
 8007496:	2201      	movs	r2, #1
 8007498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800749a:	f7fe ffd1 	bl	8006440 <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a2:	f7fe ffcd 	bl	8006440 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e1a1      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b4:	4b2d      	ldr	r3, [pc, #180]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0f0      	beq.n	80074a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074c0:	4b2a      	ldr	r3, [pc, #168]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4927      	ldr	r1, [pc, #156]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	600b      	str	r3, [r1, #0]
 80074d4:	e015      	b.n	8007502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074d6:	4b26      	ldr	r3, [pc, #152]	@ (8007570 <HAL_RCC_OscConfig+0x270>)
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074dc:	f7fe ffb0 	bl	8006440 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074e4:	f7fe ffac 	bl	8006440 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e180      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074f6:	4b1d      	ldr	r3, [pc, #116]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f0      	bne.n	80074e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0308 	and.w	r3, r3, #8
 800750a:	2b00      	cmp	r3, #0
 800750c:	d03a      	beq.n	8007584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d019      	beq.n	800754a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007516:	4b17      	ldr	r3, [pc, #92]	@ (8007574 <HAL_RCC_OscConfig+0x274>)
 8007518:	2201      	movs	r2, #1
 800751a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800751c:	f7fe ff90 	bl	8006440 <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007524:	f7fe ff8c 	bl	8006440 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e160      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <HAL_RCC_OscConfig+0x26c>)
 8007538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007542:	2001      	movs	r0, #1
 8007544:	f000 face 	bl	8007ae4 <RCC_Delay>
 8007548:	e01c      	b.n	8007584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800754a:	4b0a      	ldr	r3, [pc, #40]	@ (8007574 <HAL_RCC_OscConfig+0x274>)
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007550:	f7fe ff76 	bl	8006440 <HAL_GetTick>
 8007554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007556:	e00f      	b.n	8007578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007558:	f7fe ff72 	bl	8006440 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d908      	bls.n	8007578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e146      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
 800756a:	bf00      	nop
 800756c:	40021000 	.word	0x40021000
 8007570:	42420000 	.word	0x42420000
 8007574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007578:	4b92      	ldr	r3, [pc, #584]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800757a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d1e9      	bne.n	8007558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 80a6 	beq.w	80076de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007596:	4b8b      	ldr	r3, [pc, #556]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10d      	bne.n	80075be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a2:	4b88      	ldr	r3, [pc, #544]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	4a87      	ldr	r2, [pc, #540]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80075a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ac:	61d3      	str	r3, [r2, #28]
 80075ae:	4b85      	ldr	r3, [pc, #532]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075b6:	60bb      	str	r3, [r7, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ba:	2301      	movs	r3, #1
 80075bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075be:	4b82      	ldr	r3, [pc, #520]	@ (80077c8 <HAL_RCC_OscConfig+0x4c8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d118      	bne.n	80075fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075ca:	4b7f      	ldr	r3, [pc, #508]	@ (80077c8 <HAL_RCC_OscConfig+0x4c8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a7e      	ldr	r2, [pc, #504]	@ (80077c8 <HAL_RCC_OscConfig+0x4c8>)
 80075d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075d6:	f7fe ff33 	bl	8006440 <HAL_GetTick>
 80075da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075dc:	e008      	b.n	80075f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075de:	f7fe ff2f 	bl	8006440 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	2b64      	cmp	r3, #100	@ 0x64
 80075ea:	d901      	bls.n	80075f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e103      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075f0:	4b75      	ldr	r3, [pc, #468]	@ (80077c8 <HAL_RCC_OscConfig+0x4c8>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0f0      	beq.n	80075de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d106      	bne.n	8007612 <HAL_RCC_OscConfig+0x312>
 8007604:	4b6f      	ldr	r3, [pc, #444]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	4a6e      	ldr	r2, [pc, #440]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800760a:	f043 0301 	orr.w	r3, r3, #1
 800760e:	6213      	str	r3, [r2, #32]
 8007610:	e02d      	b.n	800766e <HAL_RCC_OscConfig+0x36e>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10c      	bne.n	8007634 <HAL_RCC_OscConfig+0x334>
 800761a:	4b6a      	ldr	r3, [pc, #424]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	4a69      	ldr	r2, [pc, #420]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	6213      	str	r3, [r2, #32]
 8007626:	4b67      	ldr	r3, [pc, #412]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	4a66      	ldr	r2, [pc, #408]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800762c:	f023 0304 	bic.w	r3, r3, #4
 8007630:	6213      	str	r3, [r2, #32]
 8007632:	e01c      	b.n	800766e <HAL_RCC_OscConfig+0x36e>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	2b05      	cmp	r3, #5
 800763a:	d10c      	bne.n	8007656 <HAL_RCC_OscConfig+0x356>
 800763c:	4b61      	ldr	r3, [pc, #388]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800763e:	6a1b      	ldr	r3, [r3, #32]
 8007640:	4a60      	ldr	r2, [pc, #384]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007642:	f043 0304 	orr.w	r3, r3, #4
 8007646:	6213      	str	r3, [r2, #32]
 8007648:	4b5e      	ldr	r3, [pc, #376]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	4a5d      	ldr	r2, [pc, #372]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	6213      	str	r3, [r2, #32]
 8007654:	e00b      	b.n	800766e <HAL_RCC_OscConfig+0x36e>
 8007656:	4b5b      	ldr	r3, [pc, #364]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	4a5a      	ldr	r2, [pc, #360]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	6213      	str	r3, [r2, #32]
 8007662:	4b58      	ldr	r3, [pc, #352]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	4a57      	ldr	r2, [pc, #348]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007668:	f023 0304 	bic.w	r3, r3, #4
 800766c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d015      	beq.n	80076a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007676:	f7fe fee3 	bl	8006440 <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800767c:	e00a      	b.n	8007694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800767e:	f7fe fedf 	bl	8006440 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800768c:	4293      	cmp	r3, r2
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e0b1      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007694:	4b4b      	ldr	r3, [pc, #300]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0ee      	beq.n	800767e <HAL_RCC_OscConfig+0x37e>
 80076a0:	e014      	b.n	80076cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076a2:	f7fe fecd 	bl	8006440 <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076a8:	e00a      	b.n	80076c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076aa:	f7fe fec9 	bl	8006440 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e09b      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076c0:	4b40      	ldr	r3, [pc, #256]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1ee      	bne.n	80076aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d105      	bne.n	80076de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076d2:	4b3c      	ldr	r3, [pc, #240]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80076d4:	69db      	ldr	r3, [r3, #28]
 80076d6:	4a3b      	ldr	r2, [pc, #236]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80076d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 8087 	beq.w	80077f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076e8:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f003 030c 	and.w	r3, r3, #12
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d061      	beq.n	80077b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d146      	bne.n	800778a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076fc:	4b33      	ldr	r3, [pc, #204]	@ (80077cc <HAL_RCC_OscConfig+0x4cc>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007702:	f7fe fe9d 	bl	8006440 <HAL_GetTick>
 8007706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007708:	e008      	b.n	800771c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800770a:	f7fe fe99 	bl	8006440 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d901      	bls.n	800771c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	e06d      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800771c:	4b29      	ldr	r3, [pc, #164]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1f0      	bne.n	800770a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007730:	d108      	bne.n	8007744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007732:	4b24      	ldr	r3, [pc, #144]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	4921      	ldr	r1, [pc, #132]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007740:	4313      	orrs	r3, r2
 8007742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007744:	4b1f      	ldr	r3, [pc, #124]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a19      	ldr	r1, [r3, #32]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	430b      	orrs	r3, r1
 8007756:	491b      	ldr	r1, [pc, #108]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 8007758:	4313      	orrs	r3, r2
 800775a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800775c:	4b1b      	ldr	r3, [pc, #108]	@ (80077cc <HAL_RCC_OscConfig+0x4cc>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007762:	f7fe fe6d 	bl	8006440 <HAL_GetTick>
 8007766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007768:	e008      	b.n	800777c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800776a:	f7fe fe69 	bl	8006440 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	2b02      	cmp	r3, #2
 8007776:	d901      	bls.n	800777c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007778:	2303      	movs	r3, #3
 800777a:	e03d      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800777c:	4b11      	ldr	r3, [pc, #68]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0f0      	beq.n	800776a <HAL_RCC_OscConfig+0x46a>
 8007788:	e035      	b.n	80077f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800778a:	4b10      	ldr	r3, [pc, #64]	@ (80077cc <HAL_RCC_OscConfig+0x4cc>)
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007790:	f7fe fe56 	bl	8006440 <HAL_GetTick>
 8007794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007796:	e008      	b.n	80077aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007798:	f7fe fe52 	bl	8006440 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d901      	bls.n	80077aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e026      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80077aa:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <HAL_RCC_OscConfig+0x4c4>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1f0      	bne.n	8007798 <HAL_RCC_OscConfig+0x498>
 80077b6:	e01e      	b.n	80077f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	69db      	ldr	r3, [r3, #28]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d107      	bne.n	80077d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e019      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
 80077c4:	40021000 	.word	0x40021000
 80077c8:	40007000 	.word	0x40007000
 80077cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80077d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007800 <HAL_RCC_OscConfig+0x500>)
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d106      	bne.n	80077f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d001      	beq.n	80077f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	40021000 	.word	0x40021000

08007804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e0d0      	b.n	80079ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007818:	4b6a      	ldr	r3, [pc, #424]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d910      	bls.n	8007848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007826:	4b67      	ldr	r3, [pc, #412]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f023 0207 	bic.w	r2, r3, #7
 800782e:	4965      	ldr	r1, [pc, #404]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	4313      	orrs	r3, r2
 8007834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007836:	4b63      	ldr	r3, [pc, #396]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d001      	beq.n	8007848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0b8      	b.n	80079ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b00      	cmp	r3, #0
 8007852:	d020      	beq.n	8007896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007860:	4b59      	ldr	r3, [pc, #356]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a58      	ldr	r2, [pc, #352]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800786a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 0308 	and.w	r3, r3, #8
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007878:	4b53      	ldr	r3, [pc, #332]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4a52      	ldr	r2, [pc, #328]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 800787e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8007882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007884:	4b50      	ldr	r3, [pc, #320]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	494d      	ldr	r1, [pc, #308]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007892:	4313      	orrs	r3, r2
 8007894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d040      	beq.n	8007924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d107      	bne.n	80078ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078aa:	4b47      	ldr	r3, [pc, #284]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d115      	bne.n	80078e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e07f      	b.n	80079ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d107      	bne.n	80078d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c2:	4b41      	ldr	r3, [pc, #260]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e073      	b.n	80079ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d2:	4b3d      	ldr	r3, [pc, #244]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e06b      	b.n	80079ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078e2:	4b39      	ldr	r3, [pc, #228]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f023 0203 	bic.w	r2, r3, #3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	4936      	ldr	r1, [pc, #216]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078f4:	f7fe fda4 	bl	8006440 <HAL_GetTick>
 80078f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078fa:	e00a      	b.n	8007912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078fc:	f7fe fda0 	bl	8006440 <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800790a:	4293      	cmp	r3, r2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e053      	b.n	80079ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007912:	4b2d      	ldr	r3, [pc, #180]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f003 020c 	and.w	r2, r3, #12
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	429a      	cmp	r2, r3
 8007922:	d1eb      	bne.n	80078fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007924:	4b27      	ldr	r3, [pc, #156]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d210      	bcs.n	8007954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007932:	4b24      	ldr	r3, [pc, #144]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f023 0207 	bic.w	r2, r3, #7
 800793a:	4922      	ldr	r1, [pc, #136]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	4313      	orrs	r3, r2
 8007940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007942:	4b20      	ldr	r3, [pc, #128]	@ (80079c4 <HAL_RCC_ClockConfig+0x1c0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0307 	and.w	r3, r3, #7
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d001      	beq.n	8007954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e032      	b.n	80079ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	d008      	beq.n	8007972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007960:	4b19      	ldr	r3, [pc, #100]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	4916      	ldr	r1, [pc, #88]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 800796e:	4313      	orrs	r3, r2
 8007970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0308 	and.w	r3, r3, #8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800797e:	4b12      	ldr	r3, [pc, #72]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	490e      	ldr	r1, [pc, #56]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007992:	f000 f821 	bl	80079d8 <HAL_RCC_GetSysClockFreq>
 8007996:	4602      	mov	r2, r0
 8007998:	4b0b      	ldr	r3, [pc, #44]	@ (80079c8 <HAL_RCC_ClockConfig+0x1c4>)
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	091b      	lsrs	r3, r3, #4
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	490a      	ldr	r1, [pc, #40]	@ (80079cc <HAL_RCC_ClockConfig+0x1c8>)
 80079a4:	5ccb      	ldrb	r3, [r1, r3]
 80079a6:	fa22 f303 	lsr.w	r3, r2, r3
 80079aa:	4a09      	ldr	r2, [pc, #36]	@ (80079d0 <HAL_RCC_ClockConfig+0x1cc>)
 80079ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80079ae:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <HAL_RCC_ClockConfig+0x1d0>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fd02 	bl	80063bc <HAL_InitTick>

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40022000 	.word	0x40022000
 80079c8:	40021000 	.word	0x40021000
 80079cc:	0800b730 	.word	0x0800b730
 80079d0:	2000000c 	.word	0x2000000c
 80079d4:	20000010 	.word	0x20000010

080079d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
 80079ea:	2300      	movs	r3, #0
 80079ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80079f2:	4b1e      	ldr	r3, [pc, #120]	@ (8007a6c <HAL_RCC_GetSysClockFreq+0x94>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 030c 	and.w	r3, r3, #12
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d002      	beq.n	8007a08 <HAL_RCC_GetSysClockFreq+0x30>
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d003      	beq.n	8007a0e <HAL_RCC_GetSysClockFreq+0x36>
 8007a06:	e027      	b.n	8007a58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007a08:	4b19      	ldr	r3, [pc, #100]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a0a:	613b      	str	r3, [r7, #16]
      break;
 8007a0c:	e027      	b.n	8007a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	0c9b      	lsrs	r3, r3, #18
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	4a17      	ldr	r2, [pc, #92]	@ (8007a74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007a18:	5cd3      	ldrb	r3, [r2, r3]
 8007a1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d010      	beq.n	8007a48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007a26:	4b11      	ldr	r3, [pc, #68]	@ (8007a6c <HAL_RCC_GetSysClockFreq+0x94>)
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	0c5b      	lsrs	r3, r3, #17
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	4a11      	ldr	r2, [pc, #68]	@ (8007a78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007a32:	5cd3      	ldrb	r3, [r2, r3]
 8007a34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	4a0d      	ldr	r2, [pc, #52]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a3a:	fb03 f202 	mul.w	r2, r3, r2
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a44:	617b      	str	r3, [r7, #20]
 8007a46:	e004      	b.n	8007a52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8007a4c:	fb02 f303 	mul.w	r3, r2, r3
 8007a50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	613b      	str	r3, [r7, #16]
      break;
 8007a56:	e002      	b.n	8007a5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007a58:	4b05      	ldr	r3, [pc, #20]	@ (8007a70 <HAL_RCC_GetSysClockFreq+0x98>)
 8007a5a:	613b      	str	r3, [r7, #16]
      break;
 8007a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a5e:	693b      	ldr	r3, [r7, #16]
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	371c      	adds	r7, #28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	40021000 	.word	0x40021000
 8007a70:	007a1200 	.word	0x007a1200
 8007a74:	0800b748 	.word	0x0800b748
 8007a78:	0800b758 	.word	0x0800b758
 8007a7c:	003d0900 	.word	0x003d0900

08007a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a84:	4b02      	ldr	r3, [pc, #8]	@ (8007a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8007a86:	681b      	ldr	r3, [r3, #0]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bc80      	pop	{r7}
 8007a8e:	4770      	bx	lr
 8007a90:	2000000c 	.word	0x2000000c

08007a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a98:	f7ff fff2 	bl	8007a80 <HAL_RCC_GetHCLKFreq>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	4903      	ldr	r1, [pc, #12]	@ (8007ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aaa:	5ccb      	ldrb	r3, [r1, r3]
 8007aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40021000 	.word	0x40021000
 8007ab8:	0800b740 	.word	0x0800b740

08007abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007ac0:	f7ff ffde 	bl	8007a80 <HAL_RCC_GetHCLKFreq>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	0adb      	lsrs	r3, r3, #11
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	4903      	ldr	r1, [pc, #12]	@ (8007ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ad2:	5ccb      	ldrb	r3, [r1, r3]
 8007ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	0800b740 	.word	0x0800b740

08007ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007aec:	4b0a      	ldr	r3, [pc, #40]	@ (8007b18 <RCC_Delay+0x34>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	@ (8007b1c <RCC_Delay+0x38>)
 8007af2:	fba2 2303 	umull	r2, r3, r2, r3
 8007af6:	0a5b      	lsrs	r3, r3, #9
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	fb02 f303 	mul.w	r3, r2, r3
 8007afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007b00:	bf00      	nop
  }
  while (Delay --);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1e5a      	subs	r2, r3, #1
 8007b06:	60fa      	str	r2, [r7, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f9      	bne.n	8007b00 <RCC_Delay+0x1c>
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bc80      	pop	{r7}
 8007b16:	4770      	bx	lr
 8007b18:	2000000c 	.word	0x2000000c
 8007b1c:	10624dd3 	.word	0x10624dd3

08007b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e041      	b.n	8007bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7fe f936 	bl	8005db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f000 fca8 	bl	80084b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d001      	beq.n	8007bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e044      	b.n	8007c62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68da      	ldr	r2, [r3, #12]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8007c6c <HAL_TIM_Base_Start_IT+0xac>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d018      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8007c70 <HAL_TIM_Base_Start_IT+0xb0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d013      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0c:	d00e      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a18      	ldr	r2, [pc, #96]	@ (8007c74 <HAL_TIM_Base_Start_IT+0xb4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d009      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a16      	ldr	r2, [pc, #88]	@ (8007c78 <HAL_TIM_Base_Start_IT+0xb8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d004      	beq.n	8007c2c <HAL_TIM_Base_Start_IT+0x6c>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a15      	ldr	r2, [pc, #84]	@ (8007c7c <HAL_TIM_Base_Start_IT+0xbc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d111      	bne.n	8007c50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b06      	cmp	r3, #6
 8007c3c:	d010      	beq.n	8007c60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c4e:	e007      	b.n	8007c60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f042 0201 	orr.w	r2, r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr
 8007c6c:	40012c00 	.word	0x40012c00
 8007c70:	40013400 	.word	0x40013400
 8007c74:	40000400 	.word	0x40000400
 8007c78:	40000800 	.word	0x40000800
 8007c7c:	40000c00 	.word	0x40000c00

08007c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e041      	b.n	8007d16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fd ff64 	bl	8005b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	f000 fbf8 	bl	80084b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <HAL_TIM_PWM_Start+0x24>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	bf14      	ite	ne
 8007d3c:	2301      	movne	r3, #1
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	e022      	b.n	8007d8a <HAL_TIM_PWM_Start+0x6a>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d109      	bne.n	8007d5e <HAL_TIM_PWM_Start+0x3e>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	bf14      	ite	ne
 8007d56:	2301      	movne	r3, #1
 8007d58:	2300      	moveq	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	e015      	b.n	8007d8a <HAL_TIM_PWM_Start+0x6a>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d109      	bne.n	8007d78 <HAL_TIM_PWM_Start+0x58>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	bf14      	ite	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	2300      	moveq	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	e008      	b.n	8007d8a <HAL_TIM_PWM_Start+0x6a>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e072      	b.n	8007e78 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <HAL_TIM_PWM_Start+0x82>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007da0:	e013      	b.n	8007dca <HAL_TIM_PWM_Start+0xaa>
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b04      	cmp	r3, #4
 8007da6:	d104      	bne.n	8007db2 <HAL_TIM_PWM_Start+0x92>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007db0:	e00b      	b.n	8007dca <HAL_TIM_PWM_Start+0xaa>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d104      	bne.n	8007dc2 <HAL_TIM_PWM_Start+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2202      	movs	r2, #2
 8007dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007dc0:	e003      	b.n	8007dca <HAL_TIM_PWM_Start+0xaa>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fda0 	bl	8008918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a28      	ldr	r2, [pc, #160]	@ (8007e80 <HAL_TIM_PWM_Start+0x160>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIM_PWM_Start+0xcc>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a27      	ldr	r2, [pc, #156]	@ (8007e84 <HAL_TIM_PWM_Start+0x164>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d101      	bne.n	8007df0 <HAL_TIM_PWM_Start+0xd0>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e000      	b.n	8007df2 <HAL_TIM_PWM_Start+0xd2>
 8007df0:	2300      	movs	r3, #0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d007      	beq.n	8007e06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <HAL_TIM_PWM_Start+0x160>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d018      	beq.n	8007e42 <HAL_TIM_PWM_Start+0x122>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1b      	ldr	r2, [pc, #108]	@ (8007e84 <HAL_TIM_PWM_Start+0x164>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <HAL_TIM_PWM_Start+0x122>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e22:	d00e      	beq.n	8007e42 <HAL_TIM_PWM_Start+0x122>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a17      	ldr	r2, [pc, #92]	@ (8007e88 <HAL_TIM_PWM_Start+0x168>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d009      	beq.n	8007e42 <HAL_TIM_PWM_Start+0x122>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a16      	ldr	r2, [pc, #88]	@ (8007e8c <HAL_TIM_PWM_Start+0x16c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_TIM_PWM_Start+0x122>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a14      	ldr	r2, [pc, #80]	@ (8007e90 <HAL_TIM_PWM_Start+0x170>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d111      	bne.n	8007e66 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2b06      	cmp	r3, #6
 8007e52:	d010      	beq.n	8007e76 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e64:	e007      	b.n	8007e76 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0201 	orr.w	r2, r2, #1
 8007e74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40013400 	.word	0x40013400
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800
 8007e90:	40000c00 	.word	0x40000c00

08007e94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e093      	b.n	8007fd0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f7fd fe77 	bl	8005bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	6812      	ldr	r2, [r2, #0]
 8007ed4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ed8:	f023 0307 	bic.w	r3, r3, #7
 8007edc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f000 fae3 	bl	80084b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f16:	f023 0303 	bic.w	r3, r3, #3
 8007f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	021b      	lsls	r3, r3, #8
 8007f26:	4313      	orrs	r3, r2
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007f34:	f023 030c 	bic.w	r3, r3, #12
 8007f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68da      	ldr	r2, [r3, #12]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	4313      	orrs	r3, r2
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	011a      	lsls	r2, r3, #4
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	031b      	lsls	r3, r3, #12
 8007f64:	4313      	orrs	r3, r2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fe8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ff0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ff8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008000:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d110      	bne.n	800802a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d102      	bne.n	8008014 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800800e:	7b7b      	ldrb	r3, [r7, #13]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d001      	beq.n	8008018 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e069      	b.n	80080ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008028:	e031      	b.n	800808e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b04      	cmp	r3, #4
 800802e:	d110      	bne.n	8008052 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d102      	bne.n	800803c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008036:	7b3b      	ldrb	r3, [r7, #12]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d001      	beq.n	8008040 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	e055      	b.n	80080ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008050:	e01d      	b.n	800808e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d108      	bne.n	800806a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d105      	bne.n	800806a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800805e:	7b7b      	ldrb	r3, [r7, #13]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d102      	bne.n	800806a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008064:	7b3b      	ldrb	r3, [r7, #12]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d001      	beq.n	800806e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e03e      	b.n	80080ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2202      	movs	r2, #2
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2202      	movs	r2, #2
 800808a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <HAL_TIM_Encoder_Start+0xc4>
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2b04      	cmp	r3, #4
 8008098:	d008      	beq.n	80080ac <HAL_TIM_Encoder_Start+0xd4>
 800809a:	e00f      	b.n	80080bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2201      	movs	r2, #1
 80080a2:	2100      	movs	r1, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	f000 fc37 	bl	8008918 <TIM_CCxChannelCmd>
      break;
 80080aa:	e016      	b.n	80080da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2201      	movs	r2, #1
 80080b2:	2104      	movs	r1, #4
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 fc2f 	bl	8008918 <TIM_CCxChannelCmd>
      break;
 80080ba:	e00e      	b.n	80080da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2201      	movs	r2, #1
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fc27 	bl	8008918 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2201      	movs	r2, #1
 80080d0:	2104      	movs	r1, #4
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fc20 	bl	8008918 <TIM_CCxChannelCmd>
      break;
 80080d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0201 	orr.w	r2, r2, #1
 80080e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d020      	beq.n	8008158 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f003 0302 	and.w	r3, r3, #2
 800811c:	2b00      	cmp	r3, #0
 800811e:	d01b      	beq.n	8008158 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0202 	mvn.w	r2, #2
 8008128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f99c 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 8008144:	e005      	b.n	8008152 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f98f 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f99e 	bl	800848e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f003 0304 	and.w	r3, r3, #4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d020      	beq.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01b      	beq.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0204 	mvn.w	r2, #4
 8008174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f976 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 8008190:	e005      	b.n	800819e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f969 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f978 	bl	800848e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d020      	beq.n	80081f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f003 0308 	and.w	r3, r3, #8
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01b      	beq.n	80081f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f06f 0208 	mvn.w	r2, #8
 80081c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2204      	movs	r2, #4
 80081c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	69db      	ldr	r3, [r3, #28]
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f950 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 80081dc:	e005      	b.n	80081ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f943 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f952 	bl	800848e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f003 0310 	and.w	r3, r3, #16
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d020      	beq.n	800823c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f003 0310 	and.w	r3, r3, #16
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01b      	beq.n	800823c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f06f 0210 	mvn.w	r2, #16
 800820c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2208      	movs	r2, #8
 8008212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f92a 	bl	800847c <HAL_TIM_IC_CaptureCallback>
 8008228:	e005      	b.n	8008236 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f91d 	bl	800846a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f92c 	bl	800848e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00c      	beq.n	8008260 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f06f 0201 	mvn.w	r2, #1
 8008258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f8fc 	bl	8008458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00c      	beq.n	8008284 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008270:	2b00      	cmp	r3, #0
 8008272:	d007      	beq.n	8008284 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800827c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fc34 	bl	8008aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00c      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d007      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f8fc 	bl	80084a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0320 	and.w	r3, r3, #32
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00c      	beq.n	80082cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d007      	beq.n	80082cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0220 	mvn.w	r2, #32
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 fc07 	bl	8008ada <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082cc:	bf00      	nop
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e0ae      	b.n	8008450 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b0c      	cmp	r3, #12
 80082fe:	f200 809f 	bhi.w	8008440 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800833d 	.word	0x0800833d
 800830c:	08008441 	.word	0x08008441
 8008310:	08008441 	.word	0x08008441
 8008314:	08008441 	.word	0x08008441
 8008318:	0800837d 	.word	0x0800837d
 800831c:	08008441 	.word	0x08008441
 8008320:	08008441 	.word	0x08008441
 8008324:	08008441 	.word	0x08008441
 8008328:	080083bf 	.word	0x080083bf
 800832c:	08008441 	.word	0x08008441
 8008330:	08008441 	.word	0x08008441
 8008334:	08008441 	.word	0x08008441
 8008338:	080083ff 	.word	0x080083ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	4618      	mov	r0, r3
 8008344:	f000 f93c 	bl	80085c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0208 	orr.w	r2, r2, #8
 8008356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0204 	bic.w	r2, r2, #4
 8008366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6999      	ldr	r1, [r3, #24]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	691a      	ldr	r2, [r3, #16]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	619a      	str	r2, [r3, #24]
      break;
 800837a:	e064      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f98c 	bl	80086a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6999      	ldr	r1, [r3, #24]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	021a      	lsls	r2, r3, #8
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	619a      	str	r2, [r3, #24]
      break;
 80083bc:	e043      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 f9df 	bl	8008788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f042 0208 	orr.w	r2, r2, #8
 80083d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69da      	ldr	r2, [r3, #28]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0204 	bic.w	r2, r2, #4
 80083e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69d9      	ldr	r1, [r3, #28]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	61da      	str	r2, [r3, #28]
      break;
 80083fc:	e023      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fa33 	bl	8008870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69da      	ldr	r2, [r3, #28]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69d9      	ldr	r1, [r3, #28]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	021a      	lsls	r2, r3, #8
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	61da      	str	r2, [r3, #28]
      break;
 800843e:	e002      	b.n	8008446 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	75fb      	strb	r3, [r7, #23]
      break;
 8008444:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr

0800846a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr

0800847c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	bc80      	pop	{r7}
 800848c:	4770      	bx	lr

0800848e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008496:	bf00      	nop
 8008498:	370c      	adds	r7, #12
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr

080084a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bc80      	pop	{r7}
 80084b0:	4770      	bx	lr
	...

080084b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a39      	ldr	r2, [pc, #228]	@ (80085ac <TIM_Base_SetConfig+0xf8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d013      	beq.n	80084f4 <TIM_Base_SetConfig+0x40>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a38      	ldr	r2, [pc, #224]	@ (80085b0 <TIM_Base_SetConfig+0xfc>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d00f      	beq.n	80084f4 <TIM_Base_SetConfig+0x40>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084da:	d00b      	beq.n	80084f4 <TIM_Base_SetConfig+0x40>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a35      	ldr	r2, [pc, #212]	@ (80085b4 <TIM_Base_SetConfig+0x100>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d007      	beq.n	80084f4 <TIM_Base_SetConfig+0x40>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a34      	ldr	r2, [pc, #208]	@ (80085b8 <TIM_Base_SetConfig+0x104>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d003      	beq.n	80084f4 <TIM_Base_SetConfig+0x40>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a33      	ldr	r2, [pc, #204]	@ (80085bc <TIM_Base_SetConfig+0x108>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d108      	bne.n	8008506 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4313      	orrs	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a28      	ldr	r2, [pc, #160]	@ (80085ac <TIM_Base_SetConfig+0xf8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d013      	beq.n	8008536 <TIM_Base_SetConfig+0x82>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a27      	ldr	r2, [pc, #156]	@ (80085b0 <TIM_Base_SetConfig+0xfc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d00f      	beq.n	8008536 <TIM_Base_SetConfig+0x82>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851c:	d00b      	beq.n	8008536 <TIM_Base_SetConfig+0x82>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a24      	ldr	r2, [pc, #144]	@ (80085b4 <TIM_Base_SetConfig+0x100>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d007      	beq.n	8008536 <TIM_Base_SetConfig+0x82>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a23      	ldr	r2, [pc, #140]	@ (80085b8 <TIM_Base_SetConfig+0x104>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d003      	beq.n	8008536 <TIM_Base_SetConfig+0x82>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a22      	ldr	r2, [pc, #136]	@ (80085bc <TIM_Base_SetConfig+0x108>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d108      	bne.n	8008548 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800853c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	4313      	orrs	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a0f      	ldr	r2, [pc, #60]	@ (80085ac <TIM_Base_SetConfig+0xf8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d003      	beq.n	800857c <TIM_Base_SetConfig+0xc8>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a0e      	ldr	r2, [pc, #56]	@ (80085b0 <TIM_Base_SetConfig+0xfc>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d103      	bne.n	8008584 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	691a      	ldr	r2, [r3, #16]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	f023 0201 	bic.w	r2, r3, #1
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	611a      	str	r2, [r3, #16]
  }
}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40000c00 	.word	0x40000c00

080085c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	f023 0201 	bic.w	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0303 	bic.w	r3, r3, #3
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	f023 0302 	bic.w	r3, r3, #2
 8008608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	4313      	orrs	r3, r2
 8008612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a20      	ldr	r2, [pc, #128]	@ (8008698 <TIM_OC1_SetConfig+0xd8>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d003      	beq.n	8008624 <TIM_OC1_SetConfig+0x64>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a1f      	ldr	r2, [pc, #124]	@ (800869c <TIM_OC1_SetConfig+0xdc>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d10c      	bne.n	800863e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f023 0308 	bic.w	r3, r3, #8
 800862a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f023 0304 	bic.w	r3, r3, #4
 800863c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a15      	ldr	r2, [pc, #84]	@ (8008698 <TIM_OC1_SetConfig+0xd8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d003      	beq.n	800864e <TIM_OC1_SetConfig+0x8e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a14      	ldr	r2, [pc, #80]	@ (800869c <TIM_OC1_SetConfig+0xdc>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d111      	bne.n	8008672 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800865c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	693a      	ldr	r2, [r7, #16]
 800866e:	4313      	orrs	r3, r2
 8008670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	621a      	str	r2, [r3, #32]
}
 800868c:	bf00      	nop
 800868e:	371c      	adds	r7, #28
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40013400 	.word	0x40013400

080086a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	f023 0210 	bic.w	r2, r3, #16
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	021b      	lsls	r3, r3, #8
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f023 0320 	bic.w	r3, r3, #32
 80086ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	011b      	lsls	r3, r3, #4
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a21      	ldr	r2, [pc, #132]	@ (8008780 <TIM_OC2_SetConfig+0xe0>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d003      	beq.n	8008708 <TIM_OC2_SetConfig+0x68>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a20      	ldr	r2, [pc, #128]	@ (8008784 <TIM_OC2_SetConfig+0xe4>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d10d      	bne.n	8008724 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800870e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	011b      	lsls	r3, r3, #4
 8008716:	697a      	ldr	r2, [r7, #20]
 8008718:	4313      	orrs	r3, r2
 800871a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008722:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a16      	ldr	r2, [pc, #88]	@ (8008780 <TIM_OC2_SetConfig+0xe0>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC2_SetConfig+0x94>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a15      	ldr	r2, [pc, #84]	@ (8008784 <TIM_OC2_SetConfig+0xe4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d113      	bne.n	800875c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800873a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008742:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	693a      	ldr	r2, [r7, #16]
 8008758:	4313      	orrs	r3, r2
 800875a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr
 8008780:	40012c00 	.word	0x40012c00
 8008784:	40013400 	.word	0x40013400

08008788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80087d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a21      	ldr	r2, [pc, #132]	@ (8008868 <TIM_OC3_SetConfig+0xe0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d003      	beq.n	80087ee <TIM_OC3_SetConfig+0x66>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a20      	ldr	r2, [pc, #128]	@ (800886c <TIM_OC3_SetConfig+0xe4>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d10d      	bne.n	800880a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	021b      	lsls	r3, r3, #8
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	4313      	orrs	r3, r2
 8008800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a16      	ldr	r2, [pc, #88]	@ (8008868 <TIM_OC3_SetConfig+0xe0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d003      	beq.n	800881a <TIM_OC3_SetConfig+0x92>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a15      	ldr	r2, [pc, #84]	@ (800886c <TIM_OC3_SetConfig+0xe4>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d113      	bne.n	8008842 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4313      	orrs	r3, r2
 8008834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	4313      	orrs	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	693a      	ldr	r2, [r7, #16]
 8008846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685a      	ldr	r2, [r3, #4]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	621a      	str	r2, [r3, #32]
}
 800885c:	bf00      	nop
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	bc80      	pop	{r7}
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40013400 	.word	0x40013400

08008870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	69db      	ldr	r3, [r3, #28]
 8008896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800889e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	021b      	lsls	r3, r3, #8
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	031b      	lsls	r3, r3, #12
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a11      	ldr	r2, [pc, #68]	@ (8008910 <TIM_OC4_SetConfig+0xa0>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d003      	beq.n	80088d8 <TIM_OC4_SetConfig+0x68>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a10      	ldr	r2, [pc, #64]	@ (8008914 <TIM_OC4_SetConfig+0xa4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d109      	bne.n	80088ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80088de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	019b      	lsls	r3, r3, #6
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	693a      	ldr	r2, [r7, #16]
 8008904:	621a      	str	r2, [r3, #32]
}
 8008906:	bf00      	nop
 8008908:	371c      	adds	r7, #28
 800890a:	46bd      	mov	sp, r7
 800890c:	bc80      	pop	{r7}
 800890e:	4770      	bx	lr
 8008910:	40012c00 	.word	0x40012c00
 8008914:	40013400 	.word	0x40013400

08008918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 031f 	and.w	r3, r3, #31
 800892a:	2201      	movs	r2, #1
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	6a1a      	ldr	r2, [r3, #32]
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	43db      	mvns	r3, r3
 800893a:	401a      	ands	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1a      	ldr	r2, [r3, #32]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	fa01 f303 	lsl.w	r3, r1, r3
 8008950:	431a      	orrs	r2, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	621a      	str	r2, [r3, #32]
}
 8008956:	bf00      	nop
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008970:	2b01      	cmp	r3, #1
 8008972:	d101      	bne.n	8008978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008974:	2302      	movs	r3, #2
 8008976:	e050      	b.n	8008a1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2202      	movs	r2, #2
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800899e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d018      	beq.n	80089ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a19      	ldr	r2, [pc, #100]	@ (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d013      	beq.n	80089ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089ce:	d00e      	beq.n	80089ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a15      	ldr	r2, [pc, #84]	@ (8008a2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a14      	ldr	r2, [pc, #80]	@ (8008a30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d004      	beq.n	80089ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a12      	ldr	r2, [pc, #72]	@ (8008a34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d10c      	bne.n	8008a08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	68ba      	ldr	r2, [r7, #8]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bc80      	pop	{r7}
 8008a22:	4770      	bx	lr
 8008a24:	40012c00 	.word	0x40012c00
 8008a28:	40013400 	.word	0x40013400
 8008a2c:	40000400 	.word	0x40000400
 8008a30:	40000800 	.word	0x40000800
 8008a34:	40000c00 	.word	0x40000c00

08008a38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e03d      	b.n	8008ad0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bc80      	pop	{r7}
 8008ad8:	4770      	bx	lr

08008ada <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ada:	b480      	push	{r7}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bc80      	pop	{r7}
 8008afc:	4770      	bx	lr

08008afe <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e042      	b.n	8008b96 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f7fd f9cd 	bl	8005ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2224      	movs	r2, #36	@ 0x24
 8008b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b40:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 ffc2 	bl	8009acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691a      	ldr	r2, [r3, #16]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b56:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	695a      	ldr	r2, [r3, #20]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008b66:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b76:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2220      	movs	r2, #32
 8008b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b9e:	b480      	push	{r7}
 8008ba0:	b085      	sub	sp, #20
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	60f8      	str	r0, [r7, #12]
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	d121      	bne.n	8008bfc <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_UART_Transmit_IT+0x26>
 8008bbe:	88fb      	ldrh	r3, [r7, #6]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e01a      	b.n	8008bfe <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	88fa      	ldrh	r2, [r7, #6]
 8008bd2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	88fa      	ldrh	r2, [r7, #6]
 8008bd8:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2221      	movs	r2, #33	@ 0x21
 8008be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008bf6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e000      	b.n	8008bfe <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bc80      	pop	{r7}
 8008c06:	4770      	bx	lr

08008c08 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	4613      	mov	r3, r2
 8008c14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d112      	bne.n	8008c48 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <HAL_UART_Receive_IT+0x26>
 8008c28:	88fb      	ldrh	r3, [r7, #6]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e00b      	b.n	8008c4a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fcaf 	bl	80095a2 <UART_Start_Receive_IT>
 8008c44:	4603      	mov	r3, r0
 8008c46:	e000      	b.n	8008c4a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
  }
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08c      	sub	sp, #48	@ 0x30
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d156      	bne.n	8008d1c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <HAL_UART_Transmit_DMA+0x26>
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e04f      	b.n	8008d1e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	88fa      	ldrh	r2, [r7, #6]
 8008c8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2221      	movs	r2, #33	@ 0x21
 8008c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca2:	4a21      	ldr	r2, [pc, #132]	@ (8008d28 <HAL_UART_Transmit_DMA+0xd4>)
 8008ca4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008caa:	4a20      	ldr	r2, [pc, #128]	@ (8008d2c <HAL_UART_Transmit_DMA+0xd8>)
 8008cac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d30 <HAL_UART_Transmit_DMA+0xdc>)
 8008cb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	2200      	movs	r2, #0
 8008cbc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8008cbe:	f107 0308 	add.w	r3, r7, #8
 8008cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cca:	6819      	ldr	r1, [r3, #0]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	88fb      	ldrh	r3, [r7, #6]
 8008cd6:	f7fd fd41 	bl	800675c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ce2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3314      	adds	r3, #20
 8008cea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3314      	adds	r3, #20
 8008d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d04:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d06:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d08:	6a39      	ldr	r1, [r7, #32]
 8008d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d0c:	e841 2300 	strex	r3, r2, [r1]
 8008d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1e5      	bne.n	8008ce4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e000      	b.n	8008d1e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008d1c:	2302      	movs	r3, #2
  }
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3730      	adds	r7, #48	@ 0x30
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	080092f1 	.word	0x080092f1
 8008d2c:	0800938b 	.word	0x0800938b
 8008d30:	0800950f 	.word	0x0800950f

08008d34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	2b20      	cmp	r3, #32
 8008d4c:	d112      	bne.n	8008d74 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <HAL_UART_Receive_DMA+0x26>
 8008d54:	88fb      	ldrh	r3, [r7, #6]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e00b      	b.n	8008d76 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	461a      	mov	r2, r3
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f000 fc52 	bl	8009614 <UART_Start_Receive_DMA>
 8008d70:	4603      	mov	r3, r0
 8008d72:	e000      	b.n	8008d76 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008d74:	2302      	movs	r3, #2
  }
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b0ba      	sub	sp, #232	@ 0xe8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008da6:	2300      	movs	r3, #0
 8008da8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008dbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10f      	bne.n	8008de6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d009      	beq.n	8008de6 <HAL_UART_IRQHandler+0x66>
 8008dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d003      	beq.n	8008de6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 fdb6 	bl	8009950 <UART_Receive_IT>
      return;
 8008de4:	e25b      	b.n	800929e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 80de 	beq.w	8008fac <HAL_UART_IRQHandler+0x22c>
 8008df0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d106      	bne.n	8008e0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 80d1 	beq.w	8008fac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00b      	beq.n	8008e2e <HAL_UART_IRQHandler+0xae>
 8008e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e26:	f043 0201 	orr.w	r2, r3, #1
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e32:	f003 0304 	and.w	r3, r3, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00b      	beq.n	8008e52 <HAL_UART_IRQHandler+0xd2>
 8008e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4a:	f043 0202 	orr.w	r2, r3, #2
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e56:	f003 0302 	and.w	r3, r3, #2
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <HAL_UART_IRQHandler+0xf6>
 8008e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d005      	beq.n	8008e76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e6e:	f043 0204 	orr.w	r2, r3, #4
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d011      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x126>
 8008e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d005      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9e:	f043 0208 	orr.w	r2, r3, #8
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 81f2 	beq.w	8009294 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eb4:	f003 0320 	and.w	r3, r3, #32
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d008      	beq.n	8008ece <HAL_UART_IRQHandler+0x14e>
 8008ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd41 	bl	8009950 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bf14      	ite	ne
 8008edc:	2301      	movne	r3, #1
 8008ede:	2300      	moveq	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eea:	f003 0308 	and.w	r3, r3, #8
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <HAL_UART_IRQHandler+0x17a>
 8008ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d04f      	beq.n	8008f9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fc4b 	bl	8009796 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d041      	beq.n	8008f92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	3314      	adds	r3, #20
 8008f14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008f1c:	e853 3f00 	ldrex	r3, [r3]
 8008f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008f24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3314      	adds	r3, #20
 8008f36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1d9      	bne.n	8008f0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d013      	beq.n	8008f8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f66:	4a7e      	ldr	r2, [pc, #504]	@ (8009160 <HAL_UART_IRQHandler+0x3e0>)
 8008f68:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fd fc90 	bl	8006894 <HAL_DMA_Abort_IT>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d016      	beq.n	8008fa8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f88:	e00e      	b.n	8008fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 f99c 	bl	80092c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f90:	e00a      	b.n	8008fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 f998 	bl	80092c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f98:	e006      	b.n	8008fa8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f994 	bl	80092c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008fa6:	e175      	b.n	8009294 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fa8:	bf00      	nop
    return;
 8008faa:	e173      	b.n	8009294 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	f040 814f 	bne.w	8009254 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fba:	f003 0310 	and.w	r3, r3, #16
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	f000 8148 	beq.w	8009254 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fc8:	f003 0310 	and.w	r3, r3, #16
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8141 	beq.w	8009254 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60bb      	str	r3, [r7, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	60bb      	str	r3, [r7, #8]
 8008fe6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 80b6 	beq.w	8009164 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009004:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009008:	2b00      	cmp	r3, #0
 800900a:	f000 8145 	beq.w	8009298 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009016:	429a      	cmp	r2, r3
 8009018:	f080 813e 	bcs.w	8009298 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009022:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	2b20      	cmp	r3, #32
 800902c:	f000 8088 	beq.w	8009140 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800904a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800904e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	330c      	adds	r3, #12
 8009058:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800905c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009060:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009068:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1d9      	bne.n	8009030 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3314      	adds	r3, #20
 8009082:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800908c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800908e:	f023 0301 	bic.w	r3, r3, #1
 8009092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3314      	adds	r3, #20
 800909c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80090a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80090a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80090a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80090ac:	e841 2300 	strex	r3, r2, [r1]
 80090b0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80090b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1e1      	bne.n	800907c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	3314      	adds	r3, #20
 80090be:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80090c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3314      	adds	r3, #20
 80090d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e3      	bne.n	80090b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2220      	movs	r2, #32
 80090f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	330c      	adds	r3, #12
 8009104:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800910e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009110:	f023 0310 	bic.w	r3, r3, #16
 8009114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	330c      	adds	r3, #12
 800911e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009122:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009124:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009128:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800912a:	e841 2300 	strex	r3, r2, [r1]
 800912e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1e3      	bne.n	80090fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800913a:	4618      	mov	r0, r3
 800913c:	f7fd fb6e 	bl	800681c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2202      	movs	r2, #2
 8009144:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800914e:	b29b      	uxth	r3, r3
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	b29b      	uxth	r3, r3
 8009154:	4619      	mov	r1, r3
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f8bf 	bl	80092da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800915c:	e09c      	b.n	8009298 <HAL_UART_IRQHandler+0x518>
 800915e:	bf00      	nop
 8009160:	0800985b 	.word	0x0800985b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800916c:	b29b      	uxth	r3, r3
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009178:	b29b      	uxth	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 808e 	beq.w	800929c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8089 	beq.w	800929c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	330c      	adds	r3, #12
 8009190:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800919a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800919c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	330c      	adds	r3, #12
 80091aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80091ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80091b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e3      	bne.n	800918a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	3314      	adds	r3, #20
 80091c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	e853 3f00 	ldrex	r3, [r3]
 80091d0:	623b      	str	r3, [r7, #32]
   return(result);
 80091d2:	6a3b      	ldr	r3, [r7, #32]
 80091d4:	f023 0301 	bic.w	r3, r3, #1
 80091d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3314      	adds	r3, #20
 80091e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80091e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ee:	e841 2300 	strex	r3, r2, [r1]
 80091f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1e3      	bne.n	80091c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	330c      	adds	r3, #12
 800920e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	60fb      	str	r3, [r7, #12]
   return(result);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 0310 	bic.w	r3, r3, #16
 800921e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	330c      	adds	r3, #12
 8009228:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800922c:	61fa      	str	r2, [r7, #28]
 800922e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	69b9      	ldr	r1, [r7, #24]
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	617b      	str	r3, [r7, #20]
   return(result);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e3      	bne.n	8009208 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f844 	bl	80092da <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009252:	e023      	b.n	800929c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800925c:	2b00      	cmp	r3, #0
 800925e:	d009      	beq.n	8009274 <HAL_UART_IRQHandler+0x4f4>
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fb08 	bl	8009882 <UART_Transmit_IT>
    return;
 8009272:	e014      	b.n	800929e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00e      	beq.n	800929e <HAL_UART_IRQHandler+0x51e>
 8009280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d008      	beq.n	800929e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fb47 	bl	8009920 <UART_EndTransmit_IT>
    return;
 8009292:	e004      	b.n	800929e <HAL_UART_IRQHandler+0x51e>
    return;
 8009294:	bf00      	nop
 8009296:	e002      	b.n	800929e <HAL_UART_IRQHandler+0x51e>
      return;
 8009298:	bf00      	nop
 800929a:	e000      	b.n	800929e <HAL_UART_IRQHandler+0x51e>
      return;
 800929c:	bf00      	nop
  }
}
 800929e:	37e8      	adds	r7, #232	@ 0xe8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80092be:	bf00      	nop
 80092c0:	370c      	adds	r7, #12
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bc80      	pop	{r7}
 80092c6:	4770      	bx	lr

080092c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr

080092da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	460b      	mov	r3, r1
 80092e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr

080092f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b090      	sub	sp, #64	@ 0x40
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d137      	bne.n	800937c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800930c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800930e:	2200      	movs	r2, #0
 8009310:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009312:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3314      	adds	r3, #20
 8009318:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800931c:	e853 3f00 	ldrex	r3, [r3]
 8009320:	623b      	str	r3, [r7, #32]
   return(result);
 8009322:	6a3b      	ldr	r3, [r7, #32]
 8009324:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009328:	63bb      	str	r3, [r7, #56]	@ 0x38
 800932a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	3314      	adds	r3, #20
 8009330:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009332:	633a      	str	r2, [r7, #48]	@ 0x30
 8009334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800933a:	e841 2300 	strex	r3, r2, [r1]
 800933e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1e5      	bne.n	8009312 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	330c      	adds	r3, #12
 800934c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	60fb      	str	r3, [r7, #12]
   return(result);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
 800935e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	330c      	adds	r3, #12
 8009364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009366:	61fa      	str	r2, [r7, #28]
 8009368:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	69b9      	ldr	r1, [r7, #24]
 800936c:	69fa      	ldr	r2, [r7, #28]
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	617b      	str	r3, [r7, #20]
   return(result);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e5      	bne.n	8009346 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800937a:	e002      	b.n	8009382 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800937c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800937e:	f7fb fd55 	bl	8004e2c <HAL_UART_TxCpltCallback>
}
 8009382:	bf00      	nop
 8009384:	3740      	adds	r7, #64	@ 0x40
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009396:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f7ff ff83 	bl	80092a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800939e:	bf00      	nop
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b09c      	sub	sp, #112	@ 0x70
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d172      	bne.n	80094a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80093c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093c4:	2200      	movs	r2, #0
 80093c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	330c      	adds	r3, #12
 80093ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	330c      	adds	r3, #12
 80093e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80093ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e5      	bne.n	80093c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	3314      	adds	r3, #20
 8009402:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009406:	e853 3f00 	ldrex	r3, [r3]
 800940a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800940c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800940e:	f023 0301 	bic.w	r3, r3, #1
 8009412:	667b      	str	r3, [r7, #100]	@ 0x64
 8009414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3314      	adds	r3, #20
 800941a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800941c:	647a      	str	r2, [r7, #68]	@ 0x44
 800941e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009420:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009422:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009424:	e841 2300 	strex	r3, r2, [r1]
 8009428:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800942a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e5      	bne.n	80093fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3314      	adds	r3, #20
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943a:	e853 3f00 	ldrex	r3, [r3]
 800943e:	623b      	str	r3, [r7, #32]
   return(result);
 8009440:	6a3b      	ldr	r3, [r7, #32]
 8009442:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009446:	663b      	str	r3, [r7, #96]	@ 0x60
 8009448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3314      	adds	r3, #20
 800944e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009450:	633a      	str	r2, [r7, #48]	@ 0x30
 8009452:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800945e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e5      	bne.n	8009430 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009464:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009466:	2220      	movs	r2, #32
 8009468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800946c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800946e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009470:	2b01      	cmp	r3, #1
 8009472:	d119      	bne.n	80094a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	330c      	adds	r3, #12
 800947a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	60fb      	str	r3, [r7, #12]
   return(result);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f023 0310 	bic.w	r3, r3, #16
 800948a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800948c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	330c      	adds	r3, #12
 8009492:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009494:	61fa      	str	r2, [r7, #28]
 8009496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009498:	69b9      	ldr	r1, [r7, #24]
 800949a:	69fa      	ldr	r2, [r7, #28]
 800949c:	e841 2300 	strex	r3, r2, [r1]
 80094a0:	617b      	str	r3, [r7, #20]
   return(result);
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1e5      	bne.n	8009474 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094aa:	2200      	movs	r2, #0
 80094ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d106      	bne.n	80094c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094ba:	4619      	mov	r1, r3
 80094bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80094be:	f7ff ff0c 	bl	80092da <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094c2:	e002      	b.n	80094ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80094c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80094c6:	f7fb fd29 	bl	8004f1c <HAL_UART_RxCpltCallback>
}
 80094ca:	bf00      	nop
 80094cc:	3770      	adds	r7, #112	@ 0x70
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d108      	bne.n	8009500 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	4619      	mov	r1, r3
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff feee 	bl	80092da <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094fe:	e002      	b.n	8009506 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fed8 	bl	80092b6 <HAL_UART_RxHalfCpltCallback>
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	695b      	ldr	r3, [r3, #20]
 8009526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800952a:	2b00      	cmp	r3, #0
 800952c:	bf14      	ite	ne
 800952e:	2301      	movne	r3, #1
 8009530:	2300      	moveq	r3, #0
 8009532:	b2db      	uxtb	r3, r3
 8009534:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800953c:	b2db      	uxtb	r3, r3
 800953e:	2b21      	cmp	r3, #33	@ 0x21
 8009540:	d108      	bne.n	8009554 <UART_DMAError+0x46>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d005      	beq.n	8009554 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2200      	movs	r2, #0
 800954c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800954e:	68b8      	ldr	r0, [r7, #8]
 8009550:	f000 f8fa 	bl	8009748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	bf14      	ite	ne
 8009562:	2301      	movne	r3, #1
 8009564:	2300      	moveq	r3, #0
 8009566:	b2db      	uxtb	r3, r3
 8009568:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b22      	cmp	r3, #34	@ 0x22
 8009574:	d108      	bne.n	8009588 <UART_DMAError+0x7a>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d005      	beq.n	8009588 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2200      	movs	r2, #0
 8009580:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009582:	68b8      	ldr	r0, [r7, #8]
 8009584:	f000 f907 	bl	8009796 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800958c:	f043 0210 	orr.w	r2, r3, #16
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009594:	68b8      	ldr	r0, [r7, #8]
 8009596:	f7ff fe97 	bl	80092c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800959a:	bf00      	nop
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b085      	sub	sp, #20
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	4613      	mov	r3, r2
 80095ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	88fa      	ldrh	r2, [r7, #6]
 80095ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	88fa      	ldrh	r2, [r7, #6]
 80095c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2222      	movs	r2, #34	@ 0x22
 80095cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d007      	beq.n	80095e8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0220 	orr.w	r2, r2, #32
 8009606:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	bc80      	pop	{r7}
 8009612:	4770      	bx	lr

08009614 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b098      	sub	sp, #96	@ 0x60
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	4613      	mov	r3, r2
 8009620:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	88fa      	ldrh	r2, [r7, #6]
 800962c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2222      	movs	r2, #34	@ 0x22
 8009638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009640:	4a3e      	ldr	r2, [pc, #248]	@ (800973c <UART_Start_Receive_DMA+0x128>)
 8009642:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009648:	4a3d      	ldr	r2, [pc, #244]	@ (8009740 <UART_Start_Receive_DMA+0x12c>)
 800964a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009650:	4a3c      	ldr	r2, [pc, #240]	@ (8009744 <UART_Start_Receive_DMA+0x130>)
 8009652:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009658:	2200      	movs	r2, #0
 800965a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800965c:	f107 0308 	add.w	r3, r7, #8
 8009660:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	88fb      	ldrh	r3, [r7, #6]
 8009674:	f7fd f872 	bl	800675c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009678:	2300      	movs	r3, #0
 800967a:	613b      	str	r3, [r7, #16]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	613b      	str	r3, [r7, #16]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	613b      	str	r3, [r7, #16]
 800968c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d019      	beq.n	80096ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	330c      	adds	r3, #12
 800969c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	330c      	adds	r3, #12
 80096b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80096b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80096b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80096bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096be:	e841 2300 	strex	r3, r2, [r1]
 80096c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80096c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1e5      	bne.n	8009696 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	3314      	adds	r3, #20
 80096d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80096da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096dc:	f043 0301 	orr.w	r3, r3, #1
 80096e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3314      	adds	r3, #20
 80096e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80096f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e5      	bne.n	80096ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3314      	adds	r3, #20
 8009704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	617b      	str	r3, [r7, #20]
   return(result);
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009714:	653b      	str	r3, [r7, #80]	@ 0x50
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3314      	adds	r3, #20
 800971c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800971e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6a39      	ldr	r1, [r7, #32]
 8009724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	61fb      	str	r3, [r7, #28]
   return(result);
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e5      	bne.n	80096fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3760      	adds	r7, #96	@ 0x60
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	080093a7 	.word	0x080093a7
 8009740:	080094d3 	.word	0x080094d3
 8009744:	0800950f 	.word	0x0800950f

08009748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009748:	b480      	push	{r7}
 800974a:	b089      	sub	sp, #36	@ 0x24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	330c      	adds	r3, #12
 8009756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	330c      	adds	r3, #12
 800976e:	69fa      	ldr	r2, [r7, #28]
 8009770:	61ba      	str	r2, [r7, #24]
 8009772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6979      	ldr	r1, [r7, #20]
 8009776:	69ba      	ldr	r2, [r7, #24]
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	613b      	str	r3, [r7, #16]
   return(result);
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e5      	bne.n	8009750 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2220      	movs	r2, #32
 8009788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800978c:	bf00      	nop
 800978e:	3724      	adds	r7, #36	@ 0x24
 8009790:	46bd      	mov	sp, r7
 8009792:	bc80      	pop	{r7}
 8009794:	4770      	bx	lr

08009796 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009796:	b480      	push	{r7}
 8009798:	b095      	sub	sp, #84	@ 0x54
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	330c      	adds	r3, #12
 80097a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	330c      	adds	r3, #12
 80097bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097be:	643a      	str	r2, [r7, #64]	@ 0x40
 80097c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e5      	bne.n	800979e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3314      	adds	r3, #20
 80097d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097da:	6a3b      	ldr	r3, [r7, #32]
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	f023 0301 	bic.w	r3, r3, #1
 80097e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3314      	adds	r3, #20
 80097f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097fa:	e841 2300 	strex	r3, r2, [r1]
 80097fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	2b00      	cmp	r3, #0
 8009804:	d1e5      	bne.n	80097d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980a:	2b01      	cmp	r3, #1
 800980c:	d119      	bne.n	8009842 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	330c      	adds	r3, #12
 8009814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	e853 3f00 	ldrex	r3, [r3]
 800981c:	60bb      	str	r3, [r7, #8]
   return(result);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f023 0310 	bic.w	r3, r3, #16
 8009824:	647b      	str	r3, [r7, #68]	@ 0x44
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	330c      	adds	r3, #12
 800982c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800982e:	61ba      	str	r2, [r7, #24]
 8009830:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009832:	6979      	ldr	r1, [r7, #20]
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	e841 2300 	strex	r3, r2, [r1]
 800983a:	613b      	str	r3, [r7, #16]
   return(result);
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1e5      	bne.n	800980e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2220      	movs	r2, #32
 8009846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009850:	bf00      	nop
 8009852:	3754      	adds	r7, #84	@ 0x54
 8009854:	46bd      	mov	sp, r7
 8009856:	bc80      	pop	{r7}
 8009858:	4770      	bx	lr

0800985a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f7ff fd27 	bl	80092c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800987a:	bf00      	nop
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009882:	b480      	push	{r7}
 8009884:	b085      	sub	sp, #20
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b21      	cmp	r3, #33	@ 0x21
 8009894:	d13e      	bne.n	8009914 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	689b      	ldr	r3, [r3, #8]
 800989a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800989e:	d114      	bne.n	80098ca <UART_Transmit_IT+0x48>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d110      	bne.n	80098ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a1b      	ldr	r3, [r3, #32]
 80098c2:	1c9a      	adds	r2, r3, #2
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	621a      	str	r2, [r3, #32]
 80098c8:	e008      	b.n	80098dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	1c59      	adds	r1, r3, #1
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6211      	str	r1, [r2, #32]
 80098d4:	781a      	ldrb	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	4619      	mov	r1, r3
 80098ea:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10f      	bne.n	8009910 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68da      	ldr	r2, [r3, #12]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68da      	ldr	r2, [r3, #12]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800990e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	e000      	b.n	8009916 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009914:	2302      	movs	r3, #2
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	bc80      	pop	{r7}
 800991e:	4770      	bx	lr

08009920 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009936:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7fb fa73 	bl	8004e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08c      	sub	sp, #48	@ 0x30
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800995e:	b2db      	uxtb	r3, r3
 8009960:	2b22      	cmp	r3, #34	@ 0x22
 8009962:	f040 80ae 	bne.w	8009ac2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800996e:	d117      	bne.n	80099a0 <UART_Receive_IT+0x50>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d113      	bne.n	80099a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009978:	2300      	movs	r3, #0
 800997a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009980:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	b29b      	uxth	r3, r3
 800998a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998e:	b29a      	uxth	r2, r3
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009992:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009998:	1c9a      	adds	r2, r3, #2
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	629a      	str	r2, [r3, #40]	@ 0x28
 800999e:	e026      	b.n	80099ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099b2:	d007      	beq.n	80099c4 <UART_Receive_IT+0x74>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d10a      	bne.n	80099d2 <UART_Receive_IT+0x82>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d106      	bne.n	80099d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ce:	701a      	strb	r2, [r3, #0]
 80099d0:	e008      	b.n	80099e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	4619      	mov	r1, r3
 80099fc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d15d      	bne.n	8009abe <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 0220 	bic.w	r2, r2, #32
 8009a10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68da      	ldr	r2, [r3, #12]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009a20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	695a      	ldr	r2, [r3, #20]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f022 0201 	bic.w	r2, r2, #1
 8009a30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d135      	bne.n	8009ab4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	330c      	adds	r3, #12
 8009a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	f023 0310 	bic.w	r3, r3, #16
 8009a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	330c      	adds	r3, #12
 8009a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a6e:	623a      	str	r2, [r7, #32]
 8009a70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a72:	69f9      	ldr	r1, [r7, #28]
 8009a74:	6a3a      	ldr	r2, [r7, #32]
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e5      	bne.n	8009a4e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b10      	cmp	r3, #16
 8009a8e:	d10a      	bne.n	8009aa6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a90:	2300      	movs	r3, #0
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	60fb      	str	r3, [r7, #12]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff fc14 	bl	80092da <HAL_UARTEx_RxEventCallback>
 8009ab2:	e002      	b.n	8009aba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7fb fa31 	bl	8004f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e002      	b.n	8009ac4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e000      	b.n	8009ac4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009ac2:	2302      	movs	r3, #2
  }
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3730      	adds	r7, #48	@ 0x30
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689a      	ldr	r2, [r3, #8]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	431a      	orrs	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009b06:	f023 030c 	bic.w	r3, r3, #12
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	6812      	ldr	r2, [r2, #0]
 8009b0e:	68b9      	ldr	r1, [r7, #8]
 8009b10:	430b      	orrs	r3, r1
 8009b12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	699a      	ldr	r2, [r3, #24]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8009be0 <UART_SetConfig+0x114>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d103      	bne.n	8009b3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009b34:	f7fd ffc2 	bl	8007abc <HAL_RCC_GetPCLK2Freq>
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	e002      	b.n	8009b42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009b3c:	f7fd ffaa 	bl	8007a94 <HAL_RCC_GetPCLK1Freq>
 8009b40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	4613      	mov	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4413      	add	r3, r2
 8009b4a:	009a      	lsls	r2, r3, #2
 8009b4c:	441a      	add	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b58:	4a22      	ldr	r2, [pc, #136]	@ (8009be4 <UART_SetConfig+0x118>)
 8009b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5e:	095b      	lsrs	r3, r3, #5
 8009b60:	0119      	lsls	r1, r3, #4
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009a      	lsls	r2, r3, #2
 8009b6c:	441a      	add	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b78:	4b1a      	ldr	r3, [pc, #104]	@ (8009be4 <UART_SetConfig+0x118>)
 8009b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8009b7e:	095b      	lsrs	r3, r3, #5
 8009b80:	2064      	movs	r0, #100	@ 0x64
 8009b82:	fb00 f303 	mul.w	r3, r0, r3
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	3332      	adds	r3, #50	@ 0x32
 8009b8c:	4a15      	ldr	r2, [pc, #84]	@ (8009be4 <UART_SetConfig+0x118>)
 8009b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b98:	4419      	add	r1, r3
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	4413      	add	r3, r2
 8009ba2:	009a      	lsls	r2, r3, #2
 8009ba4:	441a      	add	r2, r3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <UART_SetConfig+0x118>)
 8009bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8009bb6:	095b      	lsrs	r3, r3, #5
 8009bb8:	2064      	movs	r0, #100	@ 0x64
 8009bba:	fb00 f303 	mul.w	r3, r0, r3
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	011b      	lsls	r3, r3, #4
 8009bc2:	3332      	adds	r3, #50	@ 0x32
 8009bc4:	4a07      	ldr	r2, [pc, #28]	@ (8009be4 <UART_SetConfig+0x118>)
 8009bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bca:	095b      	lsrs	r3, r3, #5
 8009bcc:	f003 020f 	and.w	r2, r3, #15
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	440a      	add	r2, r1
 8009bd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009bd8:	bf00      	nop
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	40013800 	.word	0x40013800
 8009be4:	51eb851f 	.word	0x51eb851f

08009be8 <_ZdlPvj>:
 8009be8:	f000 b8b0 	b.w	8009d4c <_ZdlPv>

08009bec <_Znwj>:
 8009bec:	2801      	cmp	r0, #1
 8009bee:	bf38      	it	cc
 8009bf0:	2001      	movcc	r0, #1
 8009bf2:	b510      	push	{r4, lr}
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f001 fbf0 	bl	800b3dc <malloc>
 8009bfc:	b100      	cbz	r0, 8009c00 <_Znwj+0x14>
 8009bfe:	bd10      	pop	{r4, pc}
 8009c00:	f000 f8a6 	bl	8009d50 <_ZSt15get_new_handlerv>
 8009c04:	b908      	cbnz	r0, 8009c0a <_Znwj+0x1e>
 8009c06:	f001 fbe1 	bl	800b3cc <abort>
 8009c0a:	4780      	blx	r0
 8009c0c:	e7f3      	b.n	8009bf6 <_Znwj+0xa>

08009c0e <_ZSt17__throw_bad_allocv>:
 8009c0e:	b508      	push	{r3, lr}
 8009c10:	f001 fbdc 	bl	800b3cc <abort>

08009c14 <_ZSt28__throw_bad_array_new_lengthv>:
 8009c14:	b508      	push	{r3, lr}
 8009c16:	f001 fbd9 	bl	800b3cc <abort>
	...

08009c1c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8009c1c:	290d      	cmp	r1, #13
 8009c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c20:	4605      	mov	r5, r0
 8009c22:	d82b      	bhi.n	8009c7c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x60>
 8009c24:	b391      	cbz	r1, 8009c8c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x70>
 8009c26:	4b1a      	ldr	r3, [pc, #104]	@ (8009c90 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x74>)
 8009c28:	5c5c      	ldrb	r4, [r3, r1]
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f7f6 fd02 	bl	8000634 <__aeabi_i2d>
 8009c30:	4606      	mov	r6, r0
 8009c32:	6828      	ldr	r0, [r5, #0]
 8009c34:	460f      	mov	r7, r1
 8009c36:	f7f6 fd0f 	bl	8000658 <__aeabi_f2d>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	460b      	mov	r3, r1
 8009c3e:	4630      	mov	r0, r6
 8009c40:	4639      	mov	r1, r7
 8009c42:	f7f6 fd61 	bl	8000708 <__aeabi_dmul>
 8009c46:	f000 f9cf 	bl	8009fe8 <floor>
 8009c4a:	f7f7 f835 	bl	8000cb8 <__aeabi_d2uiz>
 8009c4e:	6068      	str	r0, [r5, #4]
 8009c50:	4620      	mov	r0, r4
 8009c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c54:	1058      	asrs	r0, r3, #1
 8009c56:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8009c5a:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 8009c5e:	428e      	cmp	r6, r1
 8009c60:	d20f      	bcs.n	8009c82 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x66>
 8009c62:	1a1b      	subs	r3, r3, r0
 8009c64:	1d22      	adds	r2, r4, #4
 8009c66:	3b01      	subs	r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	dcf3      	bgt.n	8009c54 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8009c6c:	4b09      	ldr	r3, [pc, #36]	@ (8009c94 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>)
 8009c6e:	6814      	ldr	r4, [r2, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d008      	beq.n	8009c86 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6a>
 8009c74:	4620      	mov	r0, r4
 8009c76:	f7f6 fccd 	bl	8000614 <__aeabi_ui2d>
 8009c7a:	e7d9      	b.n	8009c30 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8009c7c:	23f9      	movs	r3, #249	@ 0xf9
 8009c7e:	4a06      	ldr	r2, [pc, #24]	@ (8009c98 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 8009c80:	e7f2      	b.n	8009c68 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 8009c82:	4603      	mov	r3, r0
 8009c84:	e7f0      	b.n	8009c68 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 8009c86:	f04f 30ff 	mov.w	r0, #4294967295
 8009c8a:	e7e0      	b.n	8009c4e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8009c8c:	2401      	movs	r4, #1
 8009c8e:	e7df      	b.n	8009c50 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x34>
 8009c90:	0800b75a 	.word	0x0800b75a
 8009c94:	0800bb64 	.word	0x0800bb64
 8009c98:	0800b780 	.word	0x0800b780

08009c9c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 8009c9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	4692      	mov	sl, r2
 8009ca2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	eb03 0802 	add.w	r8, r3, r2
 8009caa:	684b      	ldr	r3, [r1, #4]
 8009cac:	460d      	mov	r5, r1
 8009cae:	4598      	cmp	r8, r3
 8009cb0:	d946      	bls.n	8009d40 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	6808      	ldr	r0, [r1, #0]
 8009cb6:	bf0c      	ite	eq
 8009cb8:	f04f 090b 	moveq.w	r9, #11
 8009cbc:	f04f 0900 	movne.w	r9, #0
 8009cc0:	f7f6 fcca 	bl	8000658 <__aeabi_f2d>
 8009cc4:	4606      	mov	r6, r0
 8009cc6:	460f      	mov	r7, r1
 8009cc8:	45c8      	cmp	r8, r9
 8009cca:	4640      	mov	r0, r8
 8009ccc:	bf38      	it	cc
 8009cce:	4648      	movcc	r0, r9
 8009cd0:	f7f6 fca0 	bl	8000614 <__aeabi_ui2d>
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	f7f6 fe40 	bl	800095c <__aeabi_ddiv>
 8009cdc:	4680      	mov	r8, r0
 8009cde:	4650      	mov	r0, sl
 8009ce0:	4689      	mov	r9, r1
 8009ce2:	f7f6 fc97 	bl	8000614 <__aeabi_ui2d>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	e9cd 2300 	strd	r2, r3, [sp]
 8009cee:	4642      	mov	r2, r8
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	f7f6 ff85 	bl	8000c00 <__aeabi_dcmple>
 8009cf6:	b1c0      	cbz	r0, 8009d2a <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	f000 f974 	bl	8009fe8 <floor>
 8009d00:	4b11      	ldr	r3, [pc, #68]	@ (8009d48 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	f7f6 fb4a 	bl	800039c <__adddf3>
 8009d08:	f7f6 ffd6 	bl	8000cb8 <__aeabi_d2uiz>
 8009d0c:	ea4f 014a 	mov.w	r1, sl, lsl #1
 8009d10:	4281      	cmp	r1, r0
 8009d12:	bf38      	it	cc
 8009d14:	4601      	movcc	r1, r0
 8009d16:	4628      	mov	r0, r5
 8009d18:	f7ff ff80 	bl	8009c1c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	6060      	str	r0, [r4, #4]
 8009d20:	7023      	strb	r3, [r4, #0]
 8009d22:	4620      	mov	r0, r4
 8009d24:	b002      	add	sp, #8
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d2e:	4630      	mov	r0, r6
 8009d30:	4639      	mov	r1, r7
 8009d32:	f7f6 fce9 	bl	8000708 <__aeabi_dmul>
 8009d36:	f000 f957 	bl	8009fe8 <floor>
 8009d3a:	f7f6 ffbd 	bl	8000cb8 <__aeabi_d2uiz>
 8009d3e:	6068      	str	r0, [r5, #4]
 8009d40:	2300      	movs	r3, #0
 8009d42:	e9c4 3300 	strd	r3, r3, [r4]
 8009d46:	e7ec      	b.n	8009d22 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 8009d48:	3ff00000 	.word	0x3ff00000

08009d4c <_ZdlPv>:
 8009d4c:	f001 bb4e 	b.w	800b3ec <free>

08009d50 <_ZSt15get_new_handlerv>:
 8009d50:	4b02      	ldr	r3, [pc, #8]	@ (8009d5c <_ZSt15get_new_handlerv+0xc>)
 8009d52:	6818      	ldr	r0, [r3, #0]
 8009d54:	f3bf 8f5b 	dmb	ish
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	20000700 	.word	0x20000700

08009d60 <atan2>:
 8009d60:	f000 bb3a 	b.w	800a3d8 <__ieee754_atan2>

08009d64 <sqrt>:
 8009d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	f000 f865 	bl	8009e38 <__ieee754_sqrt>
 8009d6e:	4632      	mov	r2, r6
 8009d70:	4604      	mov	r4, r0
 8009d72:	460d      	mov	r5, r1
 8009d74:	463b      	mov	r3, r7
 8009d76:	4630      	mov	r0, r6
 8009d78:	4639      	mov	r1, r7
 8009d7a:	f7f6 ff5f 	bl	8000c3c <__aeabi_dcmpun>
 8009d7e:	b990      	cbnz	r0, 8009da6 <sqrt+0x42>
 8009d80:	2200      	movs	r2, #0
 8009d82:	2300      	movs	r3, #0
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 ff30 	bl	8000bec <__aeabi_dcmplt>
 8009d8c:	b158      	cbz	r0, 8009da6 <sqrt+0x42>
 8009d8e:	f001 fc3f 	bl	800b610 <__errno>
 8009d92:	2321      	movs	r3, #33	@ 0x21
 8009d94:	2200      	movs	r2, #0
 8009d96:	6003      	str	r3, [r0, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f7f6 fddd 	bl	800095c <__aeabi_ddiv>
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009dac <cos>:
 8009dac:	b530      	push	{r4, r5, lr}
 8009dae:	4d20      	ldr	r5, [pc, #128]	@ (8009e30 <cos+0x84>)
 8009db0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8009db4:	42ac      	cmp	r4, r5
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	b087      	sub	sp, #28
 8009dbc:	d806      	bhi.n	8009dcc <cos+0x20>
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	b007      	add	sp, #28
 8009dc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dc8:	f000 b98e 	b.w	800a0e8 <__kernel_cos>
 8009dcc:	4d19      	ldr	r5, [pc, #100]	@ (8009e34 <cos+0x88>)
 8009dce:	42ac      	cmp	r4, r5
 8009dd0:	d903      	bls.n	8009dda <cos+0x2e>
 8009dd2:	f7f6 fae1 	bl	8000398 <__aeabi_dsub>
 8009dd6:	b007      	add	sp, #28
 8009dd8:	bd30      	pop	{r4, r5, pc}
 8009dda:	aa02      	add	r2, sp, #8
 8009ddc:	f000 fbd0 	bl	800a580 <__ieee754_rem_pio2>
 8009de0:	f000 0003 	and.w	r0, r0, #3
 8009de4:	2801      	cmp	r0, #1
 8009de6:	d009      	beq.n	8009dfc <cos+0x50>
 8009de8:	2802      	cmp	r0, #2
 8009dea:	d011      	beq.n	8009e10 <cos+0x64>
 8009dec:	b9b8      	cbnz	r0, 8009e1e <cos+0x72>
 8009dee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009df2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009df6:	f000 f977 	bl	800a0e8 <__kernel_cos>
 8009dfa:	e7ec      	b.n	8009dd6 <cos+0x2a>
 8009dfc:	9000      	str	r0, [sp, #0]
 8009dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e06:	f000 fa2f 	bl	800a268 <__kernel_sin>
 8009e0a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8009e0e:	e7e2      	b.n	8009dd6 <cos+0x2a>
 8009e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e18:	f000 f966 	bl	800a0e8 <__kernel_cos>
 8009e1c:	e7f5      	b.n	8009e0a <cos+0x5e>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e2a:	f000 fa1d 	bl	800a268 <__kernel_sin>
 8009e2e:	e7d2      	b.n	8009dd6 <cos+0x2a>
 8009e30:	3fe921fb 	.word	0x3fe921fb
 8009e34:	7fefffff 	.word	0x7fefffff

08009e38 <__ieee754_sqrt>:
 8009e38:	4a67      	ldr	r2, [pc, #412]	@ (8009fd8 <__ieee754_sqrt+0x1a0>)
 8009e3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3e:	438a      	bics	r2, r1
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	460b      	mov	r3, r1
 8009e46:	4604      	mov	r4, r0
 8009e48:	d10e      	bne.n	8009e68 <__ieee754_sqrt+0x30>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	f7f6 fc5c 	bl	8000708 <__aeabi_dmul>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	4630      	mov	r0, r6
 8009e56:	4639      	mov	r1, r7
 8009e58:	f7f6 faa0 	bl	800039c <__adddf3>
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	460f      	mov	r7, r1
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e68:	2900      	cmp	r1, #0
 8009e6a:	dc0c      	bgt.n	8009e86 <__ieee754_sqrt+0x4e>
 8009e6c:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8009e70:	4302      	orrs	r2, r0
 8009e72:	d0f5      	beq.n	8009e60 <__ieee754_sqrt+0x28>
 8009e74:	b189      	cbz	r1, 8009e9a <__ieee754_sqrt+0x62>
 8009e76:	4602      	mov	r2, r0
 8009e78:	f7f6 fa8e 	bl	8000398 <__aeabi_dsub>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	f7f6 fd6c 	bl	800095c <__aeabi_ddiv>
 8009e84:	e7ea      	b.n	8009e5c <__ieee754_sqrt+0x24>
 8009e86:	150a      	asrs	r2, r1, #20
 8009e88:	d115      	bne.n	8009eb6 <__ieee754_sqrt+0x7e>
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	e009      	b.n	8009ea2 <__ieee754_sqrt+0x6a>
 8009e8e:	0ae3      	lsrs	r3, r4, #11
 8009e90:	3a15      	subs	r2, #21
 8009e92:	0564      	lsls	r4, r4, #21
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0fa      	beq.n	8009e8e <__ieee754_sqrt+0x56>
 8009e98:	e7f7      	b.n	8009e8a <__ieee754_sqrt+0x52>
 8009e9a:	460a      	mov	r2, r1
 8009e9c:	e7fa      	b.n	8009e94 <__ieee754_sqrt+0x5c>
 8009e9e:	005b      	lsls	r3, r3, #1
 8009ea0:	3101      	adds	r1, #1
 8009ea2:	02d8      	lsls	r0, r3, #11
 8009ea4:	d5fb      	bpl.n	8009e9e <__ieee754_sqrt+0x66>
 8009ea6:	1e48      	subs	r0, r1, #1
 8009ea8:	1a12      	subs	r2, r2, r0
 8009eaa:	f1c1 0020 	rsb	r0, r1, #32
 8009eae:	fa24 f000 	lsr.w	r0, r4, r0
 8009eb2:	4303      	orrs	r3, r0
 8009eb4:	408c      	lsls	r4, r1
 8009eb6:	2600      	movs	r6, #0
 8009eb8:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8009ebc:	2116      	movs	r1, #22
 8009ebe:	07d2      	lsls	r2, r2, #31
 8009ec0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8009ec4:	4632      	mov	r2, r6
 8009ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ece:	bf5c      	itt	pl
 8009ed0:	005b      	lslpl	r3, r3, #1
 8009ed2:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8009ed6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009eda:	bf58      	it	pl
 8009edc:	0064      	lslpl	r4, r4, #1
 8009ede:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009ee2:	107f      	asrs	r7, r7, #1
 8009ee4:	0064      	lsls	r4, r4, #1
 8009ee6:	1815      	adds	r5, r2, r0
 8009ee8:	429d      	cmp	r5, r3
 8009eea:	bfde      	ittt	le
 8009eec:	182a      	addle	r2, r5, r0
 8009eee:	1b5b      	suble	r3, r3, r5
 8009ef0:	1836      	addle	r6, r6, r0
 8009ef2:	0fe5      	lsrs	r5, r4, #31
 8009ef4:	3901      	subs	r1, #1
 8009ef6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009efa:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009efe:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009f02:	d1f0      	bne.n	8009ee6 <__ieee754_sqrt+0xae>
 8009f04:	460d      	mov	r5, r1
 8009f06:	f04f 0a20 	mov.w	sl, #32
 8009f0a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	eb01 0c00 	add.w	ip, r1, r0
 8009f14:	db02      	blt.n	8009f1c <__ieee754_sqrt+0xe4>
 8009f16:	d113      	bne.n	8009f40 <__ieee754_sqrt+0x108>
 8009f18:	45a4      	cmp	ip, r4
 8009f1a:	d811      	bhi.n	8009f40 <__ieee754_sqrt+0x108>
 8009f1c:	f1bc 0f00 	cmp.w	ip, #0
 8009f20:	eb0c 0100 	add.w	r1, ip, r0
 8009f24:	da42      	bge.n	8009fac <__ieee754_sqrt+0x174>
 8009f26:	2900      	cmp	r1, #0
 8009f28:	db40      	blt.n	8009fac <__ieee754_sqrt+0x174>
 8009f2a:	f102 0e01 	add.w	lr, r2, #1
 8009f2e:	1a9b      	subs	r3, r3, r2
 8009f30:	4672      	mov	r2, lr
 8009f32:	45a4      	cmp	ip, r4
 8009f34:	bf88      	it	hi
 8009f36:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009f3a:	eba4 040c 	sub.w	r4, r4, ip
 8009f3e:	4405      	add	r5, r0
 8009f40:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009f44:	f1ba 0a01 	subs.w	sl, sl, #1
 8009f48:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009f4c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009f50:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009f54:	d1db      	bne.n	8009f0e <__ieee754_sqrt+0xd6>
 8009f56:	431c      	orrs	r4, r3
 8009f58:	d01a      	beq.n	8009f90 <__ieee754_sqrt+0x158>
 8009f5a:	4c20      	ldr	r4, [pc, #128]	@ (8009fdc <__ieee754_sqrt+0x1a4>)
 8009f5c:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8009fe0 <__ieee754_sqrt+0x1a8>
 8009f60:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009f64:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f68:	f7f6 fa16 	bl	8000398 <__aeabi_dsub>
 8009f6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	4640      	mov	r0, r8
 8009f76:	4649      	mov	r1, r9
 8009f78:	f7f6 fe42 	bl	8000c00 <__aeabi_dcmple>
 8009f7c:	b140      	cbz	r0, 8009f90 <__ieee754_sqrt+0x158>
 8009f7e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009f82:	e9db 2300 	ldrd	r2, r3, [fp]
 8009f86:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009f8a:	d111      	bne.n	8009fb0 <__ieee754_sqrt+0x178>
 8009f8c:	4655      	mov	r5, sl
 8009f8e:	3601      	adds	r6, #1
 8009f90:	1072      	asrs	r2, r6, #1
 8009f92:	086b      	lsrs	r3, r5, #1
 8009f94:	07f1      	lsls	r1, r6, #31
 8009f96:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009f9a:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009f9e:	bf48      	it	mi
 8009fa0:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8009faa:	e757      	b.n	8009e5c <__ieee754_sqrt+0x24>
 8009fac:	4696      	mov	lr, r2
 8009fae:	e7be      	b.n	8009f2e <__ieee754_sqrt+0xf6>
 8009fb0:	f7f6 f9f4 	bl	800039c <__adddf3>
 8009fb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009fb8:	4602      	mov	r2, r0
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	f7f6 fe14 	bl	8000bec <__aeabi_dcmplt>
 8009fc4:	b120      	cbz	r0, 8009fd0 <__ieee754_sqrt+0x198>
 8009fc6:	1ca8      	adds	r0, r5, #2
 8009fc8:	bf08      	it	eq
 8009fca:	3601      	addeq	r6, #1
 8009fcc:	3502      	adds	r5, #2
 8009fce:	e7df      	b.n	8009f90 <__ieee754_sqrt+0x158>
 8009fd0:	1c6b      	adds	r3, r5, #1
 8009fd2:	f023 0501 	bic.w	r5, r3, #1
 8009fd6:	e7db      	b.n	8009f90 <__ieee754_sqrt+0x158>
 8009fd8:	7ff00000 	.word	0x7ff00000
 8009fdc:	20000020 	.word	0x20000020
 8009fe0:	20000018 	.word	0x20000018
 8009fe4:	00000000 	.word	0x00000000

08009fe8 <floor>:
 8009fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fec:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009ff0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8009ff4:	2e13      	cmp	r6, #19
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	4680      	mov	r8, r0
 800a000:	dc35      	bgt.n	800a06e <floor+0x86>
 800a002:	2e00      	cmp	r6, #0
 800a004:	da17      	bge.n	800a036 <floor+0x4e>
 800a006:	a334      	add	r3, pc, #208	@ (adr r3, 800a0d8 <floor+0xf0>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 f9c6 	bl	800039c <__adddf3>
 800a010:	2200      	movs	r2, #0
 800a012:	2300      	movs	r3, #0
 800a014:	f7f6 fe08 	bl	8000c28 <__aeabi_dcmpgt>
 800a018:	b150      	cbz	r0, 800a030 <floor+0x48>
 800a01a:	2c00      	cmp	r4, #0
 800a01c:	da57      	bge.n	800a0ce <floor+0xe6>
 800a01e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800a022:	432c      	orrs	r4, r5
 800a024:	2500      	movs	r5, #0
 800a026:	42ac      	cmp	r4, r5
 800a028:	4c2d      	ldr	r4, [pc, #180]	@ (800a0e0 <floor+0xf8>)
 800a02a:	bf08      	it	eq
 800a02c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800a030:	4623      	mov	r3, r4
 800a032:	462a      	mov	r2, r5
 800a034:	e024      	b.n	800a080 <floor+0x98>
 800a036:	4f2b      	ldr	r7, [pc, #172]	@ (800a0e4 <floor+0xfc>)
 800a038:	4137      	asrs	r7, r6
 800a03a:	ea01 0c07 	and.w	ip, r1, r7
 800a03e:	ea5c 0c00 	orrs.w	ip, ip, r0
 800a042:	d01d      	beq.n	800a080 <floor+0x98>
 800a044:	a324      	add	r3, pc, #144	@ (adr r3, 800a0d8 <floor+0xf0>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	f7f6 f9a7 	bl	800039c <__adddf3>
 800a04e:	2200      	movs	r2, #0
 800a050:	2300      	movs	r3, #0
 800a052:	f7f6 fde9 	bl	8000c28 <__aeabi_dcmpgt>
 800a056:	2800      	cmp	r0, #0
 800a058:	d0ea      	beq.n	800a030 <floor+0x48>
 800a05a:	2c00      	cmp	r4, #0
 800a05c:	bfbe      	ittt	lt
 800a05e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800a062:	4133      	asrlt	r3, r6
 800a064:	18e4      	addlt	r4, r4, r3
 800a066:	2500      	movs	r5, #0
 800a068:	ea24 0407 	bic.w	r4, r4, r7
 800a06c:	e7e0      	b.n	800a030 <floor+0x48>
 800a06e:	2e33      	cmp	r6, #51	@ 0x33
 800a070:	dd0a      	ble.n	800a088 <floor+0xa0>
 800a072:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800a076:	d103      	bne.n	800a080 <floor+0x98>
 800a078:	f7f6 f990 	bl	800039c <__adddf3>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4610      	mov	r0, r2
 800a082:	4619      	mov	r1, r3
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a088:	f04f 3cff 	mov.w	ip, #4294967295
 800a08c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 800a090:	fa2c f707 	lsr.w	r7, ip, r7
 800a094:	4207      	tst	r7, r0
 800a096:	d0f3      	beq.n	800a080 <floor+0x98>
 800a098:	a30f      	add	r3, pc, #60	@ (adr r3, 800a0d8 <floor+0xf0>)
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f7f6 f97d 	bl	800039c <__adddf3>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f7f6 fdbf 	bl	8000c28 <__aeabi_dcmpgt>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d0c0      	beq.n	800a030 <floor+0x48>
 800a0ae:	2c00      	cmp	r4, #0
 800a0b0:	da0a      	bge.n	800a0c8 <floor+0xe0>
 800a0b2:	2e14      	cmp	r6, #20
 800a0b4:	d101      	bne.n	800a0ba <floor+0xd2>
 800a0b6:	3401      	adds	r4, #1
 800a0b8:	e006      	b.n	800a0c8 <floor+0xe0>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800a0c0:	40b3      	lsls	r3, r6
 800a0c2:	441d      	add	r5, r3
 800a0c4:	4545      	cmp	r5, r8
 800a0c6:	d3f6      	bcc.n	800a0b6 <floor+0xce>
 800a0c8:	ea25 0507 	bic.w	r5, r5, r7
 800a0cc:	e7b0      	b.n	800a030 <floor+0x48>
 800a0ce:	2500      	movs	r5, #0
 800a0d0:	462c      	mov	r4, r5
 800a0d2:	e7ad      	b.n	800a030 <floor+0x48>
 800a0d4:	f3af 8000 	nop.w
 800a0d8:	8800759c 	.word	0x8800759c
 800a0dc:	7e37e43c 	.word	0x7e37e43c
 800a0e0:	bff00000 	.word	0xbff00000
 800a0e4:	000fffff 	.word	0x000fffff

0800a0e8 <__kernel_cos>:
 800a0e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a0f0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4689      	mov	r9, r1
 800a0f8:	e9cd 2300 	strd	r2, r3, [sp]
 800a0fc:	d204      	bcs.n	800a108 <__kernel_cos+0x20>
 800a0fe:	f7f6 fdb3 	bl	8000c68 <__aeabi_d2iz>
 800a102:	2800      	cmp	r0, #0
 800a104:	f000 8086 	beq.w	800a214 <__kernel_cos+0x12c>
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	4640      	mov	r0, r8
 800a10e:	4649      	mov	r1, r9
 800a110:	f7f6 fafa 	bl	8000708 <__aeabi_dmul>
 800a114:	2200      	movs	r2, #0
 800a116:	4b4e      	ldr	r3, [pc, #312]	@ (800a250 <__kernel_cos+0x168>)
 800a118:	4604      	mov	r4, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	f7f6 faf4 	bl	8000708 <__aeabi_dmul>
 800a120:	a33f      	add	r3, pc, #252	@ (adr r3, 800a220 <__kernel_cos+0x138>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	4682      	mov	sl, r0
 800a128:	468b      	mov	fp, r1
 800a12a:	4620      	mov	r0, r4
 800a12c:	4629      	mov	r1, r5
 800a12e:	f7f6 faeb 	bl	8000708 <__aeabi_dmul>
 800a132:	a33d      	add	r3, pc, #244	@ (adr r3, 800a228 <__kernel_cos+0x140>)
 800a134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a138:	f7f6 f930 	bl	800039c <__adddf3>
 800a13c:	4622      	mov	r2, r4
 800a13e:	462b      	mov	r3, r5
 800a140:	f7f6 fae2 	bl	8000708 <__aeabi_dmul>
 800a144:	a33a      	add	r3, pc, #232	@ (adr r3, 800a230 <__kernel_cos+0x148>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	f7f6 f925 	bl	8000398 <__aeabi_dsub>
 800a14e:	4622      	mov	r2, r4
 800a150:	462b      	mov	r3, r5
 800a152:	f7f6 fad9 	bl	8000708 <__aeabi_dmul>
 800a156:	a338      	add	r3, pc, #224	@ (adr r3, 800a238 <__kernel_cos+0x150>)
 800a158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15c:	f7f6 f91e 	bl	800039c <__adddf3>
 800a160:	4622      	mov	r2, r4
 800a162:	462b      	mov	r3, r5
 800a164:	f7f6 fad0 	bl	8000708 <__aeabi_dmul>
 800a168:	a335      	add	r3, pc, #212	@ (adr r3, 800a240 <__kernel_cos+0x158>)
 800a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16e:	f7f6 f913 	bl	8000398 <__aeabi_dsub>
 800a172:	4622      	mov	r2, r4
 800a174:	462b      	mov	r3, r5
 800a176:	f7f6 fac7 	bl	8000708 <__aeabi_dmul>
 800a17a:	a333      	add	r3, pc, #204	@ (adr r3, 800a248 <__kernel_cos+0x160>)
 800a17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a180:	f7f6 f90c 	bl	800039c <__adddf3>
 800a184:	4622      	mov	r2, r4
 800a186:	462b      	mov	r3, r5
 800a188:	f7f6 fabe 	bl	8000708 <__aeabi_dmul>
 800a18c:	4622      	mov	r2, r4
 800a18e:	462b      	mov	r3, r5
 800a190:	f7f6 faba 	bl	8000708 <__aeabi_dmul>
 800a194:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a198:	4604      	mov	r4, r0
 800a19a:	460d      	mov	r5, r1
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	f7f6 fab2 	bl	8000708 <__aeabi_dmul>
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f7f6 f8f4 	bl	8000398 <__aeabi_dsub>
 800a1b0:	4b28      	ldr	r3, [pc, #160]	@ (800a254 <__kernel_cos+0x16c>)
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	429e      	cmp	r6, r3
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	d80e      	bhi.n	800a1d8 <__kernel_cos+0xf0>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	460b      	mov	r3, r1
 800a1be:	4650      	mov	r0, sl
 800a1c0:	4659      	mov	r1, fp
 800a1c2:	f7f6 f8e9 	bl	8000398 <__aeabi_dsub>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	4922      	ldr	r1, [pc, #136]	@ (800a258 <__kernel_cos+0x170>)
 800a1ce:	f7f6 f8e3 	bl	8000398 <__aeabi_dsub>
 800a1d2:	b003      	add	sp, #12
 800a1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1d8:	2400      	movs	r4, #0
 800a1da:	4b20      	ldr	r3, [pc, #128]	@ (800a25c <__kernel_cos+0x174>)
 800a1dc:	4622      	mov	r2, r4
 800a1de:	429e      	cmp	r6, r3
 800a1e0:	bf8c      	ite	hi
 800a1e2:	4d1f      	ldrhi	r5, [pc, #124]	@ (800a260 <__kernel_cos+0x178>)
 800a1e4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 800a1e8:	462b      	mov	r3, r5
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	491a      	ldr	r1, [pc, #104]	@ (800a258 <__kernel_cos+0x170>)
 800a1ee:	f7f6 f8d3 	bl	8000398 <__aeabi_dsub>
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	4606      	mov	r6, r0
 800a1f6:	460f      	mov	r7, r1
 800a1f8:	462b      	mov	r3, r5
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	4659      	mov	r1, fp
 800a1fe:	f7f6 f8cb 	bl	8000398 <__aeabi_dsub>
 800a202:	4642      	mov	r2, r8
 800a204:	464b      	mov	r3, r9
 800a206:	f7f6 f8c7 	bl	8000398 <__aeabi_dsub>
 800a20a:	4602      	mov	r2, r0
 800a20c:	460b      	mov	r3, r1
 800a20e:	4630      	mov	r0, r6
 800a210:	4639      	mov	r1, r7
 800a212:	e7dc      	b.n	800a1ce <__kernel_cos+0xe6>
 800a214:	2000      	movs	r0, #0
 800a216:	4910      	ldr	r1, [pc, #64]	@ (800a258 <__kernel_cos+0x170>)
 800a218:	e7db      	b.n	800a1d2 <__kernel_cos+0xea>
 800a21a:	bf00      	nop
 800a21c:	f3af 8000 	nop.w
 800a220:	be8838d4 	.word	0xbe8838d4
 800a224:	bda8fae9 	.word	0xbda8fae9
 800a228:	bdb4b1c4 	.word	0xbdb4b1c4
 800a22c:	3e21ee9e 	.word	0x3e21ee9e
 800a230:	809c52ad 	.word	0x809c52ad
 800a234:	3e927e4f 	.word	0x3e927e4f
 800a238:	19cb1590 	.word	0x19cb1590
 800a23c:	3efa01a0 	.word	0x3efa01a0
 800a240:	16c15177 	.word	0x16c15177
 800a244:	3f56c16c 	.word	0x3f56c16c
 800a248:	5555554c 	.word	0x5555554c
 800a24c:	3fa55555 	.word	0x3fa55555
 800a250:	3fe00000 	.word	0x3fe00000
 800a254:	3fd33332 	.word	0x3fd33332
 800a258:	3ff00000 	.word	0x3ff00000
 800a25c:	3fe90000 	.word	0x3fe90000
 800a260:	3fd20000 	.word	0x3fd20000
 800a264:	00000000 	.word	0x00000000

0800a268 <__kernel_sin>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	461f      	mov	r7, r3
 800a26e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a272:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a276:	4604      	mov	r4, r0
 800a278:	460d      	mov	r5, r1
 800a27a:	4616      	mov	r6, r2
 800a27c:	b085      	sub	sp, #20
 800a27e:	d203      	bcs.n	800a288 <__kernel_sin+0x20>
 800a280:	f7f6 fcf2 	bl	8000c68 <__aeabi_d2iz>
 800a284:	2800      	cmp	r0, #0
 800a286:	d051      	beq.n	800a32c <__kernel_sin+0xc4>
 800a288:	4622      	mov	r2, r4
 800a28a:	462b      	mov	r3, r5
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 fa3a 	bl	8000708 <__aeabi_dmul>
 800a294:	4682      	mov	sl, r0
 800a296:	468b      	mov	fp, r1
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4620      	mov	r0, r4
 800a29e:	4629      	mov	r1, r5
 800a2a0:	f7f6 fa32 	bl	8000708 <__aeabi_dmul>
 800a2a4:	a33e      	add	r3, pc, #248	@ (adr r3, 800a3a0 <__kernel_sin+0x138>)
 800a2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2aa:	4680      	mov	r8, r0
 800a2ac:	4689      	mov	r9, r1
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	f7f6 fa29 	bl	8000708 <__aeabi_dmul>
 800a2b6:	a33c      	add	r3, pc, #240	@ (adr r3, 800a3a8 <__kernel_sin+0x140>)
 800a2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2bc:	f7f6 f86c 	bl	8000398 <__aeabi_dsub>
 800a2c0:	4652      	mov	r2, sl
 800a2c2:	465b      	mov	r3, fp
 800a2c4:	f7f6 fa20 	bl	8000708 <__aeabi_dmul>
 800a2c8:	a339      	add	r3, pc, #228	@ (adr r3, 800a3b0 <__kernel_sin+0x148>)
 800a2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ce:	f7f6 f865 	bl	800039c <__adddf3>
 800a2d2:	4652      	mov	r2, sl
 800a2d4:	465b      	mov	r3, fp
 800a2d6:	f7f6 fa17 	bl	8000708 <__aeabi_dmul>
 800a2da:	a337      	add	r3, pc, #220	@ (adr r3, 800a3b8 <__kernel_sin+0x150>)
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f7f6 f85a 	bl	8000398 <__aeabi_dsub>
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	f7f6 fa0e 	bl	8000708 <__aeabi_dmul>
 800a2ec:	a334      	add	r3, pc, #208	@ (adr r3, 800a3c0 <__kernel_sin+0x158>)
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	f7f6 f853 	bl	800039c <__adddf3>
 800a2f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a2fc:	b9db      	cbnz	r3, 800a336 <__kernel_sin+0xce>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4650      	mov	r0, sl
 800a304:	4659      	mov	r1, fp
 800a306:	f7f6 f9ff 	bl	8000708 <__aeabi_dmul>
 800a30a:	a32f      	add	r3, pc, #188	@ (adr r3, 800a3c8 <__kernel_sin+0x160>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f6 f842 	bl	8000398 <__aeabi_dsub>
 800a314:	4642      	mov	r2, r8
 800a316:	464b      	mov	r3, r9
 800a318:	f7f6 f9f6 	bl	8000708 <__aeabi_dmul>
 800a31c:	4602      	mov	r2, r0
 800a31e:	460b      	mov	r3, r1
 800a320:	4620      	mov	r0, r4
 800a322:	4629      	mov	r1, r5
 800a324:	f7f6 f83a 	bl	800039c <__adddf3>
 800a328:	4604      	mov	r4, r0
 800a32a:	460d      	mov	r5, r1
 800a32c:	4620      	mov	r0, r4
 800a32e:	4629      	mov	r1, r5
 800a330:	b005      	add	sp, #20
 800a332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a336:	2200      	movs	r2, #0
 800a338:	4630      	mov	r0, r6
 800a33a:	4639      	mov	r1, r7
 800a33c:	4b24      	ldr	r3, [pc, #144]	@ (800a3d0 <__kernel_sin+0x168>)
 800a33e:	f7f6 f9e3 	bl	8000708 <__aeabi_dmul>
 800a342:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a34a:	4640      	mov	r0, r8
 800a34c:	4649      	mov	r1, r9
 800a34e:	f7f6 f9db 	bl	8000708 <__aeabi_dmul>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
 800a356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a35a:	f7f6 f81d 	bl	8000398 <__aeabi_dsub>
 800a35e:	4652      	mov	r2, sl
 800a360:	465b      	mov	r3, fp
 800a362:	f7f6 f9d1 	bl	8000708 <__aeabi_dmul>
 800a366:	4632      	mov	r2, r6
 800a368:	463b      	mov	r3, r7
 800a36a:	f7f6 f815 	bl	8000398 <__aeabi_dsub>
 800a36e:	a316      	add	r3, pc, #88	@ (adr r3, 800a3c8 <__kernel_sin+0x160>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	4606      	mov	r6, r0
 800a376:	460f      	mov	r7, r1
 800a378:	4640      	mov	r0, r8
 800a37a:	4649      	mov	r1, r9
 800a37c:	f7f6 f9c4 	bl	8000708 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4630      	mov	r0, r6
 800a386:	4639      	mov	r1, r7
 800a388:	f7f6 f808 	bl	800039c <__adddf3>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4620      	mov	r0, r4
 800a392:	4629      	mov	r1, r5
 800a394:	f7f6 f800 	bl	8000398 <__aeabi_dsub>
 800a398:	e7c6      	b.n	800a328 <__kernel_sin+0xc0>
 800a39a:	bf00      	nop
 800a39c:	f3af 8000 	nop.w
 800a3a0:	5acfd57c 	.word	0x5acfd57c
 800a3a4:	3de5d93a 	.word	0x3de5d93a
 800a3a8:	8a2b9ceb 	.word	0x8a2b9ceb
 800a3ac:	3e5ae5e6 	.word	0x3e5ae5e6
 800a3b0:	57b1fe7d 	.word	0x57b1fe7d
 800a3b4:	3ec71de3 	.word	0x3ec71de3
 800a3b8:	19c161d5 	.word	0x19c161d5
 800a3bc:	3f2a01a0 	.word	0x3f2a01a0
 800a3c0:	1110f8a6 	.word	0x1110f8a6
 800a3c4:	3f811111 	.word	0x3f811111
 800a3c8:	55555549 	.word	0x55555549
 800a3cc:	3fc55555 	.word	0x3fc55555
 800a3d0:	3fe00000 	.word	0x3fe00000
 800a3d4:	00000000 	.word	0x00000000

0800a3d8 <__ieee754_atan2>:
 800a3d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	4617      	mov	r7, r2
 800a3de:	4690      	mov	r8, r2
 800a3e0:	4699      	mov	r9, r3
 800a3e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a3e6:	427b      	negs	r3, r7
 800a3e8:	f8df a184 	ldr.w	sl, [pc, #388]	@ 800a570 <__ieee754_atan2+0x198>
 800a3ec:	433b      	orrs	r3, r7
 800a3ee:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a3f2:	4553      	cmp	r3, sl
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	460d      	mov	r5, r1
 800a3f8:	d809      	bhi.n	800a40e <__ieee754_atan2+0x36>
 800a3fa:	4246      	negs	r6, r0
 800a3fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a400:	4306      	orrs	r6, r0
 800a402:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800a406:	4556      	cmp	r6, sl
 800a408:	468e      	mov	lr, r1
 800a40a:	4683      	mov	fp, r0
 800a40c:	d908      	bls.n	800a420 <__ieee754_atan2+0x48>
 800a40e:	4642      	mov	r2, r8
 800a410:	464b      	mov	r3, r9
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f5 ffc1 	bl	800039c <__adddf3>
 800a41a:	4604      	mov	r4, r0
 800a41c:	460d      	mov	r5, r1
 800a41e:	e016      	b.n	800a44e <__ieee754_atan2+0x76>
 800a420:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 800a424:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800a428:	433e      	orrs	r6, r7
 800a42a:	d103      	bne.n	800a434 <__ieee754_atan2+0x5c>
 800a42c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a430:	f000 ba9e 	b.w	800a970 <atan>
 800a434:	ea4f 76a9 	mov.w	r6, r9, asr #30
 800a438:	f006 0602 	and.w	r6, r6, #2
 800a43c:	ea53 0b0b 	orrs.w	fp, r3, fp
 800a440:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a444:	d107      	bne.n	800a456 <__ieee754_atan2+0x7e>
 800a446:	2e02      	cmp	r6, #2
 800a448:	d064      	beq.n	800a514 <__ieee754_atan2+0x13c>
 800a44a:	2e03      	cmp	r6, #3
 800a44c:	d066      	beq.n	800a51c <__ieee754_atan2+0x144>
 800a44e:	4620      	mov	r0, r4
 800a450:	4629      	mov	r1, r5
 800a452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	4317      	orrs	r7, r2
 800a458:	d106      	bne.n	800a468 <__ieee754_atan2+0x90>
 800a45a:	f1be 0f00 	cmp.w	lr, #0
 800a45e:	da68      	bge.n	800a532 <__ieee754_atan2+0x15a>
 800a460:	a537      	add	r5, pc, #220	@ (adr r5, 800a540 <__ieee754_atan2+0x168>)
 800a462:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a466:	e7f2      	b.n	800a44e <__ieee754_atan2+0x76>
 800a468:	4552      	cmp	r2, sl
 800a46a:	d10f      	bne.n	800a48c <__ieee754_atan2+0xb4>
 800a46c:	4293      	cmp	r3, r2
 800a46e:	f106 36ff 	add.w	r6, r6, #4294967295
 800a472:	d107      	bne.n	800a484 <__ieee754_atan2+0xac>
 800a474:	2e02      	cmp	r6, #2
 800a476:	d855      	bhi.n	800a524 <__ieee754_atan2+0x14c>
 800a478:	4b3e      	ldr	r3, [pc, #248]	@ (800a574 <__ieee754_atan2+0x19c>)
 800a47a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a47e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a482:	e7e4      	b.n	800a44e <__ieee754_atan2+0x76>
 800a484:	2e02      	cmp	r6, #2
 800a486:	d851      	bhi.n	800a52c <__ieee754_atan2+0x154>
 800a488:	4b3b      	ldr	r3, [pc, #236]	@ (800a578 <__ieee754_atan2+0x1a0>)
 800a48a:	e7f6      	b.n	800a47a <__ieee754_atan2+0xa2>
 800a48c:	4553      	cmp	r3, sl
 800a48e:	d0e4      	beq.n	800a45a <__ieee754_atan2+0x82>
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a496:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a49a:	da21      	bge.n	800a4e0 <__ieee754_atan2+0x108>
 800a49c:	f1b9 0f00 	cmp.w	r9, #0
 800a4a0:	da01      	bge.n	800a4a6 <__ieee754_atan2+0xce>
 800a4a2:	323c      	adds	r2, #60	@ 0x3c
 800a4a4:	db20      	blt.n	800a4e8 <__ieee754_atan2+0x110>
 800a4a6:	4642      	mov	r2, r8
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	4620      	mov	r0, r4
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	f7f6 fa55 	bl	800095c <__aeabi_ddiv>
 800a4b2:	f000 fbed 	bl	800ac90 <fabs>
 800a4b6:	f000 fa5b 	bl	800a970 <atan>
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	460d      	mov	r5, r1
 800a4be:	2e01      	cmp	r6, #1
 800a4c0:	d015      	beq.n	800a4ee <__ieee754_atan2+0x116>
 800a4c2:	2e02      	cmp	r6, #2
 800a4c4:	d017      	beq.n	800a4f6 <__ieee754_atan2+0x11e>
 800a4c6:	2e00      	cmp	r6, #0
 800a4c8:	d0c1      	beq.n	800a44e <__ieee754_atan2+0x76>
 800a4ca:	a31f      	add	r3, pc, #124	@ (adr r3, 800a548 <__ieee754_atan2+0x170>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	4629      	mov	r1, r5
 800a4d4:	f7f5 ff60 	bl	8000398 <__aeabi_dsub>
 800a4d8:	a31d      	add	r3, pc, #116	@ (adr r3, 800a550 <__ieee754_atan2+0x178>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	e016      	b.n	800a50e <__ieee754_atan2+0x136>
 800a4e0:	a51d      	add	r5, pc, #116	@ (adr r5, 800a558 <__ieee754_atan2+0x180>)
 800a4e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4e6:	e7ea      	b.n	800a4be <__ieee754_atan2+0xe6>
 800a4e8:	2400      	movs	r4, #0
 800a4ea:	2500      	movs	r5, #0
 800a4ec:	e7e7      	b.n	800a4be <__ieee754_atan2+0xe6>
 800a4ee:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 800a4f2:	461d      	mov	r5, r3
 800a4f4:	e7ab      	b.n	800a44e <__ieee754_atan2+0x76>
 800a4f6:	a314      	add	r3, pc, #80	@ (adr r3, 800a548 <__ieee754_atan2+0x170>)
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f5 ff4a 	bl	8000398 <__aeabi_dsub>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	a111      	add	r1, pc, #68	@ (adr r1, 800a550 <__ieee754_atan2+0x178>)
 800a50a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a50e:	f7f5 ff43 	bl	8000398 <__aeabi_dsub>
 800a512:	e782      	b.n	800a41a <__ieee754_atan2+0x42>
 800a514:	a50e      	add	r5, pc, #56	@ (adr r5, 800a550 <__ieee754_atan2+0x178>)
 800a516:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a51a:	e798      	b.n	800a44e <__ieee754_atan2+0x76>
 800a51c:	a510      	add	r5, pc, #64	@ (adr r5, 800a560 <__ieee754_atan2+0x188>)
 800a51e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a522:	e794      	b.n	800a44e <__ieee754_atan2+0x76>
 800a524:	a510      	add	r5, pc, #64	@ (adr r5, 800a568 <__ieee754_atan2+0x190>)
 800a526:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a52a:	e790      	b.n	800a44e <__ieee754_atan2+0x76>
 800a52c:	2400      	movs	r4, #0
 800a52e:	2500      	movs	r5, #0
 800a530:	e78d      	b.n	800a44e <__ieee754_atan2+0x76>
 800a532:	a509      	add	r5, pc, #36	@ (adr r5, 800a558 <__ieee754_atan2+0x180>)
 800a534:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a538:	e789      	b.n	800a44e <__ieee754_atan2+0x76>
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w
 800a540:	54442d18 	.word	0x54442d18
 800a544:	bff921fb 	.word	0xbff921fb
 800a548:	33145c07 	.word	0x33145c07
 800a54c:	3ca1a626 	.word	0x3ca1a626
 800a550:	54442d18 	.word	0x54442d18
 800a554:	400921fb 	.word	0x400921fb
 800a558:	54442d18 	.word	0x54442d18
 800a55c:	3ff921fb 	.word	0x3ff921fb
 800a560:	54442d18 	.word	0x54442d18
 800a564:	c00921fb 	.word	0xc00921fb
 800a568:	54442d18 	.word	0x54442d18
 800a56c:	3fe921fb 	.word	0x3fe921fb
 800a570:	7ff00000 	.word	0x7ff00000
 800a574:	0800bb88 	.word	0x0800bb88
 800a578:	0800bb70 	.word	0x0800bb70
 800a57c:	00000000 	.word	0x00000000

0800a580 <__ieee754_rem_pio2>:
 800a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	4bc4      	ldr	r3, [pc, #784]	@ (800a898 <__ieee754_rem_pio2+0x318>)
 800a586:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800a58a:	b08d      	sub	sp, #52	@ 0x34
 800a58c:	4598      	cmp	r8, r3
 800a58e:	4606      	mov	r6, r0
 800a590:	460f      	mov	r7, r1
 800a592:	4614      	mov	r4, r2
 800a594:	9104      	str	r1, [sp, #16]
 800a596:	d807      	bhi.n	800a5a8 <__ieee754_rem_pio2+0x28>
 800a598:	e9c2 6700 	strd	r6, r7, [r2]
 800a59c:	2300      	movs	r3, #0
 800a59e:	2200      	movs	r2, #0
 800a5a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a5a4:	2500      	movs	r5, #0
 800a5a6:	e026      	b.n	800a5f6 <__ieee754_rem_pio2+0x76>
 800a5a8:	4bbc      	ldr	r3, [pc, #752]	@ (800a89c <__ieee754_rem_pio2+0x31c>)
 800a5aa:	4598      	cmp	r8, r3
 800a5ac:	d876      	bhi.n	800a69c <__ieee754_rem_pio2+0x11c>
 800a5ae:	9b04      	ldr	r3, [sp, #16]
 800a5b0:	4dbb      	ldr	r5, [pc, #748]	@ (800a8a0 <__ieee754_rem_pio2+0x320>)
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	a3aa      	add	r3, pc, #680	@ (adr r3, 800a860 <__ieee754_rem_pio2+0x2e0>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	dd38      	ble.n	800a62e <__ieee754_rem_pio2+0xae>
 800a5bc:	f7f5 feec 	bl	8000398 <__aeabi_dsub>
 800a5c0:	45a8      	cmp	r8, r5
 800a5c2:	4606      	mov	r6, r0
 800a5c4:	460f      	mov	r7, r1
 800a5c6:	d01a      	beq.n	800a5fe <__ieee754_rem_pio2+0x7e>
 800a5c8:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a868 <__ieee754_rem_pio2+0x2e8>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	f7f5 fee3 	bl	8000398 <__aeabi_dsub>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	4680      	mov	r8, r0
 800a5d8:	4689      	mov	r9, r1
 800a5da:	4630      	mov	r0, r6
 800a5dc:	4639      	mov	r1, r7
 800a5de:	f7f5 fedb 	bl	8000398 <__aeabi_dsub>
 800a5e2:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a868 <__ieee754_rem_pio2+0x2e8>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 fed6 	bl	8000398 <__aeabi_dsub>
 800a5ec:	2501      	movs	r5, #1
 800a5ee:	e9c4 8900 	strd	r8, r9, [r4]
 800a5f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	b00d      	add	sp, #52	@ 0x34
 800a5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fe:	a39c      	add	r3, pc, #624	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f7f5 fec8 	bl	8000398 <__aeabi_dsub>
 800a608:	a39b      	add	r3, pc, #620	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60e:	4606      	mov	r6, r0
 800a610:	460f      	mov	r7, r1
 800a612:	f7f5 fec1 	bl	8000398 <__aeabi_dsub>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	4680      	mov	r8, r0
 800a61c:	4689      	mov	r9, r1
 800a61e:	4630      	mov	r0, r6
 800a620:	4639      	mov	r1, r7
 800a622:	f7f5 feb9 	bl	8000398 <__aeabi_dsub>
 800a626:	a394      	add	r3, pc, #592	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a62c:	e7dc      	b.n	800a5e8 <__ieee754_rem_pio2+0x68>
 800a62e:	f7f5 feb5 	bl	800039c <__adddf3>
 800a632:	45a8      	cmp	r8, r5
 800a634:	4606      	mov	r6, r0
 800a636:	460f      	mov	r7, r1
 800a638:	d018      	beq.n	800a66c <__ieee754_rem_pio2+0xec>
 800a63a:	a38b      	add	r3, pc, #556	@ (adr r3, 800a868 <__ieee754_rem_pio2+0x2e8>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f7f5 feac 	bl	800039c <__adddf3>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	4680      	mov	r8, r0
 800a64a:	4689      	mov	r9, r1
 800a64c:	4630      	mov	r0, r6
 800a64e:	4639      	mov	r1, r7
 800a650:	f7f5 fea2 	bl	8000398 <__aeabi_dsub>
 800a654:	a384      	add	r3, pc, #528	@ (adr r3, 800a868 <__ieee754_rem_pio2+0x2e8>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	f7f5 fe9f 	bl	800039c <__adddf3>
 800a65e:	f04f 35ff 	mov.w	r5, #4294967295
 800a662:	e9c4 8900 	strd	r8, r9, [r4]
 800a666:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a66a:	e7c4      	b.n	800a5f6 <__ieee754_rem_pio2+0x76>
 800a66c:	a380      	add	r3, pc, #512	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a672:	f7f5 fe93 	bl	800039c <__adddf3>
 800a676:	a380      	add	r3, pc, #512	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67c:	4606      	mov	r6, r0
 800a67e:	460f      	mov	r7, r1
 800a680:	f7f5 fe8c 	bl	800039c <__adddf3>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4680      	mov	r8, r0
 800a68a:	4689      	mov	r9, r1
 800a68c:	4630      	mov	r0, r6
 800a68e:	4639      	mov	r1, r7
 800a690:	f7f5 fe82 	bl	8000398 <__aeabi_dsub>
 800a694:	a378      	add	r3, pc, #480	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	e7de      	b.n	800a65a <__ieee754_rem_pio2+0xda>
 800a69c:	4b81      	ldr	r3, [pc, #516]	@ (800a8a4 <__ieee754_rem_pio2+0x324>)
 800a69e:	4598      	cmp	r8, r3
 800a6a0:	f200 80cf 	bhi.w	800a842 <__ieee754_rem_pio2+0x2c2>
 800a6a4:	f000 faf4 	bl	800ac90 <fabs>
 800a6a8:	a375      	add	r3, pc, #468	@ (adr r3, 800a880 <__ieee754_rem_pio2+0x300>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460f      	mov	r7, r1
 800a6b2:	f7f6 f829 	bl	8000708 <__aeabi_dmul>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4b7b      	ldr	r3, [pc, #492]	@ (800a8a8 <__ieee754_rem_pio2+0x328>)
 800a6ba:	f7f5 fe6f 	bl	800039c <__adddf3>
 800a6be:	f7f6 fad3 	bl	8000c68 <__aeabi_d2iz>
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	f7f5 ffb6 	bl	8000634 <__aeabi_i2d>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6d0:	a363      	add	r3, pc, #396	@ (adr r3, 800a860 <__ieee754_rem_pio2+0x2e0>)
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	f7f6 f817 	bl	8000708 <__aeabi_dmul>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4630      	mov	r0, r6
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	f7f5 fe59 	bl	8000398 <__aeabi_dsub>
 800a6e6:	a360      	add	r3, pc, #384	@ (adr r3, 800a868 <__ieee754_rem_pio2+0x2e8>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	4682      	mov	sl, r0
 800a6ee:	468b      	mov	fp, r1
 800a6f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6f4:	f7f6 f808 	bl	8000708 <__aeabi_dmul>
 800a6f8:	2d1f      	cmp	r5, #31
 800a6fa:	4606      	mov	r6, r0
 800a6fc:	460f      	mov	r7, r1
 800a6fe:	dc0c      	bgt.n	800a71a <__ieee754_rem_pio2+0x19a>
 800a700:	4b6a      	ldr	r3, [pc, #424]	@ (800a8ac <__ieee754_rem_pio2+0x32c>)
 800a702:	1e6a      	subs	r2, r5, #1
 800a704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a708:	4543      	cmp	r3, r8
 800a70a:	d006      	beq.n	800a71a <__ieee754_rem_pio2+0x19a>
 800a70c:	4632      	mov	r2, r6
 800a70e:	463b      	mov	r3, r7
 800a710:	4650      	mov	r0, sl
 800a712:	4659      	mov	r1, fp
 800a714:	f7f5 fe40 	bl	8000398 <__aeabi_dsub>
 800a718:	e00e      	b.n	800a738 <__ieee754_rem_pio2+0x1b8>
 800a71a:	463b      	mov	r3, r7
 800a71c:	4632      	mov	r2, r6
 800a71e:	4650      	mov	r0, sl
 800a720:	4659      	mov	r1, fp
 800a722:	f7f5 fe39 	bl	8000398 <__aeabi_dsub>
 800a726:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a72a:	9305      	str	r3, [sp, #20]
 800a72c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a730:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a734:	2b10      	cmp	r3, #16
 800a736:	dc02      	bgt.n	800a73e <__ieee754_rem_pio2+0x1be>
 800a738:	e9c4 0100 	strd	r0, r1, [r4]
 800a73c:	e039      	b.n	800a7b2 <__ieee754_rem_pio2+0x232>
 800a73e:	a34c      	add	r3, pc, #304	@ (adr r3, 800a870 <__ieee754_rem_pio2+0x2f0>)
 800a740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a748:	f7f5 ffde 	bl	8000708 <__aeabi_dmul>
 800a74c:	4606      	mov	r6, r0
 800a74e:	460f      	mov	r7, r1
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	4650      	mov	r0, sl
 800a756:	4659      	mov	r1, fp
 800a758:	f7f5 fe1e 	bl	8000398 <__aeabi_dsub>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4680      	mov	r8, r0
 800a762:	4689      	mov	r9, r1
 800a764:	4650      	mov	r0, sl
 800a766:	4659      	mov	r1, fp
 800a768:	f7f5 fe16 	bl	8000398 <__aeabi_dsub>
 800a76c:	4632      	mov	r2, r6
 800a76e:	463b      	mov	r3, r7
 800a770:	f7f5 fe12 	bl	8000398 <__aeabi_dsub>
 800a774:	a340      	add	r3, pc, #256	@ (adr r3, 800a878 <__ieee754_rem_pio2+0x2f8>)
 800a776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77a:	4606      	mov	r6, r0
 800a77c:	460f      	mov	r7, r1
 800a77e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a782:	f7f5 ffc1 	bl	8000708 <__aeabi_dmul>
 800a786:	4632      	mov	r2, r6
 800a788:	463b      	mov	r3, r7
 800a78a:	f7f5 fe05 	bl	8000398 <__aeabi_dsub>
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	4640      	mov	r0, r8
 800a798:	4649      	mov	r1, r9
 800a79a:	f7f5 fdfd 	bl	8000398 <__aeabi_dsub>
 800a79e:	9a05      	ldr	r2, [sp, #20]
 800a7a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7a4:	1ad3      	subs	r3, r2, r3
 800a7a6:	2b31      	cmp	r3, #49	@ 0x31
 800a7a8:	dc20      	bgt.n	800a7ec <__ieee754_rem_pio2+0x26c>
 800a7aa:	46c2      	mov	sl, r8
 800a7ac:	46cb      	mov	fp, r9
 800a7ae:	e9c4 0100 	strd	r0, r1, [r4]
 800a7b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a7b6:	4650      	mov	r0, sl
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	464b      	mov	r3, r9
 800a7bc:	4659      	mov	r1, fp
 800a7be:	f7f5 fdeb 	bl	8000398 <__aeabi_dsub>
 800a7c2:	463b      	mov	r3, r7
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	f7f5 fde7 	bl	8000398 <__aeabi_dsub>
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f6bf af10 	bge.w	800a5f6 <__ieee754_rem_pio2+0x76>
 800a7d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a7da:	6063      	str	r3, [r4, #4]
 800a7dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a7e0:	f8c4 8000 	str.w	r8, [r4]
 800a7e4:	60a0      	str	r0, [r4, #8]
 800a7e6:	60e3      	str	r3, [r4, #12]
 800a7e8:	426d      	negs	r5, r5
 800a7ea:	e704      	b.n	800a5f6 <__ieee754_rem_pio2+0x76>
 800a7ec:	a326      	add	r3, pc, #152	@ (adr r3, 800a888 <__ieee754_rem_pio2+0x308>)
 800a7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7f6:	f7f5 ff87 	bl	8000708 <__aeabi_dmul>
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	460f      	mov	r7, r1
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	4640      	mov	r0, r8
 800a804:	4649      	mov	r1, r9
 800a806:	f7f5 fdc7 	bl	8000398 <__aeabi_dsub>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	4682      	mov	sl, r0
 800a810:	468b      	mov	fp, r1
 800a812:	4640      	mov	r0, r8
 800a814:	4649      	mov	r1, r9
 800a816:	f7f5 fdbf 	bl	8000398 <__aeabi_dsub>
 800a81a:	4632      	mov	r2, r6
 800a81c:	463b      	mov	r3, r7
 800a81e:	f7f5 fdbb 	bl	8000398 <__aeabi_dsub>
 800a822:	a31b      	add	r3, pc, #108	@ (adr r3, 800a890 <__ieee754_rem_pio2+0x310>)
 800a824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a828:	4606      	mov	r6, r0
 800a82a:	460f      	mov	r7, r1
 800a82c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a830:	f7f5 ff6a 	bl	8000708 <__aeabi_dmul>
 800a834:	4632      	mov	r2, r6
 800a836:	463b      	mov	r3, r7
 800a838:	f7f5 fdae 	bl	8000398 <__aeabi_dsub>
 800a83c:	4606      	mov	r6, r0
 800a83e:	460f      	mov	r7, r1
 800a840:	e764      	b.n	800a70c <__ieee754_rem_pio2+0x18c>
 800a842:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b0 <__ieee754_rem_pio2+0x330>)
 800a844:	4598      	cmp	r8, r3
 800a846:	d935      	bls.n	800a8b4 <__ieee754_rem_pio2+0x334>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	f7f5 fda4 	bl	8000398 <__aeabi_dsub>
 800a850:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a854:	e9c4 0100 	strd	r0, r1, [r4]
 800a858:	e6a4      	b.n	800a5a4 <__ieee754_rem_pio2+0x24>
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w
 800a860:	54400000 	.word	0x54400000
 800a864:	3ff921fb 	.word	0x3ff921fb
 800a868:	1a626331 	.word	0x1a626331
 800a86c:	3dd0b461 	.word	0x3dd0b461
 800a870:	1a600000 	.word	0x1a600000
 800a874:	3dd0b461 	.word	0x3dd0b461
 800a878:	2e037073 	.word	0x2e037073
 800a87c:	3ba3198a 	.word	0x3ba3198a
 800a880:	6dc9c883 	.word	0x6dc9c883
 800a884:	3fe45f30 	.word	0x3fe45f30
 800a888:	2e000000 	.word	0x2e000000
 800a88c:	3ba3198a 	.word	0x3ba3198a
 800a890:	252049c1 	.word	0x252049c1
 800a894:	397b839a 	.word	0x397b839a
 800a898:	3fe921fb 	.word	0x3fe921fb
 800a89c:	4002d97b 	.word	0x4002d97b
 800a8a0:	3ff921fb 	.word	0x3ff921fb
 800a8a4:	413921fb 	.word	0x413921fb
 800a8a8:	3fe00000 	.word	0x3fe00000
 800a8ac:	0800bba0 	.word	0x0800bba0
 800a8b0:	7fefffff 	.word	0x7fefffff
 800a8b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a8b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a8bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a8c0:	460f      	mov	r7, r1
 800a8c2:	f7f6 f9d1 	bl	8000c68 <__aeabi_d2iz>
 800a8c6:	f7f5 feb5 	bl	8000634 <__aeabi_i2d>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a8d6:	f7f5 fd5f 	bl	8000398 <__aeabi_dsub>
 800a8da:	2200      	movs	r2, #0
 800a8dc:	4b21      	ldr	r3, [pc, #132]	@ (800a964 <__ieee754_rem_pio2+0x3e4>)
 800a8de:	f7f5 ff13 	bl	8000708 <__aeabi_dmul>
 800a8e2:	460f      	mov	r7, r1
 800a8e4:	4606      	mov	r6, r0
 800a8e6:	f7f6 f9bf 	bl	8000c68 <__aeabi_d2iz>
 800a8ea:	f7f5 fea3 	bl	8000634 <__aeabi_i2d>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	4639      	mov	r1, r7
 800a8f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a8fa:	f7f5 fd4d 	bl	8000398 <__aeabi_dsub>
 800a8fe:	2200      	movs	r2, #0
 800a900:	4b18      	ldr	r3, [pc, #96]	@ (800a964 <__ieee754_rem_pio2+0x3e4>)
 800a902:	f7f5 ff01 	bl	8000708 <__aeabi_dmul>
 800a906:	f04f 0803 	mov.w	r8, #3
 800a90a:	2600      	movs	r6, #0
 800a90c:	2700      	movs	r7, #0
 800a90e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a912:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a916:	4632      	mov	r2, r6
 800a918:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a91c:	463b      	mov	r3, r7
 800a91e:	46c2      	mov	sl, r8
 800a920:	f108 38ff 	add.w	r8, r8, #4294967295
 800a924:	f7f6 f958 	bl	8000bd8 <__aeabi_dcmpeq>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d1f4      	bne.n	800a916 <__ieee754_rem_pio2+0x396>
 800a92c:	4b0e      	ldr	r3, [pc, #56]	@ (800a968 <__ieee754_rem_pio2+0x3e8>)
 800a92e:	462a      	mov	r2, r5
 800a930:	9301      	str	r3, [sp, #4]
 800a932:	2302      	movs	r3, #2
 800a934:	4621      	mov	r1, r4
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	a806      	add	r0, sp, #24
 800a93a:	4653      	mov	r3, sl
 800a93c:	f000 f9ac 	bl	800ac98 <__kernel_rem_pio2>
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	4605      	mov	r5, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	f6bf ae56 	bge.w	800a5f6 <__ieee754_rem_pio2+0x76>
 800a94a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a94e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a952:	e9c4 2300 	strd	r2, r3, [r4]
 800a956:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a95a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a95e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a962:	e741      	b.n	800a7e8 <__ieee754_rem_pio2+0x268>
 800a964:	41700000 	.word	0x41700000
 800a968:	0800bc20 	.word	0x0800bc20
 800a96c:	00000000 	.word	0x00000000

0800a970 <atan>:
 800a970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	4bbc      	ldr	r3, [pc, #752]	@ (800ac68 <atan+0x2f8>)
 800a976:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a97a:	429e      	cmp	r6, r3
 800a97c:	4604      	mov	r4, r0
 800a97e:	460d      	mov	r5, r1
 800a980:	468b      	mov	fp, r1
 800a982:	d918      	bls.n	800a9b6 <atan+0x46>
 800a984:	4bb9      	ldr	r3, [pc, #740]	@ (800ac6c <atan+0x2fc>)
 800a986:	429e      	cmp	r6, r3
 800a988:	d801      	bhi.n	800a98e <atan+0x1e>
 800a98a:	d109      	bne.n	800a9a0 <atan+0x30>
 800a98c:	b140      	cbz	r0, 800a9a0 <atan+0x30>
 800a98e:	4622      	mov	r2, r4
 800a990:	462b      	mov	r3, r5
 800a992:	4620      	mov	r0, r4
 800a994:	4629      	mov	r1, r5
 800a996:	f7f5 fd01 	bl	800039c <__adddf3>
 800a99a:	4604      	mov	r4, r0
 800a99c:	460d      	mov	r5, r1
 800a99e:	e006      	b.n	800a9ae <atan+0x3e>
 800a9a0:	f1bb 0f00 	cmp.w	fp, #0
 800a9a4:	f340 8123 	ble.w	800abee <atan+0x27e>
 800a9a8:	a593      	add	r5, pc, #588	@ (adr r5, 800abf8 <atan+0x288>)
 800a9aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b6:	4bae      	ldr	r3, [pc, #696]	@ (800ac70 <atan+0x300>)
 800a9b8:	429e      	cmp	r6, r3
 800a9ba:	d811      	bhi.n	800a9e0 <atan+0x70>
 800a9bc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a9c0:	429e      	cmp	r6, r3
 800a9c2:	d80a      	bhi.n	800a9da <atan+0x6a>
 800a9c4:	a38e      	add	r3, pc, #568	@ (adr r3, 800ac00 <atan+0x290>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	f7f5 fce7 	bl	800039c <__adddf3>
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	4ba8      	ldr	r3, [pc, #672]	@ (800ac74 <atan+0x304>)
 800a9d2:	f7f6 f929 	bl	8000c28 <__aeabi_dcmpgt>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d1e9      	bne.n	800a9ae <atan+0x3e>
 800a9da:	f04f 3aff 	mov.w	sl, #4294967295
 800a9de:	e027      	b.n	800aa30 <atan+0xc0>
 800a9e0:	f000 f956 	bl	800ac90 <fabs>
 800a9e4:	4ba4      	ldr	r3, [pc, #656]	@ (800ac78 <atan+0x308>)
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	429e      	cmp	r6, r3
 800a9ea:	460d      	mov	r5, r1
 800a9ec:	f200 80b8 	bhi.w	800ab60 <atan+0x1f0>
 800a9f0:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a9f4:	429e      	cmp	r6, r3
 800a9f6:	f200 809c 	bhi.w	800ab32 <atan+0x1c2>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	f7f5 fccd 	bl	800039c <__adddf3>
 800aa02:	2200      	movs	r2, #0
 800aa04:	4b9b      	ldr	r3, [pc, #620]	@ (800ac74 <atan+0x304>)
 800aa06:	f7f5 fcc7 	bl	8000398 <__aeabi_dsub>
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	4606      	mov	r6, r0
 800aa0e:	460f      	mov	r7, r1
 800aa10:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa14:	4620      	mov	r0, r4
 800aa16:	4629      	mov	r1, r5
 800aa18:	f7f5 fcc0 	bl	800039c <__adddf3>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4630      	mov	r0, r6
 800aa22:	4639      	mov	r1, r7
 800aa24:	f7f5 ff9a 	bl	800095c <__aeabi_ddiv>
 800aa28:	f04f 0a00 	mov.w	sl, #0
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	460d      	mov	r5, r1
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	4620      	mov	r0, r4
 800aa36:	4629      	mov	r1, r5
 800aa38:	f7f5 fe66 	bl	8000708 <__aeabi_dmul>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	460b      	mov	r3, r1
 800aa40:	4680      	mov	r8, r0
 800aa42:	4689      	mov	r9, r1
 800aa44:	f7f5 fe60 	bl	8000708 <__aeabi_dmul>
 800aa48:	a36f      	add	r3, pc, #444	@ (adr r3, 800ac08 <atan+0x298>)
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	4606      	mov	r6, r0
 800aa50:	460f      	mov	r7, r1
 800aa52:	f7f5 fe59 	bl	8000708 <__aeabi_dmul>
 800aa56:	a36e      	add	r3, pc, #440	@ (adr r3, 800ac10 <atan+0x2a0>)
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f7f5 fc9e 	bl	800039c <__adddf3>
 800aa60:	4632      	mov	r2, r6
 800aa62:	463b      	mov	r3, r7
 800aa64:	f7f5 fe50 	bl	8000708 <__aeabi_dmul>
 800aa68:	a36b      	add	r3, pc, #428	@ (adr r3, 800ac18 <atan+0x2a8>)
 800aa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6e:	f7f5 fc95 	bl	800039c <__adddf3>
 800aa72:	4632      	mov	r2, r6
 800aa74:	463b      	mov	r3, r7
 800aa76:	f7f5 fe47 	bl	8000708 <__aeabi_dmul>
 800aa7a:	a369      	add	r3, pc, #420	@ (adr r3, 800ac20 <atan+0x2b0>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fc8c 	bl	800039c <__adddf3>
 800aa84:	4632      	mov	r2, r6
 800aa86:	463b      	mov	r3, r7
 800aa88:	f7f5 fe3e 	bl	8000708 <__aeabi_dmul>
 800aa8c:	a366      	add	r3, pc, #408	@ (adr r3, 800ac28 <atan+0x2b8>)
 800aa8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa92:	f7f5 fc83 	bl	800039c <__adddf3>
 800aa96:	4632      	mov	r2, r6
 800aa98:	463b      	mov	r3, r7
 800aa9a:	f7f5 fe35 	bl	8000708 <__aeabi_dmul>
 800aa9e:	a364      	add	r3, pc, #400	@ (adr r3, 800ac30 <atan+0x2c0>)
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	f7f5 fc7a 	bl	800039c <__adddf3>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	464b      	mov	r3, r9
 800aaac:	f7f5 fe2c 	bl	8000708 <__aeabi_dmul>
 800aab0:	a361      	add	r3, pc, #388	@ (adr r3, 800ac38 <atan+0x2c8>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	4680      	mov	r8, r0
 800aab8:	4689      	mov	r9, r1
 800aaba:	4630      	mov	r0, r6
 800aabc:	4639      	mov	r1, r7
 800aabe:	f7f5 fe23 	bl	8000708 <__aeabi_dmul>
 800aac2:	a35f      	add	r3, pc, #380	@ (adr r3, 800ac40 <atan+0x2d0>)
 800aac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac8:	f7f5 fc66 	bl	8000398 <__aeabi_dsub>
 800aacc:	4632      	mov	r2, r6
 800aace:	463b      	mov	r3, r7
 800aad0:	f7f5 fe1a 	bl	8000708 <__aeabi_dmul>
 800aad4:	a35c      	add	r3, pc, #368	@ (adr r3, 800ac48 <atan+0x2d8>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f7f5 fc5d 	bl	8000398 <__aeabi_dsub>
 800aade:	4632      	mov	r2, r6
 800aae0:	463b      	mov	r3, r7
 800aae2:	f7f5 fe11 	bl	8000708 <__aeabi_dmul>
 800aae6:	a35a      	add	r3, pc, #360	@ (adr r3, 800ac50 <atan+0x2e0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fc54 	bl	8000398 <__aeabi_dsub>
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	463b      	mov	r3, r7
 800aaf4:	f7f5 fe08 	bl	8000708 <__aeabi_dmul>
 800aaf8:	a357      	add	r3, pc, #348	@ (adr r3, 800ac58 <atan+0x2e8>)
 800aafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafe:	f7f5 fc4b 	bl	8000398 <__aeabi_dsub>
 800ab02:	4632      	mov	r2, r6
 800ab04:	463b      	mov	r3, r7
 800ab06:	f7f5 fdff 	bl	8000708 <__aeabi_dmul>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	4640      	mov	r0, r8
 800ab10:	4649      	mov	r1, r9
 800ab12:	f7f5 fc43 	bl	800039c <__adddf3>
 800ab16:	4622      	mov	r2, r4
 800ab18:	462b      	mov	r3, r5
 800ab1a:	f7f5 fdf5 	bl	8000708 <__aeabi_dmul>
 800ab1e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	d144      	bne.n	800abb2 <atan+0x242>
 800ab28:	4620      	mov	r0, r4
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	f7f5 fc34 	bl	8000398 <__aeabi_dsub>
 800ab30:	e733      	b.n	800a99a <atan+0x2a>
 800ab32:	2200      	movs	r2, #0
 800ab34:	4b4f      	ldr	r3, [pc, #316]	@ (800ac74 <atan+0x304>)
 800ab36:	f7f5 fc2f 	bl	8000398 <__aeabi_dsub>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	460f      	mov	r7, r1
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	4b4b      	ldr	r3, [pc, #300]	@ (800ac74 <atan+0x304>)
 800ab46:	f7f5 fc29 	bl	800039c <__adddf3>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	4630      	mov	r0, r6
 800ab50:	4639      	mov	r1, r7
 800ab52:	f7f5 ff03 	bl	800095c <__aeabi_ddiv>
 800ab56:	f04f 0a01 	mov.w	sl, #1
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	e767      	b.n	800aa30 <atan+0xc0>
 800ab60:	4b46      	ldr	r3, [pc, #280]	@ (800ac7c <atan+0x30c>)
 800ab62:	429e      	cmp	r6, r3
 800ab64:	d21a      	bcs.n	800ab9c <atan+0x22c>
 800ab66:	2200      	movs	r2, #0
 800ab68:	4b45      	ldr	r3, [pc, #276]	@ (800ac80 <atan+0x310>)
 800ab6a:	f7f5 fc15 	bl	8000398 <__aeabi_dsub>
 800ab6e:	2200      	movs	r2, #0
 800ab70:	4606      	mov	r6, r0
 800ab72:	460f      	mov	r7, r1
 800ab74:	4620      	mov	r0, r4
 800ab76:	4629      	mov	r1, r5
 800ab78:	4b41      	ldr	r3, [pc, #260]	@ (800ac80 <atan+0x310>)
 800ab7a:	f7f5 fdc5 	bl	8000708 <__aeabi_dmul>
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4b3c      	ldr	r3, [pc, #240]	@ (800ac74 <atan+0x304>)
 800ab82:	f7f5 fc0b 	bl	800039c <__adddf3>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	f7f5 fee5 	bl	800095c <__aeabi_ddiv>
 800ab92:	f04f 0a02 	mov.w	sl, #2
 800ab96:	4604      	mov	r4, r0
 800ab98:	460d      	mov	r5, r1
 800ab9a:	e749      	b.n	800aa30 <atan+0xc0>
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	2000      	movs	r0, #0
 800aba2:	4938      	ldr	r1, [pc, #224]	@ (800ac84 <atan+0x314>)
 800aba4:	f7f5 feda 	bl	800095c <__aeabi_ddiv>
 800aba8:	f04f 0a03 	mov.w	sl, #3
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	e73e      	b.n	800aa30 <atan+0xc0>
 800abb2:	4b35      	ldr	r3, [pc, #212]	@ (800ac88 <atan+0x318>)
 800abb4:	4e35      	ldr	r6, [pc, #212]	@ (800ac8c <atan+0x31c>)
 800abb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbe:	f7f5 fbeb 	bl	8000398 <__aeabi_dsub>
 800abc2:	4622      	mov	r2, r4
 800abc4:	462b      	mov	r3, r5
 800abc6:	f7f5 fbe7 	bl	8000398 <__aeabi_dsub>
 800abca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
 800abd2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800abd6:	f7f5 fbdf 	bl	8000398 <__aeabi_dsub>
 800abda:	f1bb 0f00 	cmp.w	fp, #0
 800abde:	4604      	mov	r4, r0
 800abe0:	460d      	mov	r5, r1
 800abe2:	f6bf aee4 	bge.w	800a9ae <atan+0x3e>
 800abe6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abea:	461d      	mov	r5, r3
 800abec:	e6df      	b.n	800a9ae <atan+0x3e>
 800abee:	a51c      	add	r5, pc, #112	@ (adr r5, 800ac60 <atan+0x2f0>)
 800abf0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800abf4:	e6db      	b.n	800a9ae <atan+0x3e>
 800abf6:	bf00      	nop
 800abf8:	54442d18 	.word	0x54442d18
 800abfc:	3ff921fb 	.word	0x3ff921fb
 800ac00:	8800759c 	.word	0x8800759c
 800ac04:	7e37e43c 	.word	0x7e37e43c
 800ac08:	e322da11 	.word	0xe322da11
 800ac0c:	3f90ad3a 	.word	0x3f90ad3a
 800ac10:	24760deb 	.word	0x24760deb
 800ac14:	3fa97b4b 	.word	0x3fa97b4b
 800ac18:	a0d03d51 	.word	0xa0d03d51
 800ac1c:	3fb10d66 	.word	0x3fb10d66
 800ac20:	c54c206e 	.word	0xc54c206e
 800ac24:	3fb745cd 	.word	0x3fb745cd
 800ac28:	920083ff 	.word	0x920083ff
 800ac2c:	3fc24924 	.word	0x3fc24924
 800ac30:	5555550d 	.word	0x5555550d
 800ac34:	3fd55555 	.word	0x3fd55555
 800ac38:	2c6a6c2f 	.word	0x2c6a6c2f
 800ac3c:	bfa2b444 	.word	0xbfa2b444
 800ac40:	52defd9a 	.word	0x52defd9a
 800ac44:	3fadde2d 	.word	0x3fadde2d
 800ac48:	af749a6d 	.word	0xaf749a6d
 800ac4c:	3fb3b0f2 	.word	0x3fb3b0f2
 800ac50:	fe231671 	.word	0xfe231671
 800ac54:	3fbc71c6 	.word	0x3fbc71c6
 800ac58:	9998ebc4 	.word	0x9998ebc4
 800ac5c:	3fc99999 	.word	0x3fc99999
 800ac60:	54442d18 	.word	0x54442d18
 800ac64:	bff921fb 	.word	0xbff921fb
 800ac68:	440fffff 	.word	0x440fffff
 800ac6c:	7ff00000 	.word	0x7ff00000
 800ac70:	3fdbffff 	.word	0x3fdbffff
 800ac74:	3ff00000 	.word	0x3ff00000
 800ac78:	3ff2ffff 	.word	0x3ff2ffff
 800ac7c:	40038000 	.word	0x40038000
 800ac80:	3ff80000 	.word	0x3ff80000
 800ac84:	bff00000 	.word	0xbff00000
 800ac88:	0800bd28 	.word	0x0800bd28
 800ac8c:	0800bd48 	.word	0x0800bd48

0800ac90 <fabs>:
 800ac90:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ac94:	4619      	mov	r1, r3
 800ac96:	4770      	bx	lr

0800ac98 <__kernel_rem_pio2>:
 800ac98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac9c:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800aca0:	9308      	str	r3, [sp, #32]
 800aca2:	9104      	str	r1, [sp, #16]
 800aca4:	4bb6      	ldr	r3, [pc, #728]	@ (800af80 <__kernel_rem_pio2+0x2e8>)
 800aca6:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800aca8:	f112 0f14 	cmn.w	r2, #20
 800acac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800acb0:	bfa8      	it	ge
 800acb2:	1ed4      	subge	r4, r2, #3
 800acb4:	9302      	str	r3, [sp, #8]
 800acb6:	9b08      	ldr	r3, [sp, #32]
 800acb8:	bfb8      	it	lt
 800acba:	2400      	movlt	r4, #0
 800acbc:	f103 33ff 	add.w	r3, r3, #4294967295
 800acc0:	9306      	str	r3, [sp, #24]
 800acc2:	bfa4      	itt	ge
 800acc4:	2318      	movge	r3, #24
 800acc6:	fb94 f4f3 	sdivge	r4, r4, r3
 800acca:	f06f 0317 	mvn.w	r3, #23
 800acce:	fb04 3303 	mla	r3, r4, r3, r3
 800acd2:	eb03 0a02 	add.w	sl, r3, r2
 800acd6:	9a06      	ldr	r2, [sp, #24]
 800acd8:	9b02      	ldr	r3, [sp, #8]
 800acda:	1aa7      	subs	r7, r4, r2
 800acdc:	eb03 0802 	add.w	r8, r3, r2
 800ace0:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800ace2:	2500      	movs	r5, #0
 800ace4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ace8:	2200      	movs	r2, #0
 800acea:	2300      	movs	r3, #0
 800acec:	9009      	str	r0, [sp, #36]	@ 0x24
 800acee:	ae20      	add	r6, sp, #128	@ 0x80
 800acf0:	4545      	cmp	r5, r8
 800acf2:	dd14      	ble.n	800ad1e <__kernel_rem_pio2+0x86>
 800acf4:	f04f 0800 	mov.w	r8, #0
 800acf8:	9a08      	ldr	r2, [sp, #32]
 800acfa:	ab20      	add	r3, sp, #128	@ 0x80
 800acfc:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ad00:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800ad04:	9b02      	ldr	r3, [sp, #8]
 800ad06:	4598      	cmp	r8, r3
 800ad08:	dc35      	bgt.n	800ad76 <__kernel_rem_pio2+0xde>
 800ad0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	f1a3 0908 	sub.w	r9, r3, #8
 800ad12:	2300      	movs	r3, #0
 800ad14:	462f      	mov	r7, r5
 800ad16:	2600      	movs	r6, #0
 800ad18:	e9cd 2300 	strd	r2, r3, [sp]
 800ad1c:	e01f      	b.n	800ad5e <__kernel_rem_pio2+0xc6>
 800ad1e:	42ef      	cmn	r7, r5
 800ad20:	d40b      	bmi.n	800ad3a <__kernel_rem_pio2+0xa2>
 800ad22:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ad26:	e9cd 2300 	strd	r2, r3, [sp]
 800ad2a:	f7f5 fc83 	bl	8000634 <__aeabi_i2d>
 800ad2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad36:	3501      	adds	r5, #1
 800ad38:	e7da      	b.n	800acf0 <__kernel_rem_pio2+0x58>
 800ad3a:	4610      	mov	r0, r2
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	e7f8      	b.n	800ad32 <__kernel_rem_pio2+0x9a>
 800ad40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad44:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ad48:	f7f5 fcde 	bl	8000708 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad54:	f7f5 fb22 	bl	800039c <__adddf3>
 800ad58:	e9cd 0100 	strd	r0, r1, [sp]
 800ad5c:	3601      	adds	r6, #1
 800ad5e:	9b06      	ldr	r3, [sp, #24]
 800ad60:	3f08      	subs	r7, #8
 800ad62:	429e      	cmp	r6, r3
 800ad64:	ddec      	ble.n	800ad40 <__kernel_rem_pio2+0xa8>
 800ad66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad6a:	f108 0801 	add.w	r8, r8, #1
 800ad6e:	e8eb 2302 	strd	r2, r3, [fp], #8
 800ad72:	3508      	adds	r5, #8
 800ad74:	e7c6      	b.n	800ad04 <__kernel_rem_pio2+0x6c>
 800ad76:	9b02      	ldr	r3, [sp, #8]
 800ad78:	aa0c      	add	r2, sp, #48	@ 0x30
 800ad7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad80:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800ad82:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ad86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad8c:	ab98      	add	r3, sp, #608	@ 0x260
 800ad8e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad92:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800ad96:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ad98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ad9c:	ae0c      	add	r6, sp, #48	@ 0x30
 800ad9e:	4698      	mov	r8, r3
 800ada0:	46b1      	mov	r9, r6
 800ada2:	465f      	mov	r7, fp
 800ada4:	9307      	str	r3, [sp, #28]
 800ada6:	2f00      	cmp	r7, #0
 800ada8:	f1a8 0808 	sub.w	r8, r8, #8
 800adac:	dc71      	bgt.n	800ae92 <__kernel_rem_pio2+0x1fa>
 800adae:	4652      	mov	r2, sl
 800adb0:	4620      	mov	r0, r4
 800adb2:	4629      	mov	r1, r5
 800adb4:	f000 fa94 	bl	800b2e0 <scalbn>
 800adb8:	2200      	movs	r2, #0
 800adba:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800adbe:	4604      	mov	r4, r0
 800adc0:	460d      	mov	r5, r1
 800adc2:	f7f5 fca1 	bl	8000708 <__aeabi_dmul>
 800adc6:	f7ff f90f 	bl	8009fe8 <floor>
 800adca:	2200      	movs	r2, #0
 800adcc:	4b6d      	ldr	r3, [pc, #436]	@ (800af84 <__kernel_rem_pio2+0x2ec>)
 800adce:	f7f5 fc9b 	bl	8000708 <__aeabi_dmul>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4620      	mov	r0, r4
 800add8:	4629      	mov	r1, r5
 800adda:	f7f5 fadd 	bl	8000398 <__aeabi_dsub>
 800adde:	460d      	mov	r5, r1
 800ade0:	4604      	mov	r4, r0
 800ade2:	f7f5 ff41 	bl	8000c68 <__aeabi_d2iz>
 800ade6:	9005      	str	r0, [sp, #20]
 800ade8:	f7f5 fc24 	bl	8000634 <__aeabi_i2d>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4620      	mov	r0, r4
 800adf2:	4629      	mov	r1, r5
 800adf4:	f7f5 fad0 	bl	8000398 <__aeabi_dsub>
 800adf8:	f1ba 0f00 	cmp.w	sl, #0
 800adfc:	4680      	mov	r8, r0
 800adfe:	4689      	mov	r9, r1
 800ae00:	dd6d      	ble.n	800aede <__kernel_rem_pio2+0x246>
 800ae02:	f10b 31ff 	add.w	r1, fp, #4294967295
 800ae06:	ab0c      	add	r3, sp, #48	@ 0x30
 800ae08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae0c:	9c05      	ldr	r4, [sp, #20]
 800ae0e:	f1ca 0018 	rsb	r0, sl, #24
 800ae12:	fa43 f200 	asr.w	r2, r3, r0
 800ae16:	4414      	add	r4, r2
 800ae18:	4082      	lsls	r2, r0
 800ae1a:	1a9b      	subs	r3, r3, r2
 800ae1c:	aa0c      	add	r2, sp, #48	@ 0x30
 800ae1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ae22:	f1ca 0217 	rsb	r2, sl, #23
 800ae26:	9405      	str	r4, [sp, #20]
 800ae28:	4113      	asrs	r3, r2
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	9b00      	ldr	r3, [sp, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	dd64      	ble.n	800aefc <__kernel_rem_pio2+0x264>
 800ae32:	2200      	movs	r2, #0
 800ae34:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ae38:	4614      	mov	r4, r2
 800ae3a:	9b05      	ldr	r3, [sp, #20]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	9305      	str	r3, [sp, #20]
 800ae40:	4593      	cmp	fp, r2
 800ae42:	f300 80ab 	bgt.w	800af9c <__kernel_rem_pio2+0x304>
 800ae46:	f1ba 0f00 	cmp.w	sl, #0
 800ae4a:	dd07      	ble.n	800ae5c <__kernel_rem_pio2+0x1c4>
 800ae4c:	f1ba 0f01 	cmp.w	sl, #1
 800ae50:	f000 80b2 	beq.w	800afb8 <__kernel_rem_pio2+0x320>
 800ae54:	f1ba 0f02 	cmp.w	sl, #2
 800ae58:	f000 80b9 	beq.w	800afce <__kernel_rem_pio2+0x336>
 800ae5c:	9b00      	ldr	r3, [sp, #0]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d14c      	bne.n	800aefc <__kernel_rem_pio2+0x264>
 800ae62:	4642      	mov	r2, r8
 800ae64:	464b      	mov	r3, r9
 800ae66:	2000      	movs	r0, #0
 800ae68:	4947      	ldr	r1, [pc, #284]	@ (800af88 <__kernel_rem_pio2+0x2f0>)
 800ae6a:	f7f5 fa95 	bl	8000398 <__aeabi_dsub>
 800ae6e:	4680      	mov	r8, r0
 800ae70:	4689      	mov	r9, r1
 800ae72:	2c00      	cmp	r4, #0
 800ae74:	d042      	beq.n	800aefc <__kernel_rem_pio2+0x264>
 800ae76:	4652      	mov	r2, sl
 800ae78:	2000      	movs	r0, #0
 800ae7a:	4943      	ldr	r1, [pc, #268]	@ (800af88 <__kernel_rem_pio2+0x2f0>)
 800ae7c:	f000 fa30 	bl	800b2e0 <scalbn>
 800ae80:	4602      	mov	r2, r0
 800ae82:	460b      	mov	r3, r1
 800ae84:	4640      	mov	r0, r8
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7f5 fa86 	bl	8000398 <__aeabi_dsub>
 800ae8c:	4680      	mov	r8, r0
 800ae8e:	4689      	mov	r9, r1
 800ae90:	e034      	b.n	800aefc <__kernel_rem_pio2+0x264>
 800ae92:	2200      	movs	r2, #0
 800ae94:	4b3d      	ldr	r3, [pc, #244]	@ (800af8c <__kernel_rem_pio2+0x2f4>)
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fc35 	bl	8000708 <__aeabi_dmul>
 800ae9e:	f7f5 fee3 	bl	8000c68 <__aeabi_d2iz>
 800aea2:	f7f5 fbc7 	bl	8000634 <__aeabi_i2d>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	e9cd 2300 	strd	r2, r3, [sp]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	4b37      	ldr	r3, [pc, #220]	@ (800af90 <__kernel_rem_pio2+0x2f8>)
 800aeb2:	f7f5 fc29 	bl	8000708 <__aeabi_dmul>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7f5 fa6b 	bl	8000398 <__aeabi_dsub>
 800aec2:	f7f5 fed1 	bl	8000c68 <__aeabi_d2iz>
 800aec6:	e9d8 2300 	ldrd	r2, r3, [r8]
 800aeca:	f849 0b04 	str.w	r0, [r9], #4
 800aece:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aed2:	f7f5 fa63 	bl	800039c <__adddf3>
 800aed6:	3f01      	subs	r7, #1
 800aed8:	4604      	mov	r4, r0
 800aeda:	460d      	mov	r5, r1
 800aedc:	e763      	b.n	800ada6 <__kernel_rem_pio2+0x10e>
 800aede:	d106      	bne.n	800aeee <__kernel_rem_pio2+0x256>
 800aee0:	f10b 33ff 	add.w	r3, fp, #4294967295
 800aee4:	aa0c      	add	r2, sp, #48	@ 0x30
 800aee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeea:	15db      	asrs	r3, r3, #23
 800aeec:	e79d      	b.n	800ae2a <__kernel_rem_pio2+0x192>
 800aeee:	2200      	movs	r2, #0
 800aef0:	4b28      	ldr	r3, [pc, #160]	@ (800af94 <__kernel_rem_pio2+0x2fc>)
 800aef2:	f7f5 fe8f 	bl	8000c14 <__aeabi_dcmpge>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d13f      	bne.n	800af7a <__kernel_rem_pio2+0x2e2>
 800aefa:	9000      	str	r0, [sp, #0]
 800aefc:	2200      	movs	r2, #0
 800aefe:	2300      	movs	r3, #0
 800af00:	4640      	mov	r0, r8
 800af02:	4649      	mov	r1, r9
 800af04:	f7f5 fe68 	bl	8000bd8 <__aeabi_dcmpeq>
 800af08:	2800      	cmp	r0, #0
 800af0a:	f000 80af 	beq.w	800b06c <__kernel_rem_pio2+0x3d4>
 800af0e:	2200      	movs	r2, #0
 800af10:	f10b 33ff 	add.w	r3, fp, #4294967295
 800af14:	9902      	ldr	r1, [sp, #8]
 800af16:	428b      	cmp	r3, r1
 800af18:	da61      	bge.n	800afde <__kernel_rem_pio2+0x346>
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	d076      	beq.n	800b00c <__kernel_rem_pio2+0x374>
 800af1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af22:	ab0c      	add	r3, sp, #48	@ 0x30
 800af24:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800af28:	f1aa 0a18 	sub.w	sl, sl, #24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d0f6      	beq.n	800af1e <__kernel_rem_pio2+0x286>
 800af30:	4652      	mov	r2, sl
 800af32:	2000      	movs	r0, #0
 800af34:	4914      	ldr	r1, [pc, #80]	@ (800af88 <__kernel_rem_pio2+0x2f0>)
 800af36:	f000 f9d3 	bl	800b2e0 <scalbn>
 800af3a:	465d      	mov	r5, fp
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	f04f 0900 	mov.w	r9, #0
 800af44:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af46:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800af8c <__kernel_rem_pio2+0x2f4>
 800af4a:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800af4e:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800af52:	2d00      	cmp	r5, #0
 800af54:	f280 80c0 	bge.w	800b0d8 <__kernel_rem_pio2+0x440>
 800af58:	465d      	mov	r5, fp
 800af5a:	2d00      	cmp	r5, #0
 800af5c:	f2c0 80f0 	blt.w	800b140 <__kernel_rem_pio2+0x4a8>
 800af60:	4b0d      	ldr	r3, [pc, #52]	@ (800af98 <__kernel_rem_pio2+0x300>)
 800af62:	f04f 0900 	mov.w	r9, #0
 800af66:	9306      	str	r3, [sp, #24]
 800af68:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af6a:	f04f 0a00 	mov.w	sl, #0
 800af6e:	2700      	movs	r7, #0
 800af70:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800af74:	ebab 0605 	sub.w	r6, fp, r5
 800af78:	e0d6      	b.n	800b128 <__kernel_rem_pio2+0x490>
 800af7a:	2302      	movs	r3, #2
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	e758      	b.n	800ae32 <__kernel_rem_pio2+0x19a>
 800af80:	0800bda8 	.word	0x0800bda8
 800af84:	40200000 	.word	0x40200000
 800af88:	3ff00000 	.word	0x3ff00000
 800af8c:	3e700000 	.word	0x3e700000
 800af90:	41700000 	.word	0x41700000
 800af94:	3fe00000 	.word	0x3fe00000
 800af98:	0800bd68 	.word	0x0800bd68
 800af9c:	f856 3b04 	ldr.w	r3, [r6], #4
 800afa0:	b944      	cbnz	r4, 800afb4 <__kernel_rem_pio2+0x31c>
 800afa2:	b123      	cbz	r3, 800afae <__kernel_rem_pio2+0x316>
 800afa4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800afa8:	f846 3c04 	str.w	r3, [r6, #-4]
 800afac:	2301      	movs	r3, #1
 800afae:	461c      	mov	r4, r3
 800afb0:	3201      	adds	r2, #1
 800afb2:	e745      	b.n	800ae40 <__kernel_rem_pio2+0x1a8>
 800afb4:	1acb      	subs	r3, r1, r3
 800afb6:	e7f7      	b.n	800afa8 <__kernel_rem_pio2+0x310>
 800afb8:	f10b 32ff 	add.w	r2, fp, #4294967295
 800afbc:	ab0c      	add	r3, sp, #48	@ 0x30
 800afbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afc2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800afc6:	a90c      	add	r1, sp, #48	@ 0x30
 800afc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800afcc:	e746      	b.n	800ae5c <__kernel_rem_pio2+0x1c4>
 800afce:	f10b 32ff 	add.w	r2, fp, #4294967295
 800afd2:	ab0c      	add	r3, sp, #48	@ 0x30
 800afd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800afdc:	e7f3      	b.n	800afc6 <__kernel_rem_pio2+0x32e>
 800afde:	a90c      	add	r1, sp, #48	@ 0x30
 800afe0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	430a      	orrs	r2, r1
 800afe8:	e794      	b.n	800af14 <__kernel_rem_pio2+0x27c>
 800afea:	3401      	adds	r4, #1
 800afec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	d0fa      	beq.n	800afea <__kernel_rem_pio2+0x352>
 800aff4:	9b08      	ldr	r3, [sp, #32]
 800aff6:	aa20      	add	r2, sp, #128	@ 0x80
 800aff8:	445b      	add	r3, fp
 800affa:	f10b 0801 	add.w	r8, fp, #1
 800affe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b002:	445c      	add	r4, fp
 800b004:	4544      	cmp	r4, r8
 800b006:	da04      	bge.n	800b012 <__kernel_rem_pio2+0x37a>
 800b008:	46a3      	mov	fp, r4
 800b00a:	e6bf      	b.n	800ad8c <__kernel_rem_pio2+0xf4>
 800b00c:	2401      	movs	r4, #1
 800b00e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b010:	e7ec      	b.n	800afec <__kernel_rem_pio2+0x354>
 800b012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b014:	46ab      	mov	fp, r5
 800b016:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b01a:	f7f5 fb0b 	bl	8000634 <__aeabi_i2d>
 800b01e:	f04f 0900 	mov.w	r9, #0
 800b022:	2600      	movs	r6, #0
 800b024:	2700      	movs	r7, #0
 800b026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b028:	e9c5 0100 	strd	r0, r1, [r5]
 800b02c:	3b08      	subs	r3, #8
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	9b06      	ldr	r3, [sp, #24]
 800b032:	4599      	cmp	r9, r3
 800b034:	dd07      	ble.n	800b046 <__kernel_rem_pio2+0x3ae>
 800b036:	9b07      	ldr	r3, [sp, #28]
 800b038:	f108 0801 	add.w	r8, r8, #1
 800b03c:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800b040:	3508      	adds	r5, #8
 800b042:	9307      	str	r3, [sp, #28]
 800b044:	e7de      	b.n	800b004 <__kernel_rem_pio2+0x36c>
 800b046:	9900      	ldr	r1, [sp, #0]
 800b048:	f109 0901 	add.w	r9, r9, #1
 800b04c:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b050:	9100      	str	r1, [sp, #0]
 800b052:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800b056:	f7f5 fb57 	bl	8000708 <__aeabi_dmul>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	4630      	mov	r0, r6
 800b060:	4639      	mov	r1, r7
 800b062:	f7f5 f99b 	bl	800039c <__adddf3>
 800b066:	4606      	mov	r6, r0
 800b068:	460f      	mov	r7, r1
 800b06a:	e7e1      	b.n	800b030 <__kernel_rem_pio2+0x398>
 800b06c:	f1ca 0200 	rsb	r2, sl, #0
 800b070:	4640      	mov	r0, r8
 800b072:	4649      	mov	r1, r9
 800b074:	f000 f934 	bl	800b2e0 <scalbn>
 800b078:	2200      	movs	r2, #0
 800b07a:	4b97      	ldr	r3, [pc, #604]	@ (800b2d8 <__kernel_rem_pio2+0x640>)
 800b07c:	4604      	mov	r4, r0
 800b07e:	460d      	mov	r5, r1
 800b080:	f7f5 fdc8 	bl	8000c14 <__aeabi_dcmpge>
 800b084:	b300      	cbz	r0, 800b0c8 <__kernel_rem_pio2+0x430>
 800b086:	2200      	movs	r2, #0
 800b088:	4b94      	ldr	r3, [pc, #592]	@ (800b2dc <__kernel_rem_pio2+0x644>)
 800b08a:	4620      	mov	r0, r4
 800b08c:	4629      	mov	r1, r5
 800b08e:	f7f5 fb3b 	bl	8000708 <__aeabi_dmul>
 800b092:	f7f5 fde9 	bl	8000c68 <__aeabi_d2iz>
 800b096:	4606      	mov	r6, r0
 800b098:	f7f5 facc 	bl	8000634 <__aeabi_i2d>
 800b09c:	2200      	movs	r2, #0
 800b09e:	4b8e      	ldr	r3, [pc, #568]	@ (800b2d8 <__kernel_rem_pio2+0x640>)
 800b0a0:	f7f5 fb32 	bl	8000708 <__aeabi_dmul>
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f7f5 f974 	bl	8000398 <__aeabi_dsub>
 800b0b0:	f7f5 fdda 	bl	8000c68 <__aeabi_d2iz>
 800b0b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0b6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800b0ba:	f10b 0b01 	add.w	fp, fp, #1
 800b0be:	f10a 0a18 	add.w	sl, sl, #24
 800b0c2:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800b0c6:	e733      	b.n	800af30 <__kernel_rem_pio2+0x298>
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	4629      	mov	r1, r5
 800b0cc:	f7f5 fdcc 	bl	8000c68 <__aeabi_d2iz>
 800b0d0:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0d2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800b0d6:	e72b      	b.n	800af30 <__kernel_rem_pio2+0x298>
 800b0d8:	ab0c      	add	r3, sp, #48	@ 0x30
 800b0da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0de:	f7f5 faa9 	bl	8000634 <__aeabi_i2d>
 800b0e2:	4632      	mov	r2, r6
 800b0e4:	463b      	mov	r3, r7
 800b0e6:	f7f5 fb0f 	bl	8000708 <__aeabi_dmul>
 800b0ea:	464a      	mov	r2, r9
 800b0ec:	e868 0102 	strd	r0, r1, [r8], #-8
 800b0f0:	4653      	mov	r3, sl
 800b0f2:	4630      	mov	r0, r6
 800b0f4:	4639      	mov	r1, r7
 800b0f6:	f7f5 fb07 	bl	8000708 <__aeabi_dmul>
 800b0fa:	3d01      	subs	r5, #1
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	460f      	mov	r7, r1
 800b100:	e727      	b.n	800af52 <__kernel_rem_pio2+0x2ba>
 800b102:	f8dd c018 	ldr.w	ip, [sp, #24]
 800b106:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800b10a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800b10e:	f8cd c018 	str.w	ip, [sp, #24]
 800b112:	f7f5 faf9 	bl	8000708 <__aeabi_dmul>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4648      	mov	r0, r9
 800b11c:	4651      	mov	r1, sl
 800b11e:	f7f5 f93d 	bl	800039c <__adddf3>
 800b122:	4681      	mov	r9, r0
 800b124:	468a      	mov	sl, r1
 800b126:	3701      	adds	r7, #1
 800b128:	9b02      	ldr	r3, [sp, #8]
 800b12a:	429f      	cmp	r7, r3
 800b12c:	dc01      	bgt.n	800b132 <__kernel_rem_pio2+0x49a>
 800b12e:	42be      	cmp	r6, r7
 800b130:	dae7      	bge.n	800b102 <__kernel_rem_pio2+0x46a>
 800b132:	ab48      	add	r3, sp, #288	@ 0x120
 800b134:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b138:	e9c6 9a00 	strd	r9, sl, [r6]
 800b13c:	3d01      	subs	r5, #1
 800b13e:	e70c      	b.n	800af5a <__kernel_rem_pio2+0x2c2>
 800b140:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800b142:	2b02      	cmp	r3, #2
 800b144:	dc09      	bgt.n	800b15a <__kernel_rem_pio2+0x4c2>
 800b146:	2b00      	cmp	r3, #0
 800b148:	dc2c      	bgt.n	800b1a4 <__kernel_rem_pio2+0x50c>
 800b14a:	d04e      	beq.n	800b1ea <__kernel_rem_pio2+0x552>
 800b14c:	9b05      	ldr	r3, [sp, #20]
 800b14e:	f003 0007 	and.w	r0, r3, #7
 800b152:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800b15c:	2b03      	cmp	r3, #3
 800b15e:	d1f5      	bne.n	800b14c <__kernel_rem_pio2+0x4b4>
 800b160:	ab48      	add	r3, sp, #288	@ 0x120
 800b162:	441c      	add	r4, r3
 800b164:	4625      	mov	r5, r4
 800b166:	46da      	mov	sl, fp
 800b168:	f1ba 0f00 	cmp.w	sl, #0
 800b16c:	dc63      	bgt.n	800b236 <__kernel_rem_pio2+0x59e>
 800b16e:	4625      	mov	r5, r4
 800b170:	46da      	mov	sl, fp
 800b172:	f1ba 0f01 	cmp.w	sl, #1
 800b176:	dc7b      	bgt.n	800b270 <__kernel_rem_pio2+0x5d8>
 800b178:	2000      	movs	r0, #0
 800b17a:	2100      	movs	r1, #0
 800b17c:	f1bb 0f01 	cmp.w	fp, #1
 800b180:	f300 8093 	bgt.w	800b2aa <__kernel_rem_pio2+0x612>
 800b184:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b188:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b18c:	9b00      	ldr	r3, [sp, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f040 8092 	bne.w	800b2b8 <__kernel_rem_pio2+0x620>
 800b194:	9b04      	ldr	r3, [sp, #16]
 800b196:	e9c3 7800 	strd	r7, r8, [r3]
 800b19a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b19e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b1a2:	e7d3      	b.n	800b14c <__kernel_rem_pio2+0x4b4>
 800b1a4:	465d      	mov	r5, fp
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	ab48      	add	r3, sp, #288	@ 0x120
 800b1ac:	441c      	add	r4, r3
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	da32      	bge.n	800b218 <__kernel_rem_pio2+0x580>
 800b1b2:	9b00      	ldr	r3, [sp, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d035      	beq.n	800b224 <__kernel_rem_pio2+0x58c>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1be:	9c04      	ldr	r4, [sp, #16]
 800b1c0:	2501      	movs	r5, #1
 800b1c2:	e9c4 2300 	strd	r2, r3, [r4]
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b1ce:	f7f5 f8e3 	bl	8000398 <__aeabi_dsub>
 800b1d2:	ac48      	add	r4, sp, #288	@ 0x120
 800b1d4:	45ab      	cmp	fp, r5
 800b1d6:	da28      	bge.n	800b22a <__kernel_rem_pio2+0x592>
 800b1d8:	9b00      	ldr	r3, [sp, #0]
 800b1da:	b113      	cbz	r3, 800b1e2 <__kernel_rem_pio2+0x54a>
 800b1dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	9b04      	ldr	r3, [sp, #16]
 800b1e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b1e8:	e7b0      	b.n	800b14c <__kernel_rem_pio2+0x4b4>
 800b1ea:	2000      	movs	r0, #0
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	ab48      	add	r3, sp, #288	@ 0x120
 800b1f0:	441c      	add	r4, r3
 800b1f2:	f1bb 0f00 	cmp.w	fp, #0
 800b1f6:	da08      	bge.n	800b20a <__kernel_rem_pio2+0x572>
 800b1f8:	9b00      	ldr	r3, [sp, #0]
 800b1fa:	b113      	cbz	r3, 800b202 <__kernel_rem_pio2+0x56a>
 800b1fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b200:	4619      	mov	r1, r3
 800b202:	9b04      	ldr	r3, [sp, #16]
 800b204:	e9c3 0100 	strd	r0, r1, [r3]
 800b208:	e7a0      	b.n	800b14c <__kernel_rem_pio2+0x4b4>
 800b20a:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800b20e:	f7f5 f8c5 	bl	800039c <__adddf3>
 800b212:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b216:	e7ec      	b.n	800b1f2 <__kernel_rem_pio2+0x55a>
 800b218:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800b21c:	f7f5 f8be 	bl	800039c <__adddf3>
 800b220:	3d01      	subs	r5, #1
 800b222:	e7c4      	b.n	800b1ae <__kernel_rem_pio2+0x516>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	e7c9      	b.n	800b1be <__kernel_rem_pio2+0x526>
 800b22a:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800b22e:	f7f5 f8b5 	bl	800039c <__adddf3>
 800b232:	3501      	adds	r5, #1
 800b234:	e7ce      	b.n	800b1d4 <__kernel_rem_pio2+0x53c>
 800b236:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b23a:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800b23e:	4640      	mov	r0, r8
 800b240:	4649      	mov	r1, r9
 800b242:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b246:	f7f5 f8a9 	bl	800039c <__adddf3>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	4606      	mov	r6, r0
 800b250:	460f      	mov	r7, r1
 800b252:	4640      	mov	r0, r8
 800b254:	4649      	mov	r1, r9
 800b256:	f7f5 f89f 	bl	8000398 <__aeabi_dsub>
 800b25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b25e:	f7f5 f89d 	bl	800039c <__adddf3>
 800b262:	e865 0102 	strd	r0, r1, [r5], #-8
 800b266:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b26a:	e9c5 6700 	strd	r6, r7, [r5]
 800b26e:	e77b      	b.n	800b168 <__kernel_rem_pio2+0x4d0>
 800b270:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b274:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800b278:	4640      	mov	r0, r8
 800b27a:	4649      	mov	r1, r9
 800b27c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b280:	f7f5 f88c 	bl	800039c <__adddf3>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	4606      	mov	r6, r0
 800b28a:	460f      	mov	r7, r1
 800b28c:	4640      	mov	r0, r8
 800b28e:	4649      	mov	r1, r9
 800b290:	f7f5 f882 	bl	8000398 <__aeabi_dsub>
 800b294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b298:	f7f5 f880 	bl	800039c <__adddf3>
 800b29c:	e865 0102 	strd	r0, r1, [r5], #-8
 800b2a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2a4:	e9c5 6700 	strd	r6, r7, [r5]
 800b2a8:	e763      	b.n	800b172 <__kernel_rem_pio2+0x4da>
 800b2aa:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800b2ae:	f7f5 f875 	bl	800039c <__adddf3>
 800b2b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2b6:	e761      	b.n	800b17c <__kernel_rem_pio2+0x4e4>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	9a04      	ldr	r2, [sp, #16]
 800b2bc:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b2c0:	601f      	str	r7, [r3, #0]
 800b2c2:	605c      	str	r4, [r3, #4]
 800b2c4:	609d      	str	r5, [r3, #8]
 800b2c6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2ca:	60d3      	str	r3, [r2, #12]
 800b2cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2d0:	6110      	str	r0, [r2, #16]
 800b2d2:	6153      	str	r3, [r2, #20]
 800b2d4:	e73a      	b.n	800b14c <__kernel_rem_pio2+0x4b4>
 800b2d6:	bf00      	nop
 800b2d8:	41700000 	.word	0x41700000
 800b2dc:	3e700000 	.word	0x3e700000

0800b2e0 <scalbn>:
 800b2e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b2e4:	4616      	mov	r6, r2
 800b2e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b2ea:	4683      	mov	fp, r0
 800b2ec:	468c      	mov	ip, r1
 800b2ee:	460b      	mov	r3, r1
 800b2f0:	b982      	cbnz	r2, 800b314 <scalbn+0x34>
 800b2f2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b2f6:	4303      	orrs	r3, r0
 800b2f8:	d039      	beq.n	800b36e <scalbn+0x8e>
 800b2fa:	4b2f      	ldr	r3, [pc, #188]	@ (800b3b8 <scalbn+0xd8>)
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f7f5 fa03 	bl	8000708 <__aeabi_dmul>
 800b302:	4b2e      	ldr	r3, [pc, #184]	@ (800b3bc <scalbn+0xdc>)
 800b304:	4683      	mov	fp, r0
 800b306:	429e      	cmp	r6, r3
 800b308:	468c      	mov	ip, r1
 800b30a:	da0d      	bge.n	800b328 <scalbn+0x48>
 800b30c:	a326      	add	r3, pc, #152	@ (adr r3, 800b3a8 <scalbn+0xc8>)
 800b30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b312:	e01b      	b.n	800b34c <scalbn+0x6c>
 800b314:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800b318:	42ba      	cmp	r2, r7
 800b31a:	d109      	bne.n	800b330 <scalbn+0x50>
 800b31c:	4602      	mov	r2, r0
 800b31e:	f7f5 f83d 	bl	800039c <__adddf3>
 800b322:	4683      	mov	fp, r0
 800b324:	468c      	mov	ip, r1
 800b326:	e022      	b.n	800b36e <scalbn+0x8e>
 800b328:	460b      	mov	r3, r1
 800b32a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b32e:	3a36      	subs	r2, #54	@ 0x36
 800b330:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b334:	428e      	cmp	r6, r1
 800b336:	dd0c      	ble.n	800b352 <scalbn+0x72>
 800b338:	a31d      	add	r3, pc, #116	@ (adr r3, 800b3b0 <scalbn+0xd0>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	461c      	mov	r4, r3
 800b340:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800b344:	f361 74df 	bfi	r4, r1, #31, #1
 800b348:	4621      	mov	r1, r4
 800b34a:	481d      	ldr	r0, [pc, #116]	@ (800b3c0 <scalbn+0xe0>)
 800b34c:	f7f5 f9dc 	bl	8000708 <__aeabi_dmul>
 800b350:	e7e7      	b.n	800b322 <scalbn+0x42>
 800b352:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b356:	4432      	add	r2, r6
 800b358:	428a      	cmp	r2, r1
 800b35a:	dced      	bgt.n	800b338 <scalbn+0x58>
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	dd0a      	ble.n	800b376 <scalbn+0x96>
 800b360:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b364:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b368:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b36c:	46ac      	mov	ip, r5
 800b36e:	4658      	mov	r0, fp
 800b370:	4661      	mov	r1, ip
 800b372:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800b376:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b37a:	da09      	bge.n	800b390 <scalbn+0xb0>
 800b37c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800b380:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800b384:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800b388:	480e      	ldr	r0, [pc, #56]	@ (800b3c4 <scalbn+0xe4>)
 800b38a:	f041 011f 	orr.w	r1, r1, #31
 800b38e:	e7bd      	b.n	800b30c <scalbn+0x2c>
 800b390:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b394:	3236      	adds	r2, #54	@ 0x36
 800b396:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b39a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b39e:	4658      	mov	r0, fp
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	4b08      	ldr	r3, [pc, #32]	@ (800b3c8 <scalbn+0xe8>)
 800b3a6:	e7d1      	b.n	800b34c <scalbn+0x6c>
 800b3a8:	c2f8f359 	.word	0xc2f8f359
 800b3ac:	01a56e1f 	.word	0x01a56e1f
 800b3b0:	8800759c 	.word	0x8800759c
 800b3b4:	7e37e43c 	.word	0x7e37e43c
 800b3b8:	43500000 	.word	0x43500000
 800b3bc:	ffff3cb0 	.word	0xffff3cb0
 800b3c0:	8800759c 	.word	0x8800759c
 800b3c4:	c2f8f359 	.word	0xc2f8f359
 800b3c8:	3c900000 	.word	0x3c900000

0800b3cc <abort>:
 800b3cc:	2006      	movs	r0, #6
 800b3ce:	b508      	push	{r3, lr}
 800b3d0:	f000 f8f2 	bl	800b5b8 <raise>
 800b3d4:	2001      	movs	r0, #1
 800b3d6:	f7fa ff6e 	bl	80062b6 <_exit>
	...

0800b3dc <malloc>:
 800b3dc:	4b02      	ldr	r3, [pc, #8]	@ (800b3e8 <malloc+0xc>)
 800b3de:	4601      	mov	r1, r0
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	f000 b82d 	b.w	800b440 <_malloc_r>
 800b3e6:	bf00      	nop
 800b3e8:	20000028 	.word	0x20000028

0800b3ec <free>:
 800b3ec:	4b02      	ldr	r3, [pc, #8]	@ (800b3f8 <free+0xc>)
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f000 b947 	b.w	800b684 <_free_r>
 800b3f6:	bf00      	nop
 800b3f8:	20000028 	.word	0x20000028

0800b3fc <sbrk_aligned>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b43c <sbrk_aligned+0x40>)
 800b400:	460c      	mov	r4, r1
 800b402:	6831      	ldr	r1, [r6, #0]
 800b404:	4605      	mov	r5, r0
 800b406:	b911      	cbnz	r1, 800b40e <sbrk_aligned+0x12>
 800b408:	f000 f8f2 	bl	800b5f0 <_sbrk_r>
 800b40c:	6030      	str	r0, [r6, #0]
 800b40e:	4621      	mov	r1, r4
 800b410:	4628      	mov	r0, r5
 800b412:	f000 f8ed 	bl	800b5f0 <_sbrk_r>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	d103      	bne.n	800b422 <sbrk_aligned+0x26>
 800b41a:	f04f 34ff 	mov.w	r4, #4294967295
 800b41e:	4620      	mov	r0, r4
 800b420:	bd70      	pop	{r4, r5, r6, pc}
 800b422:	1cc4      	adds	r4, r0, #3
 800b424:	f024 0403 	bic.w	r4, r4, #3
 800b428:	42a0      	cmp	r0, r4
 800b42a:	d0f8      	beq.n	800b41e <sbrk_aligned+0x22>
 800b42c:	1a21      	subs	r1, r4, r0
 800b42e:	4628      	mov	r0, r5
 800b430:	f000 f8de 	bl	800b5f0 <_sbrk_r>
 800b434:	3001      	adds	r0, #1
 800b436:	d1f2      	bne.n	800b41e <sbrk_aligned+0x22>
 800b438:	e7ef      	b.n	800b41a <sbrk_aligned+0x1e>
 800b43a:	bf00      	nop
 800b43c:	20000704 	.word	0x20000704

0800b440 <_malloc_r>:
 800b440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b444:	1ccd      	adds	r5, r1, #3
 800b446:	f025 0503 	bic.w	r5, r5, #3
 800b44a:	3508      	adds	r5, #8
 800b44c:	2d0c      	cmp	r5, #12
 800b44e:	bf38      	it	cc
 800b450:	250c      	movcc	r5, #12
 800b452:	2d00      	cmp	r5, #0
 800b454:	4606      	mov	r6, r0
 800b456:	db01      	blt.n	800b45c <_malloc_r+0x1c>
 800b458:	42a9      	cmp	r1, r5
 800b45a:	d904      	bls.n	800b466 <_malloc_r+0x26>
 800b45c:	230c      	movs	r3, #12
 800b45e:	6033      	str	r3, [r6, #0]
 800b460:	2000      	movs	r0, #0
 800b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b466:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b53c <_malloc_r+0xfc>
 800b46a:	f000 f869 	bl	800b540 <__malloc_lock>
 800b46e:	f8d8 3000 	ldr.w	r3, [r8]
 800b472:	461c      	mov	r4, r3
 800b474:	bb44      	cbnz	r4, 800b4c8 <_malloc_r+0x88>
 800b476:	4629      	mov	r1, r5
 800b478:	4630      	mov	r0, r6
 800b47a:	f7ff ffbf 	bl	800b3fc <sbrk_aligned>
 800b47e:	1c43      	adds	r3, r0, #1
 800b480:	4604      	mov	r4, r0
 800b482:	d158      	bne.n	800b536 <_malloc_r+0xf6>
 800b484:	f8d8 4000 	ldr.w	r4, [r8]
 800b488:	4627      	mov	r7, r4
 800b48a:	2f00      	cmp	r7, #0
 800b48c:	d143      	bne.n	800b516 <_malloc_r+0xd6>
 800b48e:	2c00      	cmp	r4, #0
 800b490:	d04b      	beq.n	800b52a <_malloc_r+0xea>
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	4639      	mov	r1, r7
 800b496:	4630      	mov	r0, r6
 800b498:	eb04 0903 	add.w	r9, r4, r3
 800b49c:	f000 f8a8 	bl	800b5f0 <_sbrk_r>
 800b4a0:	4581      	cmp	r9, r0
 800b4a2:	d142      	bne.n	800b52a <_malloc_r+0xea>
 800b4a4:	6821      	ldr	r1, [r4, #0]
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	1a6d      	subs	r5, r5, r1
 800b4aa:	4629      	mov	r1, r5
 800b4ac:	f7ff ffa6 	bl	800b3fc <sbrk_aligned>
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d03a      	beq.n	800b52a <_malloc_r+0xea>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	442b      	add	r3, r5
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	bb62      	cbnz	r2, 800b51c <_malloc_r+0xdc>
 800b4c2:	f8c8 7000 	str.w	r7, [r8]
 800b4c6:	e00f      	b.n	800b4e8 <_malloc_r+0xa8>
 800b4c8:	6822      	ldr	r2, [r4, #0]
 800b4ca:	1b52      	subs	r2, r2, r5
 800b4cc:	d420      	bmi.n	800b510 <_malloc_r+0xd0>
 800b4ce:	2a0b      	cmp	r2, #11
 800b4d0:	d917      	bls.n	800b502 <_malloc_r+0xc2>
 800b4d2:	1961      	adds	r1, r4, r5
 800b4d4:	42a3      	cmp	r3, r4
 800b4d6:	6025      	str	r5, [r4, #0]
 800b4d8:	bf18      	it	ne
 800b4da:	6059      	strne	r1, [r3, #4]
 800b4dc:	6863      	ldr	r3, [r4, #4]
 800b4de:	bf08      	it	eq
 800b4e0:	f8c8 1000 	streq.w	r1, [r8]
 800b4e4:	5162      	str	r2, [r4, r5]
 800b4e6:	604b      	str	r3, [r1, #4]
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f000 f82f 	bl	800b54c <__malloc_unlock>
 800b4ee:	f104 000b 	add.w	r0, r4, #11
 800b4f2:	1d23      	adds	r3, r4, #4
 800b4f4:	f020 0007 	bic.w	r0, r0, #7
 800b4f8:	1ac2      	subs	r2, r0, r3
 800b4fa:	bf1c      	itt	ne
 800b4fc:	1a1b      	subne	r3, r3, r0
 800b4fe:	50a3      	strne	r3, [r4, r2]
 800b500:	e7af      	b.n	800b462 <_malloc_r+0x22>
 800b502:	6862      	ldr	r2, [r4, #4]
 800b504:	42a3      	cmp	r3, r4
 800b506:	bf0c      	ite	eq
 800b508:	f8c8 2000 	streq.w	r2, [r8]
 800b50c:	605a      	strne	r2, [r3, #4]
 800b50e:	e7eb      	b.n	800b4e8 <_malloc_r+0xa8>
 800b510:	4623      	mov	r3, r4
 800b512:	6864      	ldr	r4, [r4, #4]
 800b514:	e7ae      	b.n	800b474 <_malloc_r+0x34>
 800b516:	463c      	mov	r4, r7
 800b518:	687f      	ldr	r7, [r7, #4]
 800b51a:	e7b6      	b.n	800b48a <_malloc_r+0x4a>
 800b51c:	461a      	mov	r2, r3
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	42a3      	cmp	r3, r4
 800b522:	d1fb      	bne.n	800b51c <_malloc_r+0xdc>
 800b524:	2300      	movs	r3, #0
 800b526:	6053      	str	r3, [r2, #4]
 800b528:	e7de      	b.n	800b4e8 <_malloc_r+0xa8>
 800b52a:	230c      	movs	r3, #12
 800b52c:	4630      	mov	r0, r6
 800b52e:	6033      	str	r3, [r6, #0]
 800b530:	f000 f80c 	bl	800b54c <__malloc_unlock>
 800b534:	e794      	b.n	800b460 <_malloc_r+0x20>
 800b536:	6005      	str	r5, [r0, #0]
 800b538:	e7d6      	b.n	800b4e8 <_malloc_r+0xa8>
 800b53a:	bf00      	nop
 800b53c:	20000708 	.word	0x20000708

0800b540 <__malloc_lock>:
 800b540:	4801      	ldr	r0, [pc, #4]	@ (800b548 <__malloc_lock+0x8>)
 800b542:	f000 b88f 	b.w	800b664 <__retarget_lock_acquire_recursive>
 800b546:	bf00      	nop
 800b548:	20000848 	.word	0x20000848

0800b54c <__malloc_unlock>:
 800b54c:	4801      	ldr	r0, [pc, #4]	@ (800b554 <__malloc_unlock+0x8>)
 800b54e:	f000 b88a 	b.w	800b666 <__retarget_lock_release_recursive>
 800b552:	bf00      	nop
 800b554:	20000848 	.word	0x20000848

0800b558 <memset>:
 800b558:	4603      	mov	r3, r0
 800b55a:	4402      	add	r2, r0
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d100      	bne.n	800b562 <memset+0xa>
 800b560:	4770      	bx	lr
 800b562:	f803 1b01 	strb.w	r1, [r3], #1
 800b566:	e7f9      	b.n	800b55c <memset+0x4>

0800b568 <_raise_r>:
 800b568:	291f      	cmp	r1, #31
 800b56a:	b538      	push	{r3, r4, r5, lr}
 800b56c:	4605      	mov	r5, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	d904      	bls.n	800b57c <_raise_r+0x14>
 800b572:	2316      	movs	r3, #22
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	f04f 30ff 	mov.w	r0, #4294967295
 800b57a:	bd38      	pop	{r3, r4, r5, pc}
 800b57c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b57e:	b112      	cbz	r2, 800b586 <_raise_r+0x1e>
 800b580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b584:	b94b      	cbnz	r3, 800b59a <_raise_r+0x32>
 800b586:	4628      	mov	r0, r5
 800b588:	f000 f830 	bl	800b5ec <_getpid_r>
 800b58c:	4622      	mov	r2, r4
 800b58e:	4601      	mov	r1, r0
 800b590:	4628      	mov	r0, r5
 800b592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b596:	f000 b817 	b.w	800b5c8 <_kill_r>
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d00a      	beq.n	800b5b4 <_raise_r+0x4c>
 800b59e:	1c59      	adds	r1, r3, #1
 800b5a0:	d103      	bne.n	800b5aa <_raise_r+0x42>
 800b5a2:	2316      	movs	r3, #22
 800b5a4:	6003      	str	r3, [r0, #0]
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	e7e7      	b.n	800b57a <_raise_r+0x12>
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5b2:	4798      	blx	r3
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	e7e0      	b.n	800b57a <_raise_r+0x12>

0800b5b8 <raise>:
 800b5b8:	4b02      	ldr	r3, [pc, #8]	@ (800b5c4 <raise+0xc>)
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	6818      	ldr	r0, [r3, #0]
 800b5be:	f7ff bfd3 	b.w	800b568 <_raise_r>
 800b5c2:	bf00      	nop
 800b5c4:	20000028 	.word	0x20000028

0800b5c8 <_kill_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	4d06      	ldr	r5, [pc, #24]	@ (800b5e8 <_kill_r+0x20>)
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	602b      	str	r3, [r5, #0]
 800b5d6:	f7fa fe5e 	bl	8006296 <_kill>
 800b5da:	1c43      	adds	r3, r0, #1
 800b5dc:	d102      	bne.n	800b5e4 <_kill_r+0x1c>
 800b5de:	682b      	ldr	r3, [r5, #0]
 800b5e0:	b103      	cbz	r3, 800b5e4 <_kill_r+0x1c>
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	bd38      	pop	{r3, r4, r5, pc}
 800b5e6:	bf00      	nop
 800b5e8:	20000844 	.word	0x20000844

0800b5ec <_getpid_r>:
 800b5ec:	f7fa be4c 	b.w	8006288 <_getpid>

0800b5f0 <_sbrk_r>:
 800b5f0:	b538      	push	{r3, r4, r5, lr}
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4d05      	ldr	r5, [pc, #20]	@ (800b60c <_sbrk_r+0x1c>)
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	f7fa fe66 	bl	80062cc <_sbrk>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_sbrk_r+0x1a>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_sbrk_r+0x1a>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	20000844 	.word	0x20000844

0800b610 <__errno>:
 800b610:	4b01      	ldr	r3, [pc, #4]	@ (800b618 <__errno+0x8>)
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	20000028 	.word	0x20000028

0800b61c <__libc_init_array>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	2600      	movs	r6, #0
 800b620:	4d0c      	ldr	r5, [pc, #48]	@ (800b654 <__libc_init_array+0x38>)
 800b622:	4c0d      	ldr	r4, [pc, #52]	@ (800b658 <__libc_init_array+0x3c>)
 800b624:	1b64      	subs	r4, r4, r5
 800b626:	10a4      	asrs	r4, r4, #2
 800b628:	42a6      	cmp	r6, r4
 800b62a:	d109      	bne.n	800b640 <__libc_init_array+0x24>
 800b62c:	f000 f872 	bl	800b714 <_init>
 800b630:	2600      	movs	r6, #0
 800b632:	4d0a      	ldr	r5, [pc, #40]	@ (800b65c <__libc_init_array+0x40>)
 800b634:	4c0a      	ldr	r4, [pc, #40]	@ (800b660 <__libc_init_array+0x44>)
 800b636:	1b64      	subs	r4, r4, r5
 800b638:	10a4      	asrs	r4, r4, #2
 800b63a:	42a6      	cmp	r6, r4
 800b63c:	d105      	bne.n	800b64a <__libc_init_array+0x2e>
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	f855 3b04 	ldr.w	r3, [r5], #4
 800b644:	4798      	blx	r3
 800b646:	3601      	adds	r6, #1
 800b648:	e7ee      	b.n	800b628 <__libc_init_array+0xc>
 800b64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64e:	4798      	blx	r3
 800b650:	3601      	adds	r6, #1
 800b652:	e7f2      	b.n	800b63a <__libc_init_array+0x1e>
 800b654:	0800bdb8 	.word	0x0800bdb8
 800b658:	0800bdb8 	.word	0x0800bdb8
 800b65c:	0800bdb8 	.word	0x0800bdb8
 800b660:	0800bdc4 	.word	0x0800bdc4

0800b664 <__retarget_lock_acquire_recursive>:
 800b664:	4770      	bx	lr

0800b666 <__retarget_lock_release_recursive>:
 800b666:	4770      	bx	lr

0800b668 <memcpy>:
 800b668:	440a      	add	r2, r1
 800b66a:	4291      	cmp	r1, r2
 800b66c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b670:	d100      	bne.n	800b674 <memcpy+0xc>
 800b672:	4770      	bx	lr
 800b674:	b510      	push	{r4, lr}
 800b676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b67a:	4291      	cmp	r1, r2
 800b67c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b680:	d1f9      	bne.n	800b676 <memcpy+0xe>
 800b682:	bd10      	pop	{r4, pc}

0800b684 <_free_r>:
 800b684:	b538      	push	{r3, r4, r5, lr}
 800b686:	4605      	mov	r5, r0
 800b688:	2900      	cmp	r1, #0
 800b68a:	d040      	beq.n	800b70e <_free_r+0x8a>
 800b68c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b690:	1f0c      	subs	r4, r1, #4
 800b692:	2b00      	cmp	r3, #0
 800b694:	bfb8      	it	lt
 800b696:	18e4      	addlt	r4, r4, r3
 800b698:	f7ff ff52 	bl	800b540 <__malloc_lock>
 800b69c:	4a1c      	ldr	r2, [pc, #112]	@ (800b710 <_free_r+0x8c>)
 800b69e:	6813      	ldr	r3, [r2, #0]
 800b6a0:	b933      	cbnz	r3, 800b6b0 <_free_r+0x2c>
 800b6a2:	6063      	str	r3, [r4, #4]
 800b6a4:	6014      	str	r4, [r2, #0]
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ac:	f7ff bf4e 	b.w	800b54c <__malloc_unlock>
 800b6b0:	42a3      	cmp	r3, r4
 800b6b2:	d908      	bls.n	800b6c6 <_free_r+0x42>
 800b6b4:	6820      	ldr	r0, [r4, #0]
 800b6b6:	1821      	adds	r1, r4, r0
 800b6b8:	428b      	cmp	r3, r1
 800b6ba:	bf01      	itttt	eq
 800b6bc:	6819      	ldreq	r1, [r3, #0]
 800b6be:	685b      	ldreq	r3, [r3, #4]
 800b6c0:	1809      	addeq	r1, r1, r0
 800b6c2:	6021      	streq	r1, [r4, #0]
 800b6c4:	e7ed      	b.n	800b6a2 <_free_r+0x1e>
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	b10b      	cbz	r3, 800b6d0 <_free_r+0x4c>
 800b6cc:	42a3      	cmp	r3, r4
 800b6ce:	d9fa      	bls.n	800b6c6 <_free_r+0x42>
 800b6d0:	6811      	ldr	r1, [r2, #0]
 800b6d2:	1850      	adds	r0, r2, r1
 800b6d4:	42a0      	cmp	r0, r4
 800b6d6:	d10b      	bne.n	800b6f0 <_free_r+0x6c>
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	4401      	add	r1, r0
 800b6dc:	1850      	adds	r0, r2, r1
 800b6de:	4283      	cmp	r3, r0
 800b6e0:	6011      	str	r1, [r2, #0]
 800b6e2:	d1e0      	bne.n	800b6a6 <_free_r+0x22>
 800b6e4:	6818      	ldr	r0, [r3, #0]
 800b6e6:	685b      	ldr	r3, [r3, #4]
 800b6e8:	4408      	add	r0, r1
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	6053      	str	r3, [r2, #4]
 800b6ee:	e7da      	b.n	800b6a6 <_free_r+0x22>
 800b6f0:	d902      	bls.n	800b6f8 <_free_r+0x74>
 800b6f2:	230c      	movs	r3, #12
 800b6f4:	602b      	str	r3, [r5, #0]
 800b6f6:	e7d6      	b.n	800b6a6 <_free_r+0x22>
 800b6f8:	6820      	ldr	r0, [r4, #0]
 800b6fa:	1821      	adds	r1, r4, r0
 800b6fc:	428b      	cmp	r3, r1
 800b6fe:	bf01      	itttt	eq
 800b700:	6819      	ldreq	r1, [r3, #0]
 800b702:	685b      	ldreq	r3, [r3, #4]
 800b704:	1809      	addeq	r1, r1, r0
 800b706:	6021      	streq	r1, [r4, #0]
 800b708:	6063      	str	r3, [r4, #4]
 800b70a:	6054      	str	r4, [r2, #4]
 800b70c:	e7cb      	b.n	800b6a6 <_free_r+0x22>
 800b70e:	bd38      	pop	{r3, r4, r5, pc}
 800b710:	20000708 	.word	0x20000708

0800b714 <_init>:
 800b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b716:	bf00      	nop
 800b718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71a:	bc08      	pop	{r3}
 800b71c:	469e      	mov	lr, r3
 800b71e:	4770      	bx	lr

0800b720 <_fini>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	bf00      	nop
 800b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b726:	bc08      	pop	{r3}
 800b728:	469e      	mov	lr, r3
 800b72a:	4770      	bx	lr
