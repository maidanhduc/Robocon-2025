
Omni_f103rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d430  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800d618  0800d618  0000e618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e028  0800e028  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e028  0800e028  0000f028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e030  0800e030  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800e030  0800e030  0000f030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800e040  0800e040  0000f040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800e048  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  200001e8  0800e230  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  0800e230  000108bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed71  00000000  00000000  00010211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a2  00000000  00000000  0002ef82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00032828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001144  00000000  00000000  00033e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e962  00000000  00000000  00034fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016562  00000000  00000000  0005391e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6508  00000000  00000000  00069e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120388  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007620  00000000  00000000  001203cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001279ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d600 	.word	0x0800d600

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800d600 	.word	0x0800d600

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_fmul>:
 8000238:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800023c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000240:	bf1e      	ittt	ne
 8000242:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000246:	ea92 0f0c 	teqne	r2, ip
 800024a:	ea93 0f0c 	teqne	r3, ip
 800024e:	d06f      	beq.n	8000330 <__aeabi_fmul+0xf8>
 8000250:	441a      	add	r2, r3
 8000252:	ea80 0c01 	eor.w	ip, r0, r1
 8000256:	0240      	lsls	r0, r0, #9
 8000258:	bf18      	it	ne
 800025a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800025e:	d01e      	beq.n	800029e <__aeabi_fmul+0x66>
 8000260:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000264:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000268:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800026c:	fba0 3101 	umull	r3, r1, r0, r1
 8000270:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000274:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000278:	bf3e      	ittt	cc
 800027a:	0049      	lslcc	r1, r1, #1
 800027c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000280:	005b      	lslcc	r3, r3, #1
 8000282:	ea40 0001 	orr.w	r0, r0, r1
 8000286:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800028a:	2afd      	cmp	r2, #253	@ 0xfd
 800028c:	d81d      	bhi.n	80002ca <__aeabi_fmul+0x92>
 800028e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000292:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000296:	bf08      	it	eq
 8000298:	f020 0001 	biceq.w	r0, r0, #1
 800029c:	4770      	bx	lr
 800029e:	f090 0f00 	teq	r0, #0
 80002a2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80002a6:	bf08      	it	eq
 80002a8:	0249      	lsleq	r1, r1, #9
 80002aa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002ae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002b2:	3a7f      	subs	r2, #127	@ 0x7f
 80002b4:	bfc2      	ittt	gt
 80002b6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80002ba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002be:	4770      	bxgt	lr
 80002c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002c4:	f04f 0300 	mov.w	r3, #0
 80002c8:	3a01      	subs	r2, #1
 80002ca:	dc5d      	bgt.n	8000388 <__aeabi_fmul+0x150>
 80002cc:	f112 0f19 	cmn.w	r2, #25
 80002d0:	bfdc      	itt	le
 80002d2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80002d6:	4770      	bxle	lr
 80002d8:	f1c2 0200 	rsb	r2, r2, #0
 80002dc:	0041      	lsls	r1, r0, #1
 80002de:	fa21 f102 	lsr.w	r1, r1, r2
 80002e2:	f1c2 0220 	rsb	r2, r2, #32
 80002e6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002ea:	ea5f 0031 	movs.w	r0, r1, rrx
 80002ee:	f140 0000 	adc.w	r0, r0, #0
 80002f2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002f6:	bf08      	it	eq
 80002f8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002fc:	4770      	bx	lr
 80002fe:	f092 0f00 	teq	r2, #0
 8000302:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000306:	bf02      	ittt	eq
 8000308:	0040      	lsleq	r0, r0, #1
 800030a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800030e:	3a01      	subeq	r2, #1
 8000310:	d0f9      	beq.n	8000306 <__aeabi_fmul+0xce>
 8000312:	ea40 000c 	orr.w	r0, r0, ip
 8000316:	f093 0f00 	teq	r3, #0
 800031a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800031e:	bf02      	ittt	eq
 8000320:	0049      	lsleq	r1, r1, #1
 8000322:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000326:	3b01      	subeq	r3, #1
 8000328:	d0f9      	beq.n	800031e <__aeabi_fmul+0xe6>
 800032a:	ea41 010c 	orr.w	r1, r1, ip
 800032e:	e78f      	b.n	8000250 <__aeabi_fmul+0x18>
 8000330:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000334:	ea92 0f0c 	teq	r2, ip
 8000338:	bf18      	it	ne
 800033a:	ea93 0f0c 	teqne	r3, ip
 800033e:	d00a      	beq.n	8000356 <__aeabi_fmul+0x11e>
 8000340:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000344:	bf18      	it	ne
 8000346:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800034a:	d1d8      	bne.n	80002fe <__aeabi_fmul+0xc6>
 800034c:	ea80 0001 	eor.w	r0, r0, r1
 8000350:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f090 0f00 	teq	r0, #0
 800035a:	bf17      	itett	ne
 800035c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000360:	4608      	moveq	r0, r1
 8000362:	f091 0f00 	teqne	r1, #0
 8000366:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800036a:	d014      	beq.n	8000396 <__aeabi_fmul+0x15e>
 800036c:	ea92 0f0c 	teq	r2, ip
 8000370:	d101      	bne.n	8000376 <__aeabi_fmul+0x13e>
 8000372:	0242      	lsls	r2, r0, #9
 8000374:	d10f      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000376:	ea93 0f0c 	teq	r3, ip
 800037a:	d103      	bne.n	8000384 <__aeabi_fmul+0x14c>
 800037c:	024b      	lsls	r3, r1, #9
 800037e:	bf18      	it	ne
 8000380:	4608      	movne	r0, r1
 8000382:	d108      	bne.n	8000396 <__aeabi_fmul+0x15e>
 8000384:	ea80 0001 	eor.w	r0, r0, r1
 8000388:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800038c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000390:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000394:	4770      	bx	lr
 8000396:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800039a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_dmul>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8de 	bleq	80008f4 <__aeabi_dmul+0x1dc>
 8000738:	442c      	add	r4, r5
 800073a:	ea81 0603 	eor.w	r6, r1, r3
 800073e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800074a:	bf18      	it	ne
 800074c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000750:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000758:	d038      	beq.n	80007cc <__aeabi_dmul+0xb4>
 800075a:	fba0 ce02 	umull	ip, lr, r0, r2
 800075e:	f04f 0500 	mov.w	r5, #0
 8000762:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000766:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800076a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800076e:	f04f 0600 	mov.w	r6, #0
 8000772:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000776:	f09c 0f00 	teq	ip, #0
 800077a:	bf18      	it	ne
 800077c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000780:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000784:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000788:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800078c:	d204      	bcs.n	8000798 <__aeabi_dmul+0x80>
 800078e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000792:	416d      	adcs	r5, r5
 8000794:	eb46 0606 	adc.w	r6, r6, r6
 8000798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800079c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80007b0:	bf88      	it	hi
 80007b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80007b6:	d81e      	bhi.n	80007f6 <__aeabi_dmul+0xde>
 80007b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80007bc:	bf08      	it	eq
 80007be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007c2:	f150 0000 	adcs.w	r0, r0, #0
 80007c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80007d0:	ea46 0101 	orr.w	r1, r6, r1
 80007d4:	ea40 0002 	orr.w	r0, r0, r2
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007e0:	bfc2      	ittt	gt
 80007e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ea:	bd70      	popgt	{r4, r5, r6, pc}
 80007ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80007f0:	f04f 0e00 	mov.w	lr, #0
 80007f4:	3c01      	subs	r4, #1
 80007f6:	f300 80ab 	bgt.w	8000950 <__aeabi_dmul+0x238>
 80007fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80007fe:	bfde      	ittt	le
 8000800:	2000      	movle	r0, #0
 8000802:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000806:	bd70      	pople	{r4, r5, r6, pc}
 8000808:	f1c4 0400 	rsb	r4, r4, #0
 800080c:	3c20      	subs	r4, #32
 800080e:	da35      	bge.n	800087c <__aeabi_dmul+0x164>
 8000810:	340c      	adds	r4, #12
 8000812:	dc1b      	bgt.n	800084c <__aeabi_dmul+0x134>
 8000814:	f104 0414 	add.w	r4, r4, #20
 8000818:	f1c4 0520 	rsb	r5, r4, #32
 800081c:	fa00 f305 	lsl.w	r3, r0, r5
 8000820:	fa20 f004 	lsr.w	r0, r0, r4
 8000824:	fa01 f205 	lsl.w	r2, r1, r5
 8000828:	ea40 0002 	orr.w	r0, r0, r2
 800082c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000830:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000838:	fa21 f604 	lsr.w	r6, r1, r4
 800083c:	eb42 0106 	adc.w	r1, r2, r6
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 040c 	rsb	r4, r4, #12
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f304 	lsl.w	r3, r0, r4
 8000858:	fa20 f005 	lsr.w	r0, r0, r5
 800085c:	fa01 f204 	lsl.w	r2, r1, r4
 8000860:	ea40 0002 	orr.w	r0, r0, r2
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800086c:	f141 0100 	adc.w	r1, r1, #0
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 0520 	rsb	r5, r4, #32
 8000880:	fa00 f205 	lsl.w	r2, r0, r5
 8000884:	ea4e 0e02 	orr.w	lr, lr, r2
 8000888:	fa20 f304 	lsr.w	r3, r0, r4
 800088c:	fa01 f205 	lsl.w	r2, r1, r5
 8000890:	ea43 0302 	orr.w	r3, r3, r2
 8000894:	fa21 f004 	lsr.w	r0, r1, r4
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800089c:	fa21 f204 	lsr.w	r2, r1, r4
 80008a0:	ea20 0002 	bic.w	r0, r0, r2
 80008a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008ac:	bf08      	it	eq
 80008ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f094 0f00 	teq	r4, #0
 80008b8:	d10f      	bne.n	80008da <__aeabi_dmul+0x1c2>
 80008ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80008be:	0040      	lsls	r0, r0, #1
 80008c0:	eb41 0101 	adc.w	r1, r1, r1
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3c01      	subeq	r4, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1a6>
 80008ce:	ea41 0106 	orr.w	r1, r1, r6
 80008d2:	f095 0f00 	teq	r5, #0
 80008d6:	bf18      	it	ne
 80008d8:	4770      	bxne	lr
 80008da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80008de:	0052      	lsls	r2, r2, #1
 80008e0:	eb43 0303 	adc.w	r3, r3, r3
 80008e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80008e8:	bf08      	it	eq
 80008ea:	3d01      	subeq	r5, #1
 80008ec:	d0f7      	beq.n	80008de <__aeabi_dmul+0x1c6>
 80008ee:	ea43 0306 	orr.w	r3, r3, r6
 80008f2:	4770      	bx	lr
 80008f4:	ea94 0f0c 	teq	r4, ip
 80008f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fc:	bf18      	it	ne
 80008fe:	ea95 0f0c 	teqne	r5, ip
 8000902:	d00c      	beq.n	800091e <__aeabi_dmul+0x206>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	d1d1      	bne.n	80008b4 <__aeabi_dmul+0x19c>
 8000910:	ea81 0103 	eor.w	r1, r1, r3
 8000914:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	bd70      	pop	{r4, r5, r6, pc}
 800091e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000922:	bf06      	itte	eq
 8000924:	4610      	moveq	r0, r2
 8000926:	4619      	moveq	r1, r3
 8000928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092c:	d019      	beq.n	8000962 <__aeabi_dmul+0x24a>
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	d102      	bne.n	800093a <__aeabi_dmul+0x222>
 8000934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000938:	d113      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	d105      	bne.n	800094c <__aeabi_dmul+0x234>
 8000940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000944:	bf1c      	itt	ne
 8000946:	4610      	movne	r0, r2
 8000948:	4619      	movne	r1, r3
 800094a:	d10a      	bne.n	8000962 <__aeabi_dmul+0x24a>
 800094c:	ea81 0103 	eor.w	r1, r1, r3
 8000950:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000954:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000958:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	bd70      	pop	{r4, r5, r6, pc}
 8000962:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000966:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800096a:	bd70      	pop	{r4, r5, r6, pc}

0800096c <__aeabi_ddiv>:
 800096c:	b570      	push	{r4, r5, r6, lr}
 800096e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000972:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800097a:	bf1d      	ittte	ne
 800097c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000980:	ea94 0f0c 	teqne	r4, ip
 8000984:	ea95 0f0c 	teqne	r5, ip
 8000988:	f000 f8a7 	bleq	8000ada <__aeabi_ddiv+0x16e>
 800098c:	eba4 0405 	sub.w	r4, r4, r5
 8000990:	ea81 0e03 	eor.w	lr, r1, r3
 8000994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000998:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800099c:	f000 8088 	beq.w	8000ab0 <__aeabi_ddiv+0x144>
 80009a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80009a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80009c4:	429d      	cmp	r5, r3
 80009c6:	bf08      	it	eq
 80009c8:	4296      	cmpeq	r6, r2
 80009ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80009ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80009d2:	d202      	bcs.n	80009da <__aeabi_ddiv+0x6e>
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	1ab6      	subs	r6, r6, r2
 80009dc:	eb65 0503 	sbc.w	r5, r5, r3
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80009ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a18:	085b      	lsrs	r3, r3, #1
 8000a1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a4c:	d018      	beq.n	8000a80 <__aeabi_ddiv+0x114>
 8000a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a6a:	d1c0      	bne.n	80009ee <__aeabi_ddiv+0x82>
 8000a6c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a70:	d10b      	bne.n	8000a8a <__aeabi_ddiv+0x11e>
 8000a72:	ea41 0100 	orr.w	r1, r1, r0
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a7e:	e7b6      	b.n	80009ee <__aeabi_ddiv+0x82>
 8000a80:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a84:	bf04      	itt	eq
 8000a86:	4301      	orreq	r1, r0
 8000a88:	2000      	moveq	r0, #0
 8000a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a8e:	bf88      	it	hi
 8000a90:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a94:	f63f aeaf 	bhi.w	80007f6 <__aeabi_dmul+0xde>
 8000a98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a9c:	bf04      	itt	eq
 8000a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aa6:	f150 0000 	adcs.w	r0, r0, #0
 8000aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
 8000ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000abc:	bfc2      	ittt	gt
 8000abe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ac6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ac8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000acc:	f04f 0e00 	mov.w	lr, #0
 8000ad0:	3c01      	subs	r4, #1
 8000ad2:	e690      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ad4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ad8:	e68d      	b.n	80007f6 <__aeabi_dmul+0xde>
 8000ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ade:	ea94 0f0c 	teq	r4, ip
 8000ae2:	bf08      	it	eq
 8000ae4:	ea95 0f0c 	teqeq	r5, ip
 8000ae8:	f43f af3b 	beq.w	8000962 <__aeabi_dmul+0x24a>
 8000aec:	ea94 0f0c 	teq	r4, ip
 8000af0:	d10a      	bne.n	8000b08 <__aeabi_ddiv+0x19c>
 8000af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000af6:	f47f af34 	bne.w	8000962 <__aeabi_dmul+0x24a>
 8000afa:	ea95 0f0c 	teq	r5, ip
 8000afe:	f47f af25 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b02:	4610      	mov	r0, r2
 8000b04:	4619      	mov	r1, r3
 8000b06:	e72c      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b08:	ea95 0f0c 	teq	r5, ip
 8000b0c:	d106      	bne.n	8000b1c <__aeabi_ddiv+0x1b0>
 8000b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b12:	f43f aefd 	beq.w	8000910 <__aeabi_dmul+0x1f8>
 8000b16:	4610      	mov	r0, r2
 8000b18:	4619      	mov	r1, r3
 8000b1a:	e722      	b.n	8000962 <__aeabi_dmul+0x24a>
 8000b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b26:	f47f aec5 	bne.w	80008b4 <__aeabi_dmul+0x19c>
 8000b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b2e:	f47f af0d 	bne.w	800094c <__aeabi_dmul+0x234>
 8000b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b36:	f47f aeeb 	bne.w	8000910 <__aeabi_dmul+0x1f8>
 8000b3a:	e712      	b.n	8000962 <__aeabi_dmul+0x24a>

08000b3c <__gedf2>:
 8000b3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b40:	e006      	b.n	8000b50 <__cmpdf2+0x4>
 8000b42:	bf00      	nop

08000b44 <__ledf2>:
 8000b44:	f04f 0c01 	mov.w	ip, #1
 8000b48:	e002      	b.n	8000b50 <__cmpdf2+0x4>
 8000b4a:	bf00      	nop

08000b4c <__cmpdf2>:
 8000b4c:	f04f 0c01 	mov.w	ip, #1
 8000b50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	bf18      	it	ne
 8000b62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b66:	d01b      	beq.n	8000ba0 <__cmpdf2+0x54>
 8000b68:	b001      	add	sp, #4
 8000b6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b6e:	bf0c      	ite	eq
 8000b70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b74:	ea91 0f03 	teqne	r1, r3
 8000b78:	bf02      	ittt	eq
 8000b7a:	ea90 0f02 	teqeq	r0, r2
 8000b7e:	2000      	moveq	r0, #0
 8000b80:	4770      	bxeq	lr
 8000b82:	f110 0f00 	cmn.w	r0, #0
 8000b86:	ea91 0f03 	teq	r1, r3
 8000b8a:	bf58      	it	pl
 8000b8c:	4299      	cmppl	r1, r3
 8000b8e:	bf08      	it	eq
 8000b90:	4290      	cmpeq	r0, r2
 8000b92:	bf2c      	ite	cs
 8000b94:	17d8      	asrcs	r0, r3, #31
 8000b96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b9a:	f040 0001 	orr.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba8:	d102      	bne.n	8000bb0 <__cmpdf2+0x64>
 8000baa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bae:	d107      	bne.n	8000bc0 <__cmpdf2+0x74>
 8000bb0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb8:	d1d6      	bne.n	8000b68 <__cmpdf2+0x1c>
 8000bba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bbe:	d0d3      	beq.n	8000b68 <__cmpdf2+0x1c>
 8000bc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_cdrcmple>:
 8000bc8:	4684      	mov	ip, r0
 8000bca:	4610      	mov	r0, r2
 8000bcc:	4662      	mov	r2, ip
 8000bce:	468c      	mov	ip, r1
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	e000      	b.n	8000bd8 <__aeabi_cdcmpeq>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_cdcmpeq>:
 8000bd8:	b501      	push	{r0, lr}
 8000bda:	f7ff ffb7 	bl	8000b4c <__cmpdf2>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	bf48      	it	mi
 8000be2:	f110 0f00 	cmnmi.w	r0, #0
 8000be6:	bd01      	pop	{r0, pc}

08000be8 <__aeabi_dcmpeq>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff fff4 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000bf0:	bf0c      	ite	eq
 8000bf2:	2001      	moveq	r0, #1
 8000bf4:	2000      	movne	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmplt>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffea 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c04:	bf34      	ite	cc
 8000c06:	2001      	movcc	r0, #1
 8000c08:	2000      	movcs	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_dcmple>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffe0 	bl	8000bd8 <__aeabi_cdcmpeq>
 8000c18:	bf94      	ite	ls
 8000c1a:	2001      	movls	r0, #1
 8000c1c:	2000      	movhi	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <__aeabi_dcmpge>:
 8000c24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c28:	f7ff ffce 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c2c:	bf94      	ite	ls
 8000c2e:	2001      	movls	r0, #1
 8000c30:	2000      	movhi	r0, #0
 8000c32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c36:	bf00      	nop

08000c38 <__aeabi_dcmpgt>:
 8000c38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c3c:	f7ff ffc4 	bl	8000bc8 <__aeabi_cdrcmple>
 8000c40:	bf34      	ite	cc
 8000c42:	2001      	movcc	r0, #1
 8000c44:	2000      	movcs	r0, #0
 8000c46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c4a:	bf00      	nop

08000c4c <__aeabi_dcmpun>:
 8000c4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c54:	d102      	bne.n	8000c5c <__aeabi_dcmpun+0x10>
 8000c56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c5a:	d10a      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c64:	d102      	bne.n	8000c6c <__aeabi_dcmpun+0x20>
 8000c66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c6a:	d102      	bne.n	8000c72 <__aeabi_dcmpun+0x26>
 8000c6c:	f04f 0000 	mov.w	r0, #0
 8000c70:	4770      	bx	lr
 8000c72:	f04f 0001 	mov.w	r0, #1
 8000c76:	4770      	bx	lr

08000c78 <__aeabi_d2iz>:
 8000c78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c80:	d215      	bcs.n	8000cae <__aeabi_d2iz+0x36>
 8000c82:	d511      	bpl.n	8000ca8 <__aeabi_d2iz+0x30>
 8000c84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d912      	bls.n	8000cb4 <__aeabi_d2iz+0x3c>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	4770      	bx	lr
 8000ca8:	f04f 0000 	mov.w	r0, #0
 8000cac:	4770      	bx	lr
 8000cae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cb2:	d105      	bne.n	8000cc0 <__aeabi_d2iz+0x48>
 8000cb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000cb8:	bf08      	it	eq
 8000cba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2uiz>:
 8000cc8:	004a      	lsls	r2, r1, #1
 8000cca:	d211      	bcs.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000ccc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000cd0:	d211      	bcs.n	8000cf6 <__aeabi_d2uiz+0x2e>
 8000cd2:	d50d      	bpl.n	8000cf0 <__aeabi_d2uiz+0x28>
 8000cd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000cd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cdc:	d40e      	bmi.n	8000cfc <__aeabi_d2uiz+0x34>
 8000cde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ce6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cea:	fa23 f002 	lsr.w	r0, r3, r2
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cfa:	d102      	bne.n	8000d02 <__aeabi_d2uiz+0x3a>
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	4770      	bx	lr
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2f>:
 8000d08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000d10:	bf24      	itt	cs
 8000d12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000d16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000d1a:	d90d      	bls.n	8000d38 <__aeabi_d2f+0x30>
 8000d1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000d2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000d3c:	d121      	bne.n	8000d82 <__aeabi_d2f+0x7a>
 8000d3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000d42:	bfbc      	itt	lt
 8000d44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000d48:	4770      	bxlt	lr
 8000d4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000d4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d52:	f1c2 0218 	rsb	r2, r2, #24
 8000d56:	f1c2 0c20 	rsb	ip, r2, #32
 8000d5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d62:	bf18      	it	ne
 8000d64:	f040 0001 	orrne.w	r0, r0, #1
 8000d68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d74:	ea40 000c 	orr.w	r0, r0, ip
 8000d78:	fa23 f302 	lsr.w	r3, r3, r2
 8000d7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d80:	e7cc      	b.n	8000d1c <__aeabi_d2f+0x14>
 8000d82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d86:	d107      	bne.n	8000d98 <__aeabi_d2f+0x90>
 8000d88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000d92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000d96:	4770      	bxne	lr
 8000d98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000d9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_frsub>:
 8000da8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000dac:	e002      	b.n	8000db4 <__addsf3>
 8000dae:	bf00      	nop

08000db0 <__aeabi_fsub>:
 8000db0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000db4 <__addsf3>:
 8000db4:	0042      	lsls	r2, r0, #1
 8000db6:	bf1f      	itttt	ne
 8000db8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000dbc:	ea92 0f03 	teqne	r2, r3
 8000dc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000dc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc8:	d06a      	beq.n	8000ea0 <__addsf3+0xec>
 8000dca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000dce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000dd2:	bfc1      	itttt	gt
 8000dd4:	18d2      	addgt	r2, r2, r3
 8000dd6:	4041      	eorgt	r1, r0
 8000dd8:	4048      	eorgt	r0, r1
 8000dda:	4041      	eorgt	r1, r0
 8000ddc:	bfb8      	it	lt
 8000dde:	425b      	neglt	r3, r3
 8000de0:	2b19      	cmp	r3, #25
 8000de2:	bf88      	it	hi
 8000de4:	4770      	bxhi	lr
 8000de6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000df2:	bf18      	it	ne
 8000df4:	4240      	negne	r0, r0
 8000df6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000dfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000dfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000e02:	bf18      	it	ne
 8000e04:	4249      	negne	r1, r1
 8000e06:	ea92 0f03 	teq	r2, r3
 8000e0a:	d03f      	beq.n	8000e8c <__addsf3+0xd8>
 8000e0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000e10:	fa41 fc03 	asr.w	ip, r1, r3
 8000e14:	eb10 000c 	adds.w	r0, r0, ip
 8000e18:	f1c3 0320 	rsb	r3, r3, #32
 8000e1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000e20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e24:	d502      	bpl.n	8000e2c <__addsf3+0x78>
 8000e26:	4249      	negs	r1, r1
 8000e28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000e2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000e30:	d313      	bcc.n	8000e5a <__addsf3+0xa6>
 8000e32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000e36:	d306      	bcc.n	8000e46 <__addsf3+0x92>
 8000e38:	0840      	lsrs	r0, r0, #1
 8000e3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000e3e:	f102 0201 	add.w	r2, r2, #1
 8000e42:	2afe      	cmp	r2, #254	@ 0xfe
 8000e44:	d251      	bcs.n	8000eea <__addsf3+0x136>
 8000e46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000e4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e4e:	bf08      	it	eq
 8000e50:	f020 0001 	biceq.w	r0, r0, #1
 8000e54:	ea40 0003 	orr.w	r0, r0, r3
 8000e58:	4770      	bx	lr
 8000e5a:	0049      	lsls	r1, r1, #1
 8000e5c:	eb40 0000 	adc.w	r0, r0, r0
 8000e60:	3a01      	subs	r2, #1
 8000e62:	bf28      	it	cs
 8000e64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000e68:	d2ed      	bcs.n	8000e46 <__addsf3+0x92>
 8000e6a:	fab0 fc80 	clz	ip, r0
 8000e6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000e72:	ebb2 020c 	subs.w	r2, r2, ip
 8000e76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000e7a:	bfaa      	itet	ge
 8000e7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000e80:	4252      	neglt	r2, r2
 8000e82:	4318      	orrge	r0, r3
 8000e84:	bfbc      	itt	lt
 8000e86:	40d0      	lsrlt	r0, r2
 8000e88:	4318      	orrlt	r0, r3
 8000e8a:	4770      	bx	lr
 8000e8c:	f092 0f00 	teq	r2, #0
 8000e90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000e94:	bf06      	itte	eq
 8000e96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000e9a:	3201      	addeq	r2, #1
 8000e9c:	3b01      	subne	r3, #1
 8000e9e:	e7b5      	b.n	8000e0c <__addsf3+0x58>
 8000ea0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ea8:	bf18      	it	ne
 8000eaa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eae:	d021      	beq.n	8000ef4 <__addsf3+0x140>
 8000eb0:	ea92 0f03 	teq	r2, r3
 8000eb4:	d004      	beq.n	8000ec0 <__addsf3+0x10c>
 8000eb6:	f092 0f00 	teq	r2, #0
 8000eba:	bf08      	it	eq
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	4770      	bx	lr
 8000ec0:	ea90 0f01 	teq	r0, r1
 8000ec4:	bf1c      	itt	ne
 8000ec6:	2000      	movne	r0, #0
 8000ec8:	4770      	bxne	lr
 8000eca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ece:	d104      	bne.n	8000eda <__addsf3+0x126>
 8000ed0:	0040      	lsls	r0, r0, #1
 8000ed2:	bf28      	it	cs
 8000ed4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ede:	bf3c      	itt	cc
 8000ee0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ee4:	4770      	bxcc	lr
 8000ee6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000eea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000eee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef2:	4770      	bx	lr
 8000ef4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ef8:	bf16      	itet	ne
 8000efa:	4608      	movne	r0, r1
 8000efc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000f00:	4601      	movne	r1, r0
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	bf06      	itte	eq
 8000f06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000f0a:	ea90 0f01 	teqeq	r0, r1
 8000f0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_ui2f>:
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e004      	b.n	8000f24 <__aeabi_i2f+0x8>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_i2f>:
 8000f1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000f20:	bf48      	it	mi
 8000f22:	4240      	negmi	r0, r0
 8000f24:	ea5f 0c00 	movs.w	ip, r0
 8000f28:	bf08      	it	eq
 8000f2a:	4770      	bxeq	lr
 8000f2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000f30:	4601      	mov	r1, r0
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	e01c      	b.n	8000f72 <__aeabi_l2f+0x2a>

08000f38 <__aeabi_ul2f>:
 8000f38:	ea50 0201 	orrs.w	r2, r0, r1
 8000f3c:	bf08      	it	eq
 8000f3e:	4770      	bxeq	lr
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e00a      	b.n	8000f5c <__aeabi_l2f+0x14>
 8000f46:	bf00      	nop

08000f48 <__aeabi_l2f>:
 8000f48:	ea50 0201 	orrs.w	r2, r0, r1
 8000f4c:	bf08      	it	eq
 8000f4e:	4770      	bxeq	lr
 8000f50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000f54:	d502      	bpl.n	8000f5c <__aeabi_l2f+0x14>
 8000f56:	4240      	negs	r0, r0
 8000f58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f5c:	ea5f 0c01 	movs.w	ip, r1
 8000f60:	bf02      	ittt	eq
 8000f62:	4684      	moveq	ip, r0
 8000f64:	4601      	moveq	r1, r0
 8000f66:	2000      	moveq	r0, #0
 8000f68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000f6c:	bf08      	it	eq
 8000f6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000f72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000f76:	fabc f28c 	clz	r2, ip
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000f80:	db10      	blt.n	8000fa4 <__aeabi_l2f+0x5c>
 8000f82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000f86:	4463      	add	r3, ip
 8000f88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f8c:	f1c2 0220 	rsb	r2, r2, #32
 8000f90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	eb43 0002 	adc.w	r0, r3, r2
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f102 0220 	add.w	r2, r2, #32
 8000fa8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000fac:	f1c2 0220 	rsb	r2, r2, #32
 8000fb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000fb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000fb8:	eb43 0002 	adc.w	r0, r3, r2
 8000fbc:	bf08      	it	eq
 8000fbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_f2iz>:
 8000fc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fcc:	d30f      	bcc.n	8000fee <__aeabi_f2iz+0x2a>
 8000fce:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fd6:	d90d      	bls.n	8000ff4 <__aeabi_f2iz+0x30>
 8000fd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fe0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fe4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fe8:	bf18      	it	ne
 8000fea:	4240      	negne	r0, r0
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr
 8000ff4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ff8:	d101      	bne.n	8000ffe <__aeabi_f2iz+0x3a>
 8000ffa:	0242      	lsls	r2, r0, #9
 8000ffc:	d105      	bne.n	800100a <__aeabi_f2iz+0x46>
 8000ffe:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001002:	bf08      	it	eq
 8001004:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001008:	4770      	bx	lr
 800100a:	f04f 0000 	mov.w	r0, #0
 800100e:	4770      	bx	lr

08001010 <_ZN9Motor_PID9quaythuanEs>:

	Motor_PID(UART_HandleTypeDef* huart,uint8_t address_DC) : huart(huart), address_DC(address_DC){
		mode = false;
	}

	void quaythuan(int16_t speed){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
		switch(mode){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7d1b      	ldrb	r3, [r3, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d017      	beq.n	8001054 <_ZN9Motor_PID9quaythuanEs+0x44>
 8001024:	2b01      	cmp	r3, #1
 8001026:	d11f      	bne.n	8001068 <_ZN9Motor_PID9quaythuanEs+0x58>
			case PWM: HAL_GPIO_WritePin(Port_Dir, Pin_Dir, GPIO_PIN_RESET);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	b29b      	uxth	r3, r3
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	f006 f80f 	bl	8007058 <HAL_GPIO_WritePin>
				   	   PWM_Write_GPIO(Port_Pwm, Pin_Pwm,299 -  speed);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6898      	ldr	r0, [r3, #8]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68d9      	ldr	r1, [r3, #12]
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 8001048:	3301      	adds	r3, #1
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	f001 fbe2 	bl	8002816 <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt>
				   	   break;
 8001052:	e009      	b.n	8001068 <_ZN9Motor_PID9quaythuanEs+0x58>
			case UART: Controll_DC_UART(huart, address_DC, LOW, (uint8_t)(speed));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6918      	ldr	r0, [r3, #16]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7d59      	ldrb	r1, [r3, #21]
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	f004 f8fb 	bl	800525c <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
						break;
 8001066:	bf00      	nop
		}

	}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_ZN9Motor_PID10quaynghichEs>:

	void quaynghich(int16_t speed){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
		switch(mode){
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7d1b      	ldrb	r3, [r3, #20]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d017      	beq.n	80010b4 <_ZN9Motor_PID10quaynghichEs+0x44>
 8001084:	2b01      	cmp	r3, #1
 8001086:	d11f      	bne.n	80010c8 <_ZN9Motor_PID10quaynghichEs+0x58>
			case PWM: HAL_GPIO_WritePin(Port_Dir, Pin_Dir, GPIO_PIN_SET);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	b29b      	uxth	r3, r3
 8001092:	2201      	movs	r2, #1
 8001094:	4619      	mov	r1, r3
 8001096:	f005 ffdf 	bl	8007058 <HAL_GPIO_WritePin>
				   	   PWM_Write_GPIO(Port_Pwm, Pin_Pwm,299 -  speed);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6898      	ldr	r0, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68d9      	ldr	r1, [r3, #12]
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	f5c3 7395 	rsb	r3, r3, #298	@ 0x12a
 80010a8:	3301      	adds	r3, #1
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f001 fbb2 	bl	8002816 <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt>
				   	   break;
 80010b2:	e009      	b.n	80010c8 <_ZN9Motor_PID10quaynghichEs+0x58>
			case UART: Controll_DC_UART(huart, address_DC, HIGH, (uint8_t)(speed));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6918      	ldr	r0, [r3, #16]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7d59      	ldrb	r1, [r3, #21]
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2201      	movs	r2, #1
 80010c2:	f004 f8cb 	bl	800525c <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>
						break;
 80010c6:	bf00      	nop
		}
	}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_Z10constrainslll>:
#include "math.h"

extern Motor_PID DC[4];


int32_t constrains(int32_t value, int32_t down, int32_t up ){
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	if(value >= up) return up;
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	db01      	blt.n	80010e8 <_Z10constrainslll+0x18>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	e006      	b.n	80010f6 <_Z10constrainslll+0x26>
	if(value < down) return down;
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	da01      	bge.n	80010f4 <_Z10constrainslll+0x24>
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	e000      	b.n	80010f6 <_Z10constrainslll+0x26>
	return value;
 80010f4:	68fb      	ldr	r3, [r7, #12]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <_Z10soft_speedPssm>:
	return value;
}

using Variable = int16_t*;

void soft_speed(Variable variable, int16_t speed,uint32_t time_out){ // tốc độ và thời gian khởi động
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	460b      	mov	r3, r1
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	817b      	strh	r3, [r7, #10]
  static uint32_t timee = 0;
  if(HAL_GetTick() - timee >= time_out) {
 800110e:	f005 fb91 	bl	8006834 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <_Z10soft_speedPssm+0x88>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	bf94      	ite	ls
 8001120:	2301      	movls	r3, #1
 8001122:	2300      	movhi	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d029      	beq.n	800117e <_Z10soft_speedPssm+0x7e>
    if((*variable) < speed){
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001134:	429a      	cmp	r2, r3
 8001136:	dd09      	ble.n	800114c <_Z10soft_speedPssm+0x4c>
      (*variable)++;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113e:	b29b      	uxth	r3, r3
 8001140:	3301      	adds	r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	b21a      	sxth	r2, r3
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	801a      	strh	r2, [r3, #0]
 800114a:	e013      	b.n	8001174 <_Z10soft_speedPssm+0x74>
    }else if((*variable) > speed){
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001156:	429a      	cmp	r2, r3
 8001158:	da09      	bge.n	800116e <_Z10soft_speedPssm+0x6e>
      (*variable)--;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	b29b      	uxth	r3, r3
 8001162:	3b01      	subs	r3, #1
 8001164:	b29b      	uxth	r3, r3
 8001166:	b21a      	sxth	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	801a      	strh	r2, [r3, #0]
 800116c:	e002      	b.n	8001174 <_Z10soft_speedPssm+0x74>
    }else{
      (*variable) = speed;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	897a      	ldrh	r2, [r7, #10]
 8001172:	801a      	strh	r2, [r3, #0]
    }

    timee = HAL_GetTick();
 8001174:	f005 fb5e 	bl	8006834 <HAL_GetTick>
 8001178:	4603      	mov	r3, r0
 800117a:	4a03      	ldr	r2, [pc, #12]	@ (8001188 <_Z10soft_speedPssm+0x88>)
 800117c:	6013      	str	r3, [r2, #0]
  }
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000204 	.word	0x20000204

0800118c <_Z9get_angles>:


int16_t get_angle(int16_t angle){ // resolution(độ phân giải) : -1800 -> 1800
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	80fb      	strh	r3, [r7, #6]
  angle = angle % 3600;
 8001196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119a:	4a17      	ldr	r2, [pc, #92]	@ (80011f8 <_Z9get_angles+0x6c>)
 800119c:	fb82 1203 	smull	r1, r2, r2, r3
 80011a0:	441a      	add	r2, r3
 80011a2:	12d1      	asrs	r1, r2, #11
 80011a4:	17da      	asrs	r2, r3, #31
 80011a6:	1a8a      	subs	r2, r1, r2
 80011a8:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 80011ac:	fb01 f202 	mul.w	r2, r1, r2
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	80fb      	strh	r3, [r7, #6]
  if(angle >= 1800) return angle -= 3600;
 80011b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b8:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80011bc:	db07      	blt.n	80011ce <_Z9get_angles+0x42>
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	f5a3 6361 	sub.w	r3, r3, #3600	@ 0xe10
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011cc:	e00e      	b.n	80011ec <_Z9get_angles+0x60>
  if(angle < -1800) return angle += 3600;
 80011ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011d2:	f513 6fe1 	cmn.w	r3, #1800	@ 0x708
 80011d6:	da07      	bge.n	80011e8 <_Z9get_angles+0x5c>
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	f503 6361 	add.w	r3, r3, #3600	@ 0xe10
 80011de:	b29b      	uxth	r3, r3
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e6:	e001      	b.n	80011ec <_Z9get_angles+0x60>
  return angle;
 80011e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]

}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	91a2b3c5 	.word	0x91a2b3c5

080011fc <_Z10PID_rotatess>:

int16_t PID_rotate(int16_t angle_set,int16_t speed_rot){ // góc muốn đến , giới hạn tốc độ
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	460a      	mov	r2, r1
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	4613      	mov	r3, r2
 800120a:	80bb      	strh	r3, [r7, #4]
  float kp, ki, kd;
  static int16_t error  = 0,last_error = 0;
  int16_t output = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	817b      	strh	r3, [r7, #10]

    error = angle_set - get_angle(compass());
 8001210:	88fc      	ldrh	r4, [r7, #6]
 8001212:	f003 ffef 	bl	80051f4 <_Z7compassv>
 8001216:	4603      	mov	r3, r0
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffb7 	bl	800118c <_Z9get_angles>
 800121e:	4603      	mov	r3, r0
 8001220:	b29b      	uxth	r3, r3
 8001222:	1ae3      	subs	r3, r4, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b40      	ldr	r3, [pc, #256]	@ (800132c <_Z10PID_rotatess+0x130>)
 800122a:	801a      	strh	r2, [r3, #0]

    if(abs(error) >= 1000){
 800122c:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <_Z10PID_rotatess+0x130>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	2b00      	cmp	r3, #0
 8001234:	bfb8      	it	lt
 8001236:	425b      	neglt	r3, r3
 8001238:	b29b      	uxth	r3, r3
 800123a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800123e:	d307      	bcc.n	8001250 <_Z10PID_rotatess+0x54>
      kp = 0.25, ki = 0.01,  kd = 0.07;
 8001240:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	4b3a      	ldr	r3, [pc, #232]	@ (8001330 <_Z10PID_rotatess+0x134>)
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <_Z10PID_rotatess+0x138>)
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	e016      	b.n	800127e <_Z10PID_rotatess+0x82>
    } else
    if(abs(error) >= 400){
 8001250:	4b36      	ldr	r3, [pc, #216]	@ (800132c <_Z10PID_rotatess+0x130>)
 8001252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001256:	2b00      	cmp	r3, #0
 8001258:	bfb8      	it	lt
 800125a:	425b      	neglt	r3, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001262:	d306      	bcc.n	8001272 <_Z10PID_rotatess+0x76>
      kp = 0.15, ki = 0.06, kd = 0.04;
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <_Z10PID_rotatess+0x13c>)
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	4b34      	ldr	r3, [pc, #208]	@ (800133c <_Z10PID_rotatess+0x140>)
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <_Z10PID_rotatess+0x144>)
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e005      	b.n	800127e <_Z10PID_rotatess+0x82>
    } else{
      kp = 0.1, ki = 0.03, kd = 0.01;
 8001272:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <_Z10PID_rotatess+0x148>)
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	4b34      	ldr	r3, [pc, #208]	@ (8001348 <_Z10PID_rotatess+0x14c>)
 8001278:	613b      	str	r3, [r7, #16]
 800127a:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <_Z10PID_rotatess+0x134>)
 800127c:	60fb      	str	r3, [r7, #12]
    }

    output = kp * error + ki * (error + last_error) + kd * (error - last_error);
 800127e:	4b2b      	ldr	r3, [pc, #172]	@ (800132c <_Z10PID_rotatess+0x130>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe49 	bl	8000f1c <__aeabi_i2f>
 800128a:	4603      	mov	r3, r0
 800128c:	6979      	ldr	r1, [r7, #20]
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ffd2 	bl	8000238 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	461c      	mov	r4, r3
 8001298:	4b24      	ldr	r3, [pc, #144]	@ (800132c <_Z10PID_rotatess+0x130>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	461a      	mov	r2, r3
 80012a0:	4b2a      	ldr	r3, [pc, #168]	@ (800134c <_Z10PID_rotatess+0x150>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	4413      	add	r3, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe37 	bl	8000f1c <__aeabi_i2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	6939      	ldr	r1, [r7, #16]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ffc0 	bl	8000238 <__aeabi_fmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fd79 	bl	8000db4 <__addsf3>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461c      	mov	r4, r3
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <_Z10PID_rotatess+0x130>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b1f      	ldr	r3, [pc, #124]	@ (800134c <_Z10PID_rotatess+0x150>)
 80012d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe20 	bl	8000f1c <__aeabi_i2f>
 80012dc:	4603      	mov	r3, r0
 80012de:	68f9      	ldr	r1, [r7, #12]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7fe ffa9 	bl	8000238 <__aeabi_fmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff fd62 	bl	8000db4 <__addsf3>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe66 	bl	8000fc4 <__aeabi_f2iz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	817b      	strh	r3, [r7, #10]
    output = constrains(output, -speed_rot, speed_rot);
 80012fc:	f9b7 000a 	ldrsh.w	r0, [r7, #10]
 8001300:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001304:	425b      	negs	r3, r3
 8001306:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fee0 	bl	80010d0 <_Z10constrainslll>
 8001310:	4603      	mov	r3, r0
 8001312:	817b      	strh	r3, [r7, #10]
    //Serial.println(output);
    last_error = error;
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <_Z10PID_rotatess+0x130>)
 8001316:	f9b3 2000 	ldrsh.w	r2, [r3]
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <_Z10PID_rotatess+0x150>)
 800131c:	801a      	strh	r2, [r3, #0]

  return output;
 800131e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8001322:	4618      	mov	r0, r3
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	20000208 	.word	0x20000208
 8001330:	3c23d70a 	.word	0x3c23d70a
 8001334:	3d8f5c29 	.word	0x3d8f5c29
 8001338:	3e19999a 	.word	0x3e19999a
 800133c:	3d75c28f 	.word	0x3d75c28f
 8001340:	3d23d70a 	.word	0x3d23d70a
 8001344:	3dcccccd 	.word	0x3dcccccd
 8001348:	3cf5c28f 	.word	0x3cf5c28f
 800134c:	2000020a 	.word	0x2000020a

08001350 <_Z6run_dchs>:

void run_dc(uint8_t num_dc,int16_t speed){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	460a      	mov	r2, r1
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	4613      	mov	r3, r2
 800135e:	80bb      	strh	r3, [r7, #4]
  if(speed >= 0){
 8001360:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0d      	blt.n	8001384 <_Z6run_dchs+0x34>
    DC[num_dc].quaythuan(speed);
 8001368:	79fa      	ldrb	r2, [r7, #7]
 800136a:	4613      	mov	r3, r2
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	1a9b      	subs	r3, r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4a0f      	ldr	r2, [pc, #60]	@ (80013b0 <_Z6run_dchs+0x60>)
 8001374:	4413      	add	r3, r2
 8001376:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe47 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
  }else{
    DC[num_dc].quaynghich(abs(speed));
  }
}
 8001382:	e011      	b.n	80013a8 <_Z6run_dchs+0x58>
    DC[num_dc].quaynghich(abs(speed));
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	4613      	mov	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <_Z6run_dchs+0x60>)
 8001390:	441a      	add	r2, r3
 8001392:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfb8      	it	lt
 800139a:	425b      	neglt	r3, r3
 800139c:	b29b      	uxth	r3, r3
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f7ff fe64 	bl	8001070 <_ZN9Motor_PID10quaynghichEs>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000684 	.word	0x20000684
 80013b4:	00000000 	.word	0x00000000

080013b8 <_Z14move_directionssssm>:
}



// di chuyển ver 1
int16_t move_direction(int16_t angle_set, int16_t speed_rot,int16_t angle_tt, int16_t speed_tt,uint32_t time_soft){
 80013b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013bc:	b092      	sub	sp, #72	@ 0x48
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4604      	mov	r4, r0
 80013c2:	4608      	mov	r0, r1
 80013c4:	4611      	mov	r1, r2
 80013c6:	461a      	mov	r2, r3
 80013c8:	4623      	mov	r3, r4
 80013ca:	80fb      	strh	r3, [r7, #6]
 80013cc:	4603      	mov	r3, r0
 80013ce:	80bb      	strh	r3, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	803b      	strh	r3, [r7, #0]

  static int16_t speed_run = 0;
  soft_speed(&speed_run,speed_tt,time_soft);
 80013d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80013de:	4619      	mov	r1, r3
 80013e0:	4809      	ldr	r0, [pc, #36]	@ (8001408 <_Z14move_directionssssm+0x50>)
 80013e2:	f7ff fe8d 	bl	8001100 <_Z10soft_speedPssm>
  static int16_t speed_rotate = 0;
  speed_rotate = PID_rotate(angle_set,speed_rot);
 80013e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff03 	bl	80011fc <_Z10PID_rotatess>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b04      	ldr	r3, [pc, #16]	@ (800140c <_Z14move_directionssssm+0x54>)
 80013fc:	801a      	strh	r2, [r3, #0]
  int16_t pwm[4];
  float alpha[4];


  for(uint8_t i = 0; i < 4; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001404:	e041      	b.n	800148a <_Z14move_directionssssm+0xd2>
 8001406:	bf00      	nop
 8001408:	2000020c 	.word	0x2000020c
 800140c:	2000020e 	.word	0x2000020e
    alpha[i] = cos((DC[i].angle[0] - angle_tt + compass()) * DEG_TO_RAD / 10);
 8001410:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8001414:	49cc      	ldr	r1, [pc, #816]	@ (8001748 <_Z14move_directionssssm+0x390>)
 8001416:	4613      	mov	r3, r2
 8001418:	00db      	lsls	r3, r3, #3
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	3316      	adds	r3, #22
 8001422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001426:	461a      	mov	r2, r3
 8001428:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142c:	1ad4      	subs	r4, r2, r3
 800142e:	f003 fee1 	bl	80051f4 <_Z7compassv>
 8001432:	4603      	mov	r3, r0
 8001434:	4423      	add	r3, r4
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f904 	bl	8000644 <__aeabi_i2d>
 800143c:	a3c0      	add	r3, pc, #768	@ (adr r3, 8001740 <_Z14move_directionssssm+0x388>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f969 	bl	8000718 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	4bbe      	ldr	r3, [pc, #760]	@ (800174c <_Z14move_directionssssm+0x394>)
 8001454:	f7ff fa8a 	bl	800096c <__aeabi_ddiv>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	f008 f92a 	bl	80096b8 <cos>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	f897 4047 	ldrb.w	r4, [r7, #71]	@ 0x47
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fc4a 	bl	8000d08 <__aeabi_d2f>
 8001474:	4602      	mov	r2, r0
 8001476:	00a3      	lsls	r3, r4, #2
 8001478:	3348      	adds	r3, #72	@ 0x48
 800147a:	443b      	add	r3, r7
 800147c:	f843 2c1c 	str.w	r2, [r3, #-28]
  for(uint8_t i = 0; i < 4; i++)
 8001480:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001484:	3301      	adds	r3, #1
 8001486:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800148a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800148e:	2b03      	cmp	r3, #3
 8001490:	d9be      	bls.n	8001410 <_Z14move_directionssssm+0x58>

  const double theta[2] = {cos(abs(DC[0].angle[0] - DC[3].angle[0]) * DEG_TO_RAD /10), cos(abs(DC[1].angle[0] - DC[2].angle[0]) * DEG_TO_RAD /10)};
 8001492:	4bad      	ldr	r3, [pc, #692]	@ (8001748 <_Z14move_directionssssm+0x390>)
 8001494:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001498:	461a      	mov	r2, r3
 800149a:	4bab      	ldr	r3, [pc, #684]	@ (8001748 <_Z14move_directionssssm+0x390>)
 800149c:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	@ 0x6a
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bfb8      	it	lt
 80014a6:	425b      	neglt	r3, r3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f8cb 	bl	8000644 <__aeabi_i2d>
 80014ae:	a3a4      	add	r3, pc, #656	@ (adr r3, 8001740 <_Z14move_directionssssm+0x388>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7ff f930 	bl	8000718 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4ba1      	ldr	r3, [pc, #644]	@ (800174c <_Z14move_directionssssm+0x394>)
 80014c6:	f7ff fa51 	bl	800096c <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f008 f8f1 	bl	80096b8 <cos>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80014de:	4b9a      	ldr	r3, [pc, #616]	@ (8001748 <_Z14move_directionssssm+0x390>)
 80014e0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b98      	ldr	r3, [pc, #608]	@ (8001748 <_Z14move_directionssssm+0x390>)
 80014e8:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	@ 0x4e
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bfb8      	it	lt
 80014f2:	425b      	neglt	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f8a5 	bl	8000644 <__aeabi_i2d>
 80014fa:	a391      	add	r3, pc, #580	@ (adr r3, 8001740 <_Z14move_directionssssm+0x388>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7ff f90a 	bl	8000718 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	4b8e      	ldr	r3, [pc, #568]	@ (800174c <_Z14move_directionssssm+0x394>)
 8001512:	f7ff fa2b 	bl	800096c <__aeabi_ddiv>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f008 f8cb 	bl	80096b8 <cos>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	e9c7 2308 	strd	r2, r3, [r7, #32]

  double gama[2] = {(alpha[0] * alpha[0] + alpha[3] * alpha[3] - 2 * alpha[0] * alpha[3] * theta[0]),
 800152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe fe81 	bl	8000238 <__aeabi_fmul>
 8001536:	4603      	mov	r3, r0
 8001538:	461c      	mov	r4, r3
 800153a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800153c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fe79 	bl	8000238 <__aeabi_fmul>
 8001546:	4603      	mov	r3, r0
 8001548:	4619      	mov	r1, r3
 800154a:	4620      	mov	r0, r4
 800154c:	f7ff fc32 	bl	8000db4 <__addsf3>
 8001550:	4603      	mov	r3, r0
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f888 	bl	8000668 <__aeabi_f2d>
 8001558:	4604      	mov	r4, r0
 800155a:	460d      	mov	r5, r1
 800155c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155e:	4619      	mov	r1, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fc27 	bl	8000db4 <__addsf3>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7fe fe62 	bl	8000238 <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f876 	bl	8000668 <__aeabi_f2d>
 800157c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001580:	f7ff f8ca 	bl	8000718 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4620      	mov	r0, r4
 800158a:	4629      	mov	r1, r5
 800158c:	f7fe ff0c 	bl	80003a8 <__aeabi_dsub>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
                        (alpha[1] * alpha[1] + alpha[2] * alpha[2] - 2 * alpha[1] * alpha[2] * theta[1])};
 8001594:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8001598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800159a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fe4a 	bl	8000238 <__aeabi_fmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461c      	mov	r4, r3
 80015a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fe42 	bl	8000238 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff fbfb 	bl	8000db4 <__addsf3>
 80015be:	4603      	mov	r3, r0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f851 	bl	8000668 <__aeabi_f2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015cc:	4619      	mov	r1, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fbf0 	bl	8000db4 <__addsf3>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461a      	mov	r2, r3
 80015d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f7fe fe2b 	bl	8000238 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff f83f 	bl	8000668 <__aeabi_f2d>
 80015ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015ee:	f7ff f893 	bl	8000718 <__aeabi_dmul>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe fed5 	bl	80003a8 <__aeabi_dsub>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	e9c7 2304 	strd	r2, r3, [r7, #16]
  //right robot : DC[0], DC[3]

  pwm[0] = speed_rotate + (speed_run * sqrt(2)) * (alpha[0] - alpha[3] * theta[0]) / gama[0];
 8001606:	4b52      	ldr	r3, [pc, #328]	@ (8001750 <_Z14move_directionssssm+0x398>)
 8001608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f819 	bl	8000644 <__aeabi_i2d>
 8001612:	4604      	mov	r4, r0
 8001614:	460d      	mov	r5, r1
 8001616:	4b4f      	ldr	r3, [pc, #316]	@ (8001754 <_Z14move_directionssssm+0x39c>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f811 	bl	8000644 <__aeabi_i2d>
 8001622:	4680      	mov	r8, r0
 8001624:	4689      	mov	r9, r1
 8001626:	2002      	movs	r0, #2
 8001628:	f000 fb26 	bl	8001c78 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4640      	mov	r0, r8
 8001632:	4649      	mov	r1, r9
 8001634:	f7ff f870 	bl	8000718 <__aeabi_dmul>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4692      	mov	sl, r2
 800163e:	469b      	mov	fp, r3
 8001640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff f810 	bl	8000668 <__aeabi_f2d>
 8001648:	4680      	mov	r8, r0
 800164a:	4689      	mov	r9, r1
 800164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f80a 	bl	8000668 <__aeabi_f2d>
 8001654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001658:	f7ff f85e 	bl	8000718 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4640      	mov	r0, r8
 8001662:	4649      	mov	r1, r9
 8001664:	f7fe fea0 	bl	80003a8 <__aeabi_dsub>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4650      	mov	r0, sl
 800166e:	4659      	mov	r1, fp
 8001670:	f7ff f852 	bl	8000718 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001680:	f7ff f974 	bl	800096c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f7fe fe8e 	bl	80003ac <__adddf3>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff faee 	bl	8000c78 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	b21b      	sxth	r3, r3
 80016a0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  pwm[3] = speed_rotate + (speed_run * sqrt(2)) * (alpha[3] - alpha[0] * theta[0]) / gama[0];
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <_Z14move_directionssssm+0x398>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ffcb 	bl	8000644 <__aeabi_i2d>
 80016ae:	4604      	mov	r4, r0
 80016b0:	460d      	mov	r5, r1
 80016b2:	4b28      	ldr	r3, [pc, #160]	@ (8001754 <_Z14move_directionssssm+0x39c>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ffc3 	bl	8000644 <__aeabi_i2d>
 80016be:	4680      	mov	r8, r0
 80016c0:	4689      	mov	r9, r1
 80016c2:	2002      	movs	r0, #2
 80016c4:	f000 fad8 	bl	8001c78 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4640      	mov	r0, r8
 80016ce:	4649      	mov	r1, r9
 80016d0:	f7ff f822 	bl	8000718 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4692      	mov	sl, r2
 80016da:	469b      	mov	fp, r3
 80016dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ffc2 	bl	8000668 <__aeabi_f2d>
 80016e4:	4680      	mov	r8, r0
 80016e6:	4689      	mov	r9, r1
 80016e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ffbc 	bl	8000668 <__aeabi_f2d>
 80016f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016f4:	f7ff f810 	bl	8000718 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4640      	mov	r0, r8
 80016fe:	4649      	mov	r1, r9
 8001700:	f7fe fe52 	bl	80003a8 <__aeabi_dsub>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4650      	mov	r0, sl
 800170a:	4659      	mov	r1, fp
 800170c:	f7ff f804 	bl	8000718 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800171c:	f7ff f926 	bl	800096c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4620      	mov	r0, r4
 8001726:	4629      	mov	r1, r5
 8001728:	f7fe fe40 	bl	80003ac <__adddf3>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff faa0 	bl	8000c78 <__aeabi_d2iz>
 8001738:	e00e      	b.n	8001758 <_Z14move_directionssssm+0x3a0>
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	a2529d39 	.word	0xa2529d39
 8001744:	3f91df46 	.word	0x3f91df46
 8001748:	20000684 	.word	0x20000684
 800174c:	40240000 	.word	0x40240000
 8001750:	2000020e 	.word	0x2000020e
 8001754:	2000020c 	.word	0x2000020c
 8001758:	4603      	mov	r3, r0
 800175a:	b21b      	sxth	r3, r3
 800175c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42


  // left robot : DC[1] DC[2]
  pwm[1] =  speed_rotate - (speed_run * sqrt(2)) * (alpha[1] - alpha[2] * theta[1]) / gama[1];
 8001760:	4b5e      	ldr	r3, [pc, #376]	@ (80018dc <_Z14move_directionssssm+0x524>)
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe ff6c 	bl	8000644 <__aeabi_i2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	4b5b      	ldr	r3, [pc, #364]	@ (80018e0 <_Z14move_directionssssm+0x528>)
 8001772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe ff64 	bl	8000644 <__aeabi_i2d>
 800177c:	4680      	mov	r8, r0
 800177e:	4689      	mov	r9, r1
 8001780:	2002      	movs	r0, #2
 8001782:	f000 fa79 	bl	8001c78 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4640      	mov	r0, r8
 800178c:	4649      	mov	r1, r9
 800178e:	f7fe ffc3 	bl	8000718 <__aeabi_dmul>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4692      	mov	sl, r2
 8001798:	469b      	mov	fp, r3
 800179a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe ff63 	bl	8000668 <__aeabi_f2d>
 80017a2:	4680      	mov	r8, r0
 80017a4:	4689      	mov	r9, r1
 80017a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe ff5d 	bl	8000668 <__aeabi_f2d>
 80017ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017b2:	f7fe ffb1 	bl	8000718 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4640      	mov	r0, r8
 80017bc:	4649      	mov	r1, r9
 80017be:	f7fe fdf3 	bl	80003a8 <__aeabi_dsub>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4650      	mov	r0, sl
 80017c8:	4659      	mov	r1, fp
 80017ca:	f7fe ffa5 	bl	8000718 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017da:	f7ff f8c7 	bl	800096c <__aeabi_ddiv>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fddf 	bl	80003a8 <__aeabi_dsub>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff fa41 	bl	8000c78 <__aeabi_d2iz>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  pwm[2] =  speed_rotate - (speed_run * sqrt(2)) * (alpha[2] - alpha[1] * theta[1]) / gama[1];
 80017fc:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <_Z14move_directionssssm+0x524>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe ff1e 	bl	8000644 <__aeabi_i2d>
 8001808:	4604      	mov	r4, r0
 800180a:	460d      	mov	r5, r1
 800180c:	4b34      	ldr	r3, [pc, #208]	@ (80018e0 <_Z14move_directionssssm+0x528>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe ff16 	bl	8000644 <__aeabi_i2d>
 8001818:	4680      	mov	r8, r0
 800181a:	4689      	mov	r9, r1
 800181c:	2002      	movs	r0, #2
 800181e:	f000 fa2b 	bl	8001c78 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4640      	mov	r0, r8
 8001828:	4649      	mov	r1, r9
 800182a:	f7fe ff75 	bl	8000718 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4692      	mov	sl, r2
 8001834:	469b      	mov	fp, r3
 8001836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe ff15 	bl	8000668 <__aeabi_f2d>
 800183e:	4680      	mov	r8, r0
 8001840:	4689      	mov	r9, r1
 8001842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe ff0f 	bl	8000668 <__aeabi_f2d>
 800184a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800184e:	f7fe ff63 	bl	8000718 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4640      	mov	r0, r8
 8001858:	4649      	mov	r1, r9
 800185a:	f7fe fda5 	bl	80003a8 <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4650      	mov	r0, sl
 8001864:	4659      	mov	r1, fp
 8001866:	f7fe ff57 	bl	8000718 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001876:	f7ff f879 	bl	800096c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4620      	mov	r0, r4
 8001880:	4629      	mov	r1, r5
 8001882:	f7fe fd91 	bl	80003a8 <__aeabi_dsub>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f9f3 	bl	8000c78 <__aeabi_d2iz>
 8001892:	4603      	mov	r3, r0
 8001894:	b21b      	sxth	r3, r3
 8001896:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

  run_dc(0,pwm[0]);
 800189a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 800189e:	4619      	mov	r1, r3
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff fd55 	bl	8001350 <_Z6run_dchs>
  run_dc(1,pwm[1]);
 80018a6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80018aa:	4619      	mov	r1, r3
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff fd4f 	bl	8001350 <_Z6run_dchs>
  run_dc(2,pwm[2]);
 80018b2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80018b6:	4619      	mov	r1, r3
 80018b8:	2002      	movs	r0, #2
 80018ba:	f7ff fd49 	bl	8001350 <_Z6run_dchs>
  run_dc(3,pwm[3]);
 80018be:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80018c2:	4619      	mov	r1, r3
 80018c4:	2003      	movs	r0, #3
 80018c6:	f7ff fd43 	bl	8001350 <_Z6run_dchs>

  return speed_run;
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <_Z14move_directionssssm+0x528>)
 80018cc:	f9b3 3000 	ldrsh.w	r3, [r3]

}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3748      	adds	r7, #72	@ 0x48
 80018d4:	46bd      	mov	sp, r7
 80018d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018da:	bf00      	nop
 80018dc:	2000020e 	.word	0x2000020e
 80018e0:	2000020c 	.word	0x2000020c

080018e4 <_Z8rot_lefts>:

void rot_left(int16_t speed){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
	DC[0].quaythuan(speed);
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	4619      	mov	r1, r3
 80018f4:	480c      	ldr	r0, [pc, #48]	@ (8001928 <_Z8rot_lefts+0x44>)
 80018f6:	f7ff fb8b 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
	DC[1].quaythuan(speed);
 80018fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fe:	4619      	mov	r1, r3
 8001900:	480a      	ldr	r0, [pc, #40]	@ (800192c <_Z8rot_lefts+0x48>)
 8001902:	f7ff fb85 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
	DC[2].quaythuan(speed);
 8001906:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190a:	4619      	mov	r1, r3
 800190c:	4808      	ldr	r0, [pc, #32]	@ (8001930 <_Z8rot_lefts+0x4c>)
 800190e:	f7ff fb7f 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
	DC[3].quaythuan(speed);
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	4619      	mov	r1, r3
 8001918:	4806      	ldr	r0, [pc, #24]	@ (8001934 <_Z8rot_lefts+0x50>)
 800191a:	f7ff fb79 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000684 	.word	0x20000684
 800192c:	200006a0 	.word	0x200006a0
 8001930:	200006bc 	.word	0x200006bc
 8001934:	200006d8 	.word	0x200006d8

08001938 <_Z9rot_rights>:

void rot_right(int16_t speed){
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	DC[0].quaynghich(speed);
 8001942:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	@ (800197c <_Z9rot_rights+0x44>)
 800194a:	f7ff fb91 	bl	8001070 <_ZN9Motor_PID10quaynghichEs>
	DC[1].quaynghich(speed);
 800194e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001952:	4619      	mov	r1, r3
 8001954:	480a      	ldr	r0, [pc, #40]	@ (8001980 <_Z9rot_rights+0x48>)
 8001956:	f7ff fb8b 	bl	8001070 <_ZN9Motor_PID10quaynghichEs>
	DC[2].quaynghich(speed);
 800195a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800195e:	4619      	mov	r1, r3
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <_Z9rot_rights+0x4c>)
 8001962:	f7ff fb85 	bl	8001070 <_ZN9Motor_PID10quaynghichEs>
	DC[3].quaynghich(speed);
 8001966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196a:	4619      	mov	r1, r3
 800196c:	4806      	ldr	r0, [pc, #24]	@ (8001988 <_Z9rot_rights+0x50>)
 800196e:	f7ff fb7f 	bl	8001070 <_ZN9Motor_PID10quaynghichEs>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000684 	.word	0x20000684
 8001980:	200006a0 	.word	0x200006a0
 8001984:	200006bc 	.word	0x200006bc
 8001988:	200006d8 	.word	0x200006d8

0800198c <_Z4stopv>:

void stop(){
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	DC[0].quaythuan(0);
 8001990:	2100      	movs	r1, #0
 8001992:	4808      	ldr	r0, [pc, #32]	@ (80019b4 <_Z4stopv+0x28>)
 8001994:	f7ff fb3c 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
	DC[1].quaythuan(0);
 8001998:	2100      	movs	r1, #0
 800199a:	4807      	ldr	r0, [pc, #28]	@ (80019b8 <_Z4stopv+0x2c>)
 800199c:	f7ff fb38 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
	DC[2].quaythuan(0);
 80019a0:	2100      	movs	r1, #0
 80019a2:	4806      	ldr	r0, [pc, #24]	@ (80019bc <_Z4stopv+0x30>)
 80019a4:	f7ff fb34 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
	DC[3].quaythuan(0);  // muốn phanh điền tham trị 2
 80019a8:	2100      	movs	r1, #0
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <_Z4stopv+0x34>)
 80019ac:	f7ff fb30 	bl	8001010 <_ZN9Motor_PID9quaythuanEs>
}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000684 	.word	0x20000684
 80019b8:	200006a0 	.word	0x200006a0
 80019bc:	200006bc 	.word	0x200006bc
 80019c0:	200006d8 	.word	0x200006d8
 80019c4:	00000000 	.word	0x00000000

080019c8 <_Z9run_basicv>:




const uint8_t err_num = 100; // tùy tay cầm có thể hiệu chỉnh
void run_basic(){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af02      	add	r7, sp, #8

  static int16_t ag_rot = 0;
  static int16_t ag_tt = 0;

  if(abs(LX) >= err_num || abs(LY) >= err_num || abs(RY) >= err_num || abs(RX) >= err_num){
 80019ce:	4ba2      	ldr	r3, [pc, #648]	@ (8001c58 <_Z9run_basicv+0x290>)
 80019d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bfb8      	it	lt
 80019d8:	425b      	neglt	r3, r3
 80019da:	b29b      	uxth	r3, r3
 80019dc:	2b63      	cmp	r3, #99	@ 0x63
 80019de:	d81a      	bhi.n	8001a16 <_Z9run_basicv+0x4e>
 80019e0:	4b9e      	ldr	r3, [pc, #632]	@ (8001c5c <_Z9run_basicv+0x294>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bfb8      	it	lt
 80019ea:	425b      	neglt	r3, r3
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2b63      	cmp	r3, #99	@ 0x63
 80019f0:	d811      	bhi.n	8001a16 <_Z9run_basicv+0x4e>
 80019f2:	4b9b      	ldr	r3, [pc, #620]	@ (8001c60 <_Z9run_basicv+0x298>)
 80019f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bfb8      	it	lt
 80019fc:	425b      	neglt	r3, r3
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b63      	cmp	r3, #99	@ 0x63
 8001a02:	d808      	bhi.n	8001a16 <_Z9run_basicv+0x4e>
 8001a04:	4b97      	ldr	r3, [pc, #604]	@ (8001c64 <_Z9run_basicv+0x29c>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bfb8      	it	lt
 8001a0e:	425b      	neglt	r3, r3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	2b63      	cmp	r3, #99	@ 0x63
 8001a14:	d974      	bls.n	8001b00 <_Z9run_basicv+0x138>

    if( abs(LX) >= err_num || abs(LY) >= err_num){
 8001a16:	4b90      	ldr	r3, [pc, #576]	@ (8001c58 <_Z9run_basicv+0x290>)
 8001a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	bfb8      	it	lt
 8001a20:	425b      	neglt	r3, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b63      	cmp	r3, #99	@ 0x63
 8001a26:	d808      	bhi.n	8001a3a <_Z9run_basicv+0x72>
 8001a28:	4b8c      	ldr	r3, [pc, #560]	@ (8001c5c <_Z9run_basicv+0x294>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bfb8      	it	lt
 8001a32:	425b      	neglt	r3, r3
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2b63      	cmp	r3, #99	@ 0x63
 8001a38:	d921      	bls.n	8001a7e <_Z9run_basicv+0xb6>
        ag_tt = atan2(LX,LY) * RAD_TO_DEG * 10;
 8001a3a:	4b87      	ldr	r3, [pc, #540]	@ (8001c58 <_Z9run_basicv+0x290>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	4a86      	ldr	r2, [pc, #536]	@ (8001c5c <_Z9run_basicv+0x294>)
 8001a42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 f929 	bl	8001ca0 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a4e:	a380      	add	r3, pc, #512	@ (adr r3, 8001c50 <_Z9run_basicv+0x288>)
 8001a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a54:	f7fe fe60 	bl	8000718 <__aeabi_dmul>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b80      	ldr	r3, [pc, #512]	@ (8001c68 <_Z9run_basicv+0x2a0>)
 8001a66:	f7fe fe57 	bl	8000718 <__aeabi_dmul>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f7ff f901 	bl	8000c78 <__aeabi_d2iz>
 8001a76:	4603      	mov	r3, r0
 8001a78:	b21a      	sxth	r2, r3
 8001a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c6c <_Z9run_basicv+0x2a4>)
 8001a7c:	801a      	strh	r2, [r3, #0]
    }

    if(abs(RY) >= err_num || abs(RX) >= err_num){
 8001a7e:	4b78      	ldr	r3, [pc, #480]	@ (8001c60 <_Z9run_basicv+0x298>)
 8001a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bfb8      	it	lt
 8001a88:	425b      	neglt	r3, r3
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	2b63      	cmp	r3, #99	@ 0x63
 8001a8e:	d808      	bhi.n	8001aa2 <_Z9run_basicv+0xda>
 8001a90:	4b74      	ldr	r3, [pc, #464]	@ (8001c64 <_Z9run_basicv+0x29c>)
 8001a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bfb8      	it	lt
 8001a9a:	425b      	neglt	r3, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	2b63      	cmp	r3, #99	@ 0x63
 8001aa0:	d921      	bls.n	8001ae6 <_Z9run_basicv+0x11e>
      ag_rot = atan2(RX,RY) * RAD_TO_DEG * 10;
 8001aa2:	4b70      	ldr	r3, [pc, #448]	@ (8001c64 <_Z9run_basicv+0x29c>)
 8001aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa8:	4a6d      	ldr	r2, [pc, #436]	@ (8001c60 <_Z9run_basicv+0x298>)
 8001aaa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f8f5 	bl	8001ca0 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ab6:	a366      	add	r3, pc, #408	@ (adr r3, 8001c50 <_Z9run_basicv+0x288>)
 8001ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001abc:	f7fe fe2c 	bl	8000718 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	4b66      	ldr	r3, [pc, #408]	@ (8001c68 <_Z9run_basicv+0x2a0>)
 8001ace:	f7fe fe23 	bl	8000718 <__aeabi_dmul>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff f8cd 	bl	8000c78 <__aeabi_d2iz>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	4b63      	ldr	r3, [pc, #396]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001ae4:	801a      	strh	r2, [r3, #0]
    }
    move_direction(ag_rot,50,ag_tt,80,8);
 8001ae6:	4b62      	ldr	r3, [pc, #392]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001ae8:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001aec:	4b5f      	ldr	r3, [pc, #380]	@ (8001c6c <_Z9run_basicv+0x2a4>)
 8001aee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001af2:	2308      	movs	r3, #8
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2350      	movs	r3, #80	@ 0x50
 8001af8:	2132      	movs	r1, #50	@ 0x32
 8001afa:	f7ff fc5d 	bl	80013b8 <_Z14move_directionssssm>
	   ag_rot = compass();
	   // phanh or dung
	   if(st == 0) stop();
   }
  }
}
 8001afe:	e0a0      	b.n	8001c42 <_Z9run_basicv+0x27a>
  if(button_up){
 8001b00:	4b5c      	ldr	r3, [pc, #368]	@ (8001c74 <_Z9run_basicv+0x2ac>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d011      	beq.n	8001b30 <_Z9run_basicv+0x168>
    move_direction(get_angle(ag_rot),50,ag_rot,80,8); // dùng như hàm move
 8001b0c:	4b58      	ldr	r3, [pc, #352]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fb3a 	bl	800118c <_Z9get_angles>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4b54      	ldr	r3, [pc, #336]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001b1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001b22:	2308      	movs	r3, #8
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2350      	movs	r3, #80	@ 0x50
 8001b28:	2132      	movs	r1, #50	@ 0x32
 8001b2a:	f7ff fc45 	bl	80013b8 <_Z14move_directionssssm>
}
 8001b2e:	e088      	b.n	8001c42 <_Z9run_basicv+0x27a>
  }else if(button_down){
 8001b30:	4b50      	ldr	r3, [pc, #320]	@ (8001c74 <_Z9run_basicv+0x2ac>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <_Z9run_basicv+0x1a2>
    move_direction(get_angle(ag_rot),50,ag_rot + 1800,80,8);
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fb22 	bl	800118c <_Z9get_angles>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4b48      	ldr	r3, [pc, #288]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	f503 63e1 	add.w	r3, r3, #1800	@ 0x708
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2350      	movs	r3, #80	@ 0x50
 8001b62:	2132      	movs	r1, #50	@ 0x32
 8001b64:	f7ff fc28 	bl	80013b8 <_Z14move_directionssssm>
}
 8001b68:	e06b      	b.n	8001c42 <_Z9run_basicv+0x27a>
  }else if(button_left){
 8001b6a:	4b42      	ldr	r3, [pc, #264]	@ (8001c74 <_Z9run_basicv+0x2ac>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d016      	beq.n	8001ba4 <_Z9run_basicv+0x1dc>
    move_direction(get_angle(ag_rot),50,ag_rot + 900,80,8);
 8001b76:	4b3e      	ldr	r3, [pc, #248]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fb05 	bl	800118c <_Z9get_angles>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	4b3a      	ldr	r3, [pc, #232]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	2308      	movs	r3, #8
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2350      	movs	r3, #80	@ 0x50
 8001b9c:	2132      	movs	r1, #50	@ 0x32
 8001b9e:	f7ff fc0b 	bl	80013b8 <_Z14move_directionssssm>
}
 8001ba2:	e04e      	b.n	8001c42 <_Z9run_basicv+0x27a>
  }else if(button_right){
 8001ba4:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <_Z9run_basicv+0x2ac>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d016      	beq.n	8001bde <_Z9run_basicv+0x216>
    move_direction(get_angle(ag_rot),50,ag_rot - 900,80,8);
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fae8 	bl	800118c <_Z9get_angles>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	2350      	movs	r3, #80	@ 0x50
 8001bd6:	2132      	movs	r1, #50	@ 0x32
 8001bd8:	f7ff fbee 	bl	80013b8 <_Z14move_directionssssm>
}
 8001bdc:	e031      	b.n	8001c42 <_Z9run_basicv+0x27a>
  }else if(button_r1){
 8001bde:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <_Z9run_basicv+0x2ac>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	f003 0320 	and.w	r3, r3, #32
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <_Z9run_basicv+0x22a>
	rot_right(50);
 8001bea:	2032      	movs	r0, #50	@ 0x32
 8001bec:	f7ff fea4 	bl	8001938 <_Z9rot_rights>
}
 8001bf0:	e027      	b.n	8001c42 <_Z9run_basicv+0x27a>
  }else if(button_l1){
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <_Z9run_basicv+0x2ac>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	f003 0310 	and.w	r3, r3, #16
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <_Z9run_basicv+0x23e>
	rot_left(50);
 8001bfe:	2032      	movs	r0, #50	@ 0x32
 8001c00:	f7ff fe70 	bl	80018e4 <_Z8rot_lefts>
}
 8001c04:	e01d      	b.n	8001c42 <_Z9run_basicv+0x27a>
   int16_t st = move_direction(ag_rot, 50, ag_tt, 0, 6);
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001c08:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <_Z9run_basicv+0x2a4>)
 8001c0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c12:	2306      	movs	r3, #6
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	2132      	movs	r1, #50	@ 0x32
 8001c1a:	f7ff fbcd 	bl	80013b8 <_Z14move_directionssssm>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
   if(st <= 20){ // dừng mềm
 8001c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c26:	2b14      	cmp	r3, #20
 8001c28:	dc0b      	bgt.n	8001c42 <_Z9run_basicv+0x27a>
	   ag_rot = compass();
 8001c2a:	f003 fae3 	bl	80051f4 <_Z7compassv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <_Z9run_basicv+0x2a8>)
 8001c34:	801a      	strh	r2, [r3, #0]
	   if(st == 0) stop();
 8001c36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <_Z9run_basicv+0x27a>
 8001c3e:	f7ff fea5 	bl	800198c <_Z4stopv>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	1a63c1f8 	.word	0x1a63c1f8
 8001c54:	404ca5dc 	.word	0x404ca5dc
 8001c58:	2000034e 	.word	0x2000034e
 8001c5c:	20000350 	.word	0x20000350
 8001c60:	20000354 	.word	0x20000354
 8001c64:	20000352 	.word	0x20000352
 8001c68:	40240000 	.word	0x40240000
 8001c6c:	20000212 	.word	0x20000212
 8001c70:	20000210 	.word	0x20000210
 8001c74:	2000034c 	.word	0x2000034c

08001c78 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7fe fcdf 	bl	8000644 <__aeabi_i2d>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f007 fcef 	bl	8009670 <sqrt>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4610      	mov	r0, r2
 8001c98:	4619      	mov	r1, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZSt5atan2IssEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 8001ca0:	b5b0      	push	{r4, r5, r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	460a      	mov	r2, r1
 8001caa:	80fb      	strh	r3, [r7, #6]
 8001cac:	4613      	mov	r3, r2
 8001cae:	80bb      	strh	r3, [r7, #4]
      return atan2(__type(__y), __type(__x));
 8001cb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fcc5 	bl	8000644 <__aeabi_i2d>
 8001cba:	4604      	mov	r4, r0
 8001cbc:	460d      	mov	r5, r1
 8001cbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fcbe 	bl	8000644 <__aeabi_i2d>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f007 fccc 	bl	800966c <atan2>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
    }
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ce4 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef>:
 *      Author: Admin
 */

#include "GPIO_Master.h"

void ENABLE_GPIO_CLK(GPIO_TypeDef* GPIO){
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	if(GPIO == GPIOA)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a23      	ldr	r2, [pc, #140]	@ (8001d7c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x98>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d10c      	bne.n	8001d0e <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x2a>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf4:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a21      	ldr	r2, [pc, #132]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697b      	ldr	r3, [r7, #20]
	}else if(GPIO == GPIOD)
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();

	}
}
 8001d0c:	e031      	b.n	8001d72 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOB)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1c      	ldr	r2, [pc, #112]	@ (8001d84 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10c      	bne.n	8001d30 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x4c>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	4a19      	ldr	r2, [pc, #100]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d1c:	f043 0308 	orr.w	r3, r3, #8
 8001d20:	6193      	str	r3, [r2, #24]
 8001d22:	4b17      	ldr	r3, [pc, #92]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
}
 8001d2e:	e020      	b.n	8001d72 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOC){
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a15      	ldr	r2, [pc, #84]	@ (8001d88 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa4>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d10c      	bne.n	8001d52 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x6e>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001d38:	4b11      	ldr	r3, [pc, #68]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	6193      	str	r3, [r2, #24]
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0310 	and.w	r3, r3, #16
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	e00f      	b.n	8001d72 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOD)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a0d      	ldr	r2, [pc, #52]	@ (8001d8c <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0xa8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x8e>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	4a08      	ldr	r2, [pc, #32]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	6193      	str	r3, [r2, #24]
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef+0x9c>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
}
 8001d72:	bf00      	nop
 8001d74:	371c      	adds	r7, #28
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	40010800 	.word	0x40010800
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40010c00 	.word	0x40010c00
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	40011400 	.word	0x40011400

08001d90 <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>:

void GPIO_OUT_Init(GPIO_TypeDef* GPIO,uint32_t GPIO_PIN,uint32_t SPEED_FREQ){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]

	ENABLE_GPIO_CLK(GPIO);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff ffa1 	bl	8001ce4 <_Z15ENABLE_GPIO_CLKP12GPIO_TypeDef>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = GPIO_PIN;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = SPEED_FREQ;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIO, &GPIO_InitStruct);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f004 ffb2 	bl	8006d30 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO, GPIO_PIN, GPIO_PIN_RESET);
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f005 f93f 	bl	8007058 <HAL_GPIO_WritePin>

}
 8001dda:	bf00      	nop
 8001ddc:	3720      	adds	r7, #32
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	6039      	str	r1, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <_ZNKSt4hashIbEclEb>:
      operator()(_Tp __val) const noexcept              \
      { return static_cast<size_t>(__val); }            \
    };

  /// Explicit specialization for bool.
  _Cxx_hashtable_define_trivial_hash(bool)
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <_ZNKSt4hashItEclEt>:

  /// Explicit specialization for long long.
  _Cxx_hashtable_define_trivial_hash(long long)

  /// Explicit specialization for unsigned short.
  _Cxx_hashtable_define_trivial_hash(unsigned short)
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	887b      	ldrh	r3, [r7, #2]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <_ZNSt8__detail15_Hash_node_baseC1Ev>:
   */
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;

    _Hash_node_base() noexcept : _M_nxt() { }
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bc80      	pop	{r7}
 8001e40:	4770      	bx	lr

08001e42 <_ZNKSt8__detail18_Mod_range_hashingclEjj>:
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;

    result_type
    operator()(first_argument_type __num,
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
	       second_argument_type __den) const noexcept
    { return __num % __den; }
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	fb01 f202 	mul.w	r2, r1, r2
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>:
  /// smallest prime that keeps the load factor small enough.
  struct _Prime_rehash_policy
  {
    using __has_load_factor = true_type;

    _Prime_rehash_policy(float __z = 1.0) noexcept
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
    : _M_max_load_factor(__z), _M_next_resize(0) { }
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>:
		   std::size_t __n_ins) const;

    typedef std::size_t _State;

    _State
    _M_state() const
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
    { return _M_next_resize; }
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <_ZSt3minIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d201      	bcs.n	8001eba <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	e000      	b.n	8001ebc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8001eba:	687b      	ldr	r3, [r7, #4]
    }
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <_ZN16GPIO_TIM_MappingC1Ev>:
    TIM_TypeDef *TIMx;
    uint32_t TIM_CHANNEL;
    TIM_HandleTypeDef htim;
    bool status;

    GPIO_TIM_Mapping() :GPIO(nullptr), Pin(0),TIMx(nullptr), TIM_CHANNEL(0), status(false) {
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    	Error_Handler();
 8001eee:	f003 ff75 	bl	8005ddc <Error_Handler>
    }
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>:
    GPIO_TIM_Mapping(GPIO_TypeDef* GPIO, uint32_t Pin, TIM_TypeDef* TIMx, uint32_t TIM_CHANNEL,bool status)
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
    : GPIO(GPIO), Pin(Pin), TIMx(TIMx), TIM_CHANNEL(TIM_CHANNEL),status(status) {}
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	7f3a      	ldrb	r2, [r7, #28]
 8001f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <_ZNK16GPIO_TIM_MappingeqERKS_>:

    // Để bảng băm làm việc với class, bạn cần cung cấp operator== và một hàm băm (hash function).
    bool operator==(const GPIO_TIM_Mapping & other) const {
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
        return (GPIO == other.GPIO && Pin == other.Pin);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <_ZNK16GPIO_TIM_MappingeqERKS_+0x26>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d101      	bne.n	8001f5c <_ZNK16GPIO_TIM_MappingeqERKS_+0x26>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <_ZNK16GPIO_TIM_MappingeqERKS_+0x28>
 8001f5c:	2300      	movs	r3, #0
    }
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <_ZNK11GPIOPinHashclERK16GPIO_TIM_Mapping>:
};



struct GPIOPinHash {
    size_t operator()(const GPIO_TIM_Mapping& mapping) const {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
        // Sử dụng địa chỉ GPIO và Pin để tạo ra một giá trị hash
        return (reinterpret_cast<size_t>(mapping.GPIO) ^ std::hash<uint16_t>()(mapping.Pin) ^ std::hash<bool>()(mapping.status));
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461c      	mov	r4, r3
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	f107 0308 	add.w	r3, r7, #8
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff43 	bl	8001e10 <_ZNKSt4hashItEclEt>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	405c      	eors	r4, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff ff2c 	bl	8001df8 <_ZNKSt4hashIbEclEb>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4063      	eors	r3, r4
    }
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}

08001fac <_ZNSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EEC1Ev>:
    protected:
      typedef std::size_t 				__hash_code;

      // We need the default constructor for the local iterators and _Hashtable
      // default constructor.
      _Hash_code_base() = default;
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fdae 	bl	8002b16 <_ZNSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EEC1Ev>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
		     const _Hash_node_code_cache<true>& __rhn)
      { return __lhn._M_hash_code == __rhn._M_hash_code; }

    protected:
      _Hashtable_base() = default;
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffed 	bl	8001fac <_ZNSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EEC1Ev>
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fda9 	bl	8002b2a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EEC1Ev>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EED1Ev>:
    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fdb3 	bl	8002b56 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEED1Ev>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEEC1Ev>:
      using __buckets_alloc_type =
	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
      using __buckets_ptr = __node_base_ptr*;

      _Hashtable_alloc() = default;
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fd9b 	bl	8002b3e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EEC1Ev>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEED1Ev>:
    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffe1 	bl	8001fe2 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EED1Ev>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>:
		   const _Hash&, const _Equal&, const allocator_type&,
		   false_type __uks);

    public:
      // Constructor, destructor, assignment, swap
      _Hashtable() = default;
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffc6 	bl	8001fc4 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffde 	bl	8001ffa <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEEC1Ev>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f103 0218 	add.w	r2, r3, #24
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3308      	adds	r3, #8
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fee8 	bl	8001e28 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3310      	adds	r3, #16
 8002062:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fefe 	bl	8001e68 <_ZNSt8__detail20_Prime_rehash_policyC1Ef>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEEC1Ev>:
#endif

      //construct/destroy/copy

      /// Default constructor.
      unordered_multimap() = default;
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ffcf 	bl	800202a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEEC1Ev>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <_Z14Timer_IsEnableP11TIM_TypeDef>:



std::unordered_multimap<GPIO_TIM_Mapping, GPIO_TIM_Mapping, GPIOPinHash> gpioMap;

int Timer_IsEnable(TIM_TypeDef *TIMx) {
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
	return (TIMx->CR1 & TIM_CR1_CEN) ? 1 : 0;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <_Z18Timer_GetPrescalerP11TIM_TypeDef>:

uint16_t Timer_GetPrescaler(TIM_TypeDef *TIMx) {
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

	return TIMx->PSC;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	b29b      	uxth	r3, r3
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <_Z15Timer_GetPeriodP11TIM_TypeDef>:

uint16_t Timer_GetPeriod(TIM_TypeDef *TIMx) {
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

	return TIMx->ARR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d4:	b29b      	uxth	r3, r3
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <_Z15Enable_RCC_TIMxP11TIM_TypeDef>:

void Enable_RCC_TIMx(TIM_TypeDef* TIMx){
 80020e0:	b480      	push	{r7}
 80020e2:	b08b      	sub	sp, #44	@ 0x2c
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	if(TIMx == TIM1){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a45      	ldr	r2, [pc, #276]	@ (8002200 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x120>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d10c      	bne.n	800210a <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x2a>
		__HAL_RCC_TIM1_CLK_ENABLE();
 80020f0:	4b44      	ldr	r3, [pc, #272]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a43      	ldr	r2, [pc, #268]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80020f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b41      	ldr	r3, [pc, #260]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
		__HAL_RCC_TIM7_CLK_ENABLE();

	}else if(TIMx == TIM8){
		__HAL_RCC_TIM8_CLK_ENABLE();
	}
}
 8002108:	e075      	b.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
	}else if(TIMx == TIM2){
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002110:	d10c      	bne.n	800212c <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x4c>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002112:	4b3c      	ldr	r3, [pc, #240]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a3b      	ldr	r2, [pc, #236]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	6a3b      	ldr	r3, [r7, #32]
}
 800212a:	e064      	b.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
	}else if(TIMx == TIM3){
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a36      	ldr	r2, [pc, #216]	@ (8002208 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x128>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d10c      	bne.n	800214e <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x6e>
		__HAL_RCC_TIM3_CLK_ENABLE();
 8002134:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	4a32      	ldr	r2, [pc, #200]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	61d3      	str	r3, [r2, #28]
 8002140:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	69fb      	ldr	r3, [r7, #28]
}
 800214c:	e053      	b.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
	}else if(TIMx == TIM4){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2e      	ldr	r2, [pc, #184]	@ (800220c <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x12c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10c      	bne.n	8002170 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x90>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	4a2a      	ldr	r2, [pc, #168]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	61d3      	str	r3, [r2, #28]
 8002162:	4b28      	ldr	r3, [pc, #160]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]
}
 800216e:	e042      	b.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
	}else if(TIMx == TIM5){
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a27      	ldr	r2, [pc, #156]	@ (8002210 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x130>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d10c      	bne.n	8002192 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0xb2>
		__HAL_RCC_TIM5_CLK_ENABLE();
 8002178:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4a21      	ldr	r2, [pc, #132]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	61d3      	str	r3, [r2, #28]
 8002184:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	697b      	ldr	r3, [r7, #20]
}
 8002190:	e031      	b.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
	}else if(TIMx == TIM6){
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a1f      	ldr	r2, [pc, #124]	@ (8002214 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x134>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10c      	bne.n	80021b4 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0xd4>
		__HAL_RCC_TIM6_CLK_ENABLE();
 800219a:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021a0:	f043 0310 	orr.w	r3, r3, #16
 80021a4:	61d3      	str	r3, [r2, #28]
 80021a6:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
}
 80021b2:	e020      	b.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
	}else if(TIMx == TIM7){
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a18      	ldr	r2, [pc, #96]	@ (8002218 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x138>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10c      	bne.n	80021d6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0xf6>
		__HAL_RCC_TIM7_CLK_ENABLE();
 80021bc:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a10      	ldr	r2, [pc, #64]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021c2:	f043 0320 	orr.w	r3, r3, #32
 80021c6:	61d3      	str	r3, [r2, #28]
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	e00f      	b.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
	}else if(TIMx == TIM8){
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a10      	ldr	r2, [pc, #64]	@ (800221c <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x13c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10b      	bne.n	80021f6 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x116>
		__HAL_RCC_TIM8_CLK_ENABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	4a08      	ldr	r2, [pc, #32]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021e8:	6193      	str	r3, [r2, #24]
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <_Z15Enable_RCC_TIMxP11TIM_TypeDef+0x124>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
}
 80021f6:	bf00      	nop
 80021f8:	372c      	adds	r7, #44	@ 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	40012c00 	.word	0x40012c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40000400 	.word	0x40000400
 800220c:	40000800 	.word	0x40000800
 8002210:	40000c00 	.word	0x40000c00
 8002214:	40001000 	.word	0x40001000
 8002218:	40001400 	.word	0x40001400
 800221c:	40013400 	.word	0x40013400

08002220 <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef>:


void ENABLE_GPIO_CLOCK(GPIO_TypeDef* GPIO){
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	if(GPIO == GPIOA)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a23      	ldr	r2, [pc, #140]	@ (80022b8 <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x98>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10c      	bne.n	800224a <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x2a>
	{
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a21      	ldr	r2, [pc, #132]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002236:	f043 0304 	orr.w	r3, r3, #4
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	697b      	ldr	r3, [r7, #20]
	{
		__HAL_RCC_GPIOD_CLK_ENABLE();

	}

}
 8002248:	e031      	b.n	80022ae <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOB)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0xa0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10c      	bne.n	800226c <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x4c>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	4a19      	ldr	r2, [pc, #100]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6193      	str	r3, [r2, #24]
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
}
 800226a:	e020      	b.n	80022ae <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOC){
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a15      	ldr	r2, [pc, #84]	@ (80022c4 <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0xa4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d10c      	bne.n	800228e <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x6e>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	4a10      	ldr	r2, [pc, #64]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 800227a:	f043 0310 	orr.w	r3, r3, #16
 800227e:	6193      	str	r3, [r2, #24]
 8002280:	4b0e      	ldr	r3, [pc, #56]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	e00f      	b.n	80022ae <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x8e>
	}else if(GPIO == GPIOD)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0xa8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10b      	bne.n	80022ae <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x8e>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 800229c:	f043 0320 	orr.w	r3, r3, #32
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef+0x9c>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
}
 80022ae:	bf00      	nop
 80022b0:	371c      	adds	r7, #28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40010800 	.word	0x40010800
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40010c00 	.word	0x40010c00
 80022c4:	40011000 	.word	0x40011000
 80022c8:	40011400 	.word	0x40011400

080022cc <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt>:
void TIMER_PWM_Init(GPIO_TypeDef *GPIO, uint16_t Pin, TIM_HandleTypeDef *htim,
        TIM_TypeDef *TIMx, uint32_t timerChannel, uint16_t Prescaler,
        uint16_t Period, uint16_t Pulse) // cấu hình timer
		{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b09a      	sub	sp, #104	@ 0x68
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	460b      	mov	r3, r1
 80022da:	817b      	strh	r3, [r7, #10]
	// Bật clock
	Enable_RCC_TIMx(TIMx);
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	f7ff feff 	bl	80020e0 <_Z15Enable_RCC_TIMxP11TIM_TypeDef>
	ENABLE_GPIO_CLOCK(GPIO);
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff ff9c 	bl	8002220 <_Z17ENABLE_GPIO_CLOCKP12GPIO_TypeDef>


	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80022f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	2220      	movs	r2, #32
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f009 fb07 	bl	800b922 <memset>

	htim->Instance = TIMx;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	601a      	str	r2, [r3, #0]
	htim->Init.Prescaler = Prescaler;
 800231a:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	605a      	str	r2, [r3, #4]
	htim->Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
	htim->Init.Period = Period;
 8002328:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
	htim->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1; // không chia tần số  DIV2 chia 2 DIV4 chia cho 4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]


	htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]

	if (HAL_TIM_PWM_Init(htim) != HAL_OK) {
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f005 fb02 	bl	8007946 <HAL_TIM_PWM_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x8a>

		Error_Handler();
 8002352:	f003 fd43 	bl	8005ddc <Error_Handler>
	}// begin


	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002356:	2300      	movs	r3, #0
 8002358:	65fb      	str	r3, [r7, #92]	@ 0x5c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig)!= HAL_OK) {
 800235e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f006 f95d 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0xb2>

		Error_Handler();
 800237a:	f003 fd2f 	bl	8005ddc <Error_Handler>
	}

	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237e:	2360      	movs	r3, #96	@ 0x60
 8002380:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.Pulse = Pulse;
 8002382:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8002386:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002388:	2300      	movs	r3, #0
 800238a:	64bb      	str	r3, [r7, #72]	@ 0x48
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	653b      	str	r3, [r7, #80]	@ 0x50

	if(TIMx == TIM1 || TIMx == TIM8){
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4a41      	ldr	r2, [pc, #260]	@ (8002498 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1cc>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0xd4>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	4a40      	ldr	r2, [pc, #256]	@ (800249c <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1d0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d105      	bne.n	80023ac <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0xe0>
		sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a0:	2300      	movs	r3, #0
 80023a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	657b      	str	r3, [r7, #84]	@ 0x54
		sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	65bb      	str	r3, [r7, #88]	@ 0x58
	}

	if (HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, timerChannel) != HAL_OK) {
 80023ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023b0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80023b2:	4619      	mov	r1, r3
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f005 fdf9 	bl	8007fac <HAL_TIM_PWM_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x102>

		Error_Handler();
 80023ca:	f003 fd07 	bl	8005ddc <Error_Handler>
	}


	if(TIMx == TIM1 || TIMx == TIM8){
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	4a31      	ldr	r2, [pc, #196]	@ (8002498 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1cc>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x112>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	4a30      	ldr	r2, [pc, #192]	@ (800249c <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1d0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d11e      	bne.n	800241c <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x150>
	    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
		sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
		sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		sBreakDeadTimeConfig.DeadTime = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
		sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	633b      	str	r3, [r7, #48]	@ 0x30
		sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
		sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (HAL_TIMEx_ConfigBreakDeadTime(htim, &sBreakDeadTimeConfig) != HAL_OK)
 80023fc:	f107 0320 	add.w	r3, r7, #32
 8002400:	4619      	mov	r1, r3
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f006 f97a 	bl	80086fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	bf14      	ite	ne
 800240e:	2301      	movne	r3, #1
 8002410:	2300      	moveq	r3, #0
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x150>
		  {
			Error_Handler();
 8002418:	f003 fce0 	bl	8005ddc <Error_Handler>
		  }
	}


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0310 	add.w	r3, r7, #16
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = Pin;
 800242a:	897b      	ldrh	r3, [r7, #10]
 800242c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIO, &GPIO_InitStruct);
 800243a:	f107 0310 	add.w	r3, r7, #16
 800243e:	4619      	mov	r1, r3
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f004 fc75 	bl	8006d30 <HAL_GPIO_Init>

	if(TIMx == TIM3)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1d4>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d111      	bne.n	8002472 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1a6>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1d8>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	667b      	str	r3, [r7, #100]	@ 0x64
 8002454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002456:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800245a:	667b      	str	r3, [r7, #100]	@ 0x64
 800245c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800245e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002462:	667b      	str	r3, [r7, #100]	@ 0x64
 8002464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002466:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800246a:	667b      	str	r3, [r7, #100]	@ 0x64
 800246c:	4a0d      	ldr	r2, [pc, #52]	@ (80024a4 <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1d8>)
 800246e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002470:	6053      	str	r3, [r2, #4]

	if (HAL_TIM_PWM_Start(htim, timerChannel) != HAL_OK) {
 8002472:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f005 fabf 	bl	80079f8 <HAL_TIM_PWM_Start>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt+0x1c2>
		Error_Handler();
 800248a:	f003 fca7 	bl	8005ddc <Error_Handler>
	}
}
 800248e:	bf00      	nop
 8002490:	3768      	adds	r7, #104	@ 0x68
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40013400 	.word	0x40013400
 80024a0:	40000400 	.word	0x40000400
 80024a4:	40010000 	.word	0x40010000

080024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>:

// Khi cần thêm các ánh xạ
void AddMapping(GPIO_TypeDef* GPIO, uint16_t Pin, TIM_TypeDef* TIMx, uint32_t TIM_CHANNEL, bool status) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0b4      	sub	sp, #208	@ 0xd0
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	607a      	str	r2, [r7, #4]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	460b      	mov	r3, r1
 80024b6:	817b      	strh	r3, [r7, #10]
    gpioMap.emplace(GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status),
 80024b8:	897a      	ldrh	r2, [r7, #10]
 80024ba:	f107 0010 	add.w	r0, r7, #16
 80024be:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68f9      	ldr	r1, [r7, #12]
 80024cc:	f7ff fd16 	bl	8001efc <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
                    GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status));
 80024d0:	897a      	ldrh	r2, [r7, #10]
 80024d2:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80024d6:	f897 30d0 	ldrb.w	r3, [r7, #208]	@ 0xd0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	f7ff fd0a 	bl	8001efc <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
    gpioMap.emplace(GPIO_TIM_Mapping(GPIO, Pin, TIMx, TIM_CHANNEL,status),
 80024e8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	4619      	mov	r1, r3
 80024f2:	4803      	ldr	r0, [pc, #12]	@ (8002500 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb+0x58>)
 80024f4:	f000 fb4d 	bl	8002b92 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJS0_S0_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>
}
 80024f8:	bf00      	nop
 80024fa:	37c8      	adds	r7, #200	@ 0xc8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000214 	.word	0x20000214

08002504 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 fb69 	bl	8002be4 <_ZNSaI16GPIO_TIM_MappingED1Ev>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fb4c 	bl	8002bc4 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE12_Vector_implC1Ev>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ffeb 	bl	800251c <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EEC1Ev>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_Z15FindAllMappingsP12GPIO_TypeDeftb>:

// tìm tất cả ánh xạ phù hợp
std::vector<GPIO_TIM_Mapping> FindAllMappings(GPIO_TypeDef* GPIO, uint16_t GPIO_PIN, bool status) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b0a0      	sub	sp, #128	@ 0x80
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	4611      	mov	r1, r2
 800255c:	461a      	mov	r2, r3
 800255e:	460b      	mov	r3, r1
 8002560:	80fb      	strh	r3, [r7, #6]
 8002562:	4613      	mov	r3, r2
 8002564:	717b      	strb	r3, [r7, #5]
	std::vector<GPIO_TIM_Mapping> foundMappings;
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff ffe5 	bl	8002536 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EEC1Ev>

	auto range = gpioMap.equal_range(GPIO_TIM_Mapping(GPIO, GPIO_PIN, nullptr, 0, status));
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	f107 001c 	add.w	r0, r7, #28
 8002572:	797b      	ldrb	r3, [r7, #5]
 8002574:	9301      	str	r3, [sp, #4]
 8002576:	2300      	movs	r3, #0
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2300      	movs	r3, #0
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	f7ff fcbd 	bl	8001efc <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	f107 021c 	add.w	r2, r7, #28
 800258a:	4914      	ldr	r1, [pc, #80]	@ (80025dc <_Z15FindAllMappingsP12GPIO_TypeDeftb+0x8c>)
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fb6e 	bl	8002c6e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE11equal_rangeERS5_>

	for (auto it = range.first; it != range.second; ++it) {
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e00f      	b.n	80025b8 <_Z15FindAllMappingsP12GPIO_TypeDeftb+0x68>

		foundMappings.push_back(it->second);
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fb97 	bl	8002cd0 <_ZNKSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEptEv>
 80025a2:	4603      	mov	r3, r0
 80025a4:	335c      	adds	r3, #92	@ 0x5c
 80025a6:	4619      	mov	r1, r3
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fba0 	bl	8002cee <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE9push_backERKS0_>
	for (auto it = range.first; it != range.second; ++it) {
 80025ae:	f107 0310 	add.w	r3, r7, #16
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fb7f 	bl	8002cb6 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	1d1a      	adds	r2, r3, #4
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fb63 	bl	8002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e3      	bne.n	8002598 <_Z15FindAllMappingsP12GPIO_TypeDeftb+0x48>
	}

	return foundMappings;
 80025d0:	bf00      	nop
}
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	3778      	adds	r7, #120	@ 0x78
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000214 	.word	0x20000214

080025e0 <_Z11FindMappingP12GPIO_TypeDeftb>:

// tìm ánh xạ đơn lẻ
GPIO_TIM_Mapping FindMapping(GPIO_TypeDef* GPIO, uint16_t GPIO_PIN, bool status) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b0a0      	sub	sp, #128	@ 0x80
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4611      	mov	r1, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	460b      	mov	r3, r1
 80025f0:	80fb      	strh	r3, [r7, #6]
 80025f2:	4613      	mov	r3, r2
 80025f4:	717b      	strb	r3, [r7, #5]
    auto range = gpioMap.equal_range(GPIO_TIM_Mapping(GPIO, GPIO_PIN, nullptr, 0, status));
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	f107 001c 	add.w	r0, r7, #28
 80025fc:	797b      	ldrb	r3, [r7, #5]
 80025fe:	9301      	str	r3, [sp, #4]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	2300      	movs	r3, #0
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	f7ff fc78 	bl	8001efc <_ZN16GPIO_TIM_MappingC1EP12GPIO_TypeDefmP11TIM_TypeDefmb>
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	f107 021c 	add.w	r2, r7, #28
 8002614:	4913      	ldr	r1, [pc, #76]	@ (8002664 <_Z11FindMappingP12GPIO_TypeDeftb+0x84>)
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb29 	bl	8002c6e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE11equal_rangeERS5_>
    for (auto it = range.first; it != range.second; ++it) {
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	613b      	str	r3, [r7, #16]
 8002620:	bf00      	nop
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	1d1a      	adds	r2, r3, #4
 8002628:	f107 0310 	add.w	r3, r7, #16
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fb2e 	bl	8002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <_Z11FindMappingP12GPIO_TypeDeftb+0x76>
            // Nếu tìm thấy một ánh xạ thỏa mãn điều kiện, trả về ánh xạ này
            return it->second;
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fb46 	bl	8002cd0 <_ZNKSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEptEv>
 8002644:	4603      	mov	r3, r0
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4610      	mov	r0, r2
 800264a:	335c      	adds	r3, #92	@ 0x5c
 800264c:	225c      	movs	r2, #92	@ 0x5c
 800264e:	4619      	mov	r1, r3
 8002650:	f009 fa49 	bl	800bae6 <memcpy>
        }
    return GPIO_TIM_Mapping();
}
 8002654:	e002      	b.n	800265c <_Z11FindMappingP12GPIO_TypeDeftb+0x7c>
    return GPIO_TIM_Mapping();
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff fc35 	bl	8001ec6 <_ZN16GPIO_TIM_MappingC1Ev>
}
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	3778      	adds	r7, #120	@ 0x78
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000214 	.word	0x20000214

08002668 <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_>:

void UpdateMapping(const GPIO_TIM_Mapping& oldMapping, const GPIO_TIM_Mapping& newMapping) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
    // Xóa ánh xạ cũ
    auto range = gpioMap.equal_range(oldMapping);
 8002672:	f107 0310 	add.w	r3, r7, #16
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	4919      	ldr	r1, [pc, #100]	@ (80026e0 <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_+0x78>)
 800267a:	4618      	mov	r0, r3
 800267c:	f000 faf7 	bl	8002c6e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE11equal_rangeERS5_>
    for (auto it = range.first; it != range.second; ++it) {
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e017      	b.n	80026b6 <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_+0x4e>
        if (it->second == oldMapping) {
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fb20 	bl	8002cd0 <_ZNKSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEptEv>
 8002690:	4603      	mov	r3, r0
 8002692:	335c      	adds	r3, #92	@ 0x5c
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fc4d 	bl	8001f36 <_ZNK16GPIO_TIM_MappingeqERKS_>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_+0x44>
            gpioMap.erase(it);
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	480e      	ldr	r0, [pc, #56]	@ (80026e0 <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_+0x78>)
 80026a6:	f000 fb48 	bl	8002d3a <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE5eraseENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEE>
            break;
 80026aa:	e010      	b.n	80026ce <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_+0x66>
    for (auto it = range.first; it != range.second; ++it) {
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fb00 	bl	8002cb6 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	1d1a      	adds	r2, r3, #4
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fae4 	bl	8002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1db      	bne.n	8002686 <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_+0x1e>
        }
    }

    gpioMap.emplace(newMapping, newMapping);
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	4803      	ldr	r0, [pc, #12]	@ (80026e0 <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_+0x78>)
 80026d4:	f000 fb40 	bl	8002d58 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJRS5_SA_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>
}
 80026d8:	bf00      	nop
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000214 	.word	0x20000214

080026e4 <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt>:


void Register_PWM_GPIO(GPIO_TypeDef *GPIO, uint32_t Pin, uint16_t Prescaler,uint16_t Period, uint16_t Pulse) {
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b0a7      	sub	sp, #156	@ 0x9c
 80026e8:	af04      	add	r7, sp, #16
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	4611      	mov	r1, r2
 80026f0:	461a      	mov	r2, r3
 80026f2:	460b      	mov	r3, r1
 80026f4:	80fb      	strh	r3, [r7, #6]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80bb      	strh	r3, [r7, #4]


	auto mappings = FindAllMappings(GPIO, Pin, false);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8002702:	2300      	movs	r3, #0
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	f7ff ff23 	bl	8002550 <_Z15FindAllMappingsP12GPIO_TypeDeftb>

	for (auto& mapping : mappings) {
 800270a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800270e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002712:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002716:	f000 fb38 	bl	8002d8a <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE5beginEv>
 800271a:	4603      	mov	r3, r0
 800271c:	673b      	str	r3, [r7, #112]	@ 0x70
 800271e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8002722:	f000 fb42 	bl	8002daa <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE3endEv>
 8002726:	4603      	mov	r3, r0
 8002728:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800272a:	e05d      	b.n	80027e8 <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0x104>
 800272c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fb73 	bl	8002e1c <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEdeEv>
 8002736:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
		if (!Timer_IsEnable(mapping.TIMx) || (Timer_GetPeriod(mapping.TIMx) == Period && Timer_GetPrescaler(mapping.TIMx) == Prescaler)) {
 800273a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fca8 	bl	8002096 <_Z14Timer_IsEnableP11TIM_TypeDef>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0x94>
 800274c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fcb8 	bl	80020c8 <_Z15Timer_GetPeriodP11TIM_TypeDef>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	88bb      	ldrh	r3, [r7, #4]
 800275e:	4293      	cmp	r3, r2
 8002760:	d10c      	bne.n	800277c <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0x98>
 8002762:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fca1 	bl	80020b0 <_Z18Timer_GetPrescalerP11TIM_TypeDef>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	4293      	cmp	r3, r2
 8002776:	d101      	bne.n	800277c <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0x98>
 8002778:	2301      	movs	r3, #1
 800277a:	e000      	b.n	800277e <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0x9a>
 800277c:	2300      	movs	r3, #0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02d      	beq.n	80027de <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0xfa>

			TIMER_PWM_Init(GPIO, Pin, &mapping.htim, mapping.TIMx, mapping.TIM_CHANNEL,
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	b299      	uxth	r1, r3
 8002786:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800278a:	f103 0010 	add.w	r0, r3, #16
 800278e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002792:	689c      	ldr	r4, [r3, #8]
 8002794:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 800279e:	9203      	str	r2, [sp, #12]
 80027a0:	88ba      	ldrh	r2, [r7, #4]
 80027a2:	9202      	str	r2, [sp, #8]
 80027a4:	88fa      	ldrh	r2, [r7, #6]
 80027a6:	9201      	str	r2, [sp, #4]
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	4623      	mov	r3, r4
 80027ac:	4602      	mov	r2, r0
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff fd8c 	bl	80022cc <_Z14TIMER_PWM_InitP12GPIO_TypeDeftP17TIM_HandleTypeDefP11TIM_TypeDefmttt>
                    Prescaler, Period, Pulse);

			GPIO_TIM_Mapping newMapping = mapping;
 80027b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	4611      	mov	r1, r2
 80027be:	225c      	movs	r2, #92	@ 0x5c
 80027c0:	4618      	mov	r0, r3
 80027c2:	f009 f990 	bl	800bae6 <memcpy>
			newMapping.status = true;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
			UpdateMapping(mapping, newMapping);
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	4619      	mov	r1, r3
 80027d2:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80027d6:	f7ff ff47 	bl	8002668 <_Z13UpdateMappingRK16GPIO_TIM_MappingS1_>
 80027da:	2400      	movs	r4, #0
 80027dc:	e012      	b.n	8002804 <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0x120>
	for (auto& mapping : mappings) {
 80027de:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fb0a 	bl	8002dfc <_ZN9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEppEv>
 80027e8:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 80027ec:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80027f0:	4611      	mov	r1, r2
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 faea 	bl	8002dcc <_ZN9__gnu_cxxneIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d196      	bne.n	800272c <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt+0x48>

			return;
		}
	}

	Error_Handler();
 80027fe:	f003 faed 	bl	8005ddc <Error_Handler>


}
 8002802:	2401      	movs	r4, #1
 8002804:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fa15 	bl	8002c38 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EED1Ev>
 800280e:	2c01      	cmp	r4, #1
 8002810:	378c      	adds	r7, #140	@ 0x8c
 8002812:	46bd      	mov	sp, r7
 8002814:	bd90      	pop	{r4, r7, pc}

08002816 <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt>:


void PWM_Write_GPIO(GPIO_TypeDef* Port, uint32_t Pin,uint16_t Pulse)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b09c      	sub	sp, #112	@ 0x70
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	4613      	mov	r3, r2
 8002822:	80fb      	strh	r3, [r7, #6]
	GPIO_TIM_Mapping mapping = FindMapping(Port, Pin,true);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	b29a      	uxth	r2, r3
 8002828:	f107 0014 	add.w	r0, r7, #20
 800282c:	2301      	movs	r3, #1
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	f7ff fed6 	bl	80025e0 <_Z11FindMappingP12GPIO_TypeDeftb>

	if (mapping.TIMx == nullptr) {
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt+0x28>
		// Nếu không tìm thấy ánh xạ hợp lệ, xử lý lỗi
		Error_Handler();
 800283a:	f003 facf 	bl	8005ddc <Error_Handler>
	}

	__HAL_TIM_SET_COMPARE(&mapping.htim,mapping.TIM_CHANNEL,Pulse);
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d103      	bne.n	800284c <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt+0x36>
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	635a      	str	r2, [r3, #52]	@ 0x34
//	TIM_HandleTypeDef htim;

//	__HAL_TIM_SET_COMPARE(&htim,TIM_CHANNEL_1,200);

}
 800284a:	e010      	b.n	800286e <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt+0x58>
	__HAL_TIM_SET_COMPARE(&mapping.htim,mapping.TIM_CHANNEL,Pulse);
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	2b04      	cmp	r3, #4
 8002850:	d103      	bne.n	800285a <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt+0x44>
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	88fa      	ldrh	r2, [r7, #6]
 8002856:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002858:	e009      	b.n	800286e <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt+0x58>
	__HAL_TIM_SET_COMPARE(&mapping.htim,mapping.TIM_CHANNEL,Pulse);
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b08      	cmp	r3, #8
 800285e:	d103      	bne.n	8002868 <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt+0x52>
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002866:	e002      	b.n	800286e <_Z14PWM_Write_GPIOP12GPIO_TypeDefmt+0x58>
	__HAL_TIM_SET_COMPARE(&mapping.htim,mapping.TIM_CHANNEL,Pulse);
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800286e:	bf00      	nop
 8002870:	3770      	adds	r7, #112	@ 0x70
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <_Z19Add_Map_STM32F103xxv>:

void Add_Map_STM32F103xx()
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af02      	add	r7, sp, #8

/**/	AddMapping(GPIOA, GPIO_PIN_0, TIM2, TIM_CHANNEL_1, false);
 800287e:	2300      	movs	r3, #0
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002888:	2101      	movs	r1, #1
 800288a:	4891      	ldr	r0, [pc, #580]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 800288c:	f7ff fe0c 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_0, TIM5, TIM_CHANNEL_1, false);
 8002890:	2300      	movs	r3, #0
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	2300      	movs	r3, #0
 8002896:	4a8f      	ldr	r2, [pc, #572]	@ (8002ad4 <_Z19Add_Map_STM32F103xxv+0x25c>)
 8002898:	2101      	movs	r1, #1
 800289a:	488d      	ldr	r0, [pc, #564]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 800289c:	f7ff fe04 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_1, TIM2, TIM_CHANNEL_2, false);
 80028a0:	2300      	movs	r3, #0
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2304      	movs	r3, #4
 80028a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028aa:	2102      	movs	r1, #2
 80028ac:	4888      	ldr	r0, [pc, #544]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 80028ae:	f7ff fdfb 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_1, TIM5, TIM_CHANNEL_2, false);
 80028b2:	2300      	movs	r3, #0
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2304      	movs	r3, #4
 80028b8:	4a86      	ldr	r2, [pc, #536]	@ (8002ad4 <_Z19Add_Map_STM32F103xxv+0x25c>)
 80028ba:	2102      	movs	r1, #2
 80028bc:	4884      	ldr	r0, [pc, #528]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 80028be:	f7ff fdf3 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_2, TIM2, TIM_CHANNEL_3, false);
 80028c2:	2300      	movs	r3, #0
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2308      	movs	r3, #8
 80028c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028cc:	2104      	movs	r1, #4
 80028ce:	4880      	ldr	r0, [pc, #512]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 80028d0:	f7ff fdea 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_2, TIM5, TIM_CHANNEL_3, false);
 80028d4:	2300      	movs	r3, #0
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	2308      	movs	r3, #8
 80028da:	4a7e      	ldr	r2, [pc, #504]	@ (8002ad4 <_Z19Add_Map_STM32F103xxv+0x25c>)
 80028dc:	2104      	movs	r1, #4
 80028de:	487c      	ldr	r0, [pc, #496]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 80028e0:	f7ff fde2 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_3, TIM2, TIM_CHANNEL_4, false);
 80028e4:	2300      	movs	r3, #0
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	230c      	movs	r3, #12
 80028ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028ee:	2108      	movs	r1, #8
 80028f0:	4877      	ldr	r0, [pc, #476]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 80028f2:	f7ff fdd9 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOA, GPIO_PIN_3, TIM5, TIM_CHANNEL_4, false);
 80028f6:	2300      	movs	r3, #0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	230c      	movs	r3, #12
 80028fc:	4a75      	ldr	r2, [pc, #468]	@ (8002ad4 <_Z19Add_Map_STM32F103xxv+0x25c>)
 80028fe:	2108      	movs	r1, #8
 8002900:	4873      	ldr	r0, [pc, #460]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 8002902:	f7ff fdd1 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_6, TIM3, TIM_CHANNEL_1, false);
 8002906:	2300      	movs	r3, #0
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2300      	movs	r3, #0
 800290c:	4a72      	ldr	r2, [pc, #456]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 800290e:	2140      	movs	r1, #64	@ 0x40
 8002910:	486f      	ldr	r0, [pc, #444]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 8002912:	f7ff fdc9 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_7, TIM3, TIM_CHANNEL_2, false);
 8002916:	2300      	movs	r3, #0
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2304      	movs	r3, #4
 800291c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 800291e:	2180      	movs	r1, #128	@ 0x80
 8002920:	486b      	ldr	r0, [pc, #428]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 8002922:	f7ff fdc1 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_8, TIM1, TIM_CHANNEL_1, false);
 8002926:	2300      	movs	r3, #0
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	4a6b      	ldr	r2, [pc, #428]	@ (8002adc <_Z19Add_Map_STM32F103xxv+0x264>)
 800292e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002932:	4867      	ldr	r0, [pc, #412]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 8002934:	f7ff fdb8 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_9, TIM1, TIM_CHANNEL_2, false);
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2304      	movs	r3, #4
 800293e:	4a67      	ldr	r2, [pc, #412]	@ (8002adc <_Z19Add_Map_STM32F103xxv+0x264>)
 8002940:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002944:	4862      	ldr	r0, [pc, #392]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 8002946:	f7ff fdaf 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_10, TIM1, TIM_CHANNEL_3, false);
 800294a:	2300      	movs	r3, #0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2308      	movs	r3, #8
 8002950:	4a62      	ldr	r2, [pc, #392]	@ (8002adc <_Z19Add_Map_STM32F103xxv+0x264>)
 8002952:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002956:	485e      	ldr	r0, [pc, #376]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 8002958:	f7ff fda6 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_11, TIM1, TIM_CHANNEL_4, false);
 800295c:	2300      	movs	r3, #0
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	230c      	movs	r3, #12
 8002962:	4a5e      	ldr	r2, [pc, #376]	@ (8002adc <_Z19Add_Map_STM32F103xxv+0x264>)
 8002964:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002968:	4859      	ldr	r0, [pc, #356]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 800296a:	f7ff fd9d 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOA, GPIO_PIN_15, TIM2, TIM_CHANNEL_1, false);
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002978:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800297c:	4854      	ldr	r0, [pc, #336]	@ (8002ad0 <_Z19Add_Map_STM32F103xxv+0x258>)
 800297e:	f7ff fd93 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_0, TIM3, TIM_CHANNEL_3, false);
 8002982:	2300      	movs	r3, #0
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2308      	movs	r3, #8
 8002988:	4a53      	ldr	r2, [pc, #332]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 800298a:	2101      	movs	r1, #1
 800298c:	4854      	ldr	r0, [pc, #336]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 800298e:	f7ff fd8b 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_1, TIM3, TIM_CHANNEL_4, false);
 8002992:	2300      	movs	r3, #0
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	230c      	movs	r3, #12
 8002998:	4a4f      	ldr	r2, [pc, #316]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 800299a:	2102      	movs	r1, #2
 800299c:	4850      	ldr	r0, [pc, #320]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 800299e:	f7ff fd83 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_3, TIM2, TIM_CHANNEL_2, false);
 80029a2:	2300      	movs	r3, #0
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	2304      	movs	r3, #4
 80029a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029ac:	2108      	movs	r1, #8
 80029ae:	484c      	ldr	r0, [pc, #304]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 80029b0:	f7ff fd7a 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_4, TIM3, TIM_CHANNEL_1, false);
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	4a47      	ldr	r2, [pc, #284]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 80029bc:	2110      	movs	r1, #16
 80029be:	4848      	ldr	r0, [pc, #288]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 80029c0:	f7ff fd72 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_5, TIM3, TIM_CHANNEL_2, false);
 80029c4:	2300      	movs	r3, #0
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2304      	movs	r3, #4
 80029ca:	4a43      	ldr	r2, [pc, #268]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 80029cc:	2120      	movs	r1, #32
 80029ce:	4844      	ldr	r0, [pc, #272]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 80029d0:	f7ff fd6a 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_6, TIM4, TIM_CHANNEL_1, false);
 80029d4:	2300      	movs	r3, #0
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2300      	movs	r3, #0
 80029da:	4a42      	ldr	r2, [pc, #264]	@ (8002ae4 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80029dc:	2140      	movs	r1, #64	@ 0x40
 80029de:	4840      	ldr	r0, [pc, #256]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 80029e0:	f7ff fd62 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_7, TIM4, TIM_CHANNEL_2, false);
 80029e4:	2300      	movs	r3, #0
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2304      	movs	r3, #4
 80029ea:	4a3e      	ldr	r2, [pc, #248]	@ (8002ae4 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80029ec:	2180      	movs	r1, #128	@ 0x80
 80029ee:	483c      	ldr	r0, [pc, #240]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 80029f0:	f7ff fd5a 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_8, TIM4, TIM_CHANNEL_3, false);
 80029f4:	2300      	movs	r3, #0
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2308      	movs	r3, #8
 80029fa:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae4 <_Z19Add_Map_STM32F103xxv+0x26c>)
 80029fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a00:	4837      	ldr	r0, [pc, #220]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 8002a02:	f7ff fd51 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_9, TIM4, TIM_CHANNEL_4, false);
 8002a06:	2300      	movs	r3, #0
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	4a35      	ldr	r2, [pc, #212]	@ (8002ae4 <_Z19Add_Map_STM32F103xxv+0x26c>)
 8002a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a12:	4833      	ldr	r0, [pc, #204]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 8002a14:	f7ff fd48 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_10, TIM2, TIM_CHANNEL_3, false);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2308      	movs	r3, #8
 8002a1e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a22:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a26:	482e      	ldr	r0, [pc, #184]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 8002a28:	f7ff fd3e 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOB, GPIO_PIN_11, TIM2, TIM_CHANNEL_4, false);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	230c      	movs	r3, #12
 8002a32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a3a:	4829      	ldr	r0, [pc, #164]	@ (8002ae0 <_Z19Add_Map_STM32F103xxv+0x268>)
 8002a3c:	f7ff fd34 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_6, TIM3, TIM_CHANNEL_1, false);
 8002a40:	2300      	movs	r3, #0
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2300      	movs	r3, #0
 8002a46:	4a24      	ldr	r2, [pc, #144]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 8002a48:	2140      	movs	r1, #64	@ 0x40
 8002a4a:	4827      	ldr	r0, [pc, #156]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002a4c:	f7ff fd2c 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_6, TIM8, TIM_CHANNEL_1, false);
 8002a50:	2300      	movs	r3, #0
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	4a25      	ldr	r2, [pc, #148]	@ (8002aec <_Z19Add_Map_STM32F103xxv+0x274>)
 8002a58:	2140      	movs	r1, #64	@ 0x40
 8002a5a:	4823      	ldr	r0, [pc, #140]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002a5c:	f7ff fd24 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_7, TIM3, TIM_CHANNEL_2, false);
 8002a60:	2300      	movs	r3, #0
 8002a62:	9300      	str	r3, [sp, #0]
 8002a64:	2304      	movs	r3, #4
 8002a66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 8002a68:	2180      	movs	r1, #128	@ 0x80
 8002a6a:	481f      	ldr	r0, [pc, #124]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002a6c:	f7ff fd1c 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_7, TIM8, TIM_CHANNEL_2, false);
 8002a70:	2300      	movs	r3, #0
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2304      	movs	r3, #4
 8002a76:	4a1d      	ldr	r2, [pc, #116]	@ (8002aec <_Z19Add_Map_STM32F103xxv+0x274>)
 8002a78:	2180      	movs	r1, #128	@ 0x80
 8002a7a:	481b      	ldr	r0, [pc, #108]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002a7c:	f7ff fd14 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_8, TIM3, TIM_CHANNEL_3, false);
 8002a80:	2300      	movs	r3, #0
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2308      	movs	r3, #8
 8002a86:	4a14      	ldr	r2, [pc, #80]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 8002a88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a8c:	4816      	ldr	r0, [pc, #88]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002a8e:	f7ff fd0b 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_8, TIM8, TIM_CHANNEL_3, false);
 8002a92:	2300      	movs	r3, #0
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2308      	movs	r3, #8
 8002a98:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <_Z19Add_Map_STM32F103xxv+0x274>)
 8002a9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a9e:	4812      	ldr	r0, [pc, #72]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002aa0:	f7ff fd02 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>

/**/	AddMapping(GPIOC, GPIO_PIN_9, TIM3, TIM_CHANNEL_4, false);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	230c      	movs	r3, #12
 8002aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8002ad8 <_Z19Add_Map_STM32F103xxv+0x260>)
 8002aac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ab0:	480d      	ldr	r0, [pc, #52]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002ab2:	f7ff fcf9 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>
	AddMapping(GPIOC, GPIO_PIN_9, TIM8, TIM_CHANNEL_4, false);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	230c      	movs	r3, #12
 8002abc:	4a0b      	ldr	r2, [pc, #44]	@ (8002aec <_Z19Add_Map_STM32F103xxv+0x274>)
 8002abe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ac2:	4809      	ldr	r0, [pc, #36]	@ (8002ae8 <_Z19Add_Map_STM32F103xxv+0x270>)
 8002ac4:	f7ff fcf0 	bl	80024a8 <_Z10AddMappingP12GPIO_TypeDeftP11TIM_TypeDefmb>



}
 8002ac8:	bf00      	nop
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40010800 	.word	0x40010800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40010c00 	.word	0x40010c00
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40011000 	.word	0x40011000
 8002aec:	40013400 	.word	0x40013400

08002af0 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d201      	bcs.n	8002b0a <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	e000      	b.n	8002b0c <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8002b0a:	687b      	ldr	r3, [r7, #4]
    }
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <_ZNSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EEC1Ev>:
      _Hashtable_ebo_helper() noexcept(noexcept(_Tp())) : _Tp() { }
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EEC1Ev>:
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EEC1Ev>:
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f97d 	bl	8002e46 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEEC1Ev>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f97d 	bl	8002e5e <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEED1Ev>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEED1Ev>:

  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
			._M_bucket_index(declval<const __node_value_type&>(),
					 (std::size_t)0)),
		    "Cache the hash code or qualify your functors involved"
		    " in hash code and bucket index computation with noexcept");

      clear();
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f97b 	bl	8002e72 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5clearEv>
      _M_deallocate_buckets();
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f998 	bl	8002eb2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>
    }
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fa45 	bl	8002012 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEED1Ev>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJS0_S0_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>:
       *
       *  Insertion requires amortized constant time.
       */
      template<typename... _Args>
	iterator
	emplace(_Args&&... __args)
 8002b92:	b5b0      	push	{r4, r5, r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
	{ return _M_h.emplace(std::forward<_Args>(__args)...); }
 8002b9e:	68fc      	ldr	r4, [r7, #12]
 8002ba0:	68b8      	ldr	r0, [r7, #8]
 8002ba2:	f000 f996 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f992 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f000 f996 	bl	8002ee6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bdb0      	pop	{r4, r5, r7, pc}

08002bc4 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f9a2 	bl	8002f16 <_ZNSaI16GPIO_TIM_MappingEC1Ev>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f9aa 	bl	8002f2e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZNSaI16GPIO_TIM_MappingED1Ev>:
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f9b1 	bl	8002f54 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingED1Ev>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	109b      	asrs	r3, r3, #2
 8002c14:	4a07      	ldr	r2, [pc, #28]	@ (8002c34 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EED1Ev+0x38>)
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
	_M_deallocate(_M_impl._M_start,
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f9a3 	bl	8002f68 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fc6d 	bl	8002504 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE12_Vector_implD1Ev>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	e9bd37a7 	.word	0xe9bd37a7

08002c38 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EED1Ev>:
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681c      	ldr	r4, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f99f 	bl	8002f8e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>
 8002c50:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002c52:	461a      	mov	r2, r3
 8002c54:	4629      	mov	r1, r5
 8002c56:	4620      	mov	r0, r4
 8002c58:	f000 f9a3 	bl	8002fa2 <_ZSt8_DestroyIP16GPIO_TIM_MappingS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ffcc 	bl	8002bfc <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EED1Ev>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bdb0      	pop	{r4, r5, r7, pc}

08002c6e <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE11equal_rangeERS5_>:
       *  @param  __x  Key to be located.
       *  @return  Pair of iterators that possibly points to the subsequence
       *           matching given key.
       */
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b084      	sub	sp, #16
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
      { return _M_h.equal_range(__x); }
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f99c 	bl	8002fbe <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_>
 8002c86:	bf00      	nop
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>:
      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
      { return __x._M_cur != __y._M_cur; }
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>:
      operator++() noexcept
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 f9c1 	bl	8003048 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>
	return *this;
 8002cc6:	687b      	ldr	r3, [r7, #4]
      }
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3708      	adds	r7, #8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <_ZNKSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEptEv>:
      operator->() const noexcept
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
      { return this->_M_cur->_M_valptr(); }
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 f9c2 	bl	8003068 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE9push_backERKS0_>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d00d      	beq.n	8002d20 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f000 f9b8 	bl	8003082 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002d1e:	e008      	b.n	8002d32 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f842 	bl	8002daa <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE3endEv>
 8002d26:	4603      	mov	r3, r0
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f9d1 	bl	80030d4 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE5eraseENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEE>:
      erase(iterator __position)
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
      { return _M_h.erase(__position); }
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6839      	ldr	r1, [r7, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fa87 	bl	800325c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5eraseENS5_14_Node_iteratorIS3_Lb0ELb1EEE>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEE7emplaceIJRS5_SA_EEENSt8__detail14_Node_iteratorIS6_Lb0ELb1EEEDpOT_>:
	emplace(_Args&&... __args)
 8002d58:	b5b0      	push	{r4, r5, r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	{ return _M_h.emplace(std::forward<_Args>(__args)...); }
 8002d64:	68fc      	ldr	r4, [r7, #12]
 8002d66:	68b8      	ldr	r0, [r7, #8]
 8002d68:	f000 fa8d 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8002d6c:	4605      	mov	r5, r0
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fa89 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	4629      	mov	r1, r5
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	f000 fa8d 	bl	800329a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJRS2_SH_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bdb0      	pop	{r4, r5, r7, pc}

08002d8a <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fa95 	bl	80032ca <_ZN9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b084      	sub	sp, #16
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	1d1a      	adds	r2, r3, #4
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4611      	mov	r1, r2
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fa84 	bl	80032ca <_ZN9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_ZN9__gnu_cxxneIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa86 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	681c      	ldr	r4, [r3, #0]
 8002de0:	6838      	ldr	r0, [r7, #0]
 8002de2:	f000 fa81 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 8002de6:	4603      	mov	r3, r0
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429c      	cmp	r4, r3
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd90      	pop	{r4, r7, pc}

08002dfc <_ZN9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	++_M_current;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	601a      	str	r2, [r3, #0]
	return *this;
 8002e10:	687b      	ldr	r3, [r7, #4]
      }
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <_ZNSaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa54 	bl	80032fc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEC1Ev>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002e5e:	b480      	push	{r7}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5clearEv>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    clear() noexcept
    {
      this->_M_deallocate_nodes(_M_begin());
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fa48 	bl	8003310 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fa4e 	bl	8003326 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_>
      __builtin_memset(_M_buckets, 0,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
		       _M_bucket_count * sizeof(__node_base_ptr));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
      __builtin_memset(_M_buckets, 0,
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4610      	mov	r0, r2
 8002e96:	461a      	mov	r2, r3
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f008 fd42 	bl	800b922 <memset>
      _M_element_count = 0;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
      _M_before_begin._M_nxt = nullptr;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
    }
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>:
      _M_deallocate_buckets()
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
      { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6819      	ldr	r1, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fa46 	bl	8003356 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>:
	emplace(_Args&&... __args)
 8002ee6:	b5b0      	push	{r4, r5, r7, lr}
 8002ee8:	b084      	sub	sp, #16
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
	{ return _M_emplace(__unique_keys{}, std::forward<_Args>(__args)...); }
 8002ef2:	68b8      	ldr	r0, [r7, #8]
 8002ef4:	f7ff ffed 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8002ef8:	4604      	mov	r4, r0
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff ffe9 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8002f00:	4603      	mov	r3, r0
 8002f02:	4622      	mov	r2, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa3c 	bl	8003384 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}

08002f16 <_ZNSaI16GPIO_TIM_MappingEC1Ev>:
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 fa4f 	bl	80033c2 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingEC1Ev>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
	{ }
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingED1Ev>:
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
	if (__p)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 fa28 	bl	80033d6 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE10deallocateERS1_PS0_j>
      }
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <_ZSt8_DestroyIP16GPIO_TIM_MappingS0_EvT_S2_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fa1f 	bl	80033f4 <_ZSt8_DestroyIP16GPIO_TIM_MappingEvT_S2_>
    }
 8002fb6:	bf00      	nop
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
      auto __ite = find(__k);
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	f000 fa1e 	bl	800340e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	617b      	str	r3, [r7, #20]
      if (!__ite._M_cur)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d108      	bne.n	8002fee <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_+0x30>
	return { __ite, __ite };
 8002fdc:	f107 0214 	add.w	r2, r7, #20
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa6c 	bl	80034c4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEES5_EC1IRS5_S8_Lb1EEEOT_OT0_>
 8002fec:	e028      	b.n	8003040 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_+0x82>
      auto __beg = __ite++;
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fa7e 	bl	80034f6 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEi>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	613b      	str	r3, [r7, #16]
      while (__ite._M_cur && this->_M_node_equals(*__beg._M_cur, *__ite._M_cur))
 8002ffe:	e004      	b.n	800300a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_+0x4c>
	++__ite;
 8003000:	f107 0314 	add.w	r3, r7, #20
 8003004:	4618      	mov	r0, r3
 8003006:	f7ff fe56 	bl	8002cb6 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
      while (__ite._M_cur && this->_M_node_equals(*__beg._M_cur, *__ite._M_cur))
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00c      	beq.n	800302a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_+0x6c>
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1d19      	adds	r1, r3, #4
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	3304      	adds	r3, #4
 8003018:	461a      	mov	r2, r3
 800301a:	68b8      	ldr	r0, [r7, #8]
 800301c:	f000 fa7c 	bl	8003518 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE14_M_node_equalsERKNS_16_Hash_node_valueIS4_Lb1EEESH_>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_+0x6c>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_+0x6e>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e7      	bne.n	8003000 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE11equal_rangeERS2_+0x42>
      return { __beg, __ite };
 8003030:	f107 0214 	add.w	r2, r7, #20
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	4619      	mov	r1, r3
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fa42 	bl	80034c4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEES5_EC1IRS5_S8_Lb1EEEOT_OT0_>
    }
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>:
      _M_incr() noexcept
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
      { _M_cur = _M_cur->_M_next(); }
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fa8c 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 800305a:	4602      	mov	r2, r0
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>:
      _M_valptr() noexcept
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa88 	bl	8003588 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>
 8003078:	4603      	mov	r3, r0
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8f9 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 fa80 	bl	80035a0 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE9constructIS0_JRKS0_EEEvPT_DpOT0_>
	}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f805 	bl	80030be <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80030b4:	4603      	mov	r3, r0
      }
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80030c6:	2301      	movs	r3, #1
      }
 80030c8:	4618      	mov	r0, r3
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr
	...

080030d4 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80030d4:	b5b0      	push	{r4, r5, r7, lr}
 80030d6:	b08c      	sub	sp, #48	@ 0x30
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80030e0:	4a5c      	ldr	r2, [pc, #368]	@ (8003254 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x180>)
 80030e2:	2101      	movs	r1, #1
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fa75 	bl	80035d4 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE12_M_check_lenEjPKc>
 80030ea:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f7ff fe46 	bl	8002d8a <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE5beginEv>
 80030fe:	4603      	mov	r3, r0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	f107 0214 	add.w	r2, r7, #20
 8003106:	f107 0308 	add.w	r3, r7, #8
 800310a:	4611      	mov	r1, r2
 800310c:	4618      	mov	r0, r3
 800310e:	f000 faa9 	bl	8003664 <_ZN9__gnu_cxxmiIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8003112:	4603      	mov	r3, r0
 8003114:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fabc 	bl	8003698 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE11_M_allocateEj>
 8003120:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8003126:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	225c      	movs	r2, #92	@ 0x5c
 800312c:	fb02 f303 	mul.w	r3, r2, r3
	  _Alloc_traits::construct(this->_M_impl,
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	18d5      	adds	r5, r2, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8a6 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	4629      	mov	r1, r5
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff9e 	bl	8003082 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8003146:	2300      	movs	r3, #0
 8003148:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800314a:	f7ff ffad 	bl	80030a8 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE15_S_use_relocateEv>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d027      	beq.n	80031a4 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xd0>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f8c5 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 800315e:	4603      	mov	r3, r0
 8003160:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff ff12 	bl	8002f8e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>
 800316a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4621      	mov	r1, r4
 8003170:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003172:	f000 faa5 	bl	80036c0 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003176:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8003178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317a:	335c      	adds	r3, #92	@ 0x5c
 800317c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800317e:	f107 0308 	add.w	r3, r7, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f8b0 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 8003188:	4603      	mov	r3, r0
 800318a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fefd 	bl	8002f8e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>
 8003194:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003196:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003198:	6a39      	ldr	r1, [r7, #32]
 800319a:	4620      	mov	r0, r4
 800319c:	f000 fa90 	bl	80036c0 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 80031a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80031a2:	e026      	b.n	80031f2 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11e>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80031a4:	f107 0308 	add.w	r3, r7, #8
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f89d 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 80031ae:	4603      	mov	r3, r0
 80031b0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff feea 	bl	8002f8e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>
 80031ba:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4621      	mov	r1, r4
 80031c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031c2:	f000 fa91 	bl	80036e8 <_ZSt34__uninitialized_move_if_noexcept_aIP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_>
 80031c6:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	335c      	adds	r3, #92	@ 0x5c
 80031cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80031ce:	f107 0308 	add.w	r3, r7, #8
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 f888 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 80031d8:	4603      	mov	r3, r0
 80031da:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fed5 	bl	8002f8e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>
 80031e4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80031e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e8:	6a39      	ldr	r1, [r7, #32]
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 fa7c 	bl	80036e8 <_ZSt34__uninitialized_move_if_noexcept_aIP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_>
 80031f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80031f2:	f7ff ff59 	bl	80030a8 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE15_S_use_relocateEv>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x142>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fec2 	bl	8002f8e <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>
 800320a:	4603      	mov	r3, r0
 800320c:	461a      	mov	r2, r3
 800320e:	6a39      	ldr	r1, [r7, #32]
 8003210:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003212:	f7ff fec6 	bl	8002fa2 <_ZSt8_DestroyIP16GPIO_TIM_MappingS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8003216:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	109b      	asrs	r3, r3, #2
 8003222:	4a0d      	ldr	r2, [pc, #52]	@ (8003258 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x184>)
 8003224:	fb02 f303 	mul.w	r3, r2, r3
      _M_deallocate(__old_start,
 8003228:	461a      	mov	r2, r3
 800322a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800322c:	f7ff fe9c 	bl	8002f68 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800323a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	225c      	movs	r2, #92	@ 0x5c
 8003240:	fb02 f303 	mul.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	441a      	add	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	609a      	str	r2, [r3, #8]
    }
 800324c:	bf00      	nop
 800324e:	3730      	adds	r7, #48	@ 0x30
 8003250:	46bd      	mov	sp, r7
 8003252:	bdb0      	pop	{r4, r5, r7, pc}
 8003254:	0800d618 	.word	0x0800d618
 8003258:	e9bd37a7 	.word	0xe9bd37a7

0800325c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5eraseENS5_14_Node_iteratorIS3_Lb0ELb1EEE>:
      erase(iterator __it)
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
      { return erase(const_iterator(__it)); }
 8003266:	463a      	mov	r2, r7
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	4611      	mov	r1, r2
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fa60 	bl	8003734 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1ERKNS_14_Node_iteratorIS4_Lb0ELb1EEE>
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa6d 	bl	8003756 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5eraseENS5_20_Node_const_iteratorIS3_Lb0ELb1EEE>
 800327c:	4603      	mov	r3, r0
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE7emplaceIJRS2_SH_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEEDpOT_>:
	emplace(_Args&&... __args)
 800329a:	b5b0      	push	{r4, r5, r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
	{ return _M_emplace(__unique_keys{}, std::forward<_Args>(__args)...); }
 80032a6:	68b8      	ldr	r0, [r7, #8]
 80032a8:	f7ff ffed 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 80032ac:	4604      	mov	r4, r0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ffe9 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4622      	mov	r2, r4
 80032b8:	4629      	mov	r1, r5
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fa6a 	bl	8003794 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJRS2_SH_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 80032c0:	4603      	mov	r3, r0
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bdb0      	pop	{r4, r5, r7, pc}

080032ca <_ZN9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr

080032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr

080032fc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>:
      _M_begin() const
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
      { return static_cast<__node_ptr>(_M_before_begin._M_nxt); }
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_>:
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
 8003326:	b580      	push	{r7, lr}
 8003328:	b084      	sub	sp, #16
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
    {
      while (__n)
 8003330:	e009      	b.n	8003346 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_+0x20>
	{
	  __node_ptr __tmp = __n;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	60fb      	str	r3, [r7, #12]
	  __n = __n->_M_next();
 8003336:	6838      	ldr	r0, [r7, #0]
 8003338:	f000 f91b 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 800333c:	6038      	str	r0, [r7, #0]
	  _M_deallocate_node(__tmp);
 800333e:	68f9      	ldr	r1, [r7, #12]
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fa46 	bl	80037d2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>
      while (__n)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f2      	bne.n	8003332 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_deallocate_nodesEPS6_+0xc>
	}
    }
 800334c:	bf00      	nop
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj>:
      _M_deallocate_buckets(__buckets_ptr __bkts, size_type __bkt_count)
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
	if (_M_uses_single_bucket(__bkts))
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa4f 	bl	8003808 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d105      	bne.n	800337c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x26>
	__hashtable_alloc::_M_deallocate_buckets(__bkts, __bkt_count);
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fa5e 	bl	8003836 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>
 800337a:	e000      	b.n	800337e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEPPNS5_15_Hash_node_baseEj+0x28>
	  return;
 800337c:	bf00      	nop
      }
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
	_M_emplace(false_type __uks, _Args&&... __args)
 8003384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003386:	b087      	sub	sp, #28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	7239      	strb	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
	{ return _M_emplace(cend(), __uks, std::forward<_Args>(__args)...); }
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fa72 	bl	800387c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 8003398:	4604      	mov	r4, r0
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fd99 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80033a0:	4605      	mov	r5, r0
 80033a2:	6838      	ldr	r0, [r7, #0]
 80033a4:	f7ff fd95 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80033a8:	4603      	mov	r3, r0
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	462b      	mov	r3, r5
 80033ae:	4632      	mov	r2, r6
 80033b0:	4621      	mov	r1, r4
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 fa71 	bl	800389a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033c2 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingEC1Ev>:
 80033c2:	b480      	push	{r7}
 80033c4:	b083      	sub	sp, #12
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4618      	mov	r0, r3
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fa95 	bl	8003916 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE10deallocateEPS0_j>
 80033ec:	bf00      	nop
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <_ZSt8_DestroyIP16GPIO_TIM_MappingEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fa9a 	bl	800393a <_ZNSt12_Destroy_auxILb1EE9__destroyIP16GPIO_TIM_MappingEEvT_S4_>
    }
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800340e:	b590      	push	{r4, r7, lr}
 8003410:	b089      	sub	sp, #36	@ 0x24
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
      if (size() <= __small_size_threshold())
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 fa98 	bl	800394e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4sizeEv>
 800341e:	4604      	mov	r4, r0
 8003420:	f000 faa0 	bl	8003964 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22__small_size_thresholdEv>
 8003424:	4603      	mov	r3, r0
 8003426:	429c      	cmp	r4, r3
 8003428:	bf94      	ite	ls
 800342a:	2301      	movls	r3, #1
 800342c:	2300      	movhi	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02b      	beq.n	800348c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_+0x7e>
	  for (auto __it = begin(); __it != end(); ++__it)
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fa9c 	bl	8003972 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5beginEv>
 800343a:	4603      	mov	r3, r0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	e010      	b.n	8003462 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_+0x54>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3304      	adds	r3, #4
 8003444:	461a      	mov	r2, r3
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fab4 	bl	80039b6 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_+0x4a>
	      return __it;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	e031      	b.n	80034bc <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_+0xae>
	  for (auto __it = begin(); __it != end(); ++__it)
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fc2a 	bl	8002cb6 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa98 	bl	8003998 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE3endEv>
 8003468:	4603      	mov	r3, r0
 800346a:	613b      	str	r3, [r7, #16]
 800346c:	f107 0210 	add.w	r2, r7, #16
 8003470:	f107 030c 	add.w	r3, r7, #12
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fc0a 	bl	8002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1de      	bne.n	8003440 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_+0x32>
	  return end();
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fa88 	bl	8003998 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE3endEv>
 8003488:	4603      	mov	r3, r0
 800348a:	e017      	b.n	80034bc <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4findERS2_+0xae>
      __hash_code __code = this->_M_hash_code(__k);
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fab1 	bl	80039f6 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS3_>
 8003494:	61f8      	str	r0, [r7, #28]
      std::size_t __bkt = _M_bucket_index(__code);
 8003496:	69f9      	ldr	r1, [r7, #28]
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fabe 	bl	8003a1a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexEj>
 800349e:	61b8      	str	r0, [r7, #24]
      return iterator(_M_find_node(__bkt, __k, __code));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	69b9      	ldr	r1, [r7, #24]
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fac8 	bl	8003a3c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_M_find_nodeEjRS2_j>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f107 0314 	add.w	r3, r7, #20
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fada 	bl	8003a6e <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 80034ba:	697b      	ldr	r3, [r7, #20]
    }
 80034bc:	4618      	mov	r0, r3
 80034be:	3724      	adds	r7, #36	@ 0x24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}

080034c4 <_ZNSt4pairINSt8__detail14_Node_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEES5_EC1IRS5_S8_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80034d0:	68b8      	ldr	r0, [r7, #8]
 80034d2:	f000 fadb 	bl	8003a8c <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80034d6:	4602      	mov	r2, r0
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fad4 	bl	8003a8c <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	605a      	str	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEi>:
      operator++(int) noexcept
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
	_Node_iterator __tmp(*this);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
	this->_M_incr();
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fd9d 	bl	8003048 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>
	return __tmp;
 800350e:	68fb      	ldr	r3, [r7, #12]
      }
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE14_M_node_equalsERKNS_16_Hash_node_valueIS4_Lb1EEESH_>:
      _M_node_equals(
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	607a      	str	r2, [r7, #4]
	return _S_node_equals(__lhn, __rhn)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	33b8      	adds	r3, #184	@ 0xb8
 800352e:	4619      	mov	r1, r3
 8003530:	4610      	mov	r0, r2
 8003532:	f000 fab5 	bl	8003aa0 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE14_S_node_equalsERKNS_21_Hash_node_code_cacheILb1EEESH_>
 8003536:	4603      	mov	r3, r0
	  && _M_key_equals(_ExtractKey{}(__lhn._M_v()), __rhn);
 8003538:	2b00      	cmp	r3, #0
 800353a:	d015      	beq.n	8003568 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE14_M_node_equalsERKNS_16_Hash_node_valueIS4_Lb1EEESH_+0x50>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fac1 	bl	8003ac6 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 8003544:	4602      	mov	r2, r0
 8003546:	f107 0314 	add.w	r3, r7, #20
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fac6 	bl	8003ade <_ZNKSt8__detail10_Select1stclIRKSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS9_>
 8003552:	4603      	mov	r3, r0
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4619      	mov	r1, r3
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 fa2c 	bl	80039b6 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE14_M_node_equalsERKNS_16_Hash_node_valueIS4_Lb1EEESH_+0x50>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE14_M_node_equalsERKNS_16_Hash_node_valueIS4_Lb1EEESH_+0x52>
 8003568:	2300      	movs	r3, #0
      }
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>:
      _M_next() const noexcept
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
      { return static_cast<_Hash_node*>(this->_M_nxt); }
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>:
      {
        return static_cast<const void*>(&_M_storage);
      }

      _Tp*
      _M_ptr() noexcept
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fab1 	bl	8003af8 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>
 8003596:	4603      	mov	r3, r0
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE9constructIS0_JRKS0_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4619      	mov	r1, r3
 80035b0:	205c      	movs	r0, #92	@ 0x5c
 80035b2:	f7fe fc16 	bl	8001de2 <_ZnwjPv>
 80035b6:	4604      	mov	r4, r0
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff fe64 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 80035be:	4603      	mov	r3, r0
 80035c0:	4620      	mov	r0, r4
 80035c2:	4619      	mov	r1, r3
 80035c4:	235c      	movs	r3, #92	@ 0x5c
 80035c6:	461a      	mov	r2, r3
 80035c8:	f008 fa8d 	bl	800bae6 <memcpy>
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 fa93 	bl	8003b0c <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE8max_sizeEv>
 80035e6:	4604      	mov	r4, r0
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 faa1 	bl	8003b30 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE4sizeEv>
 80035ee:	4603      	mov	r3, r0
 80035f0:	1ae2      	subs	r2, r4, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	bf34      	ite	cc
 80035f8:	2301      	movcc	r3, #1
 80035fa:	2300      	movcs	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f005 ff8d 	bl	8009522 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fa91 	bl	8003b30 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE4sizeEv>
 800360e:	4604      	mov	r4, r0
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fa8d 	bl	8003b30 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE4sizeEv>
 8003616:	4603      	mov	r3, r0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	f107 0208 	add.w	r2, r7, #8
 800361e:	f107 0310 	add.w	r3, r7, #16
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff fa63 	bl	8002af0 <_ZSt3maxIjERKT_S2_S2_>
 800362a:	4603      	mov	r3, r0
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4423      	add	r3, r4
 8003630:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fa7c 	bl	8003b30 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE4sizeEv>
 8003638:	4602      	mov	r2, r0
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	4293      	cmp	r3, r2
 800363e:	d306      	bcc.n	800364e <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fa63 	bl	8003b0c <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE8max_sizeEv>
 8003646:	4602      	mov	r2, r0
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4293      	cmp	r3, r2
 800364c:	d904      	bls.n	8003658 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE12_M_check_lenEjPKc+0x84>
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa5c 	bl	8003b0c <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE8max_sizeEv>
 8003654:	4603      	mov	r3, r0
 8003656:	e000      	b.n	800365a <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE12_M_check_lenEjPKc+0x86>
 8003658:	697b      	ldr	r3, [r7, #20]
      }
 800365a:	4618      	mov	r0, r3
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bd90      	pop	{r4, r7, pc}
	...

08003664 <_ZN9__gnu_cxxmiIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fe3a 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 8003674:	4603      	mov	r3, r0
 8003676:	681c      	ldr	r4, [r3, #0]
 8003678:	6838      	ldr	r0, [r7, #0]
 800367a:	f7ff fe35 	bl	80032e8 <_ZNK9__gnu_cxx17__normal_iteratorIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEE4baseEv>
 800367e:	4603      	mov	r3, r0
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	1ae3      	subs	r3, r4, r3
 8003684:	109b      	asrs	r3, r3, #2
 8003686:	4a03      	ldr	r2, [pc, #12]	@ (8003694 <_ZN9__gnu_cxxmiIP16GPIO_TIM_MappingSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_+0x30>)
 8003688:	fb02 f303 	mul.w	r3, r2, r3
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	e9bd37a7 	.word	0xe9bd37a7

08003698 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d006      	beq.n	80036b6 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE11_M_allocateEj+0x1e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6839      	ldr	r1, [r7, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fa53 	bl	8003b58 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE8allocateERS1_j>
 80036b2:	4603      	mov	r3, r0
 80036b4:	e000      	b.n	80036b8 <_ZNSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE11_M_allocateEj+0x20>
 80036b6:	2300      	movs	r3, #0
      }
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80036ce:	f88d 4000 	strb.w	r4, [sp]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fa4c 	bl	8003b76 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80036de:	4603      	mov	r3, r0
      }
 80036e0:	4618      	mov	r0, r3
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd90      	pop	{r4, r7, pc}

080036e8 <_ZSt34__uninitialized_move_if_noexcept_aIP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fa4f 	bl	8003b9a <_ZSt32__make_move_if_noexcept_iteratorI16GPIO_TIM_MappingSt13move_iteratorIPS0_EET0_PT_>
 80036fc:	4604      	mov	r4, r0
 80036fe:	68b8      	ldr	r0, [r7, #8]
 8003700:	f000 fa4b 	bl	8003b9a <_ZSt32__make_move_if_noexcept_iteratorI16GPIO_TIM_MappingSt13move_iteratorIPS0_EET0_PT_>
 8003704:	4601      	mov	r1, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4620      	mov	r0, r4
 800370c:	f000 fa54 	bl	8003bb8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP16GPIO_TIM_MappingES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003710:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8003712:	4618      	mov	r0, r3
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}

0800371a <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa57 	bl	8003bda <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE7destroyIS0_EEvPT_>
	}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1ERKNS_14_Node_iteratorIS4_Lb0ELb1EEE>:
      _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
      : __base_type(__x._M_cur) { }
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fa51 	bl	8003bee <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5eraseENS5_20_Node_const_iteratorIS3_Lb0ELb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003756:	b580      	push	{r7, lr}
 8003758:	b086      	sub	sp, #24
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
      __node_ptr __n = __it._M_cur;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	617b      	str	r3, [r7, #20]
      std::size_t __bkt = _M_bucket_index(*__n);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fa4d 	bl	8003c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8003770:	6138      	str	r0, [r7, #16]
      __node_base_ptr __prev_n = _M_get_previous_node(__bkt, __n);
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	6939      	ldr	r1, [r7, #16]
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa58 	bl	8003c2c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_get_previous_nodeEjPNS5_10_Hash_nodeIS3_Lb1EEE>
 800377c:	60f8      	str	r0, [r7, #12]
      return _M_erase(__bkt, __prev_n, __n);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	6939      	ldr	r1, [r7, #16]
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fa6d 	bl	8003c64 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE>
 800378a:	4603      	mov	r3, r0
    }
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJRS2_SH_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
	_M_emplace(false_type __uks, _Args&&... __args)
 8003794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003796:	b087      	sub	sp, #28
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	7239      	strb	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
	{ return _M_emplace(cend(), __uks, std::forward<_Args>(__args)...); }
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f86a 	bl	800387c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 80037a8:	4604      	mov	r4, r0
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fd6b 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 80037b0:	4605      	mov	r5, r0
 80037b2:	6838      	ldr	r0, [r7, #0]
 80037b4:	f7ff fd67 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 80037b8:	4603      	mov	r3, r0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	462b      	mov	r3, r5
 80037be:	4632      	mov	r2, r6
 80037c0:	4621      	mov	r1, r4
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 faad 	bl	8003d22 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJRS2_SH_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
 80037d2:	b590      	push	{r4, r7, lr}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fade 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 80037e2:	4604      	mov	r4, r0
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff fc3d 	bl	8003068 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 80037ee:	4603      	mov	r3, r0
 80037f0:	4619      	mov	r1, r3
 80037f2:	4620      	mov	r0, r4
 80037f4:	f000 fadf 	bl	8003db6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE7destroyIS5_EEvRS7_PT_>
      _M_deallocate_node_ptr(__n);
 80037f8:	6839      	ldr	r1, [r7, #0]
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fae8 	bl	8003dd0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE22_M_deallocate_node_ptrEPS6_>
    }
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bd90      	pop	{r4, r7, pc}

08003808 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_uses_single_bucketEPPNS5_15_Hash_node_baseE>:
      _M_uses_single_bucket(__buckets_ptr __bkts) const
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
      { return __builtin_expect(__bkts == &_M_single_bucket, false); }
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3318      	adds	r3, #24
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	429a      	cmp	r2, r3
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	4618      	mov	r0, r3
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEj>:
      return __p;
    }

  template<typename _NodeAlloc>
    void
    _Hashtable_alloc<_NodeAlloc>::
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
    _M_deallocate_buckets(__buckets_ptr __bkts,
			  std::size_t __bkt_count)
    {
      typedef typename __buckets_alloc_traits::pointer _Ptr;
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
 8003842:	68b8      	ldr	r0, [r7, #8]
 8003844:	f000 fada 	bl	8003dfc <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>
 8003848:	6178      	str	r0, [r7, #20]
      __buckets_alloc_type __alloc(_M_node_allocator());
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 faa7 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8003850:	4602      	mov	r2, r0
 8003852:	f107 0310 	add.w	r3, r7, #16
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fadb 	bl	8003e14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>
      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
 800385e:	f107 0310 	add.w	r3, r7, #16
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 faed 	bl	8003e46 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>
    }
 800386c:	f107 0310 	add.w	r3, r7, #16
 8003870:	4618      	mov	r0, r3
 8003872:	f000 fadc 	bl	8003e2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>:
      cend() const noexcept
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
      { return const_iterator(nullptr); }
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f000 faea 	bl	8003e64 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJS0_S0_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800389a:	b590      	push	{r4, r7, lr}
 800389c:	b08d      	sub	sp, #52	@ 0x34
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	713a      	strb	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
	_Scoped_node __node { this, std::forward<_Args>(__args)...  };
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	f7ff fb12 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80038ae:	4604      	mov	r4, r0
 80038b0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80038b2:	f7ff fb0e 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f107 0020 	add.w	r0, r7, #32
 80038bc:	4622      	mov	r2, r4
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	f000 fadf 	bl	8003e82 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJS0_S0_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>
	const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());
 80038c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c6:	3304      	adds	r3, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fb0f 	bl	8003eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 80038ce:	4602      	mov	r2, r0
 80038d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fb14 	bl	8003f04 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>
 80038dc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	auto __res = this->_M_compute_hash_code(__hint, __k);
 80038de:	f107 0018 	add.w	r0, r7, #24
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	68f9      	ldr	r1, [r7, #12]
 80038e8:	f000 fb19 	bl	8003f1e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_>
	  = _M_insert_multi_node(__res.first._M_cur, __res.second,
 80038ec:	69b9      	ldr	r1, [r7, #24]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 fbab 	bl	800404e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_>
 80038f8:	4603      	mov	r3, r0
 80038fa:	617b      	str	r3, [r7, #20]
	__node._M_node = nullptr;
 80038fc:	2300      	movs	r3, #0
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
	return __pos;
 8003900:	697c      	ldr	r4, [r7, #20]
      }
 8003902:	f107 0320 	add.w	r3, r7, #32
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fadb 	bl	8003ec2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev>
	return __pos;
 800390c:	4623      	mov	r3, r4
      }
 800390e:	4618      	mov	r0, r3
 8003910:	3734      	adds	r7, #52	@ 0x34
 8003912:	46bd      	mov	sp, r7
 8003914:	bd90      	pop	{r4, r7, pc}

08003916 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE10deallocateEPS0_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	60f8      	str	r0, [r7, #12]
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	225c      	movs	r2, #92	@ 0x5c
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4619      	mov	r1, r3
 800392c:	68b8      	ldr	r0, [r7, #8]
 800392e:	f005 fddf 	bl	80094f0 <_ZdlPvj>
      }
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <_ZNSt12_Destroy_auxILb1EE9__destroyIP16GPIO_TIM_MappingEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4sizeEv>:
      size() const noexcept
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
      { return _M_element_count; }
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	bc80      	pop	{r7}
 8003962:	4770      	bx	lr

08003964 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
	  __detail::_Hashtable_hash_traits<_Hash>::__small_size_threshold();
 8003968:	f000 fc27 	bl	80041ba <_ZNSt8__detail22_Hashtable_hash_traitsI11GPIOPinHashE22__small_size_thresholdEv>
 800396c:	4603      	mov	r3, r0
      }
 800396e:	4618      	mov	r0, r3
 8003970:	bd80      	pop	{r7, pc}

08003972 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE5beginEv>:
      begin() noexcept
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
      { return iterator(_M_begin()); }
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fcc8 	bl	8003310 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 8003980:	4602      	mov	r2, r0
 8003982:	f107 030c 	add.w	r3, r7, #12
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f000 f870 	bl	8003a6e <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE3endEv>:
      end() noexcept
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
      { return iterator(nullptr); }
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f861 	bl	8003a6e <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_key_equals(const _Key& __k,
 80039b6:	b590      	push	{r4, r7, lr}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
	return _M_eq()(__k, _ExtractKey{}(__n._M_v()));
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fc00 	bl	80041c8 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE5_M_eqEv>
 80039c8:	4604      	mov	r4, r0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 f87a 	bl	8003ac6 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 80039d2:	4602      	mov	r2, r0
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f87f 	bl	8003ade <_ZNKSt8__detail10_Select1stclIRKSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS9_>
 80039e0:	4603      	mov	r3, r0
 80039e2:	461a      	mov	r2, r3
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	4620      	mov	r0, r4
 80039e8:	f000 fbfa 	bl	80041e0 <_ZNKSt8equal_toI16GPIO_TIM_MappingEclERKS0_S3_>
 80039ec:	4603      	mov	r3, r0
      }
 80039ee:	4618      	mov	r0, r3
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd90      	pop	{r4, r7, pc}

080039f6 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS3_>:
      _M_hash_code(const _Key& __k) const
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
	return _M_hash()(__k);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fbfc 	bl	80041fe <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv>
 8003a06:	4603      	mov	r3, r0
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe faac 	bl	8001f68 <_ZNK11GPIOPinHashclERK16GPIO_TIM_Mapping>
 8003a10:	4603      	mov	r3, r0
      }
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexEj>:
      _M_bucket_index(__hash_code __c) const
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__c, _M_bucket_count); }
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	6839      	ldr	r1, [r7, #0]
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fbf2 	bl	8004216 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEjj>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_M_find_nodeEjRS2_j>:
      _M_find_node(size_type __bkt, const key_type& __key,
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
	__node_base_ptr __before_n = _M_find_before_node(__bkt, __key, __c);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fbf2 	bl	800423a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j>
 8003a56:	6178      	str	r0, [r7, #20]
	if (__before_n)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_M_find_nodeEjRS2_j+0x28>
	  return static_cast<__node_ptr>(__before_n->_M_nxt);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	e000      	b.n	8003a66 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_M_find_nodeEjRS2_j+0x2a>
	return nullptr;
 8003a64:	2300      	movs	r3, #0
      }
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_iterator(__node_type* __p) noexcept
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f8b6 	bl	8003bee <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <_ZSt7forwardIRNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr

08003aa0 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE14_S_node_equalsERKNS_21_Hash_node_code_cacheILb1EEESH_>:
      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
      { return __lhn._M_hash_code == __rhn._M_hash_code; }
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr

08003ac6 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>:
      _M_v() const noexcept
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b082      	sub	sp, #8
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fbf8 	bl	80042c4 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_ZNKSt8__detail10_Select1stclIRKSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS9_>:
      operator()(_Tp&& __x) const noexcept
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
 8003ae6:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f000 fbf8 	bl	80042de <_ZSt7forwardIRKSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS6_E4typeE>
 8003aee:	4603      	mov	r3, r0
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>:
      _M_addr() noexcept
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
        return static_cast<void*>(&_M_storage);
 8003b00:	687b      	ldr	r3, [r7, #4]
      }
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fc08 	bl	800432c <_ZNKSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fbe8 	bl	80042f4 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE11_S_max_sizeERKS1_>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	109b      	asrs	r3, r3, #2
 8003b44:	4a03      	ldr	r2, [pc, #12]	@ (8003b54 <_ZNKSt6vectorI16GPIO_TIM_MappingSaIS0_EE4sizeEv+0x24>)
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	e9bd37a7 	.word	0xe9bd37a7

08003b58 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003b62:	2200      	movs	r2, #0
 8003b64:	6839      	ldr	r1, [r7, #0]
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fbea 	bl	8004340 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE8allocateEjPKv>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	60f8      	str	r0, [r7, #12]
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	607a      	str	r2, [r7, #4]
 8003b82:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fc06 	bl	800439c <_ZSt12__relocate_aIP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003b90:	4603      	mov	r3, r0
      }
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <_ZSt32__make_move_if_noexcept_iteratorI16GPIO_TIM_MappingSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b084      	sub	sp, #16
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fc14 	bl	80043d6 <_ZNSt13move_iteratorIP16GPIO_TIM_MappingEC1ES1_>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP16GPIO_TIM_MappingES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	68b9      	ldr	r1, [r7, #8]
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fc15 	bl	80043fa <_ZSt18uninitialized_copyISt13move_iteratorIP16GPIO_TIM_MappingES2_ET0_T_S5_S4_>
 8003bd0:	4603      	mov	r3, r0
    }
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE7destroyIS0_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bc80      	pop	{r7}
 8003bec:	4770      	bx	lr

08003bee <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_iterator_base(__node_type* __p) noexcept
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
      : _M_cur(__p) { }
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr

08003c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>:
      _M_bucket_index(const __node_value_type& __n) const noexcept
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	6039      	str	r1, [r7, #0]
      { return __hash_code_base::_M_bucket_index(__n, _M_bucket_count); }
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	6839      	ldr	r1, [r7, #0]
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fc00 	bl	8004422 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_get_previous_nodeEjPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
      __node_base_ptr __prev_n = _M_buckets[__bkt];
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	617b      	str	r3, [r7, #20]
      while (__prev_n->_M_nxt != __n)
 8003c46:	e002      	b.n	8003c4e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_get_previous_nodeEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x22>
	__prev_n = __prev_n->_M_nxt;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]
      while (__prev_n->_M_nxt != __n)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d1f7      	bne.n	8003c48 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_get_previous_nodeEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x1c>
      return __prev_n;
 8003c58:	697b      	ldr	r3, [r7, #20]
    }
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
      if (__prev_n == _M_buckets[__bkt])
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d119      	bne.n	8003cb8 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE+0x54>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	f7ff fc74 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8003c8a:	4604      	mov	r4, r0
	  __n->_M_nxt ? _M_bucket_index(*__n->_M_next()) : 0);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE+0x46>
	  __n->_M_nxt ? _M_bucket_index(*__n->_M_next()) : 0);
 8003c94:	6838      	ldr	r0, [r7, #0]
 8003c96:	f7ff fc6c 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff ffb2 	bl	8003c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	e000      	b.n	8003cac <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE+0x48>
	_M_remove_bucket_begin(__bkt, __n->_M_next(),
 8003caa:	2300      	movs	r3, #0
 8003cac:	4622      	mov	r2, r4
 8003cae:	68b9      	ldr	r1, [r7, #8]
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fbca 	bl	800444a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEEj>
 8003cb6:	e018      	b.n	8003cea <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE+0x86>
      else if (__n->_M_nxt)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d014      	beq.n	8003cea <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE+0x86>
	  size_type __next_bkt = _M_bucket_index(*__n->_M_next());
 8003cc0:	6838      	ldr	r0, [r7, #0]
 8003cc2:	f7ff fc56 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff ff9c 	bl	8003c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8003cd2:	6178      	str	r0, [r7, #20]
	  if (__next_bkt != __bkt)
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d006      	beq.n	8003cea <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_eraseEjPNS5_15_Hash_node_baseEPNS5_10_Hash_nodeIS3_Lb1EEE+0x86>
	    _M_buckets[__next_bkt] = __prev_n;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	601a      	str	r2, [r3, #0]
      __prev_n->_M_nxt = __n->_M_nxt;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	601a      	str	r2, [r3, #0]
      iterator __result(__n->_M_next());
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f7ff fc3d 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	f107 0310 	add.w	r3, r7, #16
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff feb4 	bl	8003a6e <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
      this->_M_deallocate_node(__n);
 8003d06:	6839      	ldr	r1, [r7, #0]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fd62 	bl	80037d2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>
      --_M_element_count;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	1e5a      	subs	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	60da      	str	r2, [r3, #12]
      return __result;
 8003d18:	693b      	ldr	r3, [r7, #16]
    }
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}

08003d22 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE10_M_emplaceIJRS2_SH_EEENS5_14_Node_iteratorIS3_Lb0ELb1EEENS5_20_Node_const_iteratorIS3_Lb0ELb1EEESt17integral_constantIbLb0EEDpOT_>:
      _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003d22:	b590      	push	{r4, r7, lr}
 8003d24:	b08d      	sub	sp, #52	@ 0x34
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	713a      	strb	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
	_Scoped_node __node { this, std::forward<_Args>(__args)...  };
 8003d30:	6838      	ldr	r0, [r7, #0]
 8003d32:	f7ff faa8 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d36:	4604      	mov	r4, r0
 8003d38:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003d3a:	f7ff faa4 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f107 0020 	add.w	r0, r7, #32
 8003d44:	4622      	mov	r2, r4
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	f000 fbb6 	bl	80044b8 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJRS2_SI_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>
	const key_type& __k = _ExtractKey{}(__node._M_node->_M_v());
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f8cb 	bl	8003eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 8003d56:	4602      	mov	r2, r0
 8003d58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f8d0 	bl	8003f04 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>
 8003d64:	62f8      	str	r0, [r7, #44]	@ 0x2c
	auto __res = this->_M_compute_hash_code(__hint, __k);
 8003d66:	f107 0018 	add.w	r0, r7, #24
 8003d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	f000 f8d5 	bl	8003f1e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_>
	  = _M_insert_multi_node(__res.first._M_cur, __res.second,
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 f967 	bl	800404e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_>
 8003d80:	4603      	mov	r3, r0
 8003d82:	617b      	str	r3, [r7, #20]
	__node._M_node = nullptr;
 8003d84:	2300      	movs	r3, #0
 8003d86:	627b      	str	r3, [r7, #36]	@ 0x24
	return __pos;
 8003d88:	697c      	ldr	r4, [r7, #20]
      }
 8003d8a:	f107 0320 	add.w	r3, r7, #32
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f897 	bl	8003ec2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev>
	return __pos;
 8003d94:	4623      	mov	r3, r4
      }
 8003d96:	4618      	mov	r0, r3
 8003d98:	3734      	adds	r7, #52	@ 0x34
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd90      	pop	{r4, r7, pc}

08003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>:
      _M_node_allocator()
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
      { return __ebo_node_alloc::_M_get(); }
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fba6 	bl	80044f8 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EE6_M_getEv>
 8003dac:	4603      	mov	r3, r0
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fba2 	bl	800450c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE7destroyIS5_EEvPT_>
	}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE22_M_deallocate_node_ptrEPS6_>:
    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
 8003dda:	6838      	ldr	r0, [r7, #0]
 8003ddc:	f000 fba0 	bl	8004520 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEES6_Lb0EE10pointer_toERS6_>
 8003de0:	60f8      	str	r0, [r7, #12]
      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ffdb 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2201      	movs	r2, #1
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fba2 	bl	8004538 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE10deallocateERS7_PS6_j>
    }
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <_ZNSt19__ptr_traits_ptr_toIPPNSt8__detail15_Hash_node_baseES2_Lb0EE10pointer_toERS2_>:
       *  @brief  Obtain a pointer to an object
       *  @param  __r  A reference to an object of type `element_type`
       *  @return `addressof(__r)`
      */
      static _GLIBCXX20_CONSTEXPR pointer
      pointer_to(element_type& __r) noexcept
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fba6 	bl	8004556 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fba5 	bl	800456e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fba3 	bl	8004582 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68b9      	ldr	r1, [r7, #8]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fb9d 	bl	8004596 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>:
      _Node_const_iterator(__node_type* __p) noexcept
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
      : __base_type(__p) { }
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff febb 	bl	8003bee <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJS0_S0_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 8003e82:	b5b0      	push	{r4, r5, r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
 8003e8e:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 8003e96:	68bc      	ldr	r4, [r7, #8]
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f7ff f81a 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003e9e:	4605      	mov	r5, r0
 8003ea0:	6838      	ldr	r0, [r7, #0]
 8003ea2:	f7ff f816 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4629      	mov	r1, r5
 8003eac:	4620      	mov	r0, r4
 8003eae:	f000 fb8f 	bl	80045d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJS3_S3_EEEPS6_DpOT_>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	605a      	str	r2, [r3, #4]
	  { }
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bdb0      	pop	{r4, r5, r7, pc}

08003ec2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev>:
	~_Scoped_node() { if (_M_node) _M_h->_M_deallocate_node(_M_node); };
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d007      	beq.n	8003ee2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeD1Ev+0x20>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f7ff fc78 	bl	80037d2 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE18_M_deallocate_nodeEPS6_>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>:
      _M_v() noexcept
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
      { return *_M_valptr(); }
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff f8b7 	bl	8003068 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8003efa:	4603      	mov	r3, r0
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>:
      operator()(_Tp&& __x) const noexcept
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
      { return std::forward<_Tp>(__x).first; }
 8003f0e:	6838      	ldr	r0, [r7, #0]
 8003f10:	f000 fb96 	bl	8004640 <_ZSt7forwardIRSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS5_E4typeE>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4618      	mov	r0, r3
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8003f1e:	b590      	push	{r4, r7, lr}
 8003f20:	b08d      	sub	sp, #52	@ 0x34
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	603b      	str	r3, [r7, #0]
      if (size() <= __small_size_threshold())
 8003f2c:	68b8      	ldr	r0, [r7, #8]
 8003f2e:	f7ff fd0e 	bl	800394e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4sizeEv>
 8003f32:	4604      	mov	r4, r0
 8003f34:	f7ff fd16 	bl	8003964 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22__small_size_thresholdEv>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	429c      	cmp	r4, r3
 8003f3c:	bf94      	ite	ls
 8003f3e:	2301      	movls	r3, #1
 8003f40:	2300      	movhi	r3, #0
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d071      	beq.n	800402c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x10e>
	  if (__hint != cend())
 8003f48:	68b8      	ldr	r0, [r7, #8]
 8003f4a:	f7ff fc97 	bl	800387c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	f107 021c 	add.w	r2, r7, #28
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fe fe98 	bl	8002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d032      	beq.n	8003fcc <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xae>
	      for (auto __it = __hint; __it != cend(); ++__it)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e01f      	b.n	8003fac <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x8e>
		if (this->_M_key_equals(__k, *__it._M_cur))
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	3304      	adds	r3, #4
 8003f70:	461a      	mov	r2, r3
 8003f72:	6839      	ldr	r1, [r7, #0]
 8003f74:	68b8      	ldr	r0, [r7, #8]
 8003f76:	f7ff fd1e 	bl	80039b6 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x84>
		  return { __it, this->_M_hash_code(*__it._M_cur) };
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	68b8      	ldr	r0, [r7, #8]
 8003f88:	f000 fb71 	bl	800466e <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	623b      	str	r3, [r7, #32]
 8003f90:	f107 0220 	add.w	r2, r7, #32
 8003f94:	f107 0318 	add.w	r3, r7, #24
 8003f98:	4619      	mov	r1, r3
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fb74 	bl	8004688 <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 8003fa0:	e051      	b.n	8004046 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x128>
	      for (auto __it = __hint; __it != cend(); ++__it)
 8003fa2:	f107 0318 	add.w	r3, r7, #24
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fb54 	bl	8004654 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 8003fac:	68b8      	ldr	r0, [r7, #8]
 8003fae:	f7ff fc65 	bl	800387c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE4cendEv>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003fba:	f107 0318 	add.w	r3, r7, #24
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe fe65 	bl	8002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1cf      	bne.n	8003f6c <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x4e>
	  for (auto __it = cbegin(); __it != __hint; ++__it)
 8003fcc:	68b8      	ldr	r0, [r7, #8]
 8003fce:	f000 fb74 	bl	80046ba <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE6cbeginEv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	e01f      	b.n	8004018 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xfa>
	    if (this->_M_key_equals(__k, *__it._M_cur))
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6839      	ldr	r1, [r7, #0]
 8003fe0:	68b8      	ldr	r0, [r7, #8]
 8003fe2:	f7ff fce8 	bl	80039b6 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d010      	beq.n	800400e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xf0>
	      return { __it, this->_M_hash_code(*__it._M_cur) };
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	68b8      	ldr	r0, [r7, #8]
 8003ff4:	f000 fb3b 	bl	800466e <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ffc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004000:	f107 0314 	add.w	r3, r7, #20
 8004004:	4619      	mov	r1, r3
 8004006:	68f8      	ldr	r0, [r7, #12]
 8004008:	f000 fb3e 	bl	8004688 <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 800400c:	e01b      	b.n	8004046 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0x128>
	  for (auto __it = cbegin(); __it != __hint; ++__it)
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fb1e 	bl	8004654 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>
 8004018:	1d3a      	adds	r2, r7, #4
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe fe35 	bl	8002c90 <_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EEES7_>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1d5      	bne.n	8003fd8 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_compute_hash_codeENS5_20_Node_const_iteratorIS3_Lb0ELb1EEERS2_+0xba>
      return { __hint, this->_M_hash_code(__k) };
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	68b8      	ldr	r0, [r7, #8]
 8004030:	f7ff fce1 	bl	80039f6 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS3_>
 8004034:	4603      	mov	r3, r0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004038:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800403c:	1d3b      	adds	r3, r7, #4
 800403e:	4619      	mov	r1, r3
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fb21 	bl	8004688 <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>
    }
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	3734      	adds	r7, #52	@ 0x34
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}

0800404e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800404e:	b590      	push	{r4, r7, lr}
 8004050:	b091      	sub	sp, #68	@ 0x44
 8004052:	af02      	add	r7, sp, #8
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
      const __rehash_state& __saved_state = _M_rehash_policy._M_state();
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3310      	adds	r3, #16
 8004060:	4618      	mov	r0, r3
 8004062:	f7fd ff12 	bl	8001e8a <_ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv>
 8004066:	4603      	mov	r3, r0
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	f107 0318 	add.w	r3, r7, #24
 800406e:	637b      	str	r3, [r7, #52]	@ 0x34
	= _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f103 0110 	add.w	r1, r3, #16
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f107 0010 	add.w	r0, r7, #16
 8004082:	2401      	movs	r4, #1
 8004084:	9400      	str	r4, [sp, #0]
 8004086:	f005 fa8f 	bl	80095a8 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>
      if (__do_rehash.first)
 800408a:	7c3b      	ldrb	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d005      	beq.n	800409c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x4e>
	_M_rehash(__do_rehash.second, __saved_state);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004094:	4619      	mov	r1, r3
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 fb22 	bl	80046e0 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_rehashEjRKj>
      this->_M_store_code(*__node, __code);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	33bc      	adds	r3, #188	@ 0xbc
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4619      	mov	r1, r3
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 fb2a 	bl	80046fe <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEj>
      const key_type& __k = _ExtractKey{}(__node->_M_v());
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ff1c 	bl	8003eec <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE4_M_vEv>
 80040b4:	4602      	mov	r2, r0
 80040b6:	f107 031c 	add.w	r3, r7, #28
 80040ba:	4611      	mov	r1, r2
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff ff21 	bl	8003f04 <_ZNKSt8__detail10_Select1stclIRSt4pairIK16GPIO_TIM_MappingS3_EEEONS0_10__1st_typeIT_E4typeEOS8_>
 80040c2:	6338      	str	r0, [r7, #48]	@ 0x30
      size_type __bkt = _M_bucket_index(__code);
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff fca7 	bl	8003a1a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexEj>
 80040cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
	= __builtin_expect(__hint != nullptr, false)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	bf14      	ite	ne
 80040d4:	2301      	movne	r3, #1
 80040d6:	2300      	moveq	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
	    ? __hint
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xaa>
	  && this->_M_equals(__k, __code, *__hint)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	3304      	adds	r3, #4
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fb17 	bl	800471a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f083 0301 	eor.w	r3, r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d007      	beq.n	8004108 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xba>
	    : _M_find_before_node(__bkt, __k, __code);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f89b 	bl	800423a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j>
 8004104:	4603      	mov	r3, r0
	    ? __hint
 8004106:	e000      	b.n	800410a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0xbc>
 8004108:	68bb      	ldr	r3, [r7, #8]
      __node_base_ptr __prev
 800410a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if (__prev)
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03e      	beq.n	8004190 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x142>
	  __node->_M_nxt = __prev->_M_nxt;
 8004112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	601a      	str	r2, [r3, #0]
	  __prev->_M_nxt = __node;
 800411a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	601a      	str	r2, [r3, #0]
	  if (__builtin_expect(__prev == __hint, false))
 8004120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	429a      	cmp	r2, r3
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d033      	beq.n	800419a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
	    if (__node->_M_nxt
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
		&& !this->_M_equals(__k, __code, *__node->_M_next()))
 8004136:	2b00      	cmp	r3, #0
 8004138:	d011      	beq.n	800415e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x110>
 800413a:	6838      	ldr	r0, [r7, #0]
 800413c:	f7ff fa19 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8004140:	4603      	mov	r3, r0
 8004142:	3304      	adds	r3, #4
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fae6 	bl	800471a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 800414e:	4603      	mov	r3, r0
 8004150:	f083 0301 	eor.w	r3, r3, #1
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x110>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x112>
 800415e:	2300      	movs	r3, #0
	    if (__node->_M_nxt
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
		size_type __next_bkt = _M_bucket_index(*__node->_M_next());
 8004164:	6838      	ldr	r0, [r7, #0]
 8004166:	f7ff fa04 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 800416a:	4603      	mov	r3, r0
 800416c:	3304      	adds	r3, #4
 800416e:	4619      	mov	r1, r3
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff fd4a 	bl	8003c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8004176:	6278      	str	r0, [r7, #36]	@ 0x24
		if (__next_bkt != __bkt)
 8004178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417c:	429a      	cmp	r2, r3
 800417e:	d00c      	beq.n	800419a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
		  _M_buckets[__next_bkt] = __node;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e004      	b.n	800419a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE20_M_insert_multi_nodeEPNS5_10_Hash_nodeIS3_Lb1EEEjSI_+0x14c>
	_M_insert_bucket_begin(__bkt, __node);
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fadf 	bl	8004758 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE>
      ++_M_element_count;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	60da      	str	r2, [r3, #12]
      return iterator(__node);
 80041a4:	f107 0320 	add.w	r3, r7, #32
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fc5f 	bl	8003a6e <_ZNSt8__detail14_Node_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 80041b0:	6a3b      	ldr	r3, [r7, #32]
    }
 80041b2:	4618      	mov	r0, r3
 80041b4:	373c      	adds	r7, #60	@ 0x3c
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd90      	pop	{r4, r7, pc}

080041ba <_ZNSt8__detail22_Hashtable_hash_traitsI11GPIOPinHashE22__small_size_thresholdEv>:
      __small_size_threshold() noexcept
 80041ba:	b480      	push	{r7}
 80041bc:	af00      	add	r7, sp, #0
      { return std::__is_fast_hash<_Hash>::value ? 0 : 20; }
 80041be:	2300      	movs	r3, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE5_M_eqEv>:
      _M_eq() const { return _EqualEBO::_M_cget(); }
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fb08 	bl	80047e6 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EE7_M_cgetEv>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZNKSt8equal_toI16GPIO_TIM_MappingEclERKS0_S3_>:
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
      { return __x == __y; }
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	68b8      	ldr	r0, [r7, #8]
 80041f0:	f7fd fea1 	bl	8001f36 <_ZNK16GPIO_TIM_MappingeqERKS_>
 80041f4:	4603      	mov	r3, r0
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv>:
      _M_hash() const { return __ebo_hash::_M_cget(); }
 80041fe:	b580      	push	{r7, lr}
 8004200:	b082      	sub	sp, #8
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 faf7 	bl	80047fa <_ZNKSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EE7_M_cgetEv>
 800420c:	4603      	mov	r3, r0
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEjj>:
      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__c, __bkt_count); }
 8004222:	f107 0314 	add.w	r3, r7, #20
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd fe09 	bl	8001e42 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8004230:	4603      	mov	r3, r0
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
      __node_base_ptr __prev_p = _M_buckets[__bkt];
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4413      	add	r3, r2
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	617b      	str	r3, [r7, #20]
      if (!__prev_p)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x26>
	return nullptr;
 800425c:	2300      	movs	r3, #0
 800425e:	e02d      	b.n	80042bc <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x82>
      for (__node_ptr __p = static_cast<__node_ptr>(__prev_p->_M_nxt);;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	613b      	str	r3, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3304      	adds	r3, #4
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fa53 	bl	800471a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x44>
	    return __prev_p;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	e01e      	b.n	80042bc <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x82>
	  if (!__p->_M_nxt || _M_bucket_index(*__p->_M_next()) != __bkt)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x66>
 8004286:	6938      	ldr	r0, [r7, #16]
 8004288:	f7ff f973 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 800428c:	4603      	mov	r3, r0
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f7ff fcb9 	bl	8003c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 8004298:	4602      	mov	r2, r0
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4293      	cmp	r3, r2
 800429e:	d001      	beq.n	80042a4 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x6a>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x6c>
 80042a4:	2300      	movs	r3, #0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x7e>
	  __prev_p = __p;
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	617b      	str	r3, [r7, #20]
	   __p = __p->_M_next())
 80042ae:	6938      	ldr	r0, [r7, #16]
 80042b0:	f7ff f95f 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80042b4:	6138      	str	r0, [r7, #16]
	  if (this->_M_equals(__k, __code, *__p))
 80042b6:	e7d6      	b.n	8004266 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_find_before_nodeEjRS2_j+0x2c>
	    break;
 80042b8:	bf00      	nop
      return nullptr;
 80042ba:	2300      	movs	r3, #0
    }
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_ZNKSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>:
      _M_valptr() const noexcept
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fa9d 	bl	800480e <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>
 80042d4:	4603      	mov	r3, r0
 80042d6:	4618      	mov	r0, r3
 80042d8:	3708      	adds	r7, #8
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_ZSt7forwardIRKSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bc80      	pop	{r7}
 80042f0:	4770      	bx	lr
	...

080042f4 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80042fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <_ZNSt6vectorI16GPIO_TIM_MappingSaIS0_EE11_S_max_sizeERKS1_+0x34>)
 80042fe:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fa90 	bl	8004826 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE8max_sizeERKS1_>
 8004306:	4603      	mov	r3, r0
 8004308:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800430a:	f107 0208 	add.w	r2, r7, #8
 800430e:	f107 030c 	add.w	r3, r7, #12
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fdc3 	bl	8001ea0 <_ZSt3minIjERKT_S2_S2_>
 800431a:	4603      	mov	r3, r0
 800431c:	681b      	ldr	r3, [r3, #0]
      }
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	01642c85 	.word	0x01642c85

0800432c <_ZNKSt12_Vector_baseI16GPIO_TIM_MappingSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fa77 	bl	8004840 <_ZNKSt15__new_allocatorI16GPIO_TIM_MappingE11_M_max_sizeEv>
 8004352:	4602      	mov	r2, r0
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4293      	cmp	r3, r2
 8004358:	bf8c      	ite	hi
 800435a:	2301      	movhi	r3, #1
 800435c:	2300      	movls	r3, #0
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE8allocateEjPKv+0x58>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004376:	f005 f8d1 	bl	800951c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800437a:	f005 f8cc 	bl	8009516 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	225c      	movs	r2, #92	@ 0x5c
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	4618      	mov	r0, r3
 8004388:	f005 f8b4 	bl	80094f4 <_Znwj>
 800438c:	4603      	mov	r3, r0
      }
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	02c8590b 	.word	0x02c8590b

0800439c <_ZSt12__relocate_aIP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800439c:	b5b0      	push	{r4, r5, r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f000 fa54 	bl	8004858 <_ZSt12__niter_baseIP16GPIO_TIM_MappingET_S2_>
 80043b0:	4604      	mov	r4, r0
 80043b2:	68b8      	ldr	r0, [r7, #8]
 80043b4:	f000 fa50 	bl	8004858 <_ZSt12__niter_baseIP16GPIO_TIM_MappingET_S2_>
 80043b8:	4605      	mov	r5, r0
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fa4c 	bl	8004858 <_ZSt12__niter_baseIP16GPIO_TIM_MappingET_S2_>
 80043c0:	4602      	mov	r2, r0
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	4629      	mov	r1, r5
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 fa50 	bl	800486c <_ZSt14__relocate_a_1IP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_>
 80043cc:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bdb0      	pop	{r4, r5, r7, pc}

080043d6 <_ZNSt13move_iteratorIP16GPIO_TIM_MappingEC1ES1_>:
      move_iterator(iterator_type __i)
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
 80043de:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80043e0:	463b      	mov	r3, r7
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa68 	bl	80048b8 <_ZSt4moveIRP16GPIO_TIM_MappingEONSt16remove_referenceIT_E4typeEOS4_>
 80043e8:	4603      	mov	r3, r0
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <_ZSt18uninitialized_copyISt13move_iteratorIP16GPIO_TIM_MappingES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b086      	sub	sp, #24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800440a:	2300      	movs	r3, #0
 800440c:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fa5a 	bl	80048cc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP16GPIO_TIM_MappingES4_EET0_T_S7_S6_>
 8004418:	4603      	mov	r3, r0
    }
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>:
      _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
 8004422:	b580      	push	{r7, lr}
 8004424:	b086      	sub	sp, #24
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
      { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	4618      	mov	r0, r3
 800443c:	f7fd fd01 	bl	8001e42 <_ZNKSt8__detail18_Mod_range_hashingclEjj>
 8004440:	4603      	mov	r3, r0
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEEj>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
      if (!__next || __next_bkt != __bkt)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEEj+0x1c>
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	429a      	cmp	r2, r3
 8004464:	d023      	beq.n	80044ae <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEEj+0x64>
	  if (__next)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00b      	beq.n	8004484 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEEj+0x3a>
	    _M_buckets[__next_bkt] = _M_buckets[__bkt];
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	441a      	add	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	601a      	str	r2, [r3, #0]
	  if (&_M_before_begin == _M_buckets[__bkt])
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f103 0208 	add.w	r2, r3, #8
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d102      	bne.n	80044a0 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_remove_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEEj+0x56>
	    _M_before_begin._M_nxt = __next;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	609a      	str	r2, [r3, #8]
	  _M_buckets[__bkt] = nullptr;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
    }
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE12_Scoped_nodeC1IJRS2_SI_EEEPNS5_16_Hashtable_allocISaINS5_10_Hash_nodeIS3_Lb1EEEEEEDpOT_>:
	  _Scoped_node(__hashtable_alloc* __h, _Args&&... __args)
 80044b8:	b5b0      	push	{r4, r5, r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
	  : _M_h(__h),
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	601a      	str	r2, [r3, #0]
	    _M_node(__h->_M_allocate_node(std::forward<_Args>(__args)...))
 80044cc:	68bc      	ldr	r4, [r7, #8]
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe fed9 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 80044d4:	4605      	mov	r5, r0
 80044d6:	6838      	ldr	r0, [r7, #0]
 80044d8:	f7fe fed5 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	4629      	mov	r1, r5
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 fa02 	bl	80048ec <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJRS4_SA_EEEPS6_DpOT_>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	605a      	str	r2, [r3, #4]
	  { }
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bdb0      	pop	{r4, r5, r7, pc}

080044f8 <_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEELb1EE6_M_getEv>:
      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE7destroyIS5_EEvPT_>:
	destroy(_Up* __p)
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr

08004520 <_ZNSt19__ptr_traits_ptr_toIPNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEES6_Lb0EE10pointer_toERS6_>:
      pointer_to(element_type& __r) noexcept
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
      { return std::addressof(__r); }
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa17 	bl	800495c <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>
 800452e:	4603      	mov	r3, r0
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 fa13 	bl	8004974 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE10deallocateEPS6_j>
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
   *  @return   The actual address.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR _Tp*
    addressof(_Tp& __r) noexcept
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa1b 	bl	800499a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>
 8004564:	4603      	mov	r3, r0
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	bc80      	pop	{r7}
 8004580:	4770      	bx	lr

08004582 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEED1Ev>:
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr

08004596 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004596:	b580      	push	{r7, lr}
 8004598:	b084      	sub	sp, #16
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4619      	mov	r1, r3
 80045a8:	68b8      	ldr	r0, [r7, #8]
 80045aa:	f004 ffa1 	bl	80094f0 <_ZdlPvj>
      }
 80045ae:	bf00      	nop
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1Ev>:
    struct _Hash_node
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b082      	sub	sp, #8
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fd fc31 	bl	8001e28 <_ZNSt8__detail15_Hash_node_baseC1Ev>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJS3_S3_EEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f7ff fbde 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f9e1 	bl	80049ae <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE8allocateERS7_j>
 80045ec:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 80045ee:	6978      	ldr	r0, [r7, #20]
 80045f0:	f000 f9ec 	bl	80049cc <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_S8_>
 80045f4:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4619      	mov	r1, r3
 80045fa:	20c0      	movs	r0, #192	@ 0xc0
 80045fc:	f7fd fbf1 	bl	8001de2 <_ZnwjPv>
 8004600:	4603      	mov	r3, r0
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ffd7 	bl	80045b6 <_ZNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fbc8 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 800460e:	4604      	mov	r4, r0
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	3304      	adds	r3, #4
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fd27 	bl	8003068 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 800461a:	4605      	mov	r5, r0
 800461c:	68b8      	ldr	r0, [r7, #8]
 800461e:	f7fe fc58 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004622:	4606      	mov	r6, r0
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fe fc54 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 800462a:	4603      	mov	r3, r0
 800462c:	4632      	mov	r2, r6
 800462e:	4629      	mov	r1, r5
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f9d5 	bl	80049e0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JS3_S3_EEEvRS7_PT_DpOT0_>
	    return __n;
 8004636:	693b      	ldr	r3, [r7, #16]
      }
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004640 <_ZSt7forwardIRSt4pairIK16GPIO_TIM_MappingS1_EEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEppEv>:
      operator++() noexcept
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
	this->_M_incr();
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fcf2 	bl	8003048 <_ZNSt8__detail19_Node_iterator_baseISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_incrEv>
	return *this;
 8004664:	687b      	ldr	r3, [r7, #4]
      }
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_hash_code(const _Hash_node_value<_Value, true>& __n) const
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
      { return __n._M_hash_code; }
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bc80      	pop	{r7}
 8004686:	4770      	bx	lr

08004688 <_ZNSt4pairINSt8__detail20_Node_const_iteratorIS_IK16GPIO_TIM_MappingS2_ELb0ELb1EEEjEC1IRS5_jLb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004694:	68b8      	ldr	r0, [r7, #8]
 8004696:	f000 f9bb 	bl	8004a10 <_ZSt7forwardIRNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800469a:	4602      	mov	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe fbc5 	bl	8002e32 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80046a8:	4603      	mov	r3, r0
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE6cbeginEv>:
      cbegin() const noexcept
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
      { return const_iterator(_M_begin()); }
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fe fe24 	bl	8003310 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f107 030c 	add.w	r3, r7, #12
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fbc7 	bl	8003e64 <_ZNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS2_ELb0ELb1EEC1EPNS_10_Hash_nodeIS4_Lb1EEE>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_rehashEjRKj>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash(size_type __bkt_count, const __rehash_state& __state)
    {
      __try
	{
	  _M_rehash_aux(__bkt_count, __unique_keys{});
 80046ec:	461a      	mov	r2, r3
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 f997 	bl	8004a24 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE>
	  // A failure here means that buckets allocation failed.  We only
	  // have to restore hash policy previous state.
	  _M_rehash_policy._M_reset(__state);
	  __throw_exception_again;
	}
    }
 80046f6:	bf00      	nop
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEj>:
      _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
 80046fe:	b480      	push	{r7}
 8004700:	b085      	sub	sp, #20
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
      { __n._M_hash_code = __c; }
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	bf00      	nop
 8004712:	3714      	adds	r7, #20
 8004714:	46bd      	mov	sp, r7
 8004716:	bc80      	pop	{r7}
 8004718:	4770      	bx	lr

0800471a <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE>:
      _M_equals(const _Key& __k, __hash_code __c,
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
 8004726:	603b      	str	r3, [r7, #0]
      { return _S_equals(__c, __n) && _M_key_equals(__k, __n); }
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	33b8      	adds	r3, #184	@ 0xb8
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa36 	bl	8004ba0 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb1EEE>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x34>
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	68b9      	ldr	r1, [r7, #8]
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff f939 	bl	80039b6 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_key_equalsERS3_RKNS_16_Hash_node_valueIS4_Lb1EEE>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x34>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <_ZNKSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_M_equalsERS3_jRKNS_16_Hash_node_valueIS4_Lb1EEE+0x36>
 800474e:	2300      	movs	r3, #0
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE>:
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
      if (_M_buckets[__bkt])
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d011      	beq.n	8004798 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x40>
	  __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt]->_M_nxt = __node;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
    }
 8004796:	e022      	b.n	80047de <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x86>
	  __node->_M_nxt = _M_before_begin._M_nxt;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	601a      	str	r2, [r3, #0]
	  _M_before_begin._M_nxt = __node;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]
	  if (__node->_M_nxt)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00f      	beq.n	80047ce <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE22_M_insert_bucket_beginEjPNS5_10_Hash_nodeIS3_Lb1EEE+0x76>
	    _M_buckets[_M_bucket_index(*__node->_M_next())] = __node;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681c      	ldr	r4, [r3, #0]
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe fedd 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 80047b8:	4603      	mov	r3, r0
 80047ba:	3304      	adds	r3, #4
 80047bc:	4619      	mov	r1, r3
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7ff fa23 	bl	8003c0a <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE15_M_bucket_indexERKNS5_16_Hash_node_valueIS3_Lb1EEE>
 80047c4:	4603      	mov	r3, r0
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4423      	add	r3, r4
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	601a      	str	r2, [r3, #0]
	  _M_buckets[__bkt] = &_M_before_begin;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4413      	add	r3, r2
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	3208      	adds	r2, #8
 80047dc:	601a      	str	r2, [r3, #0]
    }
 80047de:	bf00      	nop
 80047e0:	3714      	adds	r7, #20
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}

080047e6 <_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toI16GPIO_TIM_MappingELb1EE7_M_cgetEv>:
      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr

080047fa <_ZNKSt8__detail21_Hashtable_ebo_helperILi1E11GPIOPinHashLb1EE7_M_cgetEv>:
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f9d4 	bl	8004bc4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>
 800481c:	4603      	mov	r3, r0
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f9d2 	bl	8004bd8 <_ZNKSt15__new_allocatorI16GPIO_TIM_MappingE8max_sizeEv>
 8004834:	4603      	mov	r3, r0
      }
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <_ZNKSt15__new_allocatorI16GPIO_TIM_MappingE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004848:	4b02      	ldr	r3, [pc, #8]	@ (8004854 <_ZNKSt15__new_allocatorI16GPIO_TIM_MappingE11_M_max_sizeEv+0x14>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	01642c85 	.word	0x01642c85

08004858 <_ZSt12__niter_baseIP16GPIO_TIM_MappingET_S2_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <_ZSt14__relocate_a_1IP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800487e:	e012      	b.n	80048a6 <_ZSt14__relocate_a_1IP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_+0x3a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8004880:	6978      	ldr	r0, [r7, #20]
 8004882:	f000 f9b5 	bl	8004bf0 <_ZSt11__addressofI16GPIO_TIM_MappingEPT_RS1_>
 8004886:	4604      	mov	r4, r0
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f9b1 	bl	8004bf0 <_ZSt11__addressofI16GPIO_TIM_MappingEPT_RS1_>
 800488e:	4603      	mov	r3, r0
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	4619      	mov	r1, r3
 8004894:	4620      	mov	r0, r4
 8004896:	f000 f9b5 	bl	8004c04 <_ZSt19__relocate_object_aI16GPIO_TIM_MappingS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	335c      	adds	r3, #92	@ 0x5c
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	335c      	adds	r3, #92	@ 0x5c
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d1e8      	bne.n	8004880 <_ZSt14__relocate_a_1IP16GPIO_TIM_MappingS1_SaIS0_EET0_T_S4_S3_RT1_+0x14>
      return __cur;
 80048ae:	697b      	ldr	r3, [r7, #20]
    }
 80048b0:	4618      	mov	r0, r3
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd90      	pop	{r4, r7, pc}

080048b8 <_ZSt4moveIRP16GPIO_TIM_MappingEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4618      	mov	r0, r3
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP16GPIO_TIM_MappingES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
	{ return std::__do_uninit_copy(__first, __last, __result); }
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	68b9      	ldr	r1, [r7, #8]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f9ac 	bl	8004c3a <_ZSt16__do_uninit_copyISt13move_iteratorIP16GPIO_TIM_MappingES2_ET0_T_S5_S4_>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE16_M_allocate_nodeIJRS4_SA_EEEPS6_DpOT_>:
      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
 80048ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fa50 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 80048fe:	4603      	mov	r3, r0
 8004900:	2101      	movs	r1, #1
 8004902:	4618      	mov	r0, r3
 8004904:	f000 f853 	bl	80049ae <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE8allocateERS7_j>
 8004908:	6178      	str	r0, [r7, #20]
	__node_ptr __n = std::__to_address(__nptr);
 800490a:	6978      	ldr	r0, [r7, #20]
 800490c:	f000 f85e 	bl	80049cc <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_S8_>
 8004910:	6138      	str	r0, [r7, #16]
	    ::new ((void*)__n) __node_type;
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4619      	mov	r1, r3
 8004916:	20c0      	movs	r0, #192	@ 0xc0
 8004918:	f7fd fa63 	bl	8001de2 <_ZnwjPv>
 800491c:	4603      	mov	r3, r0
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fe49 	bl	80045b6 <_ZNSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EEC1Ev>
	    __node_alloc_traits::construct(_M_node_allocator(),
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff fa3a 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 800492a:	4604      	mov	r4, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	3304      	adds	r3, #4
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fb99 	bl	8003068 <_ZNSt8__detail21_Hash_node_value_baseISt4pairIK16GPIO_TIM_MappingS2_EE9_M_valptrEv>
 8004936:	4605      	mov	r5, r0
 8004938:	68b8      	ldr	r0, [r7, #8]
 800493a:	f7fe fca4 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 800493e:	4606      	mov	r6, r0
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fe fca0 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8004946:	4603      	mov	r3, r0
 8004948:	4632      	mov	r2, r6
 800494a:	4629      	mov	r1, r5
 800494c:	4620      	mov	r0, r4
 800494e:	f000 f9a3 	bl	8004c98 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JRS4_SA_EEEvRS7_PT_DpOT0_>
	    return __n;
 8004952:	693b      	ldr	r3, [r7, #16]
      }
 8004954:	4618      	mov	r0, r3
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800495c <_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>:
    addressof(_Tp& __r) noexcept
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
    { return std::__addressof(__r); }
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f9af 	bl	8004cc8 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>
 800496a:	4603      	mov	r3, r0
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	019b      	lsls	r3, r3, #6
 800498a:	4619      	mov	r1, r3
 800498c:	68b8      	ldr	r0, [r7, #8]
 800498e:	f004 fdaf 	bl	80094f0 <_ZdlPvj>
      }
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b082      	sub	sp, #8
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
 80049b6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80049b8:	2200      	movs	r2, #0
 80049ba:	6839      	ldr	r1, [r7, #0]
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f98d 	bl	8004cdc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv>
 80049c2:	4603      	mov	r3, r0
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <_ZSt12__to_addressINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_S8_>:
  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
 80049d4:	687b      	ldr	r3, [r7, #4]
    }
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JS3_S3_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fe fa6f 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80049f4:	4604      	mov	r4, r0
 80049f6:	6838      	ldr	r0, [r7, #0]
 80049f8:	f7fe fa6b 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4622      	mov	r2, r4
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f998 	bl	8004d38 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JS3_S3_EEEvPT_DpOT0_>
	}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd90      	pop	{r4, r7, pc}

08004a10 <_ZSt7forwardIRNSt8__detail20_Node_const_iteratorISt4pairIK16GPIO_TIM_MappingS3_ELb0ELb1EEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bc80      	pop	{r7}
 8004a22:	4770      	bx	lr

08004a24 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE>:
  template<typename _Key, typename _Value, typename _Alloc,
	   typename _ExtractKey, typename _Equal,
	   typename _Hash, typename _RangeHash, typename _Unused,
	   typename _RehashPolicy, typename _Traits>
    void
    _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08e      	sub	sp, #56	@ 0x38
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	713a      	strb	r2, [r7, #4]
	       _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>::
    _M_rehash_aux(size_type __bkt_count, false_type /* __uks */)
    {
      __buckets_ptr __new_buckets = _M_allocate_buckets(__bkt_count);
 8004a30:	68b9      	ldr	r1, [r7, #8]
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f000 f99e 	bl	8004d74 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj>
 8004a38:	6238      	str	r0, [r7, #32]
      __node_ptr __p = _M_begin();
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7fe fc68 	bl	8003310 <_ZNKSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE8_M_beginEv>
 8004a40:	6378      	str	r0, [r7, #52]	@ 0x34
      _M_before_begin._M_nxt = nullptr;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	609a      	str	r2, [r3, #8]
      std::size_t __bbegin_bkt = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	633b      	str	r3, [r7, #48]	@ 0x30
      std::size_t __prev_bkt = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      __node_ptr __prev_p = nullptr;
 8004a50:	2300      	movs	r3, #0
 8004a52:	62bb      	str	r3, [r7, #40]	@ 0x28
      bool __check_bucket = false;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      while (__p)
 8004a5a:	e074      	b.n	8004b46 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x122>
	{
	  __node_ptr __next = __p->_M_next();
 8004a5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004a5e:	f7fe fd88 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8004a62:	61b8      	str	r0, [r7, #24]
	  std::size_t __bkt
	    = __hash_code_base::_M_bucket_index(*__p, __bkt_count);
 8004a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a66:	3304      	adds	r3, #4
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fcd8 	bl	8004422 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8004a72:	6178      	str	r0, [r7, #20]

	  if (__prev_p && __prev_bkt == __bkt)
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x74>
 8004a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d10a      	bne.n	8004a98 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x74>
	    {
	      // Previous insert was already in this bucket, we insert after
	      // the previously inserted one to preserve equivalent elements
	      // relative order.
	      __p->_M_nxt = __prev_p->_M_nxt;
 8004a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a88:	601a      	str	r2, [r3, #0]
	      __prev_p->_M_nxt = __p;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a8e:	601a      	str	r2, [r3, #0]
	      // Inserting after a node in a bucket require to check that we
	      // haven't change the bucket last node, in this case next
	      // bucket containing its before begin node must be updated. We
	      // schedule a check as soon as we move out of the sequence of
	      // equivalent nodes to limit the number of checks.
	      __check_bucket = true;
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004a96:	e050      	b.n	8004b3a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x116>
	    }
	  else
	    {
	      if (__check_bucket)
 8004a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01b      	beq.n	8004ad8 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xb4>
		{
		  // Check if we shall update the next bucket because of
		  // insertions into __prev_bkt bucket.
		  if (__prev_p->_M_nxt)
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d014      	beq.n	8004ad2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xae>
		    {
		      std::size_t __next_bkt
			= __hash_code_base::_M_bucket_index(
			  *__prev_p->_M_next(), __bkt_count);
 8004aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aaa:	f7fe fd62 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8004aae:	4603      	mov	r3, r0
			= __hash_code_base::_M_bucket_index(
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f7ff fcb3 	bl	8004422 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8004abc:	6138      	str	r0, [r7, #16]
		      if (__next_bkt != __prev_bkt)
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d005      	beq.n	8004ad2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xae>
			__new_buckets[__next_bkt] = __prev_p;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	6a3a      	ldr	r2, [r7, #32]
 8004acc:	4413      	add	r3, r2
 8004ace:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad0:	601a      	str	r2, [r3, #0]
		    }
		  __check_bucket = false;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

	      if (!__new_buckets[__bkt])
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	6a3a      	ldr	r2, [r7, #32]
 8004ade:	4413      	add	r3, r2
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11a      	bne.n	8004b1c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xf8>
		{
		  __p->_M_nxt = _M_before_begin._M_nxt;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aec:	601a      	str	r2, [r3, #0]
		  _M_before_begin._M_nxt = __p;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004af2:	609a      	str	r2, [r3, #8]
		  __new_buckets[__bkt] = &_M_before_begin;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	4413      	add	r3, r2
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	3208      	adds	r2, #8
 8004b00:	601a      	str	r2, [r3, #0]
		  if (__p->_M_nxt)
 8004b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0xf2>
		    __new_buckets[__bbegin_bkt] = __p;
 8004b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	6a3a      	ldr	r2, [r7, #32]
 8004b10:	4413      	add	r3, r2
 8004b12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b14:	601a      	str	r2, [r3, #0]
		  __bbegin_bkt = __bkt;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b1a:	e00e      	b.n	8004b3a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x116>
		}
	      else
		{
		  __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	4413      	add	r3, r2
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b2a:	601a      	str	r2, [r3, #0]
		  __new_buckets[__bkt]->_M_nxt = __p;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	4413      	add	r3, r2
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b38:	601a      	str	r2, [r3, #0]
		}
	    }
	  __prev_p = __p;
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	  __prev_bkt = __bkt;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  __p = __next;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	637b      	str	r3, [r7, #52]	@ 0x34
      while (__p)
 8004b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d187      	bne.n	8004a5c <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x38>
	}

      if (__check_bucket && __prev_p->_M_nxt)
 8004b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d018      	beq.n	8004b86 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
 8004b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d014      	beq.n	8004b86 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
	{
	  std::size_t __next_bkt
	    = __hash_code_base::_M_bucket_index(*__prev_p->_M_next(),
 8004b5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b5e:	f7fe fd08 	bl	8003572 <_ZNKSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS2_ELb1EE7_M_nextEv>
 8004b62:	4603      	mov	r3, r0
 8004b64:	3304      	adds	r3, #4
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f7ff fc59 	bl	8004422 <_ZNKSt8__detail15_Hash_code_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stE11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS4_Lb1EEEj>
 8004b70:	61f8      	str	r0, [r7, #28]
						__bkt_count);
	  if (__next_bkt != __prev_bkt)
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d005      	beq.n	8004b86 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE13_M_rehash_auxEjSt17integral_constantIbLb0EE+0x162>
	    __new_buckets[__next_bkt] = __prev_p;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	6a3a      	ldr	r2, [r7, #32]
 8004b80:	4413      	add	r3, r2
 8004b82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b84:	601a      	str	r2, [r3, #0]
	}

      _M_deallocate_buckets();
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7fe f993 	bl	8002eb2 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE21_M_deallocate_bucketsEv>
      _M_bucket_count = __bkt_count;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	605a      	str	r2, [r3, #4]
      _M_buckets = __new_buckets;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	601a      	str	r2, [r3, #0]
    }
 8004b98:	bf00      	nop
 8004b9a:	3738      	adds	r7, #56	@ 0x38
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_ZNSt8__detail15_Hashtable_baseI16GPIO_TIM_MappingSt4pairIKS1_S1_ENS_10_Select1stESt8equal_toIS1_E11GPIOPinHashNS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb0EEEE9_S_equalsEjRKNS_21_Hash_node_code_cacheILb1EEE>:
      _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
      { return __c == __n._M_hash_code; }
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr

08004bc4 <_ZNK9__gnu_cxx16__aligned_bufferISt4pairIK16GPIO_TIM_MappingS2_EE7_M_addrEv>:
      _M_addr() const noexcept
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
        return static_cast<const void*>(&_M_storage);
 8004bcc:	687b      	ldr	r3, [r7, #4]
      }
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <_ZNKSt15__new_allocatorI16GPIO_TIM_MappingE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fe2d 	bl	8004840 <_ZNKSt15__new_allocatorI16GPIO_TIM_MappingE11_M_max_sizeEv>
 8004be6:	4603      	mov	r3, r0
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <_ZSt11__addressofI16GPIO_TIM_MappingEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <_ZSt19__relocate_object_aI16GPIO_TIM_MappingS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8004c10:	68b8      	ldr	r0, [r7, #8]
 8004c12:	f000 f8cc 	bl	8004dae <_ZSt4moveIR16GPIO_TIM_MappingEONSt16remove_referenceIT_E4typeEOS3_>
 8004c16:	4603      	mov	r3, r0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f8d0 	bl	8004dc2 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8004c22:	68b8      	ldr	r0, [r7, #8]
 8004c24:	f7ff ffe4 	bl	8004bf0 <_ZSt11__addressofI16GPIO_TIM_MappingEPT_RS1_>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fe fd74 	bl	800371a <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE7destroyIS0_EEvRS1_PT_>
    }
 8004c32:	bf00      	nop
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <_ZSt16__do_uninit_copyISt13move_iteratorIP16GPIO_TIM_MappingES2_ET0_T_S5_S4_>:
    __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 8004c3a:	b590      	push	{r4, r7, lr}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
      _ForwardIterator __cur = __result;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	617b      	str	r3, [r7, #20]
	  for (; __first != __last; ++__first, (void)++__cur)
 8004c4a:	e015      	b.n	8004c78 <_ZSt16__do_uninit_copyISt13move_iteratorIP16GPIO_TIM_MappingES2_ET0_T_S5_S4_+0x3e>
	    std::_Construct(std::__addressof(*__cur), *__first);
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f7ff ffcf 	bl	8004bf0 <_ZSt11__addressofI16GPIO_TIM_MappingEPT_RS1_>
 8004c52:	4604      	mov	r4, r0
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 f8e6 	bl	8004e2a <_ZNKSt13move_iteratorIP16GPIO_TIM_MappingEdeEv>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4619      	mov	r1, r3
 8004c62:	4620      	mov	r0, r4
 8004c64:	f000 f8ec 	bl	8004e40 <_ZSt10_ConstructI16GPIO_TIM_MappingJS0_EEvPT_DpOT0_>
	  for (; __first != __last; ++__first, (void)++__cur)
 8004c68:	f107 030c 	add.w	r3, r7, #12
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 f8cc 	bl	8004e0a <_ZNSt13move_iteratorIP16GPIO_TIM_MappingEppEv>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	335c      	adds	r3, #92	@ 0x5c
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	f107 0208 	add.w	r2, r7, #8
 8004c7c:	f107 030c 	add.w	r3, r7, #12
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 f8b0 	bl	8004de8 <_ZStneIP16GPIO_TIM_MappingEbRKSt13move_iteratorIT_ES6_>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1de      	bne.n	8004c4c <_ZSt16__do_uninit_copyISt13move_iteratorIP16GPIO_TIM_MappingES2_ET0_T_S5_S4_+0x12>
	  return __cur;
 8004c8e:	697b      	ldr	r3, [r7, #20]
    }
 8004c90:	4618      	mov	r0, r3
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd90      	pop	{r4, r7, pc}

08004c98 <_ZNSt16allocator_traitsISaINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE9constructIS5_JRS4_SA_EEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fe faed 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8004cac:	4604      	mov	r4, r0
 8004cae:	6838      	ldr	r0, [r7, #0]
 8004cb0:	f7fe fae9 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f8d9 	bl	8004e72 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JRS4_S9_EEEvPT_DpOT0_>
	}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd90      	pop	{r4, r7, pc}

08004cc8 <_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f8e1 	bl	8004eb0 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	bf8c      	ite	hi
 8004cf6:	2301      	movhi	r3, #1
 8004cf8:	2300      	movls	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4a09      	ldr	r2, [pc, #36]	@ (8004d34 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x58>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8004d12:	f004 fc03 	bl	800951c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8004d16:	f004 fbfe 	bl	8009516 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	4413      	add	r3, r2
 8004d22:	019b      	lsls	r3, r3, #6
 8004d24:	4618      	mov	r0, r3
 8004d26:	f004 fbe5 	bl	80094f4 <_Znwj>
 8004d2a:	4603      	mov	r3, r0
      }
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	01555555 	.word	0x01555555

08004d38 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JS3_S3_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004d38:	b5b0      	push	{r4, r5, r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	20b8      	movs	r0, #184	@ 0xb8
 8004d4c:	f7fd f849 	bl	8001de2 <_ZnwjPv>
 8004d50:	4604      	mov	r4, r0
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fe f8bd 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004d58:	4605      	mov	r5, r0
 8004d5a:	6838      	ldr	r0, [r7, #0]
 8004d5c:	f7fe f8b9 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004d60:	4603      	mov	r3, r0
 8004d62:	461a      	mov	r2, r3
 8004d64:	4629      	mov	r1, r5
 8004d66:	4620      	mov	r0, r4
 8004d68:	f000 f8ae 	bl	8004ec8 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS0_S0_Lb1EEEOT_OT0_>
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bdb0      	pop	{r4, r5, r7, pc}

08004d74 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj>:
      _M_allocate_buckets(size_type __bkt_count)
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
	if (__builtin_expect(__bkt_count == 1, false))
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj+0x26>
	    _M_single_bucket = nullptr;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	619a      	str	r2, [r3, #24]
	    return &_M_single_bucket;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	3318      	adds	r3, #24
 8004d98:	e005      	b.n	8004da6 <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEE19_M_allocate_bucketsEj+0x32>
	return __hashtable_alloc::_M_allocate_buckets(__bkt_count);
 8004d9a:	6839      	ldr	r1, [r7, #0]
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f8b4 	bl	8004f0a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_allocate_bucketsEj>
 8004da2:	4603      	mov	r3, r0
 8004da4:	bf00      	nop
      }
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <_ZSt4moveIR16GPIO_TIM_MappingEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr

08004dc2 <_ZNSt16allocator_traitsISaI16GPIO_TIM_MappingEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe f87f 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f8c2 	bl	8004f64 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE9constructIS0_JS0_EEEvPT_DpOT0_>
	}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <_ZStneIP16GPIO_TIM_MappingEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f8cf 	bl	8004f98 <_ZSteqIP16GPIO_TIM_MappingEbRKSt13move_iteratorIT_ES6_>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f083 0301 	eor.w	r3, r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <_ZNSt13move_iteratorIP16GPIO_TIM_MappingEppEv>:
      operator++()
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f103 025c 	add.w	r2, r3, #92	@ 0x5c
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	601a      	str	r2, [r3, #0]
	return *this;
 8004e1e:	687b      	ldr	r3, [r7, #4]
      }
 8004e20:	4618      	mov	r0, r3
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <_ZNKSt13move_iteratorIP16GPIO_TIM_MappingEdeEv>:
      operator*() const
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <_ZSt10_ConstructI16GPIO_TIM_MappingJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
      ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	205c      	movs	r0, #92	@ 0x5c
 8004e50:	f7fc ffc7 	bl	8001de2 <_ZnwjPv>
 8004e54:	4604      	mov	r4, r0
 8004e56:	6838      	ldr	r0, [r7, #0]
 8004e58:	f7fe f83b 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	4620      	mov	r0, r4
 8004e60:	4619      	mov	r1, r3
 8004e62:	235c      	movs	r3, #92	@ 0x5c
 8004e64:	461a      	mov	r2, r3
 8004e66:	f006 fe3e 	bl	800bae6 <memcpy>
    }
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}

08004e72 <_ZNSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE9constructIS5_JRS4_S9_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004e72:	b5b0      	push	{r4, r5, r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4619      	mov	r1, r3
 8004e84:	20b8      	movs	r0, #184	@ 0xb8
 8004e86:	f7fc ffac 	bl	8001de2 <_ZnwjPv>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7fe f9fa 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e92:	4605      	mov	r5, r0
 8004e94:	6838      	ldr	r0, [r7, #0]
 8004e96:	f7fe f9f6 	bl	8003286 <_ZSt7forwardIRK16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f000 f88f 	bl	8004fc4 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS1_S0_Lb1EEERS1_S4_>
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004eb0 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004eb8:	4b02      	ldr	r3, [pc, #8]	@ (8004ec4 <_ZNKSt15__new_allocatorINSt8__detail10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEE11_M_max_sizeEv+0x14>)
      }
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr
 8004ec4:	00aaaaaa 	.word	0x00aaaaaa

08004ec8 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS0_S0_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004ed4:	68b8      	ldr	r0, [r7, #8]
 8004ed6:	f7fd fffc 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004eda:	4602      	mov	r2, r0
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	235c      	movs	r3, #92	@ 0x5c
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f006 fdfe 	bl	800bae6 <memcpy>
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7fd fff1 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	335c      	adds	r3, #92	@ 0x5c
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	225c      	movs	r2, #92	@ 0x5c
 8004efa:	4618      	mov	r0, r3
 8004efc:	f006 fdf3 	bl	800bae6 <memcpy>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE19_M_allocate_bucketsEj>:
    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
 8004f0a:	b590      	push	{r4, r7, lr}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	6039      	str	r1, [r7, #0]
      __buckets_alloc_type __alloc(_M_node_allocator());
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fe ff42 	bl	8003d9e <_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS3_ELb1EEEEE17_M_node_allocatorEv>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	f107 030c 	add.w	r3, r7, #12
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe ff76 	bl	8003e14 <_ZNSaIPNSt8__detail15_Hash_node_baseEEC1INS_10_Hash_nodeISt4pairIK16GPIO_TIM_MappingS6_ELb1EEEEERKSaIT_E>
      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
 8004f28:	f107 030c 	add.w	r3, r7, #12
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f863 	bl	8004ffa <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>
 8004f34:	6178      	str	r0, [r7, #20]
      __buckets_ptr __p = std::__to_address(__ptr);
 8004f36:	6978      	ldr	r0, [r7, #20]
 8004f38:	f000 f86e 	bl	8005018 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>
 8004f3c:	6138      	str	r0, [r7, #16]
      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4610      	mov	r0, r2
 8004f46:	461a      	mov	r2, r3
 8004f48:	2100      	movs	r1, #0
 8004f4a:	f006 fcea 	bl	800b922 <memset>
      return __p;
 8004f4e:	693c      	ldr	r4, [r7, #16]
    }
 8004f50:	f107 030c 	add.w	r3, r7, #12
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe ff6a 	bl	8003e2e <_ZNSaIPNSt8__detail15_Hash_node_baseEED1Ev>
      return __p;
 8004f5a:	4623      	mov	r3, r4
    }
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd90      	pop	{r4, r7, pc}

08004f64 <_ZNSt15__new_allocatorI16GPIO_TIM_MappingE9constructIS0_JS0_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8004f64:	b590      	push	{r4, r7, lr}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4619      	mov	r1, r3
 8004f74:	205c      	movs	r0, #92	@ 0x5c
 8004f76:	f7fc ff34 	bl	8001de2 <_ZnwjPv>
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7fd ffa8 	bl	8002ed2 <_ZSt7forwardI16GPIO_TIM_MappingEOT_RNSt16remove_referenceIS1_E4typeE>
 8004f82:	4603      	mov	r3, r0
 8004f84:	4620      	mov	r0, r4
 8004f86:	4619      	mov	r1, r3
 8004f88:	235c      	movs	r3, #92	@ 0x5c
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f006 fdab 	bl	800bae6 <memcpy>
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd90      	pop	{r4, r7, pc}

08004f98 <_ZSteqIP16GPIO_TIM_MappingEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f842 	bl	800502c <_ZNKSt13move_iteratorIP16GPIO_TIM_MappingE4baseEv>
 8004fa8:	4604      	mov	r4, r0
 8004faa:	6838      	ldr	r0, [r7, #0]
 8004fac:	f000 f83e 	bl	800502c <_ZNKSt13move_iteratorIP16GPIO_TIM_MappingE4baseEv>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	429c      	cmp	r4, r3
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd90      	pop	{r4, r7, pc}

08004fc4 <_ZNSt4pairIK16GPIO_TIM_MappingS0_EC1IS1_S0_Lb1EEERS1_S4_>:
      constexpr pair(const _T1& __a, const _T2& __b)
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
      : first(__a), second(__b) { }
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	235c      	movs	r3, #92	@ 0x5c
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f006 fd83 	bl	800bae6 <memcpy>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	335c      	adds	r3, #92	@ 0x5c
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	225c      	movs	r2, #92	@ 0x5c
 8004fea:	4618      	mov	r0, r3
 8004fec:	f006 fd7b 	bl	800bae6 <memcpy>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_ZNSt16allocator_traitsISaIPNSt8__detail15_Hash_node_baseEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005004:	2200      	movs	r2, #0
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f81a 	bl	8005042 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>
 800500e:	4603      	mov	r3, r0
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <_ZSt12__to_addressIPNSt8__detail15_Hash_node_baseEEPT_S4_>:
    __to_address(_Tp* __ptr) noexcept
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
      return __ptr;
 8005020:	687b      	ldr	r3, [r7, #4]
    }
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <_ZNKSt13move_iteratorIP16GPIO_TIM_MappingE4baseEv>:
      base() const
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr

08005042 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 f820 	bl	8005094 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>
 8005054:	4602      	mov	r2, r0
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4293      	cmp	r3, r2
 800505a:	bf8c      	ite	hi
 800505c:	2301      	movhi	r3, #1
 800505e:	2300      	movls	r3, #0
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf14      	ite	ne
 8005066:	2301      	movne	r3, #1
 8005068:	2300      	moveq	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005076:	d301      	bcc.n	800507c <_ZNSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8005078:	f004 fa50 	bl	800951c <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800507c:	f004 fa4b 	bl	8009516 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4618      	mov	r0, r3
 8005086:	f004 fa35 	bl	80094f4 <_Znwj>
 800508a:	4603      	mov	r3, r0
      }
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <_ZNKSt15__new_allocatorIPNSt8__detail15_Hash_node_baseEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800509c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEED1Ev>:
    class unordered_multimap
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b082      	sub	sp, #8
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7fd fd5a 	bl	8002b6e <_ZNSt10_HashtableI16GPIO_TIM_MappingSt4pairIKS0_S0_ESaIS3_ENSt8__detail10_Select1stESt8equal_toIS0_E11GPIOPinHashNS5_18_Mod_range_hashingENS5_20_Default_ranged_hashENS5_20_Prime_rehash_policyENS5_17_Hashtable_traitsILb1ELb0ELb0EEEED1Ev>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_Z41__static_initialization_and_destruction_0ii>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050da:	4293      	cmp	r3, r2
 80050dc:	d102      	bne.n	80050e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::unordered_multimap<GPIO_TIM_Mapping, GPIO_TIM_Mapping, GPIOPinHash> gpioMap;
 80050de:	4809      	ldr	r0, [pc, #36]	@ (8005104 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80050e0:	f7fc ffcc 	bl	800207c <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEEC1Ev>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d107      	bne.n	80050fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d102      	bne.n	80050fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 80050f4:	4803      	ldr	r0, [pc, #12]	@ (8005104 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80050f6:	f7ff ffd8 	bl	80050aa <_ZNSt18unordered_multimapI16GPIO_TIM_MappingS0_11GPIOPinHashSt8equal_toIS0_ESaISt4pairIKS0_S0_EEED1Ev>
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000214 	.word	0x20000214

08005108 <_GLOBAL__sub_I_gpioMap>:
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
 800510c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005110:	2001      	movs	r0, #1
 8005112:	f7ff ffd7 	bl	80050c4 <_Z41__static_initialization_and_destruction_0ii>
 8005116:	bd80      	pop	{r7, pc}

08005118 <_GLOBAL__sub_D_gpioMap>:
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
 800511c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005120:	2000      	movs	r0, #0
 8005122:	f7ff ffcf 	bl	80050c4 <_Z41__static_initialization_and_destruction_0ii>
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_TIM_PeriodElapsedCallback>:
uint32_t millis(){
	return tick;
}
///////////	+++++++++ CALL BACK	+++++++++++++////////

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){ /// ngat 1ms
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a06      	ldr	r2, [pc, #24]	@ (8005150 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d104      	bne.n	8005144 <HAL_TIM_PeriodElapsedCallback+0x1c>
		tick++;
 800513a:	4b06      	ldr	r3, [pc, #24]	@ (8005154 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	3301      	adds	r3, #1
 8005140:	4a04      	ldr	r2, [pc, #16]	@ (8005154 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005142:	6013      	str	r3, [r2, #0]

	if(htim->Instance == TIM7){ // ngắt sau 10ms
		///// update map
	}

}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40001000 	.word	0x40001000
 8005154:	20000230 	.word	0x20000230

08005158 <_ZN19Info_position_robotC1Effsb>:
    float y;
    int16_t angle;
    bool st ;
	// 1 byte cua struct

	Info_position_robot(float x,float y,int16_t angle,bool st): x(x),y(y),angle(angle),st(st){}
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	807b      	strh	r3, [r7, #2]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	887a      	ldrh	r2, [r7, #2]
 8005176:	811a      	strh	r2, [r3, #8]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	7e3a      	ldrb	r2, [r7, #24]
 800517c:	729a      	strb	r2, [r3, #10]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	4618      	mov	r0, r3
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
	...

0800518c <_Z3ps3v>:

UART4_stages uart4_stages = STAGE_NO_READ;
uint16_t button;
int16_t LX,LY,RX,RY;

void ps3(){
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0

	static uint32_t time = 0;

	if(uart4_stages == STAGE_NO_READ){
 8005192:	4b15      	ldr	r3, [pc, #84]	@ (80051e8 <_Z3ps3v+0x5c>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d110      	bne.n	80051bc <_Z3ps3v+0x30>
		char start = 'd';
 800519a:	2364      	movs	r3, #100	@ 0x64
 800519c:	71fb      	strb	r3, [r7, #7]
		uart4_stages = STAGE_READ_BUTTON;
 800519e:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <_Z3ps3v+0x5c>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	701a      	strb	r2, [r3, #0]
		time = HAL_GetTick();
 80051a4:	f001 fb46 	bl	8006834 <HAL_GetTick>
 80051a8:	4603      	mov	r3, r0
 80051aa:	4a10      	ldr	r2, [pc, #64]	@ (80051ec <_Z3ps3v+0x60>)
 80051ac:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_IT(&huart4, (uint8_t *)&start, 1);
 80051ae:	1dfb      	adds	r3, r7, #7
 80051b0:	2201      	movs	r2, #1
 80051b2:	4619      	mov	r1, r3
 80051b4:	480e      	ldr	r0, [pc, #56]	@ (80051f0 <_Z3ps3v+0x64>)
 80051b6:	f003 fbdf 	bl	8008978 <HAL_UART_Transmit_IT>
		if(HAL_GetTick() - time >= 1500){
			uart4_stages = STAGE_NO_READ;
		}
	}

}
 80051ba:	e011      	b.n	80051e0 <_Z3ps3v+0x54>
		if(HAL_GetTick() - time >= 1500){
 80051bc:	f001 fb3a 	bl	8006834 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <_Z3ps3v+0x60>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	f240 52db 	movw	r2, #1499	@ 0x5db
 80051cc:	4293      	cmp	r3, r2
 80051ce:	bf8c      	ite	hi
 80051d0:	2301      	movhi	r3, #1
 80051d2:	2300      	movls	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <_Z3ps3v+0x54>
			uart4_stages = STAGE_NO_READ;
 80051da:	4b03      	ldr	r3, [pc, #12]	@ (80051e8 <_Z3ps3v+0x5c>)
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	2000034a 	.word	0x2000034a
 80051ec:	20000358 	.word	0x20000358
 80051f0:	2000051c 	.word	0x2000051c

080051f4 <_Z7compassv>:

UART5_stages uart5_stages = STAGE_NO_READ_COMPASS;
uint8_t buffer_angle[2];
int16_t value_compass = 0;

int16_t compass(){
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
	static uint32_t time = 0;

	if(uart5_stages == STAGE_NO_READ_COMPASS){
 80051fa:	4b14      	ldr	r3, [pc, #80]	@ (800524c <_Z7compassv+0x58>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <_Z7compassv+0x26>
		char data = 'z';
 8005202:	237a      	movs	r3, #122	@ 0x7a
 8005204:	71fb      	strb	r3, [r7, #7]
		uart5_stages = STAGE_READ_START;
 8005206:	4b11      	ldr	r3, [pc, #68]	@ (800524c <_Z7compassv+0x58>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart5,(uint8_t *)&data, 1);
 800520c:	1dfb      	adds	r3, r7, #7
 800520e:	2201      	movs	r2, #1
 8005210:	4619      	mov	r1, r3
 8005212:	480f      	ldr	r0, [pc, #60]	@ (8005250 <_Z7compassv+0x5c>)
 8005214:	f003 fbb0 	bl	8008978 <HAL_UART_Transmit_IT>
 8005218:	e011      	b.n	800523e <_Z7compassv+0x4a>
	}else{
		if(HAL_GetTick() - time >= 3000){
 800521a:	f001 fb0b 	bl	8006834 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <_Z7compassv+0x60>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 800522a:	4293      	cmp	r3, r2
 800522c:	bf8c      	ite	hi
 800522e:	2301      	movhi	r3, #1
 8005230:	2300      	movls	r3, #0
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <_Z7compassv+0x4a>
			uart5_stages = STAGE_NO_READ_COMPASS;
 8005238:	4b04      	ldr	r3, [pc, #16]	@ (800524c <_Z7compassv+0x58>)
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
		}
	}

	return value_compass;
 800523e:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <_Z7compassv+0x64>)
 8005240:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	2000035c 	.word	0x2000035c
 8005250:	20000564 	.word	0x20000564
 8005254:	20000364 	.word	0x20000364
 8005258:	20000362 	.word	0x20000362

0800525c <_Z16Controll_DC_UARTP20__UART_HandleTypeDefhhh>:


// điều khiển động cơ qua UART PID

// stm32 gửi
void Controll_DC_UART(UART_HandleTypeDef* huart,uint8_t add_DC,uint8_t dir, uint8_t pwm_DC){
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	70fb      	strb	r3, [r7, #3]
 800526e:	460b      	mov	r3, r1
 8005270:	70bb      	strb	r3, [r7, #2]
 8005272:	4613      	mov	r3, r2
 8005274:	707b      	strb	r3, [r7, #1]

	add_DC += dir * 128;
 8005276:	78bb      	ldrb	r3, [r7, #2]
 8005278:	01db      	lsls	r3, r3, #7
 800527a:	b2da      	uxtb	r2, r3
 800527c:	78fb      	ldrb	r3, [r7, #3]
 800527e:	4413      	add	r3, r2
 8005280:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[3] = {add_DC,pwm_DC,0xFF};
 8005282:	f107 030c 	add.w	r3, r7, #12
 8005286:	2100      	movs	r1, #0
 8005288:	460a      	mov	r2, r1
 800528a:	801a      	strh	r2, [r3, #0]
 800528c:	460a      	mov	r2, r1
 800528e:	709a      	strb	r2, [r3, #2]
 8005290:	23ff      	movs	r3, #255	@ 0xff
 8005292:	73bb      	strb	r3, [r7, #14]
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	733b      	strb	r3, [r7, #12]
 8005298:	787b      	ldrb	r3, [r7, #1]
 800529a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(huart,buffer,3,10);
 800529c:	f107 010c 	add.w	r1, r7, #12
 80052a0:	230a      	movs	r3, #10
 80052a2:	2203      	movs	r2, #3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f003 fadc 	bl	8008862 <HAL_UART_Transmit>
}
 80052aa:	bf00      	nop
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_UART_TxCpltCallback>:

///////////////////// INTERRUPT UART /////////////////
// 	CALL BACK TX //
bool flag;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

	/*************** UART 3 *******************/
	if(huart->Instance == huart3.Instance){
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	4b38      	ldr	r3, [pc, #224]	@ (80053a4 <HAL_UART_TxCpltCallback+0xf0>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d145      	bne.n	8005354 <HAL_UART_TxCpltCallback+0xa0>


		switch(uart3_stages){
 80052c8:	4b37      	ldr	r3, [pc, #220]	@ (80053a8 <HAL_UART_TxCpltCallback+0xf4>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d841      	bhi.n	8005354 <HAL_UART_TxCpltCallback+0xa0>
 80052d0:	a201      	add	r2, pc, #4	@ (adr r2, 80052d8 <HAL_UART_TxCpltCallback+0x24>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	08005335 	.word	0x08005335
 80052dc:	080052e9 	.word	0x080052e9
 80052e0:	08005301 	.word	0x08005301
 80052e4:	0800531d 	.word	0x0800531d

		case STAGE_MAP:
			flag = false;
 80052e8:	4b30      	ldr	r3, [pc, #192]	@ (80053ac <HAL_UART_TxCpltCallback+0xf8>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
			uart3_stages = STAGE_NO_SEND;
 80052ee:	4b2e      	ldr	r3, [pc, #184]	@ (80053a8 <HAL_UART_TxCpltCallback+0xf4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3,(uint8_t*)&my_info_pt, 12);
 80052f4:	220c      	movs	r2, #12
 80052f6:	492e      	ldr	r1, [pc, #184]	@ (80053b0 <HAL_UART_TxCpltCallback+0xfc>)
 80052f8:	482a      	ldr	r0, [pc, #168]	@ (80053a4 <HAL_UART_TxCpltCallback+0xf0>)
 80052fa:	f003 fb3d 	bl	8008978 <HAL_UART_Transmit_IT>
			//Error_Handler();
			break;
 80052fe:	e029      	b.n	8005354 <HAL_UART_TxCpltCallback+0xa0>

		case STAGE_DEBUG:
			uart3_stages = STAGE_END_DEBUG;
 8005300:	4b29      	ldr	r3, [pc, #164]	@ (80053a8 <HAL_UART_TxCpltCallback+0xf4>)
 8005302:	2203      	movs	r2, #3
 8005304:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Receive_IT(huart, (uint8_t*)&st_data_dg, 1);
			HAL_UART_Transmit_IT(&huart3,(uint8_t*)buffer_dg, strlen(buffer_dg));
 8005306:	482b      	ldr	r0, [pc, #172]	@ (80053b4 <HAL_UART_TxCpltCallback+0x100>)
 8005308:	f7fa ff8e 	bl	8000228 <strlen>
 800530c:	4603      	mov	r3, r0
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	4928      	ldr	r1, [pc, #160]	@ (80053b4 <HAL_UART_TxCpltCallback+0x100>)
 8005314:	4823      	ldr	r0, [pc, #140]	@ (80053a4 <HAL_UART_TxCpltCallback+0xf0>)
 8005316:	f003 fb2f 	bl	8008978 <HAL_UART_Transmit_IT>
			break;
 800531a:	e01b      	b.n	8005354 <HAL_UART_TxCpltCallback+0xa0>

		case STAGE_END_DEBUG:
			flag = true;
 800531c:	4b23      	ldr	r3, [pc, #140]	@ (80053ac <HAL_UART_TxCpltCallback+0xf8>)
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
			uart3_stages = STAGE_NO_SEND;
 8005322:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <HAL_UART_TxCpltCallback+0xf4>)
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart3, (uint8_t*)&end_dg, 1);
 8005328:	2201      	movs	r2, #1
 800532a:	4923      	ldr	r1, [pc, #140]	@ (80053b8 <HAL_UART_TxCpltCallback+0x104>)
 800532c:	481d      	ldr	r0, [pc, #116]	@ (80053a4 <HAL_UART_TxCpltCallback+0xf0>)
 800532e:	f003 fb23 	bl	8008978 <HAL_UART_Transmit_IT>
			break;
 8005332:	e00f      	b.n	8005354 <HAL_UART_TxCpltCallback+0xa0>

		case STAGE_NO_SEND:
			if(flag){
 8005334:	4b1d      	ldr	r3, [pc, #116]	@ (80053ac <HAL_UART_TxCpltCallback+0xf8>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_UART_TxCpltCallback+0x94>
				HAL_UART_Receive_IT(&huart3, (uint8_t*)&st_data_dg, 1);
 800533c:	2201      	movs	r2, #1
 800533e:	491f      	ldr	r1, [pc, #124]	@ (80053bc <HAL_UART_TxCpltCallback+0x108>)
 8005340:	4818      	ldr	r0, [pc, #96]	@ (80053a4 <HAL_UART_TxCpltCallback+0xf0>)
 8005342:	f003 fb4e 	bl	80089e2 <HAL_UART_Receive_IT>
			}else{
				HAL_UART_Receive_IT(&huart3,(uint8_t*)&frd_info_pt, 12);
			}
			break;
 8005346:	e004      	b.n	8005352 <HAL_UART_TxCpltCallback+0x9e>
				HAL_UART_Receive_IT(&huart3,(uint8_t*)&frd_info_pt, 12);
 8005348:	220c      	movs	r2, #12
 800534a:	491d      	ldr	r1, [pc, #116]	@ (80053c0 <HAL_UART_TxCpltCallback+0x10c>)
 800534c:	4815      	ldr	r0, [pc, #84]	@ (80053a4 <HAL_UART_TxCpltCallback+0xf0>)
 800534e:	f003 fb48 	bl	80089e2 <HAL_UART_Receive_IT>
			break;
 8005352:	bf00      	nop
	/**********************************************/



	/******************	UART 4	********************/
	if(huart->Instance == huart4.Instance){
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b1a      	ldr	r3, [pc, #104]	@ (80053c4 <HAL_UART_TxCpltCallback+0x110>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d104      	bne.n	800536a <HAL_UART_TxCpltCallback+0xb6>

		HAL_UART_Receive_IT(huart, (uint8_t*)&button, 2);
 8005360:	2202      	movs	r2, #2
 8005362:	4919      	ldr	r1, [pc, #100]	@ (80053c8 <HAL_UART_TxCpltCallback+0x114>)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f003 fb3c 	bl	80089e2 <HAL_UART_Receive_IT>



	/************	UART 5	********************/

	if(huart->Instance == huart5.Instance){
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b17      	ldr	r3, [pc, #92]	@ (80053cc <HAL_UART_TxCpltCallback+0x118>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d112      	bne.n	800539c <HAL_UART_TxCpltCallback+0xe8>
		if(uart5_stages == STAGE_READ_START){
 8005376:	4b16      	ldr	r3, [pc, #88]	@ (80053d0 <HAL_UART_TxCpltCallback+0x11c>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d107      	bne.n	800538e <HAL_UART_TxCpltCallback+0xda>
			HAL_UART_Receive_IT(&huart5, (uint8_t*)&buffer_angle[0],1);
 800537e:	2201      	movs	r2, #1
 8005380:	4914      	ldr	r1, [pc, #80]	@ (80053d4 <HAL_UART_TxCpltCallback+0x120>)
 8005382:	4812      	ldr	r0, [pc, #72]	@ (80053cc <HAL_UART_TxCpltCallback+0x118>)
 8005384:	f003 fb2d 	bl	80089e2 <HAL_UART_Receive_IT>
			uart5_stages = STAGE_BYTE_H;
 8005388:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <HAL_UART_TxCpltCallback+0x11c>)
 800538a:	2202      	movs	r2, #2
 800538c:	701a      	strb	r2, [r3, #0]
		}
		if(uart5_stages == STAGE_RESET_COMPASS){
 800538e:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <HAL_UART_TxCpltCallback+0x11c>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d102      	bne.n	800539c <HAL_UART_TxCpltCallback+0xe8>
			uart5_stages = STAGE_NO_READ_COMPASS;
 8005396:	4b0e      	ldr	r3, [pc, #56]	@ (80053d0 <HAL_UART_TxCpltCallback+0x11c>)
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]

	}

	/**********************/

}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	2000063c 	.word	0x2000063c
 80053a8:	2000024c 	.word	0x2000024c
 80053ac:	20000368 	.word	0x20000368
 80053b0:	20000234 	.word	0x20000234
 80053b4:	20000250 	.word	0x20000250
 80053b8:	20000000 	.word	0x20000000
 80053bc:	20000001 	.word	0x20000001
 80053c0:	20000240 	.word	0x20000240
 80053c4:	2000051c 	.word	0x2000051c
 80053c8:	2000034c 	.word	0x2000034c
 80053cc:	20000564 	.word	0x20000564
 80053d0:	2000035c 	.word	0x2000035c
 80053d4:	20000360 	.word	0x20000360

080053d8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
	//***********	UART 3	************//
	if(huart->Instance == huart3.Instance){
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	4b39      	ldr	r3, [pc, #228]	@ (80054cc <HAL_UART_RxCpltCallback+0xf4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d102      	bne.n	80053f2 <HAL_UART_RxCpltCallback+0x1a>
		st_data_dg = true;
 80053ec:	4b38      	ldr	r3, [pc, #224]	@ (80054d0 <HAL_UART_RxCpltCallback+0xf8>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	701a      	strb	r2, [r3, #0]
	}



	//**********	UART4	***************//
	if(huart->Instance == huart4.Instance){
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b37      	ldr	r3, [pc, #220]	@ (80054d4 <HAL_UART_RxCpltCallback+0xfc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d13e      	bne.n	800547c <HAL_UART_RxCpltCallback+0xa4>
		switch(uart4_stages){
 80053fe:	4b36      	ldr	r3, [pc, #216]	@ (80054d8 <HAL_UART_RxCpltCallback+0x100>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b05      	cmp	r3, #5
 8005404:	d83a      	bhi.n	800547c <HAL_UART_RxCpltCallback+0xa4>
 8005406:	a201      	add	r2, pc, #4	@ (adr r2, 800540c <HAL_UART_RxCpltCallback+0x34>)
 8005408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540c:	08005475 	.word	0x08005475
 8005410:	08005425 	.word	0x08005425
 8005414:	08005437 	.word	0x08005437
 8005418:	08005449 	.word	0x08005449
 800541c:	0800545b 	.word	0x0800545b
 8005420:	0800546d 	.word	0x0800546d

		case STAGE_READ_BUTTON:
			uart4_stages = STAGE_READ_LX;
 8005424:	4b2c      	ldr	r3, [pc, #176]	@ (80054d8 <HAL_UART_RxCpltCallback+0x100>)
 8005426:	2202      	movs	r2, #2
 8005428:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&LX, sizeof(LX));
 800542a:	2202      	movs	r2, #2
 800542c:	492b      	ldr	r1, [pc, #172]	@ (80054dc <HAL_UART_RxCpltCallback+0x104>)
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f003 fad7 	bl	80089e2 <HAL_UART_Receive_IT>
			break;
 8005434:	e022      	b.n	800547c <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_LX:
			uart4_stages = STAGE_READ_LY;
 8005436:	4b28      	ldr	r3, [pc, #160]	@ (80054d8 <HAL_UART_RxCpltCallback+0x100>)
 8005438:	2203      	movs	r2, #3
 800543a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&LY, sizeof(LY));
 800543c:	2202      	movs	r2, #2
 800543e:	4928      	ldr	r1, [pc, #160]	@ (80054e0 <HAL_UART_RxCpltCallback+0x108>)
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f003 face 	bl	80089e2 <HAL_UART_Receive_IT>
			break;
 8005446:	e019      	b.n	800547c <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_LY:
			uart4_stages = STAGE_READ_RX;
 8005448:	4b23      	ldr	r3, [pc, #140]	@ (80054d8 <HAL_UART_RxCpltCallback+0x100>)
 800544a:	2204      	movs	r2, #4
 800544c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&RX, sizeof(RX));
 800544e:	2202      	movs	r2, #2
 8005450:	4924      	ldr	r1, [pc, #144]	@ (80054e4 <HAL_UART_RxCpltCallback+0x10c>)
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f003 fac5 	bl	80089e2 <HAL_UART_Receive_IT>
			break;
 8005458:	e010      	b.n	800547c <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_RX:
			uart4_stages = STAGE_READ_RY;
 800545a:	4b1f      	ldr	r3, [pc, #124]	@ (80054d8 <HAL_UART_RxCpltCallback+0x100>)
 800545c:	2205      	movs	r2, #5
 800545e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, (uint8_t*)&RY, sizeof(RY));
 8005460:	2202      	movs	r2, #2
 8005462:	4921      	ldr	r1, [pc, #132]	@ (80054e8 <HAL_UART_RxCpltCallback+0x110>)
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f003 fabc 	bl	80089e2 <HAL_UART_Receive_IT>
			break;
 800546a:	e007      	b.n	800547c <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_READ_RY:
			uart4_stages = STAGE_NO_READ;
 800546c:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_UART_RxCpltCallback+0x100>)
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
			break;
 8005472:	e003      	b.n	800547c <HAL_UART_RxCpltCallback+0xa4>

		case STAGE_NO_READ:
			st_data_dg = true;
 8005474:	4b16      	ldr	r3, [pc, #88]	@ (80054d0 <HAL_UART_RxCpltCallback+0xf8>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
			break;
 800547a:	bf00      	nop
		}

	}

	//************	UART5	************//
	if(huart->Instance == huart5.Instance){
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	4b1a      	ldr	r3, [pc, #104]	@ (80054ec <HAL_UART_RxCpltCallback+0x114>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d11d      	bne.n	80054c4 <HAL_UART_RxCpltCallback+0xec>
		if(uart5_stages == STAGE_BYTE_H){
 8005488:	4b19      	ldr	r3, [pc, #100]	@ (80054f0 <HAL_UART_RxCpltCallback+0x118>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d107      	bne.n	80054a0 <HAL_UART_RxCpltCallback+0xc8>
			HAL_UART_Receive_IT(&huart5, (uint8_t*)&buffer_angle[1], 1);
 8005490:	2201      	movs	r2, #1
 8005492:	4918      	ldr	r1, [pc, #96]	@ (80054f4 <HAL_UART_RxCpltCallback+0x11c>)
 8005494:	4815      	ldr	r0, [pc, #84]	@ (80054ec <HAL_UART_RxCpltCallback+0x114>)
 8005496:	f003 faa4 	bl	80089e2 <HAL_UART_Receive_IT>
			uart5_stages = STAGE_BYTE_L;
 800549a:	4b15      	ldr	r3, [pc, #84]	@ (80054f0 <HAL_UART_RxCpltCallback+0x118>)
 800549c:	2203      	movs	r2, #3
 800549e:	701a      	strb	r2, [r3, #0]
		}
		if(uart5_stages == STAGE_BYTE_L){
 80054a0:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <HAL_UART_RxCpltCallback+0x118>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d10d      	bne.n	80054c4 <HAL_UART_RxCpltCallback+0xec>
			value_compass = (int16_t) ((buffer_angle[0] << 8) | (buffer_angle[1]));
 80054a8:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <HAL_UART_RxCpltCallback+0x120>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	b21a      	sxth	r2, r3
 80054b0:	4b11      	ldr	r3, [pc, #68]	@ (80054f8 <HAL_UART_RxCpltCallback+0x120>)
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	b21b      	sxth	r3, r3
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b21a      	sxth	r2, r3
 80054ba:	4b10      	ldr	r3, [pc, #64]	@ (80054fc <HAL_UART_RxCpltCallback+0x124>)
 80054bc:	801a      	strh	r2, [r3, #0]
			uart5_stages = STAGE_NO_READ_COMPASS;
 80054be:	4b0c      	ldr	r3, [pc, #48]	@ (80054f0 <HAL_UART_RxCpltCallback+0x118>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
			}
		}



}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	2000063c 	.word	0x2000063c
 80054d0:	20000001 	.word	0x20000001
 80054d4:	2000051c 	.word	0x2000051c
 80054d8:	2000034a 	.word	0x2000034a
 80054dc:	2000034e 	.word	0x2000034e
 80054e0:	20000350 	.word	0x20000350
 80054e4:	20000352 	.word	0x20000352
 80054e8:	20000354 	.word	0x20000354
 80054ec:	20000564 	.word	0x20000564
 80054f0:	2000035c 	.word	0x2000035c
 80054f4:	20000361 	.word	0x20000361
 80054f8:	20000360 	.word	0x20000360
 80054fc:	20000362 	.word	0x20000362

08005500 <_Z41__static_initialization_and_destruction_0ii>:
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d116      	bne.n	800553e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005516:	4293      	cmp	r3, r2
 8005518:	d111      	bne.n	800553e <_Z41__static_initialization_and_destruction_0ii+0x3e>
Info_position_robot my_info_pt(10.0,5.0,0,false);
 800551a:	2300      	movs	r3, #0
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	2300      	movs	r3, #0
 8005520:	4a09      	ldr	r2, [pc, #36]	@ (8005548 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005522:	490a      	ldr	r1, [pc, #40]	@ (800554c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005524:	480a      	ldr	r0, [pc, #40]	@ (8005550 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005526:	f7ff fe17 	bl	8005158 <_ZN19Info_position_robotC1Effsb>
Info_position_robot frd_info_pt(0,0,0,false);
 800552a:	2300      	movs	r3, #0
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	2300      	movs	r3, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0100 	mov.w	r1, #0
 8005538:	4806      	ldr	r0, [pc, #24]	@ (8005554 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800553a:	f7ff fe0d 	bl	8005158 <_ZN19Info_position_robotC1Effsb>
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40a00000 	.word	0x40a00000
 800554c:	41200000 	.word	0x41200000
 8005550:	20000234 	.word	0x20000234
 8005554:	20000240 	.word	0x20000240

08005558 <_GLOBAL__sub_I_my_info_pt>:
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
 800555c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005560:	2001      	movs	r0, #1
 8005562:	f7ff ffcd 	bl	8005500 <_Z41__static_initialization_and_destruction_0ii>
 8005566:	bd80      	pop	{r7, pc}

08005568 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms>:
	Motor_PID(GPIO_TypeDef* Port_Dir, uint32_t Pin_Dir , GPIO_TypeDef* Port_Pwm, uint32_t Pin_Pwm,int16_t angle_val):
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
		Port_Dir(Port_Dir),Pin_Dir(Pin_Dir),Port_Pwm(Port_Pwm),Pin_Pwm(Pin_Pwm){
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	605a      	str	r2, [r3, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	751a      	strb	r2, [r3, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	755a      	strb	r2, [r3, #21]
	    if(st_add_map){
 800559a:	4b23      	ldr	r3, [pc, #140]	@ (8005628 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms+0xc0>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d004      	beq.n	80055ac <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms+0x44>
	    	Add_Map_STM32F103xx();
 80055a2:	f7fd f969 	bl	8002878 <_Z19Add_Map_STM32F103xxv>
	    	st_add_map = false;
 80055a6:	4b20      	ldr	r3, [pc, #128]	@ (8005628 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms+0xc0>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
		angle[0] = angle_val;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	8bba      	ldrh	r2, [r7, #28]
 80055b0:	82da      	strh	r2, [r3, #22]
	    mode = 1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	751a      	strb	r2, [r3, #20]
		GPIO_OUT_Init(Port_Dir, Pin_Dir, GPIO_SPEED_FREQ_HIGH);
 80055b8:	2203      	movs	r2, #3
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68b8      	ldr	r0, [r7, #8]
 80055be:	f7fc fbe7 	bl	8001d90 <_Z13GPIO_OUT_InitP12GPIO_TypeDefmm>
		Register_PWM_GPIO(Port_Pwm, Pin_Pwm, 55, 299, 0);
 80055c2:	2300      	movs	r3, #0
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	f240 132b 	movw	r3, #299	@ 0x12b
 80055ca:	2237      	movs	r2, #55	@ 0x37
 80055cc:	69b9      	ldr	r1, [r7, #24]
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	f7fd f888 	bl	80026e4 <_Z17Register_PWM_GPIOP12GPIO_TypeDefmttt>
		HAL_GPIO_WritePin(Port_Dir, Pin_Dir, GPIO_PIN_SET);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2201      	movs	r2, #1
 80055da:	4619      	mov	r1, r3
 80055dc:	68b8      	ldr	r0, [r7, #8]
 80055de:	f001 fd3b 	bl	8007058 <HAL_GPIO_WritePin>
		if(angle[0] > 0) angle[1] = angle[0] - 900;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	dd09      	ble.n	8005600 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms+0x98>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	b21a      	sxth	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	831a      	strh	r2, [r3, #24]
		if(angle[0] < 0) angle[1] = angle[0] + 900;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005606:	2b00      	cmp	r3, #0
 8005608:	da09      	bge.n	800561e <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms+0xb6>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005610:	b29b      	uxth	r3, r3
 8005612:	f503 7361 	add.w	r3, r3, #900	@ 0x384
 8005616:	b29b      	uxth	r3, r3
 8005618:	b21a      	sxth	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	831a      	strh	r2, [r3, #24]
	}
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20000002 	.word	0x20000002

0800562c <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefh>:
	Motor_PID(UART_HandleTypeDef* huart,uint8_t address_DC) : huart(huart), address_DC(address_DC){
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	609a      	str	r2, [r3, #8]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	60da      	str	r2, [r3, #12]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	611a      	str	r2, [r3, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	751a      	strb	r2, [r3, #20]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	79fa      	ldrb	r2, [r7, #7]
 8005662:	755a      	strb	r2, [r3, #21]
		mode = false;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	751a      	strb	r2, [r3, #20]
	}
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4618      	mov	r0, r3
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr
	...

08005678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800567c:	f001 f882 	bl	8006784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005680:	f000 f82a 	bl	80056d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005684:	f000 fb5a 	bl	8005d3c <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8005688:	f000 fb2a 	bl	8005ce0 <_ZL19MX_USART3_UART_Initv>
  MX_UART4_Init();
 800568c:	f000 fa9e 	bl	8005bcc <_ZL13MX_UART4_Initv>
  MX_UART5_Init();
 8005690:	f000 faca 	bl	8005c28 <_ZL13MX_UART5_Initv>
  MX_TIM2_Init();
 8005694:	f000 f8d2 	bl	800583c <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8005698:	f000 f98c 	bl	80059b4 <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 800569c:	f000 faf2 	bl	8005c84 <_ZL19MX_USART2_UART_Initv>
  MX_TIM6_Init(); // 1ms
 80056a0:	f000 f9e6 	bl	8005a70 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init(); // 10ms
 80056a4:	f000 fa24 	bl	8005af0 <_ZL12MX_TIM7_Initv>
  MX_TIM1_Init();
 80056a8:	f000 f866 	bl	8005778 <_ZL12MX_TIM1_Initv>
  MX_TIM4_Init();
 80056ac:	f000 f924 	bl	80058f8 <_ZL12MX_TIM4_Initv>
  MX_USART1_UART_Init();
 80056b0:	f000 fa5e 	bl	8005b70 <_ZL19MX_USART1_UART_Initv>

  //HAL_TIM_Base_Start_IT(&htim6);
  //HAL_TIM_Base_Start_IT(&htim7);

  //Error_Handler();
  HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_ALL);
 80056b4:	213c      	movs	r1, #60	@ 0x3c
 80056b6:	4806      	ldr	r0, [pc, #24]	@ (80056d0 <main+0x58>)
 80056b8:	f002 fafa 	bl	8007cb0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80056bc:	213c      	movs	r1, #60	@ 0x3c
 80056be:	4805      	ldr	r0, [pc, #20]	@ (80056d4 <main+0x5c>)
 80056c0:	f002 faf6 	bl	8007cb0 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ps3();
 80056c4:	f7ff fd62 	bl	800518c <_Z3ps3v>
	  run_basic();
 80056c8:	f7fc f97e 	bl	80019c8 <_Z9run_basicv>
	  ps3();
 80056cc:	bf00      	nop
 80056ce:	e7f9      	b.n	80056c4 <main+0x4c>
 80056d0:	20000444 	.word	0x20000444
 80056d4:	200003b4 	.word	0x200003b4

080056d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b090      	sub	sp, #64	@ 0x40
 80056dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056de:	f107 0318 	add.w	r3, r7, #24
 80056e2:	2228      	movs	r2, #40	@ 0x28
 80056e4:	2100      	movs	r1, #0
 80056e6:	4618      	mov	r0, r3
 80056e8:	f006 f91b 	bl	800b922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056ec:	1d3b      	adds	r3, r7, #4
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	609a      	str	r2, [r3, #8]
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80056fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005704:	2300      	movs	r3, #0
 8005706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005708:	2301      	movs	r3, #1
 800570a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800570c:	2302      	movs	r3, #2
 800570e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005710:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005716:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800571c:	f107 0318 	add.w	r3, r7, #24
 8005720:	4618      	mov	r0, r3
 8005722:	f001 fcb1 	bl	8007088 <HAL_RCC_OscConfig>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	bf14      	ite	ne
 800572c:	2301      	movne	r3, #1
 800572e:	2300      	moveq	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8005736:	f000 fb51 	bl	8005ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800573a:	230f      	movs	r3, #15
 800573c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800573e:	2302      	movs	r3, #2
 8005740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800574a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005750:	1d3b      	adds	r3, r7, #4
 8005752:	2102      	movs	r1, #2
 8005754:	4618      	mov	r0, r3
 8005756:	f001 ff19 	bl	800758c <HAL_RCC_ClockConfig>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800576a:	f000 fb37 	bl	8005ddc <Error_Handler>
  }
}
 800576e:	bf00      	nop
 8005770:	3740      	adds	r7, #64	@ 0x40
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <_ZL12MX_TIM1_Initv>:
  * @param None
  * @retval None
  */

static void MX_TIM1_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08c      	sub	sp, #48	@ 0x30
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800577e:	f107 030c 	add.w	r3, r7, #12
 8005782:	2224      	movs	r2, #36	@ 0x24
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f006 f8cb 	bl	800b922 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005794:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 8005796:	4a28      	ldr	r2, [pc, #160]	@ (8005838 <_ZL12MX_TIM1_Initv+0xc0>)
 8005798:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800579a:	4b26      	ldr	r3, [pc, #152]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 800579c:	2200      	movs	r2, #0
 800579e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a0:	4b24      	ldr	r3, [pc, #144]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 80057a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ae:	4b21      	ldr	r3, [pc, #132]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80057c0:	2303      	movs	r3, #3
 80057c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057c4:	2300      	movs	r3, #0
 80057c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057c8:	2301      	movs	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057d4:	2300      	movs	r3, #0
 80057d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057d8:	2301      	movs	r3, #1
 80057da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80057dc:	2300      	movs	r3, #0
 80057de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80057e4:	f107 030c 	add.w	r3, r7, #12
 80057e8:	4619      	mov	r1, r3
 80057ea:	4812      	ldr	r0, [pc, #72]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 80057ec:	f002 f9be 	bl	8007b6c <HAL_TIM_Encoder_Init>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bf14      	ite	ne
 80057f6:	2301      	movne	r3, #1
 80057f8:	2300      	moveq	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8005800:	f000 faec 	bl	8005ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005804:	2300      	movs	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4808      	ldr	r0, [pc, #32]	@ (8005834 <_ZL12MX_TIM1_Initv+0xbc>)
 8005812:	f002 ff07 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf14      	ite	ne
 800581c:	2301      	movne	r3, #1
 800581e:	2300      	moveq	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 8005826:	f000 fad9 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800582a:	bf00      	nop
 800582c:	3730      	adds	r7, #48	@ 0x30
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	2000036c 	.word	0x2000036c
 8005838:	40012c00 	.word	0x40012c00

0800583c <_ZL12MX_TIM2_Initv>:




static void MX_TIM2_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b08c      	sub	sp, #48	@ 0x30
 8005840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005842:	f107 030c 	add.w	r3, r7, #12
 8005846:	2224      	movs	r2, #36	@ 0x24
 8005848:	2100      	movs	r1, #0
 800584a:	4618      	mov	r0, r3
 800584c:	f006 f869 	bl	800b922 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005858:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 800585a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800585e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005860:	4b24      	ldr	r3, [pc, #144]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 8005862:	2200      	movs	r2, #0
 8005864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005866:	4b23      	ldr	r3, [pc, #140]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800586c:	4b21      	ldr	r3, [pc, #132]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 800586e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005874:	4b1f      	ldr	r3, [pc, #124]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 8005876:	2200      	movs	r2, #0
 8005878:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800587a:	4b1e      	ldr	r3, [pc, #120]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 800587c:	2200      	movs	r2, #0
 800587e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005880:	2303      	movs	r3, #3
 8005882:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800588c:	2300      	movs	r3, #0
 800588e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005894:	2300      	movs	r3, #0
 8005896:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005898:	2301      	movs	r3, #1
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800589c:	2300      	movs	r3, #0
 800589e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	4619      	mov	r1, r3
 80058aa:	4812      	ldr	r0, [pc, #72]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 80058ac:	f002 f95e 	bl	8007b6c <HAL_TIM_Encoder_Init>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bf14      	ite	ne
 80058b6:	2301      	movne	r3, #1
 80058b8:	2300      	moveq	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 80058c0:	f000 fa8c 	bl	8005ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058c4:	2300      	movs	r3, #0
 80058c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80058cc:	1d3b      	adds	r3, r7, #4
 80058ce:	4619      	mov	r1, r3
 80058d0:	4808      	ldr	r0, [pc, #32]	@ (80058f4 <_ZL12MX_TIM2_Initv+0xb8>)
 80058d2:	f002 fea7 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 80058e6:	f000 fa79 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058ea:	bf00      	nop
 80058ec:	3730      	adds	r7, #48	@ 0x30
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	200003b4 	.word	0x200003b4

080058f8 <_ZL12MX_TIM4_Initv>:
  * @retval None
  */


static void MX_TIM4_Init(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	@ 0x30
 80058fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80058fe:	f107 030c 	add.w	r3, r7, #12
 8005902:	2224      	movs	r2, #36	@ 0x24
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f006 f80b 	bl	800b922 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800590c:	1d3b      	adds	r3, r7, #4
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005914:	4b25      	ldr	r3, [pc, #148]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 8005916:	4a26      	ldr	r2, [pc, #152]	@ (80059b0 <_ZL12MX_TIM4_Initv+0xb8>)
 8005918:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800591a:	4b24      	ldr	r3, [pc, #144]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 800591c:	2200      	movs	r2, #0
 800591e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005920:	4b22      	ldr	r3, [pc, #136]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005926:	4b21      	ldr	r3, [pc, #132]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 8005928:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800592c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800592e:	4b1f      	ldr	r3, [pc, #124]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 8005930:	2200      	movs	r2, #0
 8005932:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005934:	4b1d      	ldr	r3, [pc, #116]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 8005936:	2200      	movs	r2, #0
 8005938:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800593a:	2303      	movs	r3, #3
 800593c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800593e:	2300      	movs	r3, #0
 8005940:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005942:	2301      	movs	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005946:	2300      	movs	r3, #0
 8005948:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800594e:	2300      	movs	r3, #0
 8005950:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005952:	2301      	movs	r3, #1
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005956:	2300      	movs	r3, #0
 8005958:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800595e:	f107 030c 	add.w	r3, r7, #12
 8005962:	4619      	mov	r1, r3
 8005964:	4811      	ldr	r0, [pc, #68]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 8005966:	f002 f901 	bl	8007b6c <HAL_TIM_Encoder_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	bf14      	ite	ne
 8005970:	2301      	movne	r3, #1
 8005972:	2300      	moveq	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 800597a:	f000 fa2f 	bl	8005ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800597e:	2300      	movs	r3, #0
 8005980:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4808      	ldr	r0, [pc, #32]	@ (80059ac <_ZL12MX_TIM4_Initv+0xb4>)
 800598c:	f002 fe4a 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	bf14      	ite	ne
 8005996:	2301      	movne	r3, #1
 8005998:	2300      	moveq	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 80059a0:	f000 fa1c 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80059a4:	bf00      	nop
 80059a6:	3730      	adds	r7, #48	@ 0x30
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	200003fc 	.word	0x200003fc
 80059b0:	40000800 	.word	0x40000800

080059b4 <_ZL12MX_TIM5_Initv>:




static void MX_TIM5_Init(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80059ba:	f107 030c 	add.w	r3, r7, #12
 80059be:	2224      	movs	r2, #36	@ 0x24
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f005 ffad 	bl	800b922 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059c8:	1d3b      	adds	r3, r7, #4
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80059d0:	4b25      	ldr	r3, [pc, #148]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 80059d2:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <_ZL12MX_TIM5_Initv+0xb8>)
 80059d4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80059d6:	4b24      	ldr	r3, [pc, #144]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059dc:	4b22      	ldr	r3, [pc, #136]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 80059de:	2200      	movs	r2, #0
 80059e0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80059e2:	4b21      	ldr	r3, [pc, #132]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 80059e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80059e8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80059f6:	2303      	movs	r3, #3
 80059f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059fe:	2301      	movs	r3, #1
 8005a00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a12:	2300      	movs	r3, #0
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8005a1a:	f107 030c 	add.w	r3, r7, #12
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4811      	ldr	r0, [pc, #68]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 8005a22:	f002 f8a3 	bl	8007b6c <HAL_TIM_Encoder_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8005a36:	f000 f9d1 	bl	8005ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005a42:	1d3b      	adds	r3, r7, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4808      	ldr	r0, [pc, #32]	@ (8005a68 <_ZL12MX_TIM5_Initv+0xb4>)
 8005a48:	f002 fdec 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8005a5c:	f000 f9be 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005a60:	bf00      	nop
 8005a62:	3730      	adds	r7, #48	@ 0x30
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000444 	.word	0x20000444
 8005a6c:	40000c00 	.word	0x40000c00

08005a70 <_ZL12MX_TIM6_Initv>:
  * @retval None
  */


static void MX_TIM6_Init(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a76:	463b      	mov	r3, r7
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8005a80:	4a1a      	ldr	r2, [pc, #104]	@ (8005aec <_ZL12MX_TIM6_Initv+0x7c>)
 8005a82:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7199;
 8005a84:	4b18      	ldr	r3, [pc, #96]	@ (8005ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8005a86:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8005a8a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a8c:	4b16      	ldr	r3, [pc, #88]	@ (8005ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 8005a92:	4b15      	ldr	r3, [pc, #84]	@ (8005ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8005a94:	2209      	movs	r2, #9
 8005a96:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a98:	4b13      	ldr	r3, [pc, #76]	@ (8005ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005a9e:	4812      	ldr	r0, [pc, #72]	@ (8005ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8005aa0:	f001 ff02 	bl	80078a8 <HAL_TIM_Base_Init>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bf14      	ite	ne
 8005aaa:	2301      	movne	r3, #1
 8005aac:	2300      	moveq	r3, #0
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <_ZL12MX_TIM6_Initv+0x48>
  {
    Error_Handler();
 8005ab4:	f000 f992 	bl	8005ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	4808      	ldr	r0, [pc, #32]	@ (8005ae8 <_ZL12MX_TIM6_Initv+0x78>)
 8005ac6:	f002 fdad 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <_ZL12MX_TIM6_Initv+0x6e>
  {
    Error_Handler();
 8005ada:	f000 f97f 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	2000048c 	.word	0x2000048c
 8005aec:	40001000 	.word	0x40001000

08005af0 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005af6:	463b      	mov	r3, r7
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005afe:	4b1a      	ldr	r3, [pc, #104]	@ (8005b68 <_ZL12MX_TIM7_Initv+0x78>)
 8005b00:	4a1a      	ldr	r2, [pc, #104]	@ (8005b6c <_ZL12MX_TIM7_Initv+0x7c>)
 8005b02:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 8005b04:	4b18      	ldr	r3, [pc, #96]	@ (8005b68 <_ZL12MX_TIM7_Initv+0x78>)
 8005b06:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8005b0a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b0c:	4b16      	ldr	r3, [pc, #88]	@ (8005b68 <_ZL12MX_TIM7_Initv+0x78>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8005b12:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <_ZL12MX_TIM7_Initv+0x78>)
 8005b14:	2263      	movs	r2, #99	@ 0x63
 8005b16:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b18:	4b13      	ldr	r3, [pc, #76]	@ (8005b68 <_ZL12MX_TIM7_Initv+0x78>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005b1e:	4812      	ldr	r0, [pc, #72]	@ (8005b68 <_ZL12MX_TIM7_Initv+0x78>)
 8005b20:	f001 fec2 	bl	80078a8 <HAL_TIM_Base_Init>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	bf14      	ite	ne
 8005b2a:	2301      	movne	r3, #1
 8005b2c:	2300      	moveq	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <_ZL12MX_TIM7_Initv+0x48>
  {
    Error_Handler();
 8005b34:	f000 f952 	bl	8005ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005b40:	463b      	mov	r3, r7
 8005b42:	4619      	mov	r1, r3
 8005b44:	4808      	ldr	r0, [pc, #32]	@ (8005b68 <_ZL12MX_TIM7_Initv+0x78>)
 8005b46:	f002 fd6d 	bl	8008624 <HAL_TIMEx_MasterConfigSynchronization>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	bf14      	ite	ne
 8005b50:	2301      	movne	r3, #1
 8005b52:	2300      	moveq	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <_ZL12MX_TIM7_Initv+0x6e>
  {
    Error_Handler();
 8005b5a:	f000 f93f 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005b5e:	bf00      	nop
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200004d4 	.word	0x200004d4
 8005b6c:	40001400 	.word	0x40001400

08005b70 <_ZL19MX_USART1_UART_Initv>:

static void MX_USART1_UART_Init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b74:	4b13      	ldr	r3, [pc, #76]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b76:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <_ZL19MX_USART1_UART_Initv+0x58>)
 8005b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b7a:	4b12      	ldr	r3, [pc, #72]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b82:	4b10      	ldr	r3, [pc, #64]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b88:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b94:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b96:	220c      	movs	r2, #12
 8005b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ba0:	4b08      	ldr	r3, [pc, #32]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005ba6:	4807      	ldr	r0, [pc, #28]	@ (8005bc4 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ba8:	f002 fe0b 	bl	80087c2 <HAL_UART_Init>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	bf14      	ite	ne
 8005bb2:	2301      	movne	r3, #1
 8005bb4:	2300      	moveq	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8005bbc:	f000 f90e 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005bc0:	bf00      	nop
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200005ac 	.word	0x200005ac
 8005bc8:	40013800 	.word	0x40013800

08005bcc <_ZL13MX_UART4_Initv>:



static void MX_UART4_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005bd0:	4b13      	ldr	r3, [pc, #76]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005bd2:	4a14      	ldr	r2, [pc, #80]	@ (8005c24 <_ZL13MX_UART4_Initv+0x58>)
 8005bd4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005bd6:	4b12      	ldr	r3, [pc, #72]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005bd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005bdc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005bde:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005be4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005bf2:	220c      	movs	r2, #12
 8005bf4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bfc:	4b08      	ldr	r3, [pc, #32]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005c02:	4807      	ldr	r0, [pc, #28]	@ (8005c20 <_ZL13MX_UART4_Initv+0x54>)
 8005c04:	f002 fddd 	bl	80087c2 <HAL_UART_Init>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf14      	ite	ne
 8005c0e:	2301      	movne	r3, #1
 8005c10:	2300      	moveq	r3, #0
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8005c18:	f000 f8e0 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005c1c:	bf00      	nop
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	2000051c 	.word	0x2000051c
 8005c24:	40004c00 	.word	0x40004c00

08005c28 <_ZL13MX_UART5_Initv>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005c2c:	4b13      	ldr	r3, [pc, #76]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c2e:	4a14      	ldr	r2, [pc, #80]	@ (8005c80 <_ZL13MX_UART5_Initv+0x58>)
 8005c30:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8005c32:	4b12      	ldr	r3, [pc, #72]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005c38:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005c3a:	4b10      	ldr	r3, [pc, #64]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005c40:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c4e:	220c      	movs	r2, #12
 8005c50:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c52:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c58:	4b08      	ldr	r3, [pc, #32]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005c5e:	4807      	ldr	r0, [pc, #28]	@ (8005c7c <_ZL13MX_UART5_Initv+0x54>)
 8005c60:	f002 fdaf 	bl	80087c2 <HAL_UART_Init>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	bf14      	ite	ne
 8005c6a:	2301      	movne	r3, #1
 8005c6c:	2300      	moveq	r3, #0
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <_ZL13MX_UART5_Initv+0x50>
  {
    Error_Handler();
 8005c74:	f000 f8b2 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20000564 	.word	0x20000564
 8005c80:	40005000 	.word	0x40005000

08005c84 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c88:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c8a:	4a14      	ldr	r2, [pc, #80]	@ (8005cdc <_ZL19MX_USART2_UART_Initv+0x58>)
 8005c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005c8e:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005c96:	4b10      	ldr	r3, [pc, #64]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005caa:	220c      	movs	r2, #12
 8005cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005cae:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cb4:	4b08      	ldr	r3, [pc, #32]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005cba:	4807      	ldr	r0, [pc, #28]	@ (8005cd8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005cbc:	f002 fd81 	bl	80087c2 <HAL_UART_Init>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	bf14      	ite	ne
 8005cc6:	2301      	movne	r3, #1
 8005cc8:	2300      	moveq	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8005cd0:	f000 f884 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005cd4:	bf00      	nop
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	200005f4 	.word	0x200005f4
 8005cdc:	40004400 	.word	0x40004400

08005ce0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005ce4:	4b13      	ldr	r3, [pc, #76]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005ce6:	4a14      	ldr	r2, [pc, #80]	@ (8005d38 <_ZL19MX_USART3_UART_Initv+0x58>)
 8005ce8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005cea:	4b12      	ldr	r3, [pc, #72]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005cec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005cf0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005cf2:	4b10      	ldr	r3, [pc, #64]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d04:	4b0b      	ldr	r3, [pc, #44]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005d06:	220c      	movs	r2, #12
 8005d08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d16:	4807      	ldr	r0, [pc, #28]	@ (8005d34 <_ZL19MX_USART3_UART_Initv+0x54>)
 8005d18:	f002 fd53 	bl	80087c2 <HAL_UART_Init>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	bf14      	ite	ne
 8005d22:	2301      	movne	r3, #1
 8005d24:	2300      	moveq	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8005d2c:	f000 f856 	bl	8005ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005d30:	bf00      	nop
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	2000063c 	.word	0x2000063c
 8005d38:	40004800 	.word	0x40004800

08005d3c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d42:	f107 0310 	add.w	r3, r7, #16
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	605a      	str	r2, [r3, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d50:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d56:	f043 0320 	orr.w	r3, r3, #32
 8005d5a:	6193      	str	r3, [r2, #24]
 8005d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f003 0320 	and.w	r3, r3, #32
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d68:	4b19      	ldr	r3, [pc, #100]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d6e:	f043 0304 	orr.w	r3, r3, #4
 8005d72:	6193      	str	r3, [r2, #24]
 8005d74:	4b16      	ldr	r3, [pc, #88]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d80:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	4a12      	ldr	r2, [pc, #72]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d86:	f043 0308 	orr.w	r3, r3, #8
 8005d8a:	6193      	str	r3, [r2, #24]
 8005d8c:	4b10      	ldr	r3, [pc, #64]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d98:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005d9e:	f043 0310 	orr.w	r3, r3, #16
 8005da2:	6193      	str	r3, [r2, #24]
 8005da4:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <_ZL12MX_GPIO_Initv+0x94>)
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	f003 0310 	and.w	r3, r3, #16
 8005dac:	603b      	str	r3, [r7, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005db0:	2330      	movs	r3, #48	@ 0x30
 8005db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005db4:	4b07      	ldr	r3, [pc, #28]	@ (8005dd4 <_ZL12MX_GPIO_Initv+0x98>)
 8005db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dbc:	f107 0310 	add.w	r3, r7, #16
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4805      	ldr	r0, [pc, #20]	@ (8005dd8 <_ZL12MX_GPIO_Initv+0x9c>)
 8005dc4:	f000 ffb4 	bl	8006d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005dc8:	bf00      	nop
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	10110000 	.word	0x10110000
 8005dd8:	40010800 	.word	0x40010800

08005ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005de2:	463b      	mov	r3, r7
 8005de4:	2200      	movs	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	609a      	str	r2, [r3, #8]
 8005dec:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005dee:	2320      	movs	r3, #32
 8005df0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005df2:	2301      	movs	r3, #1
 8005df4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dfe:	463b      	mov	r3, r7
 8005e00:	4619      	mov	r1, r3
 8005e02:	480a      	ldr	r0, [pc, #40]	@ (8005e2c <Error_Handler+0x50>)
 8005e04:	f000 ff94 	bl	8006d30 <HAL_GPIO_Init>



  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	4807      	ldr	r0, [pc, #28]	@ (8005e2c <Error_Handler+0x50>)
 8005e0e:	f001 f923 	bl	8007058 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8005e12:	2064      	movs	r0, #100	@ 0x64
 8005e14:	f000 fd18 	bl	8006848 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8005e18:	2200      	movs	r2, #0
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	4803      	ldr	r0, [pc, #12]	@ (8005e2c <Error_Handler+0x50>)
 8005e1e:	f001 f91b 	bl	8007058 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8005e22:	2064      	movs	r0, #100	@ 0x64
 8005e24:	f000 fd10 	bl	8006848 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8005e28:	bf00      	nop
 8005e2a:	e7ed      	b.n	8005e08 <Error_Handler+0x2c>
 8005e2c:	40011000 	.word	0x40011000

08005e30 <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005e30:	b590      	push	{r4, r7, lr}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d14f      	bne.n	8005ee0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d14a      	bne.n	8005ee0 <_Z41__static_initialization_and_destruction_0ii+0xb0>
};
 8005e4a:	4c27      	ldr	r4, [pc, #156]	@ (8005ee8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005e4c:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	2310      	movs	r3, #16
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4b25      	ldr	r3, [pc, #148]	@ (8005eec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005e58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e5c:	4923      	ldr	r1, [pc, #140]	@ (8005eec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7ff fb82 	bl	8005568 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms>
 8005e64:	341c      	adds	r4, #28
 8005e66:	4b22      	ldr	r3, [pc, #136]	@ (8005ef0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	2320      	movs	r3, #32
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005eec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005e70:	2220      	movs	r2, #32
 8005e72:	4920      	ldr	r1, [pc, #128]	@ (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005e74:	4620      	mov	r0, r4
 8005e76:	f7ff fb77 	bl	8005568 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms>
 8005e7a:	341c      	adds	r4, #28
 8005e7c:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	4917      	ldr	r1, [pc, #92]	@ (8005eec <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff fb6a 	bl	8005568 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms>
 8005e94:	f104 001c 	add.w	r0, r4, #28
 8005e98:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ea2:	9300      	str	r3, [sp, #0]
 8005ea4:	4b13      	ldr	r3, [pc, #76]	@ (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	4912      	ldr	r1, [pc, #72]	@ (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005eaa:	f7ff fb5d 	bl	8005568 <_ZN9Motor_PIDC1EP12GPIO_TypeDefmS1_ms>
};
 8005eae:	4c12      	ldr	r4, [pc, #72]	@ (8005ef8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4912      	ldr	r1, [pc, #72]	@ (8005efc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff fbb9 	bl	800562c <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefh>
 8005eba:	341c      	adds	r4, #28
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	490f      	ldr	r1, [pc, #60]	@ (8005efc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	f7ff fbb3 	bl	800562c <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefh>
 8005ec6:	341c      	adds	r4, #28
 8005ec8:	2202      	movs	r2, #2
 8005eca:	490c      	ldr	r1, [pc, #48]	@ (8005efc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f7ff fbad 	bl	800562c <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefh>
 8005ed2:	f104 031c 	add.w	r3, r4, #28
 8005ed6:	2203      	movs	r2, #3
 8005ed8:	4908      	ldr	r1, [pc, #32]	@ (8005efc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fba6 	bl	800562c <_ZN9Motor_PIDC1EP20__UART_HandleTypeDefh>
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd90      	pop	{r4, r7, pc}
 8005ee8:	20000684 	.word	0x20000684
 8005eec:	40010c00 	.word	0x40010c00
 8005ef0:	fffffe3e 	.word	0xfffffe3e
 8005ef4:	40011000 	.word	0x40011000
 8005ef8:	200006f4 	.word	0x200006f4
 8005efc:	20000564 	.word	0x20000564

08005f00 <_GLOBAL__sub_I_htim1>:
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005f08:	2001      	movs	r0, #1
 8005f0a:	f7ff ff91 	bl	8005e30 <_Z41__static_initialization_and_destruction_0ii>
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005f16:	4b15      	ldr	r3, [pc, #84]	@ (8005f6c <HAL_MspInit+0x5c>)
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	4a14      	ldr	r2, [pc, #80]	@ (8005f6c <HAL_MspInit+0x5c>)
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	6193      	str	r3, [r2, #24]
 8005f22:	4b12      	ldr	r3, [pc, #72]	@ (8005f6c <HAL_MspInit+0x5c>)
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f6c <HAL_MspInit+0x5c>)
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	4a0e      	ldr	r2, [pc, #56]	@ (8005f6c <HAL_MspInit+0x5c>)
 8005f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f38:	61d3      	str	r3, [r2, #28]
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f6c <HAL_MspInit+0x5c>)
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f46:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <HAL_MspInit+0x60>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	4a04      	ldr	r2, [pc, #16]	@ (8005f70 <HAL_MspInit+0x60>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr
 8005f6c:	40021000 	.word	0x40021000
 8005f70:	40010000 	.word	0x40010000

08005f74 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08e      	sub	sp, #56	@ 0x38
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	609a      	str	r2, [r3, #8]
 8005f88:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f92:	d157      	bne.n	8006044 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f94:	4b5f      	ldr	r3, [pc, #380]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005f96:	69db      	ldr	r3, [r3, #28]
 8005f98:	4a5e      	ldr	r2, [pc, #376]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	61d3      	str	r3, [r2, #28]
 8005fa0:	4b5c      	ldr	r3, [pc, #368]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	623b      	str	r3, [r7, #32]
 8005faa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fac:	4b59      	ldr	r3, [pc, #356]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4a58      	ldr	r2, [pc, #352]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005fb2:	f043 0304 	orr.w	r3, r3, #4
 8005fb6:	6193      	str	r3, [r2, #24]
 8005fb8:	4b56      	ldr	r3, [pc, #344]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc4:	4b53      	ldr	r3, [pc, #332]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	4a52      	ldr	r2, [pc, #328]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005fca:	f043 0308 	orr.w	r3, r3, #8
 8005fce:	6193      	str	r3, [r2, #24]
 8005fd0:	4b50      	ldr	r3, [pc, #320]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	61bb      	str	r3, [r7, #24]
 8005fda:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fee:	4619      	mov	r1, r3
 8005ff0:	4849      	ldr	r0, [pc, #292]	@ (8006118 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8005ff2:	f000 fe9d 	bl	8006d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005ffe:	2301      	movs	r3, #1
 8006000:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006006:	4619      	mov	r1, r3
 8006008:	4844      	ldr	r0, [pc, #272]	@ (800611c <HAL_TIM_Encoder_MspInit+0x1a8>)
 800600a:	f000 fe91 	bl	8006d30 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800600e:	4b44      	ldr	r3, [pc, #272]	@ (8006120 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	637b      	str	r3, [r7, #52]	@ 0x34
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
 800601c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8006022:	637b      	str	r3, [r7, #52]	@ 0x34
 8006024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800602a:	637b      	str	r3, [r7, #52]	@ 0x34
 800602c:	4a3c      	ldr	r2, [pc, #240]	@ (8006120 <HAL_TIM_Encoder_MspInit+0x1ac>)
 800602e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006030:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006032:	2200      	movs	r2, #0
 8006034:	2100      	movs	r1, #0
 8006036:	201c      	movs	r0, #28
 8006038:	f000 fd01 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800603c:	201c      	movs	r0, #28
 800603e:	f000 fd1a 	bl	8006a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006042:	e062      	b.n	800610a <HAL_TIM_Encoder_MspInit+0x196>
  else if(htim_encoder->Instance==TIM4)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a36      	ldr	r2, [pc, #216]	@ (8006124 <HAL_TIM_Encoder_MspInit+0x1b0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d12c      	bne.n	80060a8 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800604e:	4b31      	ldr	r3, [pc, #196]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	4a30      	ldr	r2, [pc, #192]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006054:	f043 0304 	orr.w	r3, r3, #4
 8006058:	61d3      	str	r3, [r2, #28]
 800605a:	4b2e      	ldr	r3, [pc, #184]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006066:	4b2b      	ldr	r3, [pc, #172]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	4a2a      	ldr	r2, [pc, #168]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 800606c:	f043 0308 	orr.w	r3, r3, #8
 8006070:	6193      	str	r3, [r2, #24]
 8006072:	4b28      	ldr	r3, [pc, #160]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800607e:	23c0      	movs	r3, #192	@ 0xc0
 8006080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006082:	2300      	movs	r3, #0
 8006084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006086:	2301      	movs	r3, #1
 8006088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800608e:	4619      	mov	r1, r3
 8006090:	4822      	ldr	r0, [pc, #136]	@ (800611c <HAL_TIM_Encoder_MspInit+0x1a8>)
 8006092:	f000 fe4d 	bl	8006d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006096:	2200      	movs	r2, #0
 8006098:	2100      	movs	r1, #0
 800609a:	201e      	movs	r0, #30
 800609c:	f000 fccf 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80060a0:	201e      	movs	r0, #30
 80060a2:	f000 fce8 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 80060a6:	e030      	b.n	800610a <HAL_TIM_Encoder_MspInit+0x196>
  else if(htim_encoder->Instance==TIM5)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006128 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d12b      	bne.n	800610a <HAL_TIM_Encoder_MspInit+0x196>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80060b2:	4b18      	ldr	r3, [pc, #96]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4a17      	ldr	r2, [pc, #92]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80060b8:	f043 0308 	orr.w	r3, r3, #8
 80060bc:	61d3      	str	r3, [r2, #28]
 80060be:	4b15      	ldr	r3, [pc, #84]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060ca:	4b12      	ldr	r3, [pc, #72]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	4a11      	ldr	r2, [pc, #68]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80060d0:	f043 0304 	orr.w	r3, r3, #4
 80060d4:	6193      	str	r3, [r2, #24]
 80060d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006114 <HAL_TIM_Encoder_MspInit+0x1a0>)
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80060e2:	2303      	movs	r3, #3
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060e6:	2300      	movs	r3, #0
 80060e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060ea:	2301      	movs	r3, #1
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060f2:	4619      	mov	r1, r3
 80060f4:	4808      	ldr	r0, [pc, #32]	@ (8006118 <HAL_TIM_Encoder_MspInit+0x1a4>)
 80060f6:	f000 fe1b 	bl	8006d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80060fa:	2200      	movs	r2, #0
 80060fc:	2100      	movs	r1, #0
 80060fe:	2032      	movs	r0, #50	@ 0x32
 8006100:	f000 fc9d 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006104:	2032      	movs	r0, #50	@ 0x32
 8006106:	f000 fcb6 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 800610a:	bf00      	nop
 800610c:	3738      	adds	r7, #56	@ 0x38
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40021000 	.word	0x40021000
 8006118:	40010800 	.word	0x40010800
 800611c:	40010c00 	.word	0x40010c00
 8006120:	40010000 	.word	0x40010000
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00

0800612c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1a      	ldr	r2, [pc, #104]	@ (80061a4 <HAL_TIM_Base_MspInit+0x78>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d114      	bne.n	8006168 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800613e:	4b1a      	ldr	r3, [pc, #104]	@ (80061a8 <HAL_TIM_Base_MspInit+0x7c>)
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	4a19      	ldr	r2, [pc, #100]	@ (80061a8 <HAL_TIM_Base_MspInit+0x7c>)
 8006144:	f043 0310 	orr.w	r3, r3, #16
 8006148:	61d3      	str	r3, [r2, #28]
 800614a:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <HAL_TIM_Base_MspInit+0x7c>)
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8006156:	2200      	movs	r2, #0
 8006158:	2100      	movs	r1, #0
 800615a:	2036      	movs	r0, #54	@ 0x36
 800615c:	f000 fc6f 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8006160:	2036      	movs	r0, #54	@ 0x36
 8006162:	f000 fc88 	bl	8006a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006166:	e018      	b.n	800619a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0f      	ldr	r2, [pc, #60]	@ (80061ac <HAL_TIM_Base_MspInit+0x80>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d113      	bne.n	800619a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006172:	4b0d      	ldr	r3, [pc, #52]	@ (80061a8 <HAL_TIM_Base_MspInit+0x7c>)
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	4a0c      	ldr	r2, [pc, #48]	@ (80061a8 <HAL_TIM_Base_MspInit+0x7c>)
 8006178:	f043 0320 	orr.w	r3, r3, #32
 800617c:	61d3      	str	r3, [r2, #28]
 800617e:	4b0a      	ldr	r3, [pc, #40]	@ (80061a8 <HAL_TIM_Base_MspInit+0x7c>)
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800618a:	2200      	movs	r2, #0
 800618c:	2100      	movs	r1, #0
 800618e:	2037      	movs	r0, #55	@ 0x37
 8006190:	f000 fc55 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006194:	2037      	movs	r0, #55	@ 0x37
 8006196:	f000 fc6e 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40001000 	.word	0x40001000
 80061a8:	40021000 	.word	0x40021000
 80061ac:	40001400 	.word	0x40001400

080061b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b092      	sub	sp, #72	@ 0x48
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4aa5      	ldr	r2, [pc, #660]	@ (8006460 <HAL_UART_MspInit+0x2b0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d13a      	bne.n	8006246 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80061d0:	4ba4      	ldr	r3, [pc, #656]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	4aa3      	ldr	r2, [pc, #652]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80061d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061da:	61d3      	str	r3, [r2, #28]
 80061dc:	4ba1      	ldr	r3, [pc, #644]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80061e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061e8:	4b9e      	ldr	r3, [pc, #632]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	4a9d      	ldr	r2, [pc, #628]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80061ee:	f043 0310 	orr.w	r3, r3, #16
 80061f2:	6193      	str	r3, [r2, #24]
 80061f4:	4b9b      	ldr	r3, [pc, #620]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006204:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006206:	2302      	movs	r3, #2
 8006208:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800620a:	2303      	movs	r3, #3
 800620c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800620e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006212:	4619      	mov	r1, r3
 8006214:	4894      	ldr	r0, [pc, #592]	@ (8006468 <HAL_UART_MspInit+0x2b8>)
 8006216:	f000 fd8b 	bl	8006d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800621a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800621e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006224:	2301      	movs	r3, #1
 8006226:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006228:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800622c:	4619      	mov	r1, r3
 800622e:	488e      	ldr	r0, [pc, #568]	@ (8006468 <HAL_UART_MspInit+0x2b8>)
 8006230:	f000 fd7e 	bl	8006d30 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006234:	2200      	movs	r2, #0
 8006236:	2100      	movs	r1, #0
 8006238:	2034      	movs	r0, #52	@ 0x34
 800623a:	f000 fc00 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800623e:	2034      	movs	r0, #52	@ 0x34
 8006240:	f000 fc19 	bl	8006a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006244:	e107      	b.n	8006456 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==UART5)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a88      	ldr	r2, [pc, #544]	@ (800646c <HAL_UART_MspInit+0x2bc>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d145      	bne.n	80062dc <HAL_UART_MspInit+0x12c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006250:	4b84      	ldr	r3, [pc, #528]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	4a83      	ldr	r2, [pc, #524]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800625a:	61d3      	str	r3, [r2, #28]
 800625c:	4b81      	ldr	r3, [pc, #516]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 800625e:	69db      	ldr	r3, [r3, #28]
 8006260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006268:	4b7e      	ldr	r3, [pc, #504]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	4a7d      	ldr	r2, [pc, #500]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 800626e:	f043 0310 	orr.w	r3, r3, #16
 8006272:	6193      	str	r3, [r2, #24]
 8006274:	4b7b      	ldr	r3, [pc, #492]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006280:	4b78      	ldr	r3, [pc, #480]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	4a77      	ldr	r2, [pc, #476]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006286:	f043 0320 	orr.w	r3, r3, #32
 800628a:	6193      	str	r3, [r2, #24]
 800628c:	4b75      	ldr	r3, [pc, #468]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006298:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800629c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629e:	2302      	movs	r3, #2
 80062a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80062a2:	2303      	movs	r3, #3
 80062a4:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80062aa:	4619      	mov	r1, r3
 80062ac:	486e      	ldr	r0, [pc, #440]	@ (8006468 <HAL_UART_MspInit+0x2b8>)
 80062ae:	f000 fd3f 	bl	8006d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80062b2:	2304      	movs	r3, #4
 80062b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062b6:	2300      	movs	r3, #0
 80062b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062ba:	2301      	movs	r3, #1
 80062bc:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80062c2:	4619      	mov	r1, r3
 80062c4:	486a      	ldr	r0, [pc, #424]	@ (8006470 <HAL_UART_MspInit+0x2c0>)
 80062c6:	f000 fd33 	bl	8006d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80062ca:	2200      	movs	r2, #0
 80062cc:	2100      	movs	r1, #0
 80062ce:	2035      	movs	r0, #53	@ 0x35
 80062d0:	f000 fbb5 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80062d4:	2035      	movs	r0, #53	@ 0x35
 80062d6:	f000 fbce 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 80062da:	e0bc      	b.n	8006456 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a64      	ldr	r2, [pc, #400]	@ (8006474 <HAL_UART_MspInit+0x2c4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d13a      	bne.n	800635c <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART1_CLK_ENABLE();
 80062e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80062ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062f0:	6193      	str	r3, [r2, #24]
 80062f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062fe:	4b59      	ldr	r3, [pc, #356]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	4a58      	ldr	r2, [pc, #352]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006304:	f043 0304 	orr.w	r3, r3, #4
 8006308:	6193      	str	r3, [r2, #24]
 800630a:	4b56      	ldr	r3, [pc, #344]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800631a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631c:	2302      	movs	r3, #2
 800631e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006320:	2303      	movs	r3, #3
 8006322:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006324:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006328:	4619      	mov	r1, r3
 800632a:	4853      	ldr	r0, [pc, #332]	@ (8006478 <HAL_UART_MspInit+0x2c8>)
 800632c:	f000 fd00 	bl	8006d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006334:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006336:	2300      	movs	r3, #0
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633a:	2300      	movs	r3, #0
 800633c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800633e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006342:	4619      	mov	r1, r3
 8006344:	484c      	ldr	r0, [pc, #304]	@ (8006478 <HAL_UART_MspInit+0x2c8>)
 8006346:	f000 fcf3 	bl	8006d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800634a:	2200      	movs	r2, #0
 800634c:	2100      	movs	r1, #0
 800634e:	2025      	movs	r0, #37	@ 0x25
 8006350:	f000 fb75 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006354:	2025      	movs	r0, #37	@ 0x25
 8006356:	f000 fb8e 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 800635a:	e07c      	b.n	8006456 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART2)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a46      	ldr	r2, [pc, #280]	@ (800647c <HAL_UART_MspInit+0x2cc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d138      	bne.n	80063d8 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006366:	4b3f      	ldr	r3, [pc, #252]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	4a3e      	ldr	r2, [pc, #248]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 800636c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006370:	61d3      	str	r3, [r2, #28]
 8006372:	4b3c      	ldr	r3, [pc, #240]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637a:	61bb      	str	r3, [r7, #24]
 800637c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800637e:	4b39      	ldr	r3, [pc, #228]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	4a38      	ldr	r2, [pc, #224]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006384:	f043 0304 	orr.w	r3, r3, #4
 8006388:	6193      	str	r3, [r2, #24]
 800638a:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006396:	2304      	movs	r3, #4
 8006398:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800639a:	2302      	movs	r3, #2
 800639c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800639e:	2303      	movs	r3, #3
 80063a0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063a6:	4619      	mov	r1, r3
 80063a8:	4833      	ldr	r0, [pc, #204]	@ (8006478 <HAL_UART_MspInit+0x2c8>)
 80063aa:	f000 fcc1 	bl	8006d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063ae:	2308      	movs	r3, #8
 80063b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063b2:	2300      	movs	r3, #0
 80063b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b6:	2300      	movs	r3, #0
 80063b8:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80063be:	4619      	mov	r1, r3
 80063c0:	482d      	ldr	r0, [pc, #180]	@ (8006478 <HAL_UART_MspInit+0x2c8>)
 80063c2:	f000 fcb5 	bl	8006d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80063c6:	2200      	movs	r2, #0
 80063c8:	2100      	movs	r1, #0
 80063ca:	2026      	movs	r0, #38	@ 0x26
 80063cc:	f000 fb37 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80063d0:	2026      	movs	r0, #38	@ 0x26
 80063d2:	f000 fb50 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 80063d6:	e03e      	b.n	8006456 <HAL_UART_MspInit+0x2a6>
  else if(huart->Instance==USART3)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a28      	ldr	r2, [pc, #160]	@ (8006480 <HAL_UART_MspInit+0x2d0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d139      	bne.n	8006456 <HAL_UART_MspInit+0x2a6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80063e2:	4b20      	ldr	r3, [pc, #128]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80063e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063ec:	61d3      	str	r3, [r2, #28]
 80063ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	4a19      	ldr	r2, [pc, #100]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006400:	f043 0308 	orr.w	r3, r3, #8
 8006404:	6193      	str	r3, [r2, #24]
 8006406:	4b17      	ldr	r3, [pc, #92]	@ (8006464 <HAL_UART_MspInit+0x2b4>)
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006416:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006418:	2302      	movs	r3, #2
 800641a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800641c:	2303      	movs	r3, #3
 800641e:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006420:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006424:	4619      	mov	r1, r3
 8006426:	4817      	ldr	r0, [pc, #92]	@ (8006484 <HAL_UART_MspInit+0x2d4>)
 8006428:	f000 fc82 	bl	8006d30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800642c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006430:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006432:	2300      	movs	r3, #0
 8006434:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006436:	2300      	movs	r3, #0
 8006438:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800643a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800643e:	4619      	mov	r1, r3
 8006440:	4810      	ldr	r0, [pc, #64]	@ (8006484 <HAL_UART_MspInit+0x2d4>)
 8006442:	f000 fc75 	bl	8006d30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	2027      	movs	r0, #39	@ 0x27
 800644c:	f000 faf7 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006450:	2027      	movs	r0, #39	@ 0x27
 8006452:	f000 fb10 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 8006456:	bf00      	nop
 8006458:	3748      	adds	r7, #72	@ 0x48
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	40004c00 	.word	0x40004c00
 8006464:	40021000 	.word	0x40021000
 8006468:	40011000 	.word	0x40011000
 800646c:	40005000 	.word	0x40005000
 8006470:	40011400 	.word	0x40011400
 8006474:	40013800 	.word	0x40013800
 8006478:	40010800 	.word	0x40010800
 800647c:	40004400 	.word	0x40004400
 8006480:	40004800 	.word	0x40004800
 8006484:	40010c00 	.word	0x40010c00

08006488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800648c:	bf00      	nop
 800648e:	e7fd      	b.n	800648c <NMI_Handler+0x4>

08006490 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <HardFault_Handler+0x4>

08006498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <MemManage_Handler+0x4>

080064a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80064a0:	b480      	push	{r7}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80064a4:	bf00      	nop
 80064a6:	e7fd      	b.n	80064a4 <BusFault_Handler+0x4>

080064a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80064ac:	bf00      	nop
 80064ae:	e7fd      	b.n	80064ac <UsageFault_Handler+0x4>

080064b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064b4:	bf00      	nop
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064cc:	bf00      	nop
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064d8:	f000 f99a 	bl	8006810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064dc:	bf00      	nop
 80064de:	bd80      	pop	{r7, pc}

080064e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80064e4:	4802      	ldr	r0, [pc, #8]	@ (80064f0 <TIM2_IRQHandler+0x10>)
 80064e6:	f001 fc71 	bl	8007dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80064ea:	bf00      	nop
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	200003b4 	.word	0x200003b4

080064f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80064f8:	4802      	ldr	r0, [pc, #8]	@ (8006504 <TIM4_IRQHandler+0x10>)
 80064fa:	f001 fc67 	bl	8007dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	200003fc 	.word	0x200003fc

08006508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800650c:	4802      	ldr	r0, [pc, #8]	@ (8006518 <USART1_IRQHandler+0x10>)
 800650e:	f002 fa8d 	bl	8008a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006512:	bf00      	nop
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200005ac 	.word	0x200005ac

0800651c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006520:	4802      	ldr	r0, [pc, #8]	@ (800652c <USART2_IRQHandler+0x10>)
 8006522:	f002 fa83 	bl	8008a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006526:	bf00      	nop
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	200005f4 	.word	0x200005f4

08006530 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006534:	4802      	ldr	r0, [pc, #8]	@ (8006540 <USART3_IRQHandler+0x10>)
 8006536:	f002 fa79 	bl	8008a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800653a:	bf00      	nop
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	2000063c 	.word	0x2000063c

08006544 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006548:	4802      	ldr	r0, [pc, #8]	@ (8006554 <TIM5_IRQHandler+0x10>)
 800654a:	f001 fc3f 	bl	8007dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800654e:	bf00      	nop
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000444 	.word	0x20000444

08006558 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800655c:	4802      	ldr	r0, [pc, #8]	@ (8006568 <UART4_IRQHandler+0x10>)
 800655e:	f002 fa65 	bl	8008a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006562:	bf00      	nop
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	2000051c 	.word	0x2000051c

0800656c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006570:	4802      	ldr	r0, [pc, #8]	@ (800657c <UART5_IRQHandler+0x10>)
 8006572:	f002 fa5b 	bl	8008a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006576:	bf00      	nop
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	20000564 	.word	0x20000564

08006580 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006584:	4802      	ldr	r0, [pc, #8]	@ (8006590 <TIM6_IRQHandler+0x10>)
 8006586:	f001 fc21 	bl	8007dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800658a:	bf00      	nop
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	2000048c 	.word	0x2000048c

08006594 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006598:	4802      	ldr	r0, [pc, #8]	@ (80065a4 <TIM7_IRQHandler+0x10>)
 800659a:	f001 fc17 	bl	8007dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800659e:	bf00      	nop
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	200004d4 	.word	0x200004d4

080065a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  return 1;
 80065ac:	2301      	movs	r3, #1
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bc80      	pop	{r7}
 80065b4:	4770      	bx	lr

080065b6 <_kill>:

int _kill(int pid, int sig)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80065c0:	f005 fa56 	bl	800ba70 <__errno>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2216      	movs	r2, #22
 80065c8:	601a      	str	r2, [r3, #0]
  return -1;
 80065ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <_exit>:

void _exit (int status)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80065de:	f04f 31ff 	mov.w	r1, #4294967295
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7ff ffe7 	bl	80065b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <_exit+0x12>

080065ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	e00a      	b.n	8006614 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80065fe:	f3af 8000 	nop.w
 8006602:	4601      	mov	r1, r0
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	60ba      	str	r2, [r7, #8]
 800660a:	b2ca      	uxtb	r2, r1
 800660c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	3301      	adds	r3, #1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	429a      	cmp	r2, r3
 800661a:	dbf0      	blt.n	80065fe <_read+0x12>
  }

  return len;
 800661c:	687b      	ldr	r3, [r7, #4]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	60f8      	str	r0, [r7, #12]
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
 8006636:	e009      	b.n	800664c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	60ba      	str	r2, [r7, #8]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	3301      	adds	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	dbf1      	blt.n	8006638 <_write+0x12>
  }
  return len;
 8006654:	687b      	ldr	r3, [r7, #4]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <_close>:

int _close(int file)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006666:	f04f 33ff 	mov.w	r3, #4294967295
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006684:	605a      	str	r2, [r3, #4]
  return 0;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <_isatty>:

int _isatty(int file)
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800669a:	2301      	movs	r3, #1
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr

080066a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	60b9      	str	r1, [r7, #8]
 80066b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bc80      	pop	{r7}
 80066bc:	4770      	bx	lr
	...

080066c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066c8:	4a14      	ldr	r2, [pc, #80]	@ (800671c <_sbrk+0x5c>)
 80066ca:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <_sbrk+0x60>)
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066d4:	4b13      	ldr	r3, [pc, #76]	@ (8006724 <_sbrk+0x64>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066dc:	4b11      	ldr	r3, [pc, #68]	@ (8006724 <_sbrk+0x64>)
 80066de:	4a12      	ldr	r2, [pc, #72]	@ (8006728 <_sbrk+0x68>)
 80066e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066e2:	4b10      	ldr	r3, [pc, #64]	@ (8006724 <_sbrk+0x64>)
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4413      	add	r3, r2
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d207      	bcs.n	8006700 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066f0:	f005 f9be 	bl	800ba70 <__errno>
 80066f4:	4603      	mov	r3, r0
 80066f6:	220c      	movs	r2, #12
 80066f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066fa:	f04f 33ff 	mov.w	r3, #4294967295
 80066fe:	e009      	b.n	8006714 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006700:	4b08      	ldr	r3, [pc, #32]	@ (8006724 <_sbrk+0x64>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006706:	4b07      	ldr	r3, [pc, #28]	@ (8006724 <_sbrk+0x64>)
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4413      	add	r3, r2
 800670e:	4a05      	ldr	r2, [pc, #20]	@ (8006724 <_sbrk+0x64>)
 8006710:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006712:	68fb      	ldr	r3, [r7, #12]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	2000c000 	.word	0x2000c000
 8006720:	00000400 	.word	0x00000400
 8006724:	20000764 	.word	0x20000764
 8006728:	200008c0 	.word	0x200008c0

0800672c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	bc80      	pop	{r7}
 8006736:	4770      	bx	lr

08006738 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006738:	f7ff fff8 	bl	800672c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800673c:	480b      	ldr	r0, [pc, #44]	@ (800676c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800673e:	490c      	ldr	r1, [pc, #48]	@ (8006770 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006740:	4a0c      	ldr	r2, [pc, #48]	@ (8006774 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006744:	e002      	b.n	800674c <LoopCopyDataInit>

08006746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800674a:	3304      	adds	r3, #4

0800674c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800674c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800674e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006750:	d3f9      	bcc.n	8006746 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006752:	4a09      	ldr	r2, [pc, #36]	@ (8006778 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006754:	4c09      	ldr	r4, [pc, #36]	@ (800677c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006758:	e001      	b.n	800675e <LoopFillZerobss>

0800675a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800675a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800675c:	3204      	adds	r2, #4

0800675e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800675e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006760:	d3fb      	bcc.n	800675a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006762:	f005 f98b 	bl	800ba7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006766:	f7fe ff87 	bl	8005678 <main>
  bx lr
 800676a:	4770      	bx	lr
  ldr r0, =_sdata
 800676c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006770:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8006774:	0800e048 	.word	0x0800e048
  ldr r2, =_sbss
 8006778:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800677c:	200008bc 	.word	0x200008bc

08006780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006780:	e7fe      	b.n	8006780 <ADC1_2_IRQHandler>
	...

08006784 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006788:	4b08      	ldr	r3, [pc, #32]	@ (80067ac <HAL_Init+0x28>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a07      	ldr	r2, [pc, #28]	@ (80067ac <HAL_Init+0x28>)
 800678e:	f043 0310 	orr.w	r3, r3, #16
 8006792:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006794:	2003      	movs	r0, #3
 8006796:	f000 f947 	bl	8006a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800679a:	2002      	movs	r0, #2
 800679c:	f000 f808 	bl	80067b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067a0:	f7ff fbb6 	bl	8005f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	40022000 	.word	0x40022000

080067b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067b8:	4b12      	ldr	r3, [pc, #72]	@ (8006804 <HAL_InitTick+0x54>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <HAL_InitTick+0x58>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	4619      	mov	r1, r3
 80067c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80067ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 f95f 	bl	8006a92 <HAL_SYSTICK_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e00e      	b.n	80067fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b0f      	cmp	r3, #15
 80067e2:	d80a      	bhi.n	80067fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067e4:	2200      	movs	r2, #0
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	f04f 30ff 	mov.w	r0, #4294967295
 80067ec:	f000 f927 	bl	8006a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067f0:	4a06      	ldr	r2, [pc, #24]	@ (800680c <HAL_InitTick+0x5c>)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	e000      	b.n	80067fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}
 8006804:	20000004 	.word	0x20000004
 8006808:	2000000c 	.word	0x2000000c
 800680c:	20000008 	.word	0x20000008

08006810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006814:	4b05      	ldr	r3, [pc, #20]	@ (800682c <HAL_IncTick+0x1c>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	4b05      	ldr	r3, [pc, #20]	@ (8006830 <HAL_IncTick+0x20>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4413      	add	r3, r2
 8006820:	4a03      	ldr	r2, [pc, #12]	@ (8006830 <HAL_IncTick+0x20>)
 8006822:	6013      	str	r3, [r2, #0]
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	bc80      	pop	{r7}
 800682a:	4770      	bx	lr
 800682c:	2000000c 	.word	0x2000000c
 8006830:	20000768 	.word	0x20000768

08006834 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  return uwTick;
 8006838:	4b02      	ldr	r3, [pc, #8]	@ (8006844 <HAL_GetTick+0x10>)
 800683a:	681b      	ldr	r3, [r3, #0]
}
 800683c:	4618      	mov	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr
 8006844:	20000768 	.word	0x20000768

08006848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006850:	f7ff fff0 	bl	8006834 <HAL_GetTick>
 8006854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d005      	beq.n	800686e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006862:	4b0a      	ldr	r3, [pc, #40]	@ (800688c <HAL_Delay+0x44>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	461a      	mov	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800686e:	bf00      	nop
 8006870:	f7ff ffe0 	bl	8006834 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	429a      	cmp	r2, r3
 800687e:	d8f7      	bhi.n	8006870 <HAL_Delay+0x28>
  {
  }
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	2000000c 	.word	0x2000000c

08006890 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068a0:	4b0c      	ldr	r3, [pc, #48]	@ (80068d4 <__NVIC_SetPriorityGrouping+0x44>)
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068ac:	4013      	ands	r3, r2
 80068ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80068bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068c2:	4a04      	ldr	r2, [pc, #16]	@ (80068d4 <__NVIC_SetPriorityGrouping+0x44>)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	60d3      	str	r3, [r2, #12]
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	e000ed00 	.word	0xe000ed00

080068d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <__NVIC_GetPriorityGrouping+0x18>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	0a1b      	lsrs	r3, r3, #8
 80068e2:	f003 0307 	and.w	r3, r3, #7
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bc80      	pop	{r7}
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	e000ed00 	.word	0xe000ed00

080068f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006902:	2b00      	cmp	r3, #0
 8006904:	db0b      	blt.n	800691e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	f003 021f 	and.w	r2, r3, #31
 800690c:	4906      	ldr	r1, [pc, #24]	@ (8006928 <__NVIC_EnableIRQ+0x34>)
 800690e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2001      	movs	r0, #1
 8006916:	fa00 f202 	lsl.w	r2, r0, r2
 800691a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr
 8006928:	e000e100 	.word	0xe000e100

0800692c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693c:	2b00      	cmp	r3, #0
 800693e:	db0a      	blt.n	8006956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	490c      	ldr	r1, [pc, #48]	@ (8006978 <__NVIC_SetPriority+0x4c>)
 8006946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694a:	0112      	lsls	r2, r2, #4
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	440b      	add	r3, r1
 8006950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006954:	e00a      	b.n	800696c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	b2da      	uxtb	r2, r3
 800695a:	4908      	ldr	r1, [pc, #32]	@ (800697c <__NVIC_SetPriority+0x50>)
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	3b04      	subs	r3, #4
 8006964:	0112      	lsls	r2, r2, #4
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	440b      	add	r3, r1
 800696a:	761a      	strb	r2, [r3, #24]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	bc80      	pop	{r7}
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	e000e100 	.word	0xe000e100
 800697c:	e000ed00 	.word	0xe000ed00

08006980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006980:	b480      	push	{r7}
 8006982:	b089      	sub	sp, #36	@ 0x24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f1c3 0307 	rsb	r3, r3, #7
 800699a:	2b04      	cmp	r3, #4
 800699c:	bf28      	it	cs
 800699e:	2304      	movcs	r3, #4
 80069a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	3304      	adds	r3, #4
 80069a6:	2b06      	cmp	r3, #6
 80069a8:	d902      	bls.n	80069b0 <NVIC_EncodePriority+0x30>
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3b03      	subs	r3, #3
 80069ae:	e000      	b.n	80069b2 <NVIC_EncodePriority+0x32>
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069b4:	f04f 32ff 	mov.w	r2, #4294967295
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	43da      	mvns	r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	401a      	ands	r2, r3
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069c8:	f04f 31ff 	mov.w	r1, #4294967295
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	fa01 f303 	lsl.w	r3, r1, r3
 80069d2:	43d9      	mvns	r1, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d8:	4313      	orrs	r3, r2
         );
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3724      	adds	r7, #36	@ 0x24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bc80      	pop	{r7}
 80069e2:	4770      	bx	lr

080069e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069f4:	d301      	bcc.n	80069fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069f6:	2301      	movs	r3, #1
 80069f8:	e00f      	b.n	8006a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006a24 <SysTick_Config+0x40>)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a02:	210f      	movs	r1, #15
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	f7ff ff90 	bl	800692c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a0c:	4b05      	ldr	r3, [pc, #20]	@ (8006a24 <SysTick_Config+0x40>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a12:	4b04      	ldr	r3, [pc, #16]	@ (8006a24 <SysTick_Config+0x40>)
 8006a14:	2207      	movs	r2, #7
 8006a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	e000e010 	.word	0xe000e010

08006a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ff2d 	bl	8006890 <__NVIC_SetPriorityGrouping>
}
 8006a36:	bf00      	nop
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	4603      	mov	r3, r0
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a50:	f7ff ff42 	bl	80068d8 <__NVIC_GetPriorityGrouping>
 8006a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f7ff ff90 	bl	8006980 <NVIC_EncodePriority>
 8006a60:	4602      	mov	r2, r0
 8006a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a66:	4611      	mov	r1, r2
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff ff5f 	bl	800692c <__NVIC_SetPriority>
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff ff35 	bl	80068f4 <__NVIC_EnableIRQ>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ffa2 	bl	80069e4 <SysTick_Config>
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d008      	beq.n	8006ad4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2204      	movs	r2, #4
 8006ac6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e020      	b.n	8006b16 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 020e 	bic.w	r2, r2, #14
 8006ae2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f022 0201 	bic.w	r2, r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f202 	lsl.w	r2, r1, r2
 8006b02:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3714      	adds	r7, #20
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bc80      	pop	{r7}
 8006b1e:	4770      	bx	lr

08006b20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d005      	beq.n	8006b44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
 8006b42:	e0d6      	b.n	8006cf2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 020e 	bic.w	r2, r2, #14
 8006b52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b64      	ldr	r3, [pc, #400]	@ (8006cfc <HAL_DMA_Abort_IT+0x1dc>)
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d958      	bls.n	8006c22 <HAL_DMA_Abort_IT+0x102>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a62      	ldr	r2, [pc, #392]	@ (8006d00 <HAL_DMA_Abort_IT+0x1e0>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d04f      	beq.n	8006c1a <HAL_DMA_Abort_IT+0xfa>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a61      	ldr	r2, [pc, #388]	@ (8006d04 <HAL_DMA_Abort_IT+0x1e4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d048      	beq.n	8006c16 <HAL_DMA_Abort_IT+0xf6>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a5f      	ldr	r2, [pc, #380]	@ (8006d08 <HAL_DMA_Abort_IT+0x1e8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d040      	beq.n	8006c10 <HAL_DMA_Abort_IT+0xf0>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a5e      	ldr	r2, [pc, #376]	@ (8006d0c <HAL_DMA_Abort_IT+0x1ec>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d038      	beq.n	8006c0a <HAL_DMA_Abort_IT+0xea>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8006d10 <HAL_DMA_Abort_IT+0x1f0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d030      	beq.n	8006c04 <HAL_DMA_Abort_IT+0xe4>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8006d14 <HAL_DMA_Abort_IT+0x1f4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d028      	beq.n	8006bfe <HAL_DMA_Abort_IT+0xde>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a52      	ldr	r2, [pc, #328]	@ (8006cfc <HAL_DMA_Abort_IT+0x1dc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d020      	beq.n	8006bf8 <HAL_DMA_Abort_IT+0xd8>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a57      	ldr	r2, [pc, #348]	@ (8006d18 <HAL_DMA_Abort_IT+0x1f8>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d019      	beq.n	8006bf4 <HAL_DMA_Abort_IT+0xd4>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a55      	ldr	r2, [pc, #340]	@ (8006d1c <HAL_DMA_Abort_IT+0x1fc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d012      	beq.n	8006bf0 <HAL_DMA_Abort_IT+0xd0>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a54      	ldr	r2, [pc, #336]	@ (8006d20 <HAL_DMA_Abort_IT+0x200>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00a      	beq.n	8006bea <HAL_DMA_Abort_IT+0xca>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a52      	ldr	r2, [pc, #328]	@ (8006d24 <HAL_DMA_Abort_IT+0x204>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d102      	bne.n	8006be4 <HAL_DMA_Abort_IT+0xc4>
 8006bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006be2:	e01b      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006be4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006be8:	e018      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006bee:	e015      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006bf0:	2310      	movs	r3, #16
 8006bf2:	e013      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e011      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006bfc:	e00e      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006bfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006c02:	e00b      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006c04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c08:	e008      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c0e:	e005      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c14:	e002      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006c16:	2310      	movs	r3, #16
 8006c18:	e000      	b.n	8006c1c <HAL_DMA_Abort_IT+0xfc>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4a42      	ldr	r2, [pc, #264]	@ (8006d28 <HAL_DMA_Abort_IT+0x208>)
 8006c1e:	6053      	str	r3, [r2, #4]
 8006c20:	e057      	b.n	8006cd2 <HAL_DMA_Abort_IT+0x1b2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a36      	ldr	r2, [pc, #216]	@ (8006d00 <HAL_DMA_Abort_IT+0x1e0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d04f      	beq.n	8006ccc <HAL_DMA_Abort_IT+0x1ac>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a34      	ldr	r2, [pc, #208]	@ (8006d04 <HAL_DMA_Abort_IT+0x1e4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d048      	beq.n	8006cc8 <HAL_DMA_Abort_IT+0x1a8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a33      	ldr	r2, [pc, #204]	@ (8006d08 <HAL_DMA_Abort_IT+0x1e8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d040      	beq.n	8006cc2 <HAL_DMA_Abort_IT+0x1a2>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a31      	ldr	r2, [pc, #196]	@ (8006d0c <HAL_DMA_Abort_IT+0x1ec>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d038      	beq.n	8006cbc <HAL_DMA_Abort_IT+0x19c>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a30      	ldr	r2, [pc, #192]	@ (8006d10 <HAL_DMA_Abort_IT+0x1f0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d030      	beq.n	8006cb6 <HAL_DMA_Abort_IT+0x196>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2e      	ldr	r2, [pc, #184]	@ (8006d14 <HAL_DMA_Abort_IT+0x1f4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d028      	beq.n	8006cb0 <HAL_DMA_Abort_IT+0x190>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a26      	ldr	r2, [pc, #152]	@ (8006cfc <HAL_DMA_Abort_IT+0x1dc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d020      	beq.n	8006caa <HAL_DMA_Abort_IT+0x18a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a2a      	ldr	r2, [pc, #168]	@ (8006d18 <HAL_DMA_Abort_IT+0x1f8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d019      	beq.n	8006ca6 <HAL_DMA_Abort_IT+0x186>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a29      	ldr	r2, [pc, #164]	@ (8006d1c <HAL_DMA_Abort_IT+0x1fc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d012      	beq.n	8006ca2 <HAL_DMA_Abort_IT+0x182>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a27      	ldr	r2, [pc, #156]	@ (8006d20 <HAL_DMA_Abort_IT+0x200>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00a      	beq.n	8006c9c <HAL_DMA_Abort_IT+0x17c>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a26      	ldr	r2, [pc, #152]	@ (8006d24 <HAL_DMA_Abort_IT+0x204>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d102      	bne.n	8006c96 <HAL_DMA_Abort_IT+0x176>
 8006c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006c94:	e01b      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006c96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c9a:	e018      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006c9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006ca0:	e015      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006ca2:	2310      	movs	r3, #16
 8006ca4:	e013      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e011      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006caa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006cae:	e00e      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006cb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006cb4:	e00b      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006cb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006cba:	e008      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006cc0:	e005      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006cc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cc6:	e002      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	e000      	b.n	8006cce <HAL_DMA_Abort_IT+0x1ae>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4a17      	ldr	r2, [pc, #92]	@ (8006d2c <HAL_DMA_Abort_IT+0x20c>)
 8006cd0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	4798      	blx	r3
    } 
  }
  return status;
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	40020080 	.word	0x40020080
 8006d00:	40020008 	.word	0x40020008
 8006d04:	4002001c 	.word	0x4002001c
 8006d08:	40020030 	.word	0x40020030
 8006d0c:	40020044 	.word	0x40020044
 8006d10:	40020058 	.word	0x40020058
 8006d14:	4002006c 	.word	0x4002006c
 8006d18:	40020408 	.word	0x40020408
 8006d1c:	4002041c 	.word	0x4002041c
 8006d20:	40020430 	.word	0x40020430
 8006d24:	40020444 	.word	0x40020444
 8006d28:	40020400 	.word	0x40020400
 8006d2c:	40020000 	.word	0x40020000

08006d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b08b      	sub	sp, #44	@ 0x2c
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d42:	e179      	b.n	8007038 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006d44:	2201      	movs	r2, #1
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	4013      	ands	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	f040 8168 	bne.w	8007032 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4a96      	ldr	r2, [pc, #600]	@ (8006fc0 <HAL_GPIO_Init+0x290>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d05e      	beq.n	8006e2a <HAL_GPIO_Init+0xfa>
 8006d6c:	4a94      	ldr	r2, [pc, #592]	@ (8006fc0 <HAL_GPIO_Init+0x290>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d875      	bhi.n	8006e5e <HAL_GPIO_Init+0x12e>
 8006d72:	4a94      	ldr	r2, [pc, #592]	@ (8006fc4 <HAL_GPIO_Init+0x294>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d058      	beq.n	8006e2a <HAL_GPIO_Init+0xfa>
 8006d78:	4a92      	ldr	r2, [pc, #584]	@ (8006fc4 <HAL_GPIO_Init+0x294>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d86f      	bhi.n	8006e5e <HAL_GPIO_Init+0x12e>
 8006d7e:	4a92      	ldr	r2, [pc, #584]	@ (8006fc8 <HAL_GPIO_Init+0x298>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d052      	beq.n	8006e2a <HAL_GPIO_Init+0xfa>
 8006d84:	4a90      	ldr	r2, [pc, #576]	@ (8006fc8 <HAL_GPIO_Init+0x298>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d869      	bhi.n	8006e5e <HAL_GPIO_Init+0x12e>
 8006d8a:	4a90      	ldr	r2, [pc, #576]	@ (8006fcc <HAL_GPIO_Init+0x29c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d04c      	beq.n	8006e2a <HAL_GPIO_Init+0xfa>
 8006d90:	4a8e      	ldr	r2, [pc, #568]	@ (8006fcc <HAL_GPIO_Init+0x29c>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d863      	bhi.n	8006e5e <HAL_GPIO_Init+0x12e>
 8006d96:	4a8e      	ldr	r2, [pc, #568]	@ (8006fd0 <HAL_GPIO_Init+0x2a0>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d046      	beq.n	8006e2a <HAL_GPIO_Init+0xfa>
 8006d9c:	4a8c      	ldr	r2, [pc, #560]	@ (8006fd0 <HAL_GPIO_Init+0x2a0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d85d      	bhi.n	8006e5e <HAL_GPIO_Init+0x12e>
 8006da2:	2b12      	cmp	r3, #18
 8006da4:	d82a      	bhi.n	8006dfc <HAL_GPIO_Init+0xcc>
 8006da6:	2b12      	cmp	r3, #18
 8006da8:	d859      	bhi.n	8006e5e <HAL_GPIO_Init+0x12e>
 8006daa:	a201      	add	r2, pc, #4	@ (adr r2, 8006db0 <HAL_GPIO_Init+0x80>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006e2b 	.word	0x08006e2b
 8006db4:	08006e05 	.word	0x08006e05
 8006db8:	08006e17 	.word	0x08006e17
 8006dbc:	08006e59 	.word	0x08006e59
 8006dc0:	08006e5f 	.word	0x08006e5f
 8006dc4:	08006e5f 	.word	0x08006e5f
 8006dc8:	08006e5f 	.word	0x08006e5f
 8006dcc:	08006e5f 	.word	0x08006e5f
 8006dd0:	08006e5f 	.word	0x08006e5f
 8006dd4:	08006e5f 	.word	0x08006e5f
 8006dd8:	08006e5f 	.word	0x08006e5f
 8006ddc:	08006e5f 	.word	0x08006e5f
 8006de0:	08006e5f 	.word	0x08006e5f
 8006de4:	08006e5f 	.word	0x08006e5f
 8006de8:	08006e5f 	.word	0x08006e5f
 8006dec:	08006e5f 	.word	0x08006e5f
 8006df0:	08006e5f 	.word	0x08006e5f
 8006df4:	08006e0d 	.word	0x08006e0d
 8006df8:	08006e21 	.word	0x08006e21
 8006dfc:	4a75      	ldr	r2, [pc, #468]	@ (8006fd4 <HAL_GPIO_Init+0x2a4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d013      	beq.n	8006e2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006e02:	e02c      	b.n	8006e5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	623b      	str	r3, [r7, #32]
          break;
 8006e0a:	e029      	b.n	8006e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	3304      	adds	r3, #4
 8006e12:	623b      	str	r3, [r7, #32]
          break;
 8006e14:	e024      	b.n	8006e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	623b      	str	r3, [r7, #32]
          break;
 8006e1e:	e01f      	b.n	8006e60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	330c      	adds	r3, #12
 8006e26:	623b      	str	r3, [r7, #32]
          break;
 8006e28:	e01a      	b.n	8006e60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d102      	bne.n	8006e38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006e32:	2304      	movs	r3, #4
 8006e34:	623b      	str	r3, [r7, #32]
          break;
 8006e36:	e013      	b.n	8006e60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d105      	bne.n	8006e4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006e40:	2308      	movs	r3, #8
 8006e42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	611a      	str	r2, [r3, #16]
          break;
 8006e4a:	e009      	b.n	8006e60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006e4c:	2308      	movs	r3, #8
 8006e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	615a      	str	r2, [r3, #20]
          break;
 8006e56:	e003      	b.n	8006e60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	623b      	str	r3, [r7, #32]
          break;
 8006e5c:	e000      	b.n	8006e60 <HAL_GPIO_Init+0x130>
          break;
 8006e5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2bff      	cmp	r3, #255	@ 0xff
 8006e64:	d801      	bhi.n	8006e6a <HAL_GPIO_Init+0x13a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	e001      	b.n	8006e6e <HAL_GPIO_Init+0x13e>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2bff      	cmp	r3, #255	@ 0xff
 8006e74:	d802      	bhi.n	8006e7c <HAL_GPIO_Init+0x14c>
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	e002      	b.n	8006e82 <HAL_GPIO_Init+0x152>
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7e:	3b08      	subs	r3, #8
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	210f      	movs	r1, #15
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e90:	43db      	mvns	r3, r3
 8006e92:	401a      	ands	r2, r3
 8006e94:	6a39      	ldr	r1, [r7, #32]
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f000 80c1 	beq.w	8007032 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006eb0:	4b49      	ldr	r3, [pc, #292]	@ (8006fd8 <HAL_GPIO_Init+0x2a8>)
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	4a48      	ldr	r2, [pc, #288]	@ (8006fd8 <HAL_GPIO_Init+0x2a8>)
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	6193      	str	r3, [r2, #24]
 8006ebc:	4b46      	ldr	r3, [pc, #280]	@ (8006fd8 <HAL_GPIO_Init+0x2a8>)
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	60bb      	str	r3, [r7, #8]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006ec8:	4a44      	ldr	r2, [pc, #272]	@ (8006fdc <HAL_GPIO_Init+0x2ac>)
 8006eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ecc:	089b      	lsrs	r3, r3, #2
 8006ece:	3302      	adds	r3, #2
 8006ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed8:	f003 0303 	and.w	r3, r3, #3
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	220f      	movs	r2, #15
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a3c      	ldr	r2, [pc, #240]	@ (8006fe0 <HAL_GPIO_Init+0x2b0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d01f      	beq.n	8006f34 <HAL_GPIO_Init+0x204>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8006fe4 <HAL_GPIO_Init+0x2b4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d019      	beq.n	8006f30 <HAL_GPIO_Init+0x200>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a3a      	ldr	r2, [pc, #232]	@ (8006fe8 <HAL_GPIO_Init+0x2b8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d013      	beq.n	8006f2c <HAL_GPIO_Init+0x1fc>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a39      	ldr	r2, [pc, #228]	@ (8006fec <HAL_GPIO_Init+0x2bc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00d      	beq.n	8006f28 <HAL_GPIO_Init+0x1f8>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a38      	ldr	r2, [pc, #224]	@ (8006ff0 <HAL_GPIO_Init+0x2c0>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <HAL_GPIO_Init+0x1f4>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a37      	ldr	r2, [pc, #220]	@ (8006ff4 <HAL_GPIO_Init+0x2c4>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d101      	bne.n	8006f20 <HAL_GPIO_Init+0x1f0>
 8006f1c:	2305      	movs	r3, #5
 8006f1e:	e00a      	b.n	8006f36 <HAL_GPIO_Init+0x206>
 8006f20:	2306      	movs	r3, #6
 8006f22:	e008      	b.n	8006f36 <HAL_GPIO_Init+0x206>
 8006f24:	2304      	movs	r3, #4
 8006f26:	e006      	b.n	8006f36 <HAL_GPIO_Init+0x206>
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e004      	b.n	8006f36 <HAL_GPIO_Init+0x206>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e002      	b.n	8006f36 <HAL_GPIO_Init+0x206>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_GPIO_Init+0x206>
 8006f34:	2300      	movs	r3, #0
 8006f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f38:	f002 0203 	and.w	r2, r2, #3
 8006f3c:	0092      	lsls	r2, r2, #2
 8006f3e:	4093      	lsls	r3, r2
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006f46:	4925      	ldr	r1, [pc, #148]	@ (8006fdc <HAL_GPIO_Init+0x2ac>)
 8006f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4a:	089b      	lsrs	r3, r3, #2
 8006f4c:	3302      	adds	r3, #2
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d006      	beq.n	8006f6e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006f60:	4b25      	ldr	r3, [pc, #148]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	4924      	ldr	r1, [pc, #144]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	608b      	str	r3, [r1, #8]
 8006f6c:	e006      	b.n	8006f7c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006f6e:	4b22      	ldr	r3, [pc, #136]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	43db      	mvns	r3, r3
 8006f76:	4920      	ldr	r1, [pc, #128]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d006      	beq.n	8006f96 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006f88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	491a      	ldr	r1, [pc, #104]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	60cb      	str	r3, [r1, #12]
 8006f94:	e006      	b.n	8006fa4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006f96:	4b18      	ldr	r3, [pc, #96]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	4916      	ldr	r1, [pc, #88]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d025      	beq.n	8006ffc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006fb0:	4b11      	ldr	r3, [pc, #68]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4910      	ldr	r1, [pc, #64]	@ (8006ff8 <HAL_GPIO_Init+0x2c8>)
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	604b      	str	r3, [r1, #4]
 8006fbc:	e025      	b.n	800700a <HAL_GPIO_Init+0x2da>
 8006fbe:	bf00      	nop
 8006fc0:	10320000 	.word	0x10320000
 8006fc4:	10310000 	.word	0x10310000
 8006fc8:	10220000 	.word	0x10220000
 8006fcc:	10210000 	.word	0x10210000
 8006fd0:	10120000 	.word	0x10120000
 8006fd4:	10110000 	.word	0x10110000
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	40010000 	.word	0x40010000
 8006fe0:	40010800 	.word	0x40010800
 8006fe4:	40010c00 	.word	0x40010c00
 8006fe8:	40011000 	.word	0x40011000
 8006fec:	40011400 	.word	0x40011400
 8006ff0:	40011800 	.word	0x40011800
 8006ff4:	40011c00 	.word	0x40011c00
 8006ff8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006ffc:	4b15      	ldr	r3, [pc, #84]	@ (8007054 <HAL_GPIO_Init+0x324>)
 8006ffe:	685a      	ldr	r2, [r3, #4]
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	43db      	mvns	r3, r3
 8007004:	4913      	ldr	r1, [pc, #76]	@ (8007054 <HAL_GPIO_Init+0x324>)
 8007006:	4013      	ands	r3, r2
 8007008:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007016:	4b0f      	ldr	r3, [pc, #60]	@ (8007054 <HAL_GPIO_Init+0x324>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	490e      	ldr	r1, [pc, #56]	@ (8007054 <HAL_GPIO_Init+0x324>)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	4313      	orrs	r3, r2
 8007020:	600b      	str	r3, [r1, #0]
 8007022:	e006      	b.n	8007032 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007024:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <HAL_GPIO_Init+0x324>)
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	43db      	mvns	r3, r3
 800702c:	4909      	ldr	r1, [pc, #36]	@ (8007054 <HAL_GPIO_Init+0x324>)
 800702e:	4013      	ands	r3, r2
 8007030:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	3301      	adds	r3, #1
 8007036:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	fa22 f303 	lsr.w	r3, r2, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	f47f ae7e 	bne.w	8006d44 <HAL_GPIO_Init+0x14>
  }
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	372c      	adds	r7, #44	@ 0x2c
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	40010400 	.word	0x40010400

08007058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
 8007064:	4613      	mov	r3, r2
 8007066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007068:	787b      	ldrb	r3, [r7, #1]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007074:	e003      	b.n	800707e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007076:	887b      	ldrh	r3, [r7, #2]
 8007078:	041a      	lsls	r2, r3, #16
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	611a      	str	r2, [r3, #16]
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	bc80      	pop	{r7}
 8007086:	4770      	bx	lr

08007088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e272      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8087 	beq.w	80071b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070a8:	4b92      	ldr	r3, [pc, #584]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f003 030c 	and.w	r3, r3, #12
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d00c      	beq.n	80070ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80070b4:	4b8f      	ldr	r3, [pc, #572]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f003 030c 	and.w	r3, r3, #12
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d112      	bne.n	80070e6 <HAL_RCC_OscConfig+0x5e>
 80070c0:	4b8c      	ldr	r3, [pc, #560]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070cc:	d10b      	bne.n	80070e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ce:	4b89      	ldr	r3, [pc, #548]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d06c      	beq.n	80071b4 <HAL_RCC_OscConfig+0x12c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d168      	bne.n	80071b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e24c      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ee:	d106      	bne.n	80070fe <HAL_RCC_OscConfig+0x76>
 80070f0:	4b80      	ldr	r3, [pc, #512]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a7f      	ldr	r2, [pc, #508]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80070f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	e02e      	b.n	800715c <HAL_RCC_OscConfig+0xd4>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10c      	bne.n	8007120 <HAL_RCC_OscConfig+0x98>
 8007106:	4b7b      	ldr	r3, [pc, #492]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a7a      	ldr	r2, [pc, #488]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 800710c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	4b78      	ldr	r3, [pc, #480]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a77      	ldr	r2, [pc, #476]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	e01d      	b.n	800715c <HAL_RCC_OscConfig+0xd4>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007128:	d10c      	bne.n	8007144 <HAL_RCC_OscConfig+0xbc>
 800712a:	4b72      	ldr	r3, [pc, #456]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a71      	ldr	r2, [pc, #452]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	4b6f      	ldr	r3, [pc, #444]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a6e      	ldr	r2, [pc, #440]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 800713c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e00b      	b.n	800715c <HAL_RCC_OscConfig+0xd4>
 8007144:	4b6b      	ldr	r3, [pc, #428]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a6a      	ldr	r2, [pc, #424]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 800714a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4b68      	ldr	r3, [pc, #416]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a67      	ldr	r2, [pc, #412]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800715a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d013      	beq.n	800718c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007164:	f7ff fb66 	bl	8006834 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800716c:	f7ff fb62 	bl	8006834 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b64      	cmp	r3, #100	@ 0x64
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e200      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717e:	4b5d      	ldr	r3, [pc, #372]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0f0      	beq.n	800716c <HAL_RCC_OscConfig+0xe4>
 800718a:	e014      	b.n	80071b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718c:	f7ff fb52 	bl	8006834 <HAL_GetTick>
 8007190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007194:	f7ff fb4e 	bl	8006834 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b64      	cmp	r3, #100	@ 0x64
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e1ec      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071a6:	4b53      	ldr	r3, [pc, #332]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0x10c>
 80071b2:	e000      	b.n	80071b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0302 	and.w	r3, r3, #2
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d063      	beq.n	800728a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071c2:	4b4c      	ldr	r3, [pc, #304]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f003 030c 	and.w	r3, r3, #12
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00b      	beq.n	80071e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80071ce:	4b49      	ldr	r3, [pc, #292]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f003 030c 	and.w	r3, r3, #12
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d11c      	bne.n	8007214 <HAL_RCC_OscConfig+0x18c>
 80071da:	4b46      	ldr	r3, [pc, #280]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d116      	bne.n	8007214 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071e6:	4b43      	ldr	r3, [pc, #268]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_RCC_OscConfig+0x176>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d001      	beq.n	80071fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e1c0      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fe:	4b3d      	ldr	r3, [pc, #244]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4939      	ldr	r1, [pc, #228]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 800720e:	4313      	orrs	r3, r2
 8007210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007212:	e03a      	b.n	800728a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d020      	beq.n	800725e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800721c:	4b36      	ldr	r3, [pc, #216]	@ (80072f8 <HAL_RCC_OscConfig+0x270>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007222:	f7ff fb07 	bl	8006834 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007228:	e008      	b.n	800723c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800722a:	f7ff fb03 	bl	8006834 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e1a1      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800723c:	4b2d      	ldr	r3, [pc, #180]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0f0      	beq.n	800722a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007248:	4b2a      	ldr	r3, [pc, #168]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	4927      	ldr	r1, [pc, #156]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007258:	4313      	orrs	r3, r2
 800725a:	600b      	str	r3, [r1, #0]
 800725c:	e015      	b.n	800728a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800725e:	4b26      	ldr	r3, [pc, #152]	@ (80072f8 <HAL_RCC_OscConfig+0x270>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007264:	f7ff fae6 	bl	8006834 <HAL_GetTick>
 8007268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800726c:	f7ff fae2 	bl	8006834 <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e180      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727e:	4b1d      	ldr	r3, [pc, #116]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0302 	and.w	r3, r3, #2
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d03a      	beq.n	800730c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	699b      	ldr	r3, [r3, #24]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d019      	beq.n	80072d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800729e:	4b17      	ldr	r3, [pc, #92]	@ (80072fc <HAL_RCC_OscConfig+0x274>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072a4:	f7ff fac6 	bl	8006834 <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072ac:	f7ff fac2 	bl	8006834 <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e160      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072be:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <HAL_RCC_OscConfig+0x26c>)
 80072c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d0f0      	beq.n	80072ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80072ca:	2001      	movs	r0, #1
 80072cc:	f000 face 	bl	800786c <RCC_Delay>
 80072d0:	e01c      	b.n	800730c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072d2:	4b0a      	ldr	r3, [pc, #40]	@ (80072fc <HAL_RCC_OscConfig+0x274>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072d8:	f7ff faac 	bl	8006834 <HAL_GetTick>
 80072dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072de:	e00f      	b.n	8007300 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072e0:	f7ff faa8 	bl	8006834 <HAL_GetTick>
 80072e4:	4602      	mov	r2, r0
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d908      	bls.n	8007300 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e146      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
 80072f2:	bf00      	nop
 80072f4:	40021000 	.word	0x40021000
 80072f8:	42420000 	.word	0x42420000
 80072fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007300:	4b92      	ldr	r3, [pc, #584]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e9      	bne.n	80072e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80a6 	beq.w	8007466 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800731e:	4b8b      	ldr	r3, [pc, #556]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007320:	69db      	ldr	r3, [r3, #28]
 8007322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10d      	bne.n	8007346 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800732a:	4b88      	ldr	r3, [pc, #544]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	4a87      	ldr	r2, [pc, #540]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007330:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007334:	61d3      	str	r3, [r2, #28]
 8007336:	4b85      	ldr	r3, [pc, #532]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800733e:	60bb      	str	r3, [r7, #8]
 8007340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007346:	4b82      	ldr	r3, [pc, #520]	@ (8007550 <HAL_RCC_OscConfig+0x4c8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734e:	2b00      	cmp	r3, #0
 8007350:	d118      	bne.n	8007384 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007352:	4b7f      	ldr	r3, [pc, #508]	@ (8007550 <HAL_RCC_OscConfig+0x4c8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a7e      	ldr	r2, [pc, #504]	@ (8007550 <HAL_RCC_OscConfig+0x4c8>)
 8007358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800735c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800735e:	f7ff fa69 	bl	8006834 <HAL_GetTick>
 8007362:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007366:	f7ff fa65 	bl	8006834 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b64      	cmp	r3, #100	@ 0x64
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e103      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007378:	4b75      	ldr	r3, [pc, #468]	@ (8007550 <HAL_RCC_OscConfig+0x4c8>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f0      	beq.n	8007366 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d106      	bne.n	800739a <HAL_RCC_OscConfig+0x312>
 800738c:	4b6f      	ldr	r3, [pc, #444]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	4a6e      	ldr	r2, [pc, #440]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	6213      	str	r3, [r2, #32]
 8007398:	e02d      	b.n	80073f6 <HAL_RCC_OscConfig+0x36e>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10c      	bne.n	80073bc <HAL_RCC_OscConfig+0x334>
 80073a2:	4b6a      	ldr	r3, [pc, #424]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	4a69      	ldr	r2, [pc, #420]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073a8:	f023 0301 	bic.w	r3, r3, #1
 80073ac:	6213      	str	r3, [r2, #32]
 80073ae:	4b67      	ldr	r3, [pc, #412]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	4a66      	ldr	r2, [pc, #408]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073b4:	f023 0304 	bic.w	r3, r3, #4
 80073b8:	6213      	str	r3, [r2, #32]
 80073ba:	e01c      	b.n	80073f6 <HAL_RCC_OscConfig+0x36e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b05      	cmp	r3, #5
 80073c2:	d10c      	bne.n	80073de <HAL_RCC_OscConfig+0x356>
 80073c4:	4b61      	ldr	r3, [pc, #388]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073c6:	6a1b      	ldr	r3, [r3, #32]
 80073c8:	4a60      	ldr	r2, [pc, #384]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073ca:	f043 0304 	orr.w	r3, r3, #4
 80073ce:	6213      	str	r3, [r2, #32]
 80073d0:	4b5e      	ldr	r3, [pc, #376]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	4a5d      	ldr	r2, [pc, #372]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073d6:	f043 0301 	orr.w	r3, r3, #1
 80073da:	6213      	str	r3, [r2, #32]
 80073dc:	e00b      	b.n	80073f6 <HAL_RCC_OscConfig+0x36e>
 80073de:	4b5b      	ldr	r3, [pc, #364]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	4a5a      	ldr	r2, [pc, #360]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	6213      	str	r3, [r2, #32]
 80073ea:	4b58      	ldr	r3, [pc, #352]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	4a57      	ldr	r2, [pc, #348]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80073f0:	f023 0304 	bic.w	r3, r3, #4
 80073f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d015      	beq.n	800742a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073fe:	f7ff fa19 	bl	8006834 <HAL_GetTick>
 8007402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007404:	e00a      	b.n	800741c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007406:	f7ff fa15 	bl	8006834 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007414:	4293      	cmp	r3, r2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e0b1      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800741c:	4b4b      	ldr	r3, [pc, #300]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 800741e:	6a1b      	ldr	r3, [r3, #32]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0ee      	beq.n	8007406 <HAL_RCC_OscConfig+0x37e>
 8007428:	e014      	b.n	8007454 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800742a:	f7ff fa03 	bl	8006834 <HAL_GetTick>
 800742e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007430:	e00a      	b.n	8007448 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007432:	f7ff f9ff 	bl	8006834 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007440:	4293      	cmp	r3, r2
 8007442:	d901      	bls.n	8007448 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e09b      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007448:	4b40      	ldr	r3, [pc, #256]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 800744a:	6a1b      	ldr	r3, [r3, #32]
 800744c:	f003 0302 	and.w	r3, r3, #2
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1ee      	bne.n	8007432 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007454:	7dfb      	ldrb	r3, [r7, #23]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d105      	bne.n	8007466 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800745a:	4b3c      	ldr	r3, [pc, #240]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	4a3b      	ldr	r2, [pc, #236]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007464:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 8087 	beq.w	800757e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007470:	4b36      	ldr	r3, [pc, #216]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f003 030c 	and.w	r3, r3, #12
 8007478:	2b08      	cmp	r3, #8
 800747a:	d061      	beq.n	8007540 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	2b02      	cmp	r3, #2
 8007482:	d146      	bne.n	8007512 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007484:	4b33      	ldr	r3, [pc, #204]	@ (8007554 <HAL_RCC_OscConfig+0x4cc>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800748a:	f7ff f9d3 	bl	8006834 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007492:	f7ff f9cf 	bl	8006834 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e06d      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80074a4:	4b29      	ldr	r3, [pc, #164]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b8:	d108      	bne.n	80074cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80074ba:	4b24      	ldr	r3, [pc, #144]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	4921      	ldr	r1, [pc, #132]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074cc:	4b1f      	ldr	r3, [pc, #124]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a19      	ldr	r1, [r3, #32]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	430b      	orrs	r3, r1
 80074de:	491b      	ldr	r1, [pc, #108]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007554 <HAL_RCC_OscConfig+0x4cc>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074ea:	f7ff f9a3 	bl	8006834 <HAL_GetTick>
 80074ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074f0:	e008      	b.n	8007504 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f2:	f7ff f99f 	bl	8006834 <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d901      	bls.n	8007504 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e03d      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007504:	4b11      	ldr	r3, [pc, #68]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d0f0      	beq.n	80074f2 <HAL_RCC_OscConfig+0x46a>
 8007510:	e035      	b.n	800757e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007512:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <HAL_RCC_OscConfig+0x4cc>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007518:	f7ff f98c 	bl	8006834 <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007520:	f7ff f988 	bl	8006834 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e026      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007532:	4b06      	ldr	r3, [pc, #24]	@ (800754c <HAL_RCC_OscConfig+0x4c4>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f0      	bne.n	8007520 <HAL_RCC_OscConfig+0x498>
 800753e:	e01e      	b.n	800757e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e019      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
 800754c:	40021000 	.word	0x40021000
 8007550:	40007000 	.word	0x40007000
 8007554:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007558:	4b0b      	ldr	r3, [pc, #44]	@ (8007588 <HAL_RCC_OscConfig+0x500>)
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	429a      	cmp	r2, r3
 800756a:	d106      	bne.n	800757a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d001      	beq.n	800757e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	40021000 	.word	0x40021000

0800758c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e0d0      	b.n	8007742 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075a0:	4b6a      	ldr	r3, [pc, #424]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	683a      	ldr	r2, [r7, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d910      	bls.n	80075d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ae:	4b67      	ldr	r3, [pc, #412]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f023 0207 	bic.w	r2, r3, #7
 80075b6:	4965      	ldr	r1, [pc, #404]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075be:	4b63      	ldr	r3, [pc, #396]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d001      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0b8      	b.n	8007742 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d020      	beq.n	800761e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075e8:	4b59      	ldr	r3, [pc, #356]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	4a58      	ldr	r2, [pc, #352]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 80075ee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80075f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007600:	4b53      	ldr	r3, [pc, #332]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	4a52      	ldr	r2, [pc, #328]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 8007606:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800760a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800760c:	4b50      	ldr	r3, [pc, #320]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	494d      	ldr	r1, [pc, #308]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 800761a:	4313      	orrs	r3, r2
 800761c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d040      	beq.n	80076ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d107      	bne.n	8007642 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007632:	4b47      	ldr	r3, [pc, #284]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d115      	bne.n	800766a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e07f      	b.n	8007742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d107      	bne.n	800765a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800764a:	4b41      	ldr	r3, [pc, #260]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e073      	b.n	8007742 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800765a:	4b3d      	ldr	r3, [pc, #244]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e06b      	b.n	8007742 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800766a:	4b39      	ldr	r3, [pc, #228]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f023 0203 	bic.w	r2, r3, #3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	4936      	ldr	r1, [pc, #216]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 8007678:	4313      	orrs	r3, r2
 800767a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800767c:	f7ff f8da 	bl	8006834 <HAL_GetTick>
 8007680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007682:	e00a      	b.n	800769a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007684:	f7ff f8d6 	bl	8006834 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e053      	b.n	8007742 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800769a:	4b2d      	ldr	r3, [pc, #180]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f003 020c 	and.w	r2, r3, #12
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d1eb      	bne.n	8007684 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076ac:	4b27      	ldr	r3, [pc, #156]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0307 	and.w	r3, r3, #7
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d210      	bcs.n	80076dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ba:	4b24      	ldr	r3, [pc, #144]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f023 0207 	bic.w	r2, r3, #7
 80076c2:	4922      	ldr	r1, [pc, #136]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ca:	4b20      	ldr	r3, [pc, #128]	@ (800774c <HAL_RCC_ClockConfig+0x1c0>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d001      	beq.n	80076dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e032      	b.n	8007742 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e8:	4b19      	ldr	r3, [pc, #100]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4916      	ldr	r1, [pc, #88]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0308 	and.w	r3, r3, #8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007706:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	490e      	ldr	r1, [pc, #56]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 8007716:	4313      	orrs	r3, r2
 8007718:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800771a:	f000 f821 	bl	8007760 <HAL_RCC_GetSysClockFreq>
 800771e:	4602      	mov	r2, r0
 8007720:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <HAL_RCC_ClockConfig+0x1c4>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	490a      	ldr	r1, [pc, #40]	@ (8007754 <HAL_RCC_ClockConfig+0x1c8>)
 800772c:	5ccb      	ldrb	r3, [r1, r3]
 800772e:	fa22 f303 	lsr.w	r3, r2, r3
 8007732:	4a09      	ldr	r2, [pc, #36]	@ (8007758 <HAL_RCC_ClockConfig+0x1cc>)
 8007734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007736:	4b09      	ldr	r3, [pc, #36]	@ (800775c <HAL_RCC_ClockConfig+0x1d0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f7ff f838 	bl	80067b0 <HAL_InitTick>

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40022000 	.word	0x40022000
 8007750:	40021000 	.word	0x40021000
 8007754:	0800d634 	.word	0x0800d634
 8007758:	20000004 	.word	0x20000004
 800775c:	20000008 	.word	0x20000008

08007760 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	60fb      	str	r3, [r7, #12]
 800776a:	2300      	movs	r3, #0
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800777a:	4b1e      	ldr	r3, [pc, #120]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x94>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f003 030c 	and.w	r3, r3, #12
 8007786:	2b04      	cmp	r3, #4
 8007788:	d002      	beq.n	8007790 <HAL_RCC_GetSysClockFreq+0x30>
 800778a:	2b08      	cmp	r3, #8
 800778c:	d003      	beq.n	8007796 <HAL_RCC_GetSysClockFreq+0x36>
 800778e:	e027      	b.n	80077e0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007790:	4b19      	ldr	r3, [pc, #100]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x98>)
 8007792:	613b      	str	r3, [r7, #16]
      break;
 8007794:	e027      	b.n	80077e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	0c9b      	lsrs	r3, r3, #18
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	4a17      	ldr	r2, [pc, #92]	@ (80077fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80077a0:	5cd3      	ldrb	r3, [r2, r3]
 80077a2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d010      	beq.n	80077d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80077ae:	4b11      	ldr	r3, [pc, #68]	@ (80077f4 <HAL_RCC_GetSysClockFreq+0x94>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	0c5b      	lsrs	r3, r3, #17
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	4a11      	ldr	r2, [pc, #68]	@ (8007800 <HAL_RCC_GetSysClockFreq+0xa0>)
 80077ba:	5cd3      	ldrb	r3, [r2, r3]
 80077bc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a0d      	ldr	r2, [pc, #52]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80077c2:	fb03 f202 	mul.w	r2, r3, r2
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077cc:	617b      	str	r3, [r7, #20]
 80077ce:	e004      	b.n	80077da <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007804 <HAL_RCC_GetSysClockFreq+0xa4>)
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
 80077d8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	613b      	str	r3, [r7, #16]
      break;
 80077de:	e002      	b.n	80077e6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80077e0:	4b05      	ldr	r3, [pc, #20]	@ (80077f8 <HAL_RCC_GetSysClockFreq+0x98>)
 80077e2:	613b      	str	r3, [r7, #16]
      break;
 80077e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80077e6:	693b      	ldr	r3, [r7, #16]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	371c      	adds	r7, #28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	40021000 	.word	0x40021000
 80077f8:	007a1200 	.word	0x007a1200
 80077fc:	0800d64c 	.word	0x0800d64c
 8007800:	0800d65c 	.word	0x0800d65c
 8007804:	003d0900 	.word	0x003d0900

08007808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007808:	b480      	push	{r7}
 800780a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800780c:	4b02      	ldr	r3, [pc, #8]	@ (8007818 <HAL_RCC_GetHCLKFreq+0x10>)
 800780e:	681b      	ldr	r3, [r3, #0]
}
 8007810:	4618      	mov	r0, r3
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr
 8007818:	20000004 	.word	0x20000004

0800781c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007820:	f7ff fff2 	bl	8007808 <HAL_RCC_GetHCLKFreq>
 8007824:	4602      	mov	r2, r0
 8007826:	4b05      	ldr	r3, [pc, #20]	@ (800783c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	f003 0307 	and.w	r3, r3, #7
 8007830:	4903      	ldr	r1, [pc, #12]	@ (8007840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007832:	5ccb      	ldrb	r3, [r1, r3]
 8007834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007838:	4618      	mov	r0, r3
 800783a:	bd80      	pop	{r7, pc}
 800783c:	40021000 	.word	0x40021000
 8007840:	0800d644 	.word	0x0800d644

08007844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007848:	f7ff ffde 	bl	8007808 <HAL_RCC_GetHCLKFreq>
 800784c:	4602      	mov	r2, r0
 800784e:	4b05      	ldr	r3, [pc, #20]	@ (8007864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	0adb      	lsrs	r3, r3, #11
 8007854:	f003 0307 	and.w	r3, r3, #7
 8007858:	4903      	ldr	r1, [pc, #12]	@ (8007868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800785a:	5ccb      	ldrb	r3, [r1, r3]
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007860:	4618      	mov	r0, r3
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40021000 	.word	0x40021000
 8007868:	0800d644 	.word	0x0800d644

0800786c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007874:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <RCC_Delay+0x34>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a0a      	ldr	r2, [pc, #40]	@ (80078a4 <RCC_Delay+0x38>)
 800787a:	fba2 2303 	umull	r2, r3, r2, r3
 800787e:	0a5b      	lsrs	r3, r3, #9
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007888:	bf00      	nop
  }
  while (Delay --);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	1e5a      	subs	r2, r3, #1
 800788e:	60fa      	str	r2, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1f9      	bne.n	8007888 <RCC_Delay+0x1c>
}
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr
 80078a0:	20000004 	.word	0x20000004
 80078a4:	10624dd3 	.word	0x10624dd3

080078a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e041      	b.n	800793e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fe fc2c 	bl	800612c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f000 fc46 	bl	8008178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b082      	sub	sp, #8
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e041      	b.n	80079dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d106      	bne.n	8007972 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f839 	bl	80079e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3304      	adds	r3, #4
 8007982:	4619      	mov	r1, r3
 8007984:	4610      	mov	r0, r2
 8007986:	f000 fbf7 	bl	8008178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3708      	adds	r7, #8
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr
	...

080079f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_TIM_PWM_Start+0x24>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e022      	b.n	8007a62 <HAL_TIM_PWM_Start+0x6a>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d109      	bne.n	8007a36 <HAL_TIM_PWM_Start+0x3e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	e015      	b.n	8007a62 <HAL_TIM_PWM_Start+0x6a>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d109      	bne.n	8007a50 <HAL_TIM_PWM_Start+0x58>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e008      	b.n	8007a62 <HAL_TIM_PWM_Start+0x6a>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	bf14      	ite	ne
 8007a5c:	2301      	movne	r3, #1
 8007a5e:	2300      	moveq	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e072      	b.n	8007b50 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <HAL_TIM_PWM_Start+0x82>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a78:	e013      	b.n	8007aa2 <HAL_TIM_PWM_Start+0xaa>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d104      	bne.n	8007a8a <HAL_TIM_PWM_Start+0x92>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a88:	e00b      	b.n	8007aa2 <HAL_TIM_PWM_Start+0xaa>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIM_PWM_Start+0xa2>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a98:	e003      	b.n	8007aa2 <HAL_TIM_PWM_Start+0xaa>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fd96 	bl	80085dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a28      	ldr	r2, [pc, #160]	@ (8007b58 <HAL_TIM_PWM_Start+0x160>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d004      	beq.n	8007ac4 <HAL_TIM_PWM_Start+0xcc>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a27      	ldr	r2, [pc, #156]	@ (8007b5c <HAL_TIM_PWM_Start+0x164>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d101      	bne.n	8007ac8 <HAL_TIM_PWM_Start+0xd0>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e000      	b.n	8007aca <HAL_TIM_PWM_Start+0xd2>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d007      	beq.n	8007ade <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007adc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b58 <HAL_TIM_PWM_Start+0x160>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d018      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x122>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1b      	ldr	r2, [pc, #108]	@ (8007b5c <HAL_TIM_PWM_Start+0x164>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d013      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x122>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007afa:	d00e      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x122>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a17      	ldr	r2, [pc, #92]	@ (8007b60 <HAL_TIM_PWM_Start+0x168>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d009      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x122>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a16      	ldr	r2, [pc, #88]	@ (8007b64 <HAL_TIM_PWM_Start+0x16c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_PWM_Start+0x122>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a14      	ldr	r2, [pc, #80]	@ (8007b68 <HAL_TIM_PWM_Start+0x170>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d111      	bne.n	8007b3e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b06      	cmp	r3, #6
 8007b2a:	d010      	beq.n	8007b4e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0201 	orr.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3c:	e007      	b.n	8007b4e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	40013400 	.word	0x40013400
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40000c00 	.word	0x40000c00

08007b6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e093      	b.n	8007ca8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d106      	bne.n	8007b9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7fe f9ed 	bl	8005f74 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6812      	ldr	r2, [r2, #0]
 8007bac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bb0:	f023 0307 	bic.w	r3, r3, #7
 8007bb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	3304      	adds	r3, #4
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f000 fad9 	bl	8008178 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	021b      	lsls	r3, r3, #8
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007c0c:	f023 030c 	bic.w	r3, r3, #12
 8007c10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007c18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	011a      	lsls	r2, r3, #4
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	031b      	lsls	r3, r3, #12
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007c4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	011b      	lsls	r3, r3, #4
 8007c56:	4313      	orrs	r3, r2
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007cc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007cd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007cd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d110      	bne.n	8007d02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d102      	bne.n	8007cec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ce6:	7b7b      	ldrb	r3, [r7, #13]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d001      	beq.n	8007cf0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e069      	b.n	8007dc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d00:	e031      	b.n	8007d66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d110      	bne.n	8007d2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d08:	7bbb      	ldrb	r3, [r7, #14]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d102      	bne.n	8007d14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d0e:	7b3b      	ldrb	r3, [r7, #12]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d001      	beq.n	8007d18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e055      	b.n	8007dc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d28:	e01d      	b.n	8007d66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d108      	bne.n	8007d42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d30:	7bbb      	ldrb	r3, [r7, #14]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d105      	bne.n	8007d42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d36:	7b7b      	ldrb	r3, [r7, #13]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d102      	bne.n	8007d42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d3c:	7b3b      	ldrb	r3, [r7, #12]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d001      	beq.n	8007d46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e03e      	b.n	8007dc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <HAL_TIM_Encoder_Start+0xc4>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d008      	beq.n	8007d84 <HAL_TIM_Encoder_Start+0xd4>
 8007d72:	e00f      	b.n	8007d94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fc2d 	bl	80085dc <TIM_CCxChannelCmd>
      break;
 8007d82:	e016      	b.n	8007db2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	2104      	movs	r1, #4
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fc25 	bl	80085dc <TIM_CCxChannelCmd>
      break;
 8007d92:	e00e      	b.n	8007db2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fc1d 	bl	80085dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2201      	movs	r2, #1
 8007da8:	2104      	movs	r1, #4
 8007daa:	4618      	mov	r0, r3
 8007dac:	f000 fc16 	bl	80085dc <TIM_CCxChannelCmd>
      break;
 8007db0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 0201 	orr.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d020      	beq.n	8007e30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d01b      	beq.n	8007e30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0202 	mvn.w	r2, #2
 8007e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f993 	bl	8008142 <HAL_TIM_IC_CaptureCallback>
 8007e1c:	e005      	b.n	8007e2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f986 	bl	8008130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f995 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	f003 0304 	and.w	r3, r3, #4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d020      	beq.n	8007e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f003 0304 	and.w	r3, r3, #4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01b      	beq.n	8007e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f06f 0204 	mvn.w	r2, #4
 8007e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f96d 	bl	8008142 <HAL_TIM_IC_CaptureCallback>
 8007e68:	e005      	b.n	8007e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f960 	bl	8008130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f96f 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d020      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f003 0308 	and.w	r3, r3, #8
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01b      	beq.n	8007ec8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0208 	mvn.w	r2, #8
 8007e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d003      	beq.n	8007eb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f947 	bl	8008142 <HAL_TIM_IC_CaptureCallback>
 8007eb4:	e005      	b.n	8007ec2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f93a 	bl	8008130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f949 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d020      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01b      	beq.n	8007f14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f06f 0210 	mvn.w	r2, #16
 8007ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d003      	beq.n	8007f02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f921 	bl	8008142 <HAL_TIM_IC_CaptureCallback>
 8007f00:	e005      	b.n	8007f0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f914 	bl	8008130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f923 	bl	8008154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f06f 0201 	mvn.w	r2, #1
 8007f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fd f8f8 	bl	8005128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00c      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 fc2a 	bl	80087b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00c      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8f3 	bl	8008166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00c      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 0320 	and.w	r3, r3, #32
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0220 	mvn.w	r2, #32
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fbfd 	bl	800879e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b086      	sub	sp, #24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d101      	bne.n	8007fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e0ae      	b.n	8008128 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b0c      	cmp	r3, #12
 8007fd6:	f200 809f 	bhi.w	8008118 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007fda:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe0:	08008015 	.word	0x08008015
 8007fe4:	08008119 	.word	0x08008119
 8007fe8:	08008119 	.word	0x08008119
 8007fec:	08008119 	.word	0x08008119
 8007ff0:	08008055 	.word	0x08008055
 8007ff4:	08008119 	.word	0x08008119
 8007ff8:	08008119 	.word	0x08008119
 8007ffc:	08008119 	.word	0x08008119
 8008000:	08008097 	.word	0x08008097
 8008004:	08008119 	.word	0x08008119
 8008008:	08008119 	.word	0x08008119
 800800c:	08008119 	.word	0x08008119
 8008010:	080080d7 	.word	0x080080d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68b9      	ldr	r1, [r7, #8]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f932 	bl	8008284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699a      	ldr	r2, [r3, #24]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f042 0208 	orr.w	r2, r2, #8
 800802e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699a      	ldr	r2, [r3, #24]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 0204 	bic.w	r2, r2, #4
 800803e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6999      	ldr	r1, [r3, #24]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	691a      	ldr	r2, [r3, #16]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	619a      	str	r2, [r3, #24]
      break;
 8008052:	e064      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68b9      	ldr	r1, [r7, #8]
 800805a:	4618      	mov	r0, r3
 800805c:	f000 f982 	bl	8008364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	699a      	ldr	r2, [r3, #24]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800806e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800807e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6999      	ldr	r1, [r3, #24]
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	619a      	str	r2, [r3, #24]
      break;
 8008094:	e043      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 f9d5 	bl	800844c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69da      	ldr	r2, [r3, #28]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f042 0208 	orr.w	r2, r2, #8
 80080b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	69da      	ldr	r2, [r3, #28]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0204 	bic.w	r2, r2, #4
 80080c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	69d9      	ldr	r1, [r3, #28]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	61da      	str	r2, [r3, #28]
      break;
 80080d4:	e023      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68b9      	ldr	r1, [r7, #8]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 fa29 	bl	8008534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	69da      	ldr	r2, [r3, #28]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69d9      	ldr	r1, [r3, #28]
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	021a      	lsls	r2, r3, #8
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	61da      	str	r2, [r3, #28]
      break;
 8008116:	e002      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	75fb      	strb	r3, [r7, #23]
      break;
 800811c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
}
 8008128:	4618      	mov	r0, r3
 800812a:	3718      	adds	r7, #24
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	bc80      	pop	{r7}
 8008140:	4770      	bx	lr

08008142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	bc80      	pop	{r7}
 8008152:	4770      	bx	lr

08008154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	bc80      	pop	{r7}
 8008164:	4770      	bx	lr

08008166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008166:	b480      	push	{r7}
 8008168:	b083      	sub	sp, #12
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800816e:	bf00      	nop
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr

08008178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a39      	ldr	r2, [pc, #228]	@ (8008270 <TIM_Base_SetConfig+0xf8>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d013      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a38      	ldr	r2, [pc, #224]	@ (8008274 <TIM_Base_SetConfig+0xfc>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00f      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819e:	d00b      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a35      	ldr	r2, [pc, #212]	@ (8008278 <TIM_Base_SetConfig+0x100>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d007      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a34      	ldr	r2, [pc, #208]	@ (800827c <TIM_Base_SetConfig+0x104>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d003      	beq.n	80081b8 <TIM_Base_SetConfig+0x40>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a33      	ldr	r2, [pc, #204]	@ (8008280 <TIM_Base_SetConfig+0x108>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d108      	bne.n	80081ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a28      	ldr	r2, [pc, #160]	@ (8008270 <TIM_Base_SetConfig+0xf8>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d013      	beq.n	80081fa <TIM_Base_SetConfig+0x82>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a27      	ldr	r2, [pc, #156]	@ (8008274 <TIM_Base_SetConfig+0xfc>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00f      	beq.n	80081fa <TIM_Base_SetConfig+0x82>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e0:	d00b      	beq.n	80081fa <TIM_Base_SetConfig+0x82>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a24      	ldr	r2, [pc, #144]	@ (8008278 <TIM_Base_SetConfig+0x100>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d007      	beq.n	80081fa <TIM_Base_SetConfig+0x82>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a23      	ldr	r2, [pc, #140]	@ (800827c <TIM_Base_SetConfig+0x104>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d003      	beq.n	80081fa <TIM_Base_SetConfig+0x82>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a22      	ldr	r2, [pc, #136]	@ (8008280 <TIM_Base_SetConfig+0x108>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d108      	bne.n	800820c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a0f      	ldr	r2, [pc, #60]	@ (8008270 <TIM_Base_SetConfig+0xf8>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d003      	beq.n	8008240 <TIM_Base_SetConfig+0xc8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a0e      	ldr	r2, [pc, #56]	@ (8008274 <TIM_Base_SetConfig+0xfc>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d103      	bne.n	8008248 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b00      	cmp	r3, #0
 8008258:	d005      	beq.n	8008266 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f023 0201 	bic.w	r2, r3, #1
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	611a      	str	r2, [r3, #16]
  }
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	bc80      	pop	{r7}
 800826e:	4770      	bx	lr
 8008270:	40012c00 	.word	0x40012c00
 8008274:	40013400 	.word	0x40013400
 8008278:	40000400 	.word	0x40000400
 800827c:	40000800 	.word	0x40000800
 8008280:	40000c00 	.word	0x40000c00

08008284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	f023 0201 	bic.w	r2, r3, #1
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f023 0302 	bic.w	r3, r3, #2
 80082cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a20      	ldr	r2, [pc, #128]	@ (800835c <TIM_OC1_SetConfig+0xd8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_OC1_SetConfig+0x64>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008360 <TIM_OC1_SetConfig+0xdc>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10c      	bne.n	8008302 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0308 	bic.w	r3, r3, #8
 80082ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f023 0304 	bic.w	r3, r3, #4
 8008300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a15      	ldr	r2, [pc, #84]	@ (800835c <TIM_OC1_SetConfig+0xd8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d003      	beq.n	8008312 <TIM_OC1_SetConfig+0x8e>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a14      	ldr	r2, [pc, #80]	@ (8008360 <TIM_OC1_SetConfig+0xdc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d111      	bne.n	8008336 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	4313      	orrs	r3, r2
 800832a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	621a      	str	r2, [r3, #32]
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40012c00 	.word	0x40012c00
 8008360:	40013400 	.word	0x40013400

08008364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	f023 0210 	bic.w	r2, r3, #16
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800839a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	021b      	lsls	r3, r3, #8
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	f023 0320 	bic.w	r3, r3, #32
 80083ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a21      	ldr	r2, [pc, #132]	@ (8008444 <TIM_OC2_SetConfig+0xe0>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d003      	beq.n	80083cc <TIM_OC2_SetConfig+0x68>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a20      	ldr	r2, [pc, #128]	@ (8008448 <TIM_OC2_SetConfig+0xe4>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d10d      	bne.n	80083e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	011b      	lsls	r3, r3, #4
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	4313      	orrs	r3, r2
 80083de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a16      	ldr	r2, [pc, #88]	@ (8008444 <TIM_OC2_SetConfig+0xe0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d003      	beq.n	80083f8 <TIM_OC2_SetConfig+0x94>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4a15      	ldr	r2, [pc, #84]	@ (8008448 <TIM_OC2_SetConfig+0xe4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d113      	bne.n	8008420 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008406:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	4313      	orrs	r3, r2
 8008412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	699b      	ldr	r3, [r3, #24]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	4313      	orrs	r3, r2
 800841e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	621a      	str	r2, [r3, #32]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	bc80      	pop	{r7}
 8008442:	4770      	bx	lr
 8008444:	40012c00 	.word	0x40012c00
 8008448:	40013400 	.word	0x40013400

0800844c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800844c:	b480      	push	{r7}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800847a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a21      	ldr	r2, [pc, #132]	@ (800852c <TIM_OC3_SetConfig+0xe0>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d003      	beq.n	80084b2 <TIM_OC3_SetConfig+0x66>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a20      	ldr	r2, [pc, #128]	@ (8008530 <TIM_OC3_SetConfig+0xe4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d10d      	bne.n	80084ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	4a16      	ldr	r2, [pc, #88]	@ (800852c <TIM_OC3_SetConfig+0xe0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d003      	beq.n	80084de <TIM_OC3_SetConfig+0x92>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a15      	ldr	r2, [pc, #84]	@ (8008530 <TIM_OC3_SetConfig+0xe4>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d113      	bne.n	8008506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4313      	orrs	r3, r2
 8008504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	697a      	ldr	r2, [r7, #20]
 800851e:	621a      	str	r2, [r3, #32]
}
 8008520:	bf00      	nop
 8008522:	371c      	adds	r7, #28
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40012c00 	.word	0x40012c00
 8008530:	40013400 	.word	0x40013400

08008534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a1b      	ldr	r3, [r3, #32]
 8008548:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	021b      	lsls	r3, r3, #8
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	4313      	orrs	r3, r2
 8008576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800857e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	031b      	lsls	r3, r3, #12
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	4313      	orrs	r3, r2
 800858a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a11      	ldr	r2, [pc, #68]	@ (80085d4 <TIM_OC4_SetConfig+0xa0>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d003      	beq.n	800859c <TIM_OC4_SetConfig+0x68>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	4a10      	ldr	r2, [pc, #64]	@ (80085d8 <TIM_OC4_SetConfig+0xa4>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d109      	bne.n	80085b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	019b      	lsls	r3, r3, #6
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	621a      	str	r2, [r3, #32]
}
 80085ca:	bf00      	nop
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	40012c00 	.word	0x40012c00
 80085d8:	40013400 	.word	0x40013400

080085dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f003 031f 	and.w	r3, r3, #31
 80085ee:	2201      	movs	r2, #1
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6a1a      	ldr	r2, [r3, #32]
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	43db      	mvns	r3, r3
 80085fe:	401a      	ands	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6a1a      	ldr	r2, [r3, #32]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f003 031f 	and.w	r3, r3, #31
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	fa01 f303 	lsl.w	r3, r1, r3
 8008614:	431a      	orrs	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
}
 800861a:	bf00      	nop
 800861c:	371c      	adds	r7, #28
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008634:	2b01      	cmp	r3, #1
 8008636:	d101      	bne.n	800863c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008638:	2302      	movs	r3, #2
 800863a:	e050      	b.n	80086de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1b      	ldr	r2, [pc, #108]	@ (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d018      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a19      	ldr	r2, [pc, #100]	@ (80086ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d013      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008692:	d00e      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a15      	ldr	r2, [pc, #84]	@ (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d009      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a14      	ldr	r2, [pc, #80]	@ (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d004      	beq.n	80086b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a12      	ldr	r2, [pc, #72]	@ (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d10c      	bne.n	80086cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr
 80086e8:	40012c00 	.word	0x40012c00
 80086ec:	40013400 	.word	0x40013400
 80086f0:	40000400 	.word	0x40000400
 80086f4:	40000800 	.word	0x40000800
 80086f8:	40000c00 	.word	0x40000c00

080086fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008710:	2b01      	cmp	r3, #1
 8008712:	d101      	bne.n	8008718 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008714:	2302      	movs	r3, #2
 8008716:	e03d      	b.n	8008794 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2201      	movs	r2, #1
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	4313      	orrs	r3, r2
 800873a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4313      	orrs	r3, r2
 8008756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	69db      	ldr	r3, [r3, #28]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3714      	adds	r7, #20
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr

0800879e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr

080087b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr

080087c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e042      	b.n	800885a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d106      	bne.n	80087ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fd fce1 	bl	80061b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2224      	movs	r2, #36	@ 0x24
 80087f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68da      	ldr	r2, [r3, #12]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008804:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fde4 	bl	80093d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691a      	ldr	r2, [r3, #16]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800881a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	695a      	ldr	r2, [r3, #20]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800882a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800883a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2220      	movs	r2, #32
 8008846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2220      	movs	r2, #32
 800884e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b08a      	sub	sp, #40	@ 0x28
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	603b      	str	r3, [r7, #0]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b20      	cmp	r3, #32
 8008880:	d175      	bne.n	800896e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <HAL_UART_Transmit+0x2c>
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d101      	bne.n	8008892 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e06e      	b.n	8008970 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2221      	movs	r2, #33	@ 0x21
 800889c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088a0:	f7fd ffc8 	bl	8006834 <HAL_GetTick>
 80088a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	88fa      	ldrh	r2, [r7, #6]
 80088aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	88fa      	ldrh	r2, [r7, #6]
 80088b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ba:	d108      	bne.n	80088ce <HAL_UART_Transmit+0x6c>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d104      	bne.n	80088ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	e003      	b.n	80088d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088d6:	e02e      	b.n	8008936 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2200      	movs	r2, #0
 80088e0:	2180      	movs	r1, #128	@ 0x80
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fb48 	bl	8008f78 <UART_WaitOnFlagUntilTimeout>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e03a      	b.n	8008970 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	881b      	ldrh	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800890e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008910:	69bb      	ldr	r3, [r7, #24]
 8008912:	3302      	adds	r3, #2
 8008914:	61bb      	str	r3, [r7, #24]
 8008916:	e007      	b.n	8008928 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3301      	adds	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800892c:	b29b      	uxth	r3, r3
 800892e:	3b01      	subs	r3, #1
 8008930:	b29a      	uxth	r2, r3
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800893a:	b29b      	uxth	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1cb      	bne.n	80088d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2200      	movs	r2, #0
 8008948:	2140      	movs	r1, #64	@ 0x40
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fb14 	bl	8008f78 <UART_WaitOnFlagUntilTimeout>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d005      	beq.n	8008962 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2220      	movs	r2, #32
 800895a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e006      	b.n	8008970 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	e000      	b.n	8008970 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800896e:	2302      	movs	r3, #2
  }
}
 8008970:	4618      	mov	r0, r3
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	4613      	mov	r3, r2
 8008984:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b20      	cmp	r3, #32
 8008990:	d121      	bne.n	80089d6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <HAL_UART_Transmit_IT+0x26>
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e01a      	b.n	80089d8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	88fa      	ldrh	r2, [r7, #6]
 80089ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	88fa      	ldrh	r2, [r7, #6]
 80089b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2221      	movs	r2, #33	@ 0x21
 80089be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68da      	ldr	r2, [r3, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80089d0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e000      	b.n	80089d8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80089d6:	2302      	movs	r3, #2
  }
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	4613      	mov	r3, r2
 80089ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	d112      	bne.n	8008a22 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <HAL_UART_Receive_IT+0x26>
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e00b      	b.n	8008a24 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	461a      	mov	r2, r3
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 fb06 	bl	800902a <UART_Start_Receive_IT>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	e000      	b.n	8008a24 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a22:	2302      	movs	r3, #2
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b0ba      	sub	sp, #232	@ 0xe8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10f      	bne.n	8008a92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a76:	f003 0320 	and.w	r3, r3, #32
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <HAL_UART_IRQHandler+0x66>
 8008a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a82:	f003 0320 	and.w	r3, r3, #32
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fbe3 	bl	8009256 <UART_Receive_IT>
      return;
 8008a90:	e25b      	b.n	8008f4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 80de 	beq.w	8008c58 <HAL_UART_IRQHandler+0x22c>
 8008a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 80d1 	beq.w	8008c58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <HAL_UART_IRQHandler+0xae>
 8008ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d005      	beq.n	8008ada <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad2:	f043 0201 	orr.w	r2, r3, #1
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ade:	f003 0304 	and.w	r3, r3, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d00b      	beq.n	8008afe <HAL_UART_IRQHandler+0xd2>
 8008ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af6:	f043 0202 	orr.w	r2, r3, #2
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00b      	beq.n	8008b22 <HAL_UART_IRQHandler+0xf6>
 8008b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b1a:	f043 0204 	orr.w	r2, r3, #4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d011      	beq.n	8008b52 <HAL_UART_IRQHandler+0x126>
 8008b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d005      	beq.n	8008b52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b4a:	f043 0208 	orr.w	r2, r3, #8
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 81f2 	beq.w	8008f40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b60:	f003 0320 	and.w	r3, r3, #32
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d008      	beq.n	8008b7a <HAL_UART_IRQHandler+0x14e>
 8008b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b6c:	f003 0320 	and.w	r3, r3, #32
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fb6e 	bl	8009256 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bf14      	ite	ne
 8008b88:	2301      	movne	r3, #1
 8008b8a:	2300      	moveq	r3, #0
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <HAL_UART_IRQHandler+0x17a>
 8008b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d04f      	beq.n	8008c46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fa78 	bl	800909c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d041      	beq.n	8008c3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3314      	adds	r3, #20
 8008bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3314      	adds	r3, #20
 8008be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008be6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008bea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1d9      	bne.n	8008bba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d013      	beq.n	8008c36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c12:	4a7e      	ldr	r2, [pc, #504]	@ (8008e0c <HAL_UART_IRQHandler+0x3e0>)
 8008c14:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fd ff80 	bl	8006b20 <HAL_DMA_Abort_IT>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d016      	beq.n	8008c54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c30:	4610      	mov	r0, r2
 8008c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c34:	e00e      	b.n	8008c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f98a 	bl	8008f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3c:	e00a      	b.n	8008c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f986 	bl	8008f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c44:	e006      	b.n	8008c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f982 	bl	8008f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008c52:	e175      	b.n	8008f40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c54:	bf00      	nop
    return;
 8008c56:	e173      	b.n	8008f40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	f040 814f 	bne.w	8008f00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c66:	f003 0310 	and.w	r3, r3, #16
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 8148 	beq.w	8008f00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c74:	f003 0310 	and.w	r3, r3, #16
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8141 	beq.w	8008f00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60bb      	str	r3, [r7, #8]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60bb      	str	r3, [r7, #8]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 80b6 	beq.w	8008e10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8145 	beq.w	8008f44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	f080 813e 	bcs.w	8008f44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	f000 8088 	beq.w	8008dec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008cea:	e853 3f00 	ldrex	r3, [r3]
 8008cee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008cf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d08:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d14:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1d9      	bne.n	8008cdc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	3314      	adds	r3, #20
 8008d2e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d32:	e853 3f00 	ldrex	r3, [r3]
 8008d36:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d3a:	f023 0301 	bic.w	r3, r3, #1
 8008d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d4c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d50:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d54:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d58:	e841 2300 	strex	r3, r2, [r1]
 8008d5c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e1      	bne.n	8008d28 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3314      	adds	r3, #20
 8008d6a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3314      	adds	r3, #20
 8008d84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d88:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d8e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d90:	e841 2300 	strex	r3, r2, [r1]
 8008d94:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d1e3      	bne.n	8008d64 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	330c      	adds	r3, #12
 8008db0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008dba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dbc:	f023 0310 	bic.w	r3, r3, #16
 8008dc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008dce:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008dd0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ddc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1e3      	bne.n	8008daa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fe5f 	bl	8006aaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f8ad 	bl	8008f62 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e08:	e09c      	b.n	8008f44 <HAL_UART_IRQHandler+0x518>
 8008e0a:	bf00      	nop
 8008e0c:	08009161 	.word	0x08009161
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 808e 	beq.w	8008f48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008e2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8089 	beq.w	8008f48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e62:	e841 2300 	strex	r3, r2, [r1]
 8008e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1e3      	bne.n	8008e36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	3314      	adds	r3, #20
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	f023 0301 	bic.w	r3, r3, #1
 8008e84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3314      	adds	r3, #20
 8008e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e92:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e3      	bne.n	8008e6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2220      	movs	r2, #32
 8008eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0310 	bic.w	r3, r3, #16
 8008eca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	330c      	adds	r3, #12
 8008ed4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ed8:	61fa      	str	r2, [r7, #28]
 8008eda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	69b9      	ldr	r1, [r7, #24]
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	e841 2300 	strex	r3, r2, [r1]
 8008ee4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d1e3      	bne.n	8008eb4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ef2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f832 	bl	8008f62 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008efe:	e023      	b.n	8008f48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d009      	beq.n	8008f20 <HAL_UART_IRQHandler+0x4f4>
 8008f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f935 	bl	8009188 <UART_Transmit_IT>
    return;
 8008f1e:	e014      	b.n	8008f4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00e      	beq.n	8008f4a <HAL_UART_IRQHandler+0x51e>
 8008f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d008      	beq.n	8008f4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f974 	bl	8009226 <UART_EndTransmit_IT>
    return;
 8008f3e:	e004      	b.n	8008f4a <HAL_UART_IRQHandler+0x51e>
    return;
 8008f40:	bf00      	nop
 8008f42:	e002      	b.n	8008f4a <HAL_UART_IRQHandler+0x51e>
      return;
 8008f44:	bf00      	nop
 8008f46:	e000      	b.n	8008f4a <HAL_UART_IRQHandler+0x51e>
      return;
 8008f48:	bf00      	nop
  }
}
 8008f4a:	37e8      	adds	r7, #232	@ 0xe8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bc80      	pop	{r7}
 8008f60:	4770      	bx	lr

08008f62 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr

08008f78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	603b      	str	r3, [r7, #0]
 8008f84:	4613      	mov	r3, r2
 8008f86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f88:	e03b      	b.n	8009002 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f8a:	6a3b      	ldr	r3, [r7, #32]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d037      	beq.n	8009002 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f92:	f7fd fc4f 	bl	8006834 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	6a3a      	ldr	r2, [r7, #32]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d302      	bcc.n	8008fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d101      	bne.n	8008fac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fa8:	2303      	movs	r3, #3
 8008faa:	e03a      	b.n	8009022 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d023      	beq.n	8009002 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	2b80      	cmp	r3, #128	@ 0x80
 8008fbe:	d020      	beq.n	8009002 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2b40      	cmp	r3, #64	@ 0x40
 8008fc4:	d01d      	beq.n	8009002 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 0308 	and.w	r3, r3, #8
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d116      	bne.n	8009002 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	617b      	str	r3, [r7, #20]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f000 f856 	bl	800909c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e00f      	b.n	8009022 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	4013      	ands	r3, r2
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	429a      	cmp	r2, r3
 8009010:	bf0c      	ite	eq
 8009012:	2301      	moveq	r3, #1
 8009014:	2300      	movne	r3, #0
 8009016:	b2db      	uxtb	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	429a      	cmp	r2, r3
 800901e:	d0b4      	beq.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800902a:	b480      	push	{r7}
 800902c:	b085      	sub	sp, #20
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	4613      	mov	r3, r2
 8009036:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	88fa      	ldrh	r2, [r7, #6]
 8009042:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	88fa      	ldrh	r2, [r7, #6]
 8009048:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2222      	movs	r2, #34	@ 0x22
 8009054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d007      	beq.n	8009070 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800906e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	695a      	ldr	r2, [r3, #20]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68da      	ldr	r2, [r3, #12]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0220 	orr.w	r2, r2, #32
 800908e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr

0800909c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b095      	sub	sp, #84	@ 0x54
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	330c      	adds	r3, #12
 80090aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	330c      	adds	r3, #12
 80090c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80090c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80090c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e5      	bne.n	80090a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3314      	adds	r3, #20
 80090de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	6a3b      	ldr	r3, [r7, #32]
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	f023 0301 	bic.w	r3, r3, #1
 80090ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3314      	adds	r3, #20
 80090f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e5      	bne.n	80090d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009110:	2b01      	cmp	r3, #1
 8009112:	d119      	bne.n	8009148 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	330c      	adds	r3, #12
 800911a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	60bb      	str	r3, [r7, #8]
   return(result);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f023 0310 	bic.w	r3, r3, #16
 800912a:	647b      	str	r3, [r7, #68]	@ 0x44
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	330c      	adds	r3, #12
 8009132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009134:	61ba      	str	r2, [r7, #24]
 8009136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6979      	ldr	r1, [r7, #20]
 800913a:	69ba      	ldr	r2, [r7, #24]
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	613b      	str	r3, [r7, #16]
   return(result);
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e5      	bne.n	8009114 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2220      	movs	r2, #32
 800914c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009156:	bf00      	nop
 8009158:	3754      	adds	r7, #84	@ 0x54
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr

08009160 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fee8 	bl	8008f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009180:	bf00      	nop
 8009182:	3710      	adds	r7, #16
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b21      	cmp	r3, #33	@ 0x21
 800919a:	d13e      	bne.n	800921a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091a4:	d114      	bne.n	80091d0 <UART_Transmit_IT+0x48>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d110      	bne.n	80091d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	461a      	mov	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	1c9a      	adds	r2, r3, #2
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	621a      	str	r2, [r3, #32]
 80091ce:	e008      	b.n	80091e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	1c59      	adds	r1, r3, #1
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	6211      	str	r1, [r2, #32]
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4619      	mov	r1, r3
 80091f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10f      	bne.n	8009216 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009204:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009214:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	e000      	b.n	800921c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800921a:	2302      	movs	r3, #2
  }
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	bc80      	pop	{r7}
 8009224:	4770      	bx	lr

08009226 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800923c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7fc f834 	bl	80052b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b08c      	sub	sp, #48	@ 0x30
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b22      	cmp	r3, #34	@ 0x22
 8009268:	f040 80ae 	bne.w	80093c8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009274:	d117      	bne.n	80092a6 <UART_Receive_IT+0x50>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d113      	bne.n	80092a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800927e:	2300      	movs	r3, #0
 8009280:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009286:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	b29b      	uxth	r3, r3
 8009290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009294:	b29a      	uxth	r2, r3
 8009296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009298:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	1c9a      	adds	r2, r3, #2
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80092a4:	e026      	b.n	80092f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80092ac:	2300      	movs	r3, #0
 80092ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092b8:	d007      	beq.n	80092ca <UART_Receive_IT+0x74>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <UART_Receive_IT+0x82>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	b2da      	uxtb	r2, r3
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	701a      	strb	r2, [r3, #0]
 80092d6:	e008      	b.n	80092ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	4619      	mov	r1, r3
 8009302:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009304:	2b00      	cmp	r3, #0
 8009306:	d15d      	bne.n	80093c4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68da      	ldr	r2, [r3, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 0220 	bic.w	r2, r2, #32
 8009316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68da      	ldr	r2, [r3, #12]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	695a      	ldr	r2, [r3, #20]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0201 	bic.w	r2, r2, #1
 8009336:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934a:	2b01      	cmp	r3, #1
 800934c:	d135      	bne.n	80093ba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	330c      	adds	r3, #12
 800935a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	613b      	str	r3, [r7, #16]
   return(result);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f023 0310 	bic.w	r3, r3, #16
 800936a:	627b      	str	r3, [r7, #36]	@ 0x24
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009374:	623a      	str	r2, [r7, #32]
 8009376:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	69f9      	ldr	r1, [r7, #28]
 800937a:	6a3a      	ldr	r2, [r7, #32]
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	61bb      	str	r3, [r7, #24]
   return(result);
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e5      	bne.n	8009354 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0310 	and.w	r3, r3, #16
 8009392:	2b10      	cmp	r3, #16
 8009394:	d10a      	bne.n	80093ac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f7ff fdd5 	bl	8008f62 <HAL_UARTEx_RxEventCallback>
 80093b8:	e002      	b.n	80093c0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7fc f80c 	bl	80053d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093c0:	2300      	movs	r3, #0
 80093c2:	e002      	b.n	80093ca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	e000      	b.n	80093ca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80093c8:	2302      	movs	r3, #2
  }
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3730      	adds	r7, #48	@ 0x30
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
	...

080093d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	430a      	orrs	r2, r1
 80093f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	4313      	orrs	r3, r2
 8009402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800940e:	f023 030c 	bic.w	r3, r3, #12
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	6812      	ldr	r2, [r2, #0]
 8009416:	68b9      	ldr	r1, [r7, #8]
 8009418:	430b      	orrs	r3, r1
 800941a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	699a      	ldr	r2, [r3, #24]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a2c      	ldr	r2, [pc, #176]	@ (80094e8 <UART_SetConfig+0x114>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d103      	bne.n	8009444 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800943c:	f7fe fa02 	bl	8007844 <HAL_RCC_GetPCLK2Freq>
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	e002      	b.n	800944a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009444:	f7fe f9ea 	bl	800781c <HAL_RCC_GetPCLK1Freq>
 8009448:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	009a      	lsls	r2, r3, #2
 8009454:	441a      	add	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009460:	4a22      	ldr	r2, [pc, #136]	@ (80094ec <UART_SetConfig+0x118>)
 8009462:	fba2 2303 	umull	r2, r3, r2, r3
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	0119      	lsls	r1, r3, #4
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009a      	lsls	r2, r3, #2
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	685b      	ldr	r3, [r3, #4]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009480:	4b1a      	ldr	r3, [pc, #104]	@ (80094ec <UART_SetConfig+0x118>)
 8009482:	fba3 0302 	umull	r0, r3, r3, r2
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	2064      	movs	r0, #100	@ 0x64
 800948a:	fb00 f303 	mul.w	r3, r0, r3
 800948e:	1ad3      	subs	r3, r2, r3
 8009490:	011b      	lsls	r3, r3, #4
 8009492:	3332      	adds	r3, #50	@ 0x32
 8009494:	4a15      	ldr	r2, [pc, #84]	@ (80094ec <UART_SetConfig+0x118>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	095b      	lsrs	r3, r3, #5
 800949c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094a0:	4419      	add	r1, r3
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009a      	lsls	r2, r3, #2
 80094ac:	441a      	add	r2, r3
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094b8:	4b0c      	ldr	r3, [pc, #48]	@ (80094ec <UART_SetConfig+0x118>)
 80094ba:	fba3 0302 	umull	r0, r3, r3, r2
 80094be:	095b      	lsrs	r3, r3, #5
 80094c0:	2064      	movs	r0, #100	@ 0x64
 80094c2:	fb00 f303 	mul.w	r3, r0, r3
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	3332      	adds	r3, #50	@ 0x32
 80094cc:	4a07      	ldr	r2, [pc, #28]	@ (80094ec <UART_SetConfig+0x118>)
 80094ce:	fba2 2303 	umull	r2, r3, r2, r3
 80094d2:	095b      	lsrs	r3, r3, #5
 80094d4:	f003 020f 	and.w	r2, r3, #15
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	440a      	add	r2, r1
 80094de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	40013800 	.word	0x40013800
 80094ec:	51eb851f 	.word	0x51eb851f

080094f0 <_ZdlPvj>:
 80094f0:	f000 b8b2 	b.w	8009658 <_ZdlPv>

080094f4 <_Znwj>:
 80094f4:	2801      	cmp	r0, #1
 80094f6:	bf38      	it	cc
 80094f8:	2001      	movcc	r0, #1
 80094fa:	b510      	push	{r4, lr}
 80094fc:	4604      	mov	r4, r0
 80094fe:	4620      	mov	r0, r4
 8009500:	f001 fbf0 	bl	800ace4 <malloc>
 8009504:	b100      	cbz	r0, 8009508 <_Znwj+0x14>
 8009506:	bd10      	pop	{r4, pc}
 8009508:	f000 f8a8 	bl	800965c <_ZSt15get_new_handlerv>
 800950c:	b908      	cbnz	r0, 8009512 <_Znwj+0x1e>
 800950e:	f001 fbe1 	bl	800acd4 <abort>
 8009512:	4780      	blx	r0
 8009514:	e7f3      	b.n	80094fe <_Znwj+0xa>

08009516 <_ZSt17__throw_bad_allocv>:
 8009516:	b508      	push	{r3, lr}
 8009518:	f001 fbdc 	bl	800acd4 <abort>

0800951c <_ZSt28__throw_bad_array_new_lengthv>:
 800951c:	b508      	push	{r3, lr}
 800951e:	f001 fbd9 	bl	800acd4 <abort>

08009522 <_ZSt20__throw_length_errorPKc>:
 8009522:	b508      	push	{r3, lr}
 8009524:	f001 fbd6 	bl	800acd4 <abort>

08009528 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>:
 8009528:	290d      	cmp	r1, #13
 800952a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952c:	4605      	mov	r5, r0
 800952e:	d82b      	bhi.n	8009588 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x60>
 8009530:	b391      	cbz	r1, 8009598 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x70>
 8009532:	4b1a      	ldr	r3, [pc, #104]	@ (800959c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x74>)
 8009534:	5c5c      	ldrb	r4, [r3, r1]
 8009536:	4620      	mov	r0, r4
 8009538:	f7f7 f884 	bl	8000644 <__aeabi_i2d>
 800953c:	4606      	mov	r6, r0
 800953e:	6828      	ldr	r0, [r5, #0]
 8009540:	460f      	mov	r7, r1
 8009542:	f7f7 f891 	bl	8000668 <__aeabi_f2d>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4630      	mov	r0, r6
 800954c:	4639      	mov	r1, r7
 800954e:	f7f7 f8e3 	bl	8000718 <__aeabi_dmul>
 8009552:	f000 f9cd 	bl	80098f0 <floor>
 8009556:	f7f7 fbb7 	bl	8000cc8 <__aeabi_d2uiz>
 800955a:	6068      	str	r0, [r5, #4]
 800955c:	4620      	mov	r0, r4
 800955e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009560:	1058      	asrs	r0, r3, #1
 8009562:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8009566:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800956a:	428e      	cmp	r6, r1
 800956c:	d20f      	bcs.n	800958e <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x66>
 800956e:	1a1b      	subs	r3, r3, r0
 8009570:	1d22      	adds	r2, r4, #4
 8009572:	3b01      	subs	r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	dcf3      	bgt.n	8009560 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x38>
 8009578:	4b09      	ldr	r3, [pc, #36]	@ (80095a0 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x78>)
 800957a:	6814      	ldr	r4, [r2, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d008      	beq.n	8009592 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x6a>
 8009580:	4620      	mov	r0, r4
 8009582:	f7f7 f84f 	bl	8000624 <__aeabi_ui2d>
 8009586:	e7d9      	b.n	800953c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x14>
 8009588:	23f9      	movs	r3, #249	@ 0xf9
 800958a:	4a06      	ldr	r2, [pc, #24]	@ (80095a4 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x7c>)
 800958c:	e7f2      	b.n	8009574 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 800958e:	4603      	mov	r3, r0
 8009590:	e7f0      	b.n	8009574 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x4c>
 8009592:	f04f 30ff 	mov.w	r0, #4294967295
 8009596:	e7e0      	b.n	800955a <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x32>
 8009598:	2401      	movs	r4, #1
 800959a:	e7df      	b.n	800955c <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj+0x34>
 800959c:	0800d65e 	.word	0x0800d65e
 80095a0:	0800da68 	.word	0x0800da68
 80095a4:	0800d684 	.word	0x0800d684

080095a8 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj>:
 80095a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	4692      	mov	sl, r2
 80095ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80095b0:	4604      	mov	r4, r0
 80095b2:	eb03 0802 	add.w	r8, r3, r2
 80095b6:	684b      	ldr	r3, [r1, #4]
 80095b8:	460d      	mov	r5, r1
 80095ba:	4598      	cmp	r8, r3
 80095bc:	d946      	bls.n	800964c <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xa4>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	6808      	ldr	r0, [r1, #0]
 80095c2:	bf0c      	ite	eq
 80095c4:	f04f 090b 	moveq.w	r9, #11
 80095c8:	f04f 0900 	movne.w	r9, #0
 80095cc:	f7f7 f84c 	bl	8000668 <__aeabi_f2d>
 80095d0:	4606      	mov	r6, r0
 80095d2:	460f      	mov	r7, r1
 80095d4:	45c8      	cmp	r8, r9
 80095d6:	4640      	mov	r0, r8
 80095d8:	bf38      	it	cc
 80095da:	4648      	movcc	r0, r9
 80095dc:	f7f7 f822 	bl	8000624 <__aeabi_ui2d>
 80095e0:	4632      	mov	r2, r6
 80095e2:	463b      	mov	r3, r7
 80095e4:	f7f7 f9c2 	bl	800096c <__aeabi_ddiv>
 80095e8:	4680      	mov	r8, r0
 80095ea:	4650      	mov	r0, sl
 80095ec:	4689      	mov	r9, r1
 80095ee:	f7f7 f819 	bl	8000624 <__aeabi_ui2d>
 80095f2:	4602      	mov	r2, r0
 80095f4:	460b      	mov	r3, r1
 80095f6:	e9cd 2300 	strd	r2, r3, [sp]
 80095fa:	4642      	mov	r2, r8
 80095fc:	464b      	mov	r3, r9
 80095fe:	f7f7 fb07 	bl	8000c10 <__aeabi_dcmple>
 8009602:	b1c0      	cbz	r0, 8009636 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x8e>
 8009604:	4640      	mov	r0, r8
 8009606:	4649      	mov	r1, r9
 8009608:	f000 f972 	bl	80098f0 <floor>
 800960c:	4b11      	ldr	r3, [pc, #68]	@ (8009654 <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0xac>)
 800960e:	2200      	movs	r2, #0
 8009610:	f7f6 fecc 	bl	80003ac <__adddf3>
 8009614:	f7f7 fb58 	bl	8000cc8 <__aeabi_d2uiz>
 8009618:	ea4f 014a 	mov.w	r1, sl, lsl #1
 800961c:	4281      	cmp	r1, r0
 800961e:	bf38      	it	cc
 8009620:	4601      	movcc	r1, r0
 8009622:	4628      	mov	r0, r5
 8009624:	f7ff ff80 	bl	8009528 <_ZNKSt8__detail20_Prime_rehash_policy11_M_next_bktEj>
 8009628:	2301      	movs	r3, #1
 800962a:	6060      	str	r0, [r4, #4]
 800962c:	7023      	strb	r3, [r4, #0]
 800962e:	4620      	mov	r0, r4
 8009630:	b002      	add	sp, #8
 8009632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800963a:	4630      	mov	r0, r6
 800963c:	4639      	mov	r1, r7
 800963e:	f7f7 f86b 	bl	8000718 <__aeabi_dmul>
 8009642:	f000 f955 	bl	80098f0 <floor>
 8009646:	f7f7 fb3f 	bl	8000cc8 <__aeabi_d2uiz>
 800964a:	6068      	str	r0, [r5, #4]
 800964c:	2300      	movs	r3, #0
 800964e:	e9c4 3300 	strd	r3, r3, [r4]
 8009652:	e7ec      	b.n	800962e <_ZNKSt8__detail20_Prime_rehash_policy14_M_need_rehashEjjj+0x86>
 8009654:	3ff00000 	.word	0x3ff00000

08009658 <_ZdlPv>:
 8009658:	f001 bb4c 	b.w	800acf4 <free>

0800965c <_ZSt15get_new_handlerv>:
 800965c:	4b02      	ldr	r3, [pc, #8]	@ (8009668 <_ZSt15get_new_handlerv+0xc>)
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	f3bf 8f5b 	dmb	ish
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	2000076c 	.word	0x2000076c

0800966c <atan2>:
 800966c:	f000 bb38 	b.w	8009ce0 <__ieee754_atan2>

08009670 <sqrt>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	f000 f865 	bl	8009744 <__ieee754_sqrt>
 800967a:	4632      	mov	r2, r6
 800967c:	4604      	mov	r4, r0
 800967e:	460d      	mov	r5, r1
 8009680:	463b      	mov	r3, r7
 8009682:	4630      	mov	r0, r6
 8009684:	4639      	mov	r1, r7
 8009686:	f7f7 fae1 	bl	8000c4c <__aeabi_dcmpun>
 800968a:	b990      	cbnz	r0, 80096b2 <sqrt+0x42>
 800968c:	2200      	movs	r2, #0
 800968e:	2300      	movs	r3, #0
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f7 fab2 	bl	8000bfc <__aeabi_dcmplt>
 8009698:	b158      	cbz	r0, 80096b2 <sqrt+0x42>
 800969a:	f002 f9e9 	bl	800ba70 <__errno>
 800969e:	2321      	movs	r3, #33	@ 0x21
 80096a0:	2200      	movs	r2, #0
 80096a2:	6003      	str	r3, [r0, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f7f7 f95f 	bl	800096c <__aeabi_ddiv>
 80096ae:	4604      	mov	r4, r0
 80096b0:	460d      	mov	r5, r1
 80096b2:	4620      	mov	r0, r4
 80096b4:	4629      	mov	r1, r5
 80096b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096b8 <cos>:
 80096b8:	b530      	push	{r4, r5, lr}
 80096ba:	4d20      	ldr	r5, [pc, #128]	@ (800973c <cos+0x84>)
 80096bc:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80096c0:	42ac      	cmp	r4, r5
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	b087      	sub	sp, #28
 80096c8:	d806      	bhi.n	80096d8 <cos+0x20>
 80096ca:	2200      	movs	r2, #0
 80096cc:	2300      	movs	r3, #0
 80096ce:	b007      	add	sp, #28
 80096d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096d4:	f000 b98c 	b.w	80099f0 <__kernel_cos>
 80096d8:	4d19      	ldr	r5, [pc, #100]	@ (8009740 <cos+0x88>)
 80096da:	42ac      	cmp	r4, r5
 80096dc:	d903      	bls.n	80096e6 <cos+0x2e>
 80096de:	f7f6 fe63 	bl	80003a8 <__aeabi_dsub>
 80096e2:	b007      	add	sp, #28
 80096e4:	bd30      	pop	{r4, r5, pc}
 80096e6:	aa02      	add	r2, sp, #8
 80096e8:	f000 fbce 	bl	8009e88 <__ieee754_rem_pio2>
 80096ec:	f000 0003 	and.w	r0, r0, #3
 80096f0:	2801      	cmp	r0, #1
 80096f2:	d009      	beq.n	8009708 <cos+0x50>
 80096f4:	2802      	cmp	r0, #2
 80096f6:	d011      	beq.n	800971c <cos+0x64>
 80096f8:	b9b8      	cbnz	r0, 800972a <cos+0x72>
 80096fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009702:	f000 f975 	bl	80099f0 <__kernel_cos>
 8009706:	e7ec      	b.n	80096e2 <cos+0x2a>
 8009708:	9000      	str	r0, [sp, #0]
 800970a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800970e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009712:	f000 fa2d 	bl	8009b70 <__kernel_sin>
 8009716:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800971a:	e7e2      	b.n	80096e2 <cos+0x2a>
 800971c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009724:	f000 f964 	bl	80099f0 <__kernel_cos>
 8009728:	e7f5      	b.n	8009716 <cos+0x5e>
 800972a:	2301      	movs	r3, #1
 800972c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009736:	f000 fa1b 	bl	8009b70 <__kernel_sin>
 800973a:	e7d2      	b.n	80096e2 <cos+0x2a>
 800973c:	3fe921fb 	.word	0x3fe921fb
 8009740:	7fefffff 	.word	0x7fefffff

08009744 <__ieee754_sqrt>:
 8009744:	4a67      	ldr	r2, [pc, #412]	@ (80098e4 <__ieee754_sqrt+0x1a0>)
 8009746:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974a:	438a      	bics	r2, r1
 800974c:	4606      	mov	r6, r0
 800974e:	460f      	mov	r7, r1
 8009750:	460b      	mov	r3, r1
 8009752:	4604      	mov	r4, r0
 8009754:	d10e      	bne.n	8009774 <__ieee754_sqrt+0x30>
 8009756:	4602      	mov	r2, r0
 8009758:	f7f6 ffde 	bl	8000718 <__aeabi_dmul>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4630      	mov	r0, r6
 8009762:	4639      	mov	r1, r7
 8009764:	f7f6 fe22 	bl	80003ac <__adddf3>
 8009768:	4606      	mov	r6, r0
 800976a:	460f      	mov	r7, r1
 800976c:	4630      	mov	r0, r6
 800976e:	4639      	mov	r1, r7
 8009770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009774:	2900      	cmp	r1, #0
 8009776:	dc0c      	bgt.n	8009792 <__ieee754_sqrt+0x4e>
 8009778:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800977c:	4302      	orrs	r2, r0
 800977e:	d0f5      	beq.n	800976c <__ieee754_sqrt+0x28>
 8009780:	b189      	cbz	r1, 80097a6 <__ieee754_sqrt+0x62>
 8009782:	4602      	mov	r2, r0
 8009784:	f7f6 fe10 	bl	80003a8 <__aeabi_dsub>
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	f7f7 f8ee 	bl	800096c <__aeabi_ddiv>
 8009790:	e7ea      	b.n	8009768 <__ieee754_sqrt+0x24>
 8009792:	150a      	asrs	r2, r1, #20
 8009794:	d115      	bne.n	80097c2 <__ieee754_sqrt+0x7e>
 8009796:	2100      	movs	r1, #0
 8009798:	e009      	b.n	80097ae <__ieee754_sqrt+0x6a>
 800979a:	0ae3      	lsrs	r3, r4, #11
 800979c:	3a15      	subs	r2, #21
 800979e:	0564      	lsls	r4, r4, #21
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0fa      	beq.n	800979a <__ieee754_sqrt+0x56>
 80097a4:	e7f7      	b.n	8009796 <__ieee754_sqrt+0x52>
 80097a6:	460a      	mov	r2, r1
 80097a8:	e7fa      	b.n	80097a0 <__ieee754_sqrt+0x5c>
 80097aa:	005b      	lsls	r3, r3, #1
 80097ac:	3101      	adds	r1, #1
 80097ae:	02d8      	lsls	r0, r3, #11
 80097b0:	d5fb      	bpl.n	80097aa <__ieee754_sqrt+0x66>
 80097b2:	1e48      	subs	r0, r1, #1
 80097b4:	1a12      	subs	r2, r2, r0
 80097b6:	f1c1 0020 	rsb	r0, r1, #32
 80097ba:	fa24 f000 	lsr.w	r0, r4, r0
 80097be:	4303      	orrs	r3, r0
 80097c0:	408c      	lsls	r4, r1
 80097c2:	2600      	movs	r6, #0
 80097c4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80097c8:	2116      	movs	r1, #22
 80097ca:	07d2      	lsls	r2, r2, #31
 80097cc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80097d0:	4632      	mov	r2, r6
 80097d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097da:	bf5c      	itt	pl
 80097dc:	005b      	lslpl	r3, r3, #1
 80097de:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80097e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097e6:	bf58      	it	pl
 80097e8:	0064      	lslpl	r4, r4, #1
 80097ea:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80097ee:	107f      	asrs	r7, r7, #1
 80097f0:	0064      	lsls	r4, r4, #1
 80097f2:	1815      	adds	r5, r2, r0
 80097f4:	429d      	cmp	r5, r3
 80097f6:	bfde      	ittt	le
 80097f8:	182a      	addle	r2, r5, r0
 80097fa:	1b5b      	suble	r3, r3, r5
 80097fc:	1836      	addle	r6, r6, r0
 80097fe:	0fe5      	lsrs	r5, r4, #31
 8009800:	3901      	subs	r1, #1
 8009802:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8009806:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800980a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800980e:	d1f0      	bne.n	80097f2 <__ieee754_sqrt+0xae>
 8009810:	460d      	mov	r5, r1
 8009812:	f04f 0a20 	mov.w	sl, #32
 8009816:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800981a:	429a      	cmp	r2, r3
 800981c:	eb01 0c00 	add.w	ip, r1, r0
 8009820:	db02      	blt.n	8009828 <__ieee754_sqrt+0xe4>
 8009822:	d113      	bne.n	800984c <__ieee754_sqrt+0x108>
 8009824:	45a4      	cmp	ip, r4
 8009826:	d811      	bhi.n	800984c <__ieee754_sqrt+0x108>
 8009828:	f1bc 0f00 	cmp.w	ip, #0
 800982c:	eb0c 0100 	add.w	r1, ip, r0
 8009830:	da42      	bge.n	80098b8 <__ieee754_sqrt+0x174>
 8009832:	2900      	cmp	r1, #0
 8009834:	db40      	blt.n	80098b8 <__ieee754_sqrt+0x174>
 8009836:	f102 0e01 	add.w	lr, r2, #1
 800983a:	1a9b      	subs	r3, r3, r2
 800983c:	4672      	mov	r2, lr
 800983e:	45a4      	cmp	ip, r4
 8009840:	bf88      	it	hi
 8009842:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009846:	eba4 040c 	sub.w	r4, r4, ip
 800984a:	4405      	add	r5, r0
 800984c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8009850:	f1ba 0a01 	subs.w	sl, sl, #1
 8009854:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8009858:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800985c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8009860:	d1db      	bne.n	800981a <__ieee754_sqrt+0xd6>
 8009862:	431c      	orrs	r4, r3
 8009864:	d01a      	beq.n	800989c <__ieee754_sqrt+0x158>
 8009866:	4c20      	ldr	r4, [pc, #128]	@ (80098e8 <__ieee754_sqrt+0x1a4>)
 8009868:	f8df b080 	ldr.w	fp, [pc, #128]	@ 80098ec <__ieee754_sqrt+0x1a8>
 800986c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009870:	e9db 2300 	ldrd	r2, r3, [fp]
 8009874:	f7f6 fd98 	bl	80003a8 <__aeabi_dsub>
 8009878:	e9d4 8900 	ldrd	r8, r9, [r4]
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f7 f9c4 	bl	8000c10 <__aeabi_dcmple>
 8009888:	b140      	cbz	r0, 800989c <__ieee754_sqrt+0x158>
 800988a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800988e:	e9db 2300 	ldrd	r2, r3, [fp]
 8009892:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009896:	d111      	bne.n	80098bc <__ieee754_sqrt+0x178>
 8009898:	4655      	mov	r5, sl
 800989a:	3601      	adds	r6, #1
 800989c:	1072      	asrs	r2, r6, #1
 800989e:	086b      	lsrs	r3, r5, #1
 80098a0:	07f1      	lsls	r1, r6, #31
 80098a2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80098a6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80098aa:	bf48      	it	mi
 80098ac:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80098b0:	4618      	mov	r0, r3
 80098b2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 80098b6:	e757      	b.n	8009768 <__ieee754_sqrt+0x24>
 80098b8:	4696      	mov	lr, r2
 80098ba:	e7be      	b.n	800983a <__ieee754_sqrt+0xf6>
 80098bc:	f7f6 fd76 	bl	80003ac <__adddf3>
 80098c0:	e9d4 8900 	ldrd	r8, r9, [r4]
 80098c4:	4602      	mov	r2, r0
 80098c6:	460b      	mov	r3, r1
 80098c8:	4640      	mov	r0, r8
 80098ca:	4649      	mov	r1, r9
 80098cc:	f7f7 f996 	bl	8000bfc <__aeabi_dcmplt>
 80098d0:	b120      	cbz	r0, 80098dc <__ieee754_sqrt+0x198>
 80098d2:	1ca8      	adds	r0, r5, #2
 80098d4:	bf08      	it	eq
 80098d6:	3601      	addeq	r6, #1
 80098d8:	3502      	adds	r5, #2
 80098da:	e7df      	b.n	800989c <__ieee754_sqrt+0x158>
 80098dc:	1c6b      	adds	r3, r5, #1
 80098de:	f023 0501 	bic.w	r5, r3, #1
 80098e2:	e7db      	b.n	800989c <__ieee754_sqrt+0x158>
 80098e4:	7ff00000 	.word	0x7ff00000
 80098e8:	20000018 	.word	0x20000018
 80098ec:	20000010 	.word	0x20000010

080098f0 <floor>:
 80098f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80098f8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80098fc:	2e13      	cmp	r6, #19
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	460c      	mov	r4, r1
 8009904:	4605      	mov	r5, r0
 8009906:	4680      	mov	r8, r0
 8009908:	dc35      	bgt.n	8009976 <floor+0x86>
 800990a:	2e00      	cmp	r6, #0
 800990c:	da17      	bge.n	800993e <floor+0x4e>
 800990e:	a334      	add	r3, pc, #208	@ (adr r3, 80099e0 <floor+0xf0>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f7f6 fd4a 	bl	80003ac <__adddf3>
 8009918:	2200      	movs	r2, #0
 800991a:	2300      	movs	r3, #0
 800991c:	f7f7 f98c 	bl	8000c38 <__aeabi_dcmpgt>
 8009920:	b150      	cbz	r0, 8009938 <floor+0x48>
 8009922:	2c00      	cmp	r4, #0
 8009924:	da57      	bge.n	80099d6 <floor+0xe6>
 8009926:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800992a:	432c      	orrs	r4, r5
 800992c:	2500      	movs	r5, #0
 800992e:	42ac      	cmp	r4, r5
 8009930:	4c2d      	ldr	r4, [pc, #180]	@ (80099e8 <floor+0xf8>)
 8009932:	bf08      	it	eq
 8009934:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009938:	4623      	mov	r3, r4
 800993a:	462a      	mov	r2, r5
 800993c:	e024      	b.n	8009988 <floor+0x98>
 800993e:	4f2b      	ldr	r7, [pc, #172]	@ (80099ec <floor+0xfc>)
 8009940:	4137      	asrs	r7, r6
 8009942:	ea01 0c07 	and.w	ip, r1, r7
 8009946:	ea5c 0c00 	orrs.w	ip, ip, r0
 800994a:	d01d      	beq.n	8009988 <floor+0x98>
 800994c:	a324      	add	r3, pc, #144	@ (adr r3, 80099e0 <floor+0xf0>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 fd2b 	bl	80003ac <__adddf3>
 8009956:	2200      	movs	r2, #0
 8009958:	2300      	movs	r3, #0
 800995a:	f7f7 f96d 	bl	8000c38 <__aeabi_dcmpgt>
 800995e:	2800      	cmp	r0, #0
 8009960:	d0ea      	beq.n	8009938 <floor+0x48>
 8009962:	2c00      	cmp	r4, #0
 8009964:	bfbe      	ittt	lt
 8009966:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800996a:	4133      	asrlt	r3, r6
 800996c:	18e4      	addlt	r4, r4, r3
 800996e:	2500      	movs	r5, #0
 8009970:	ea24 0407 	bic.w	r4, r4, r7
 8009974:	e7e0      	b.n	8009938 <floor+0x48>
 8009976:	2e33      	cmp	r6, #51	@ 0x33
 8009978:	dd0a      	ble.n	8009990 <floor+0xa0>
 800997a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800997e:	d103      	bne.n	8009988 <floor+0x98>
 8009980:	f7f6 fd14 	bl	80003ac <__adddf3>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4610      	mov	r0, r2
 800998a:	4619      	mov	r1, r3
 800998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009990:	f04f 3cff 	mov.w	ip, #4294967295
 8009994:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009998:	fa2c f707 	lsr.w	r7, ip, r7
 800999c:	4207      	tst	r7, r0
 800999e:	d0f3      	beq.n	8009988 <floor+0x98>
 80099a0:	a30f      	add	r3, pc, #60	@ (adr r3, 80099e0 <floor+0xf0>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fd01 	bl	80003ac <__adddf3>
 80099aa:	2200      	movs	r2, #0
 80099ac:	2300      	movs	r3, #0
 80099ae:	f7f7 f943 	bl	8000c38 <__aeabi_dcmpgt>
 80099b2:	2800      	cmp	r0, #0
 80099b4:	d0c0      	beq.n	8009938 <floor+0x48>
 80099b6:	2c00      	cmp	r4, #0
 80099b8:	da0a      	bge.n	80099d0 <floor+0xe0>
 80099ba:	2e14      	cmp	r6, #20
 80099bc:	d101      	bne.n	80099c2 <floor+0xd2>
 80099be:	3401      	adds	r4, #1
 80099c0:	e006      	b.n	80099d0 <floor+0xe0>
 80099c2:	2301      	movs	r3, #1
 80099c4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80099c8:	40b3      	lsls	r3, r6
 80099ca:	441d      	add	r5, r3
 80099cc:	4545      	cmp	r5, r8
 80099ce:	d3f6      	bcc.n	80099be <floor+0xce>
 80099d0:	ea25 0507 	bic.w	r5, r5, r7
 80099d4:	e7b0      	b.n	8009938 <floor+0x48>
 80099d6:	2500      	movs	r5, #0
 80099d8:	462c      	mov	r4, r5
 80099da:	e7ad      	b.n	8009938 <floor+0x48>
 80099dc:	f3af 8000 	nop.w
 80099e0:	8800759c 	.word	0x8800759c
 80099e4:	7e37e43c 	.word	0x7e37e43c
 80099e8:	bff00000 	.word	0xbff00000
 80099ec:	000fffff 	.word	0x000fffff

080099f0 <__kernel_cos>:
 80099f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80099f8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 80099fc:	4680      	mov	r8, r0
 80099fe:	4689      	mov	r9, r1
 8009a00:	e9cd 2300 	strd	r2, r3, [sp]
 8009a04:	d204      	bcs.n	8009a10 <__kernel_cos+0x20>
 8009a06:	f7f7 f937 	bl	8000c78 <__aeabi_d2iz>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f000 8086 	beq.w	8009b1c <__kernel_cos+0x12c>
 8009a10:	4642      	mov	r2, r8
 8009a12:	464b      	mov	r3, r9
 8009a14:	4640      	mov	r0, r8
 8009a16:	4649      	mov	r1, r9
 8009a18:	f7f6 fe7e 	bl	8000718 <__aeabi_dmul>
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	4b4e      	ldr	r3, [pc, #312]	@ (8009b58 <__kernel_cos+0x168>)
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	f7f6 fe78 	bl	8000718 <__aeabi_dmul>
 8009a28:	a33f      	add	r3, pc, #252	@ (adr r3, 8009b28 <__kernel_cos+0x138>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	4682      	mov	sl, r0
 8009a30:	468b      	mov	fp, r1
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f6 fe6f 	bl	8000718 <__aeabi_dmul>
 8009a3a:	a33d      	add	r3, pc, #244	@ (adr r3, 8009b30 <__kernel_cos+0x140>)
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f7f6 fcb4 	bl	80003ac <__adddf3>
 8009a44:	4622      	mov	r2, r4
 8009a46:	462b      	mov	r3, r5
 8009a48:	f7f6 fe66 	bl	8000718 <__aeabi_dmul>
 8009a4c:	a33a      	add	r3, pc, #232	@ (adr r3, 8009b38 <__kernel_cos+0x148>)
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	f7f6 fca9 	bl	80003a8 <__aeabi_dsub>
 8009a56:	4622      	mov	r2, r4
 8009a58:	462b      	mov	r3, r5
 8009a5a:	f7f6 fe5d 	bl	8000718 <__aeabi_dmul>
 8009a5e:	a338      	add	r3, pc, #224	@ (adr r3, 8009b40 <__kernel_cos+0x150>)
 8009a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a64:	f7f6 fca2 	bl	80003ac <__adddf3>
 8009a68:	4622      	mov	r2, r4
 8009a6a:	462b      	mov	r3, r5
 8009a6c:	f7f6 fe54 	bl	8000718 <__aeabi_dmul>
 8009a70:	a335      	add	r3, pc, #212	@ (adr r3, 8009b48 <__kernel_cos+0x158>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fc97 	bl	80003a8 <__aeabi_dsub>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	f7f6 fe4b 	bl	8000718 <__aeabi_dmul>
 8009a82:	a333      	add	r3, pc, #204	@ (adr r3, 8009b50 <__kernel_cos+0x160>)
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f7f6 fc90 	bl	80003ac <__adddf3>
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	462b      	mov	r3, r5
 8009a90:	f7f6 fe42 	bl	8000718 <__aeabi_dmul>
 8009a94:	4622      	mov	r2, r4
 8009a96:	462b      	mov	r3, r5
 8009a98:	f7f6 fe3e 	bl	8000718 <__aeabi_dmul>
 8009a9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	460d      	mov	r5, r1
 8009aa4:	4640      	mov	r0, r8
 8009aa6:	4649      	mov	r1, r9
 8009aa8:	f7f6 fe36 	bl	8000718 <__aeabi_dmul>
 8009aac:	460b      	mov	r3, r1
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f7f6 fc78 	bl	80003a8 <__aeabi_dsub>
 8009ab8:	4b28      	ldr	r3, [pc, #160]	@ (8009b5c <__kernel_cos+0x16c>)
 8009aba:	4680      	mov	r8, r0
 8009abc:	429e      	cmp	r6, r3
 8009abe:	4689      	mov	r9, r1
 8009ac0:	d80e      	bhi.n	8009ae0 <__kernel_cos+0xf0>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	4659      	mov	r1, fp
 8009aca:	f7f6 fc6d 	bl	80003a8 <__aeabi_dsub>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4922      	ldr	r1, [pc, #136]	@ (8009b60 <__kernel_cos+0x170>)
 8009ad6:	f7f6 fc67 	bl	80003a8 <__aeabi_dsub>
 8009ada:	b003      	add	sp, #12
 8009adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae0:	2400      	movs	r4, #0
 8009ae2:	4b20      	ldr	r3, [pc, #128]	@ (8009b64 <__kernel_cos+0x174>)
 8009ae4:	4622      	mov	r2, r4
 8009ae6:	429e      	cmp	r6, r3
 8009ae8:	bf8c      	ite	hi
 8009aea:	4d1f      	ldrhi	r5, [pc, #124]	@ (8009b68 <__kernel_cos+0x178>)
 8009aec:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8009af0:	462b      	mov	r3, r5
 8009af2:	2000      	movs	r0, #0
 8009af4:	491a      	ldr	r1, [pc, #104]	@ (8009b60 <__kernel_cos+0x170>)
 8009af6:	f7f6 fc57 	bl	80003a8 <__aeabi_dsub>
 8009afa:	4622      	mov	r2, r4
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	462b      	mov	r3, r5
 8009b02:	4650      	mov	r0, sl
 8009b04:	4659      	mov	r1, fp
 8009b06:	f7f6 fc4f 	bl	80003a8 <__aeabi_dsub>
 8009b0a:	4642      	mov	r2, r8
 8009b0c:	464b      	mov	r3, r9
 8009b0e:	f7f6 fc4b 	bl	80003a8 <__aeabi_dsub>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4630      	mov	r0, r6
 8009b18:	4639      	mov	r1, r7
 8009b1a:	e7dc      	b.n	8009ad6 <__kernel_cos+0xe6>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	4910      	ldr	r1, [pc, #64]	@ (8009b60 <__kernel_cos+0x170>)
 8009b20:	e7db      	b.n	8009ada <__kernel_cos+0xea>
 8009b22:	bf00      	nop
 8009b24:	f3af 8000 	nop.w
 8009b28:	be8838d4 	.word	0xbe8838d4
 8009b2c:	bda8fae9 	.word	0xbda8fae9
 8009b30:	bdb4b1c4 	.word	0xbdb4b1c4
 8009b34:	3e21ee9e 	.word	0x3e21ee9e
 8009b38:	809c52ad 	.word	0x809c52ad
 8009b3c:	3e927e4f 	.word	0x3e927e4f
 8009b40:	19cb1590 	.word	0x19cb1590
 8009b44:	3efa01a0 	.word	0x3efa01a0
 8009b48:	16c15177 	.word	0x16c15177
 8009b4c:	3f56c16c 	.word	0x3f56c16c
 8009b50:	5555554c 	.word	0x5555554c
 8009b54:	3fa55555 	.word	0x3fa55555
 8009b58:	3fe00000 	.word	0x3fe00000
 8009b5c:	3fd33332 	.word	0x3fd33332
 8009b60:	3ff00000 	.word	0x3ff00000
 8009b64:	3fe90000 	.word	0x3fe90000
 8009b68:	3fd20000 	.word	0x3fd20000
 8009b6c:	00000000 	.word	0x00000000

08009b70 <__kernel_sin>:
 8009b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	461f      	mov	r7, r3
 8009b76:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009b7a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8009b7e:	4604      	mov	r4, r0
 8009b80:	460d      	mov	r5, r1
 8009b82:	4616      	mov	r6, r2
 8009b84:	b085      	sub	sp, #20
 8009b86:	d203      	bcs.n	8009b90 <__kernel_sin+0x20>
 8009b88:	f7f7 f876 	bl	8000c78 <__aeabi_d2iz>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d051      	beq.n	8009c34 <__kernel_sin+0xc4>
 8009b90:	4622      	mov	r2, r4
 8009b92:	462b      	mov	r3, r5
 8009b94:	4620      	mov	r0, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	f7f6 fdbe 	bl	8000718 <__aeabi_dmul>
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	468b      	mov	fp, r1
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fdb6 	bl	8000718 <__aeabi_dmul>
 8009bac:	a33e      	add	r3, pc, #248	@ (adr r3, 8009ca8 <__kernel_sin+0x138>)
 8009bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	4689      	mov	r9, r1
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	4659      	mov	r1, fp
 8009bba:	f7f6 fdad 	bl	8000718 <__aeabi_dmul>
 8009bbe:	a33c      	add	r3, pc, #240	@ (adr r3, 8009cb0 <__kernel_sin+0x140>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f7f6 fbf0 	bl	80003a8 <__aeabi_dsub>
 8009bc8:	4652      	mov	r2, sl
 8009bca:	465b      	mov	r3, fp
 8009bcc:	f7f6 fda4 	bl	8000718 <__aeabi_dmul>
 8009bd0:	a339      	add	r3, pc, #228	@ (adr r3, 8009cb8 <__kernel_sin+0x148>)
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fbe9 	bl	80003ac <__adddf3>
 8009bda:	4652      	mov	r2, sl
 8009bdc:	465b      	mov	r3, fp
 8009bde:	f7f6 fd9b 	bl	8000718 <__aeabi_dmul>
 8009be2:	a337      	add	r3, pc, #220	@ (adr r3, 8009cc0 <__kernel_sin+0x150>)
 8009be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be8:	f7f6 fbde 	bl	80003a8 <__aeabi_dsub>
 8009bec:	4652      	mov	r2, sl
 8009bee:	465b      	mov	r3, fp
 8009bf0:	f7f6 fd92 	bl	8000718 <__aeabi_dmul>
 8009bf4:	a334      	add	r3, pc, #208	@ (adr r3, 8009cc8 <__kernel_sin+0x158>)
 8009bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfa:	f7f6 fbd7 	bl	80003ac <__adddf3>
 8009bfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c00:	e9cd 0100 	strd	r0, r1, [sp]
 8009c04:	b9db      	cbnz	r3, 8009c3e <__kernel_sin+0xce>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	4659      	mov	r1, fp
 8009c0e:	f7f6 fd83 	bl	8000718 <__aeabi_dmul>
 8009c12:	a32f      	add	r3, pc, #188	@ (adr r3, 8009cd0 <__kernel_sin+0x160>)
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f7f6 fbc6 	bl	80003a8 <__aeabi_dsub>
 8009c1c:	4642      	mov	r2, r8
 8009c1e:	464b      	mov	r3, r9
 8009c20:	f7f6 fd7a 	bl	8000718 <__aeabi_dmul>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4620      	mov	r0, r4
 8009c2a:	4629      	mov	r1, r5
 8009c2c:	f7f6 fbbe 	bl	80003ac <__adddf3>
 8009c30:	4604      	mov	r4, r0
 8009c32:	460d      	mov	r5, r1
 8009c34:	4620      	mov	r0, r4
 8009c36:	4629      	mov	r1, r5
 8009c38:	b005      	add	sp, #20
 8009c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4630      	mov	r0, r6
 8009c42:	4639      	mov	r1, r7
 8009c44:	4b24      	ldr	r3, [pc, #144]	@ (8009cd8 <__kernel_sin+0x168>)
 8009c46:	f7f6 fd67 	bl	8000718 <__aeabi_dmul>
 8009c4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c52:	4640      	mov	r0, r8
 8009c54:	4649      	mov	r1, r9
 8009c56:	f7f6 fd5f 	bl	8000718 <__aeabi_dmul>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c62:	f7f6 fba1 	bl	80003a8 <__aeabi_dsub>
 8009c66:	4652      	mov	r2, sl
 8009c68:	465b      	mov	r3, fp
 8009c6a:	f7f6 fd55 	bl	8000718 <__aeabi_dmul>
 8009c6e:	4632      	mov	r2, r6
 8009c70:	463b      	mov	r3, r7
 8009c72:	f7f6 fb99 	bl	80003a8 <__aeabi_dsub>
 8009c76:	a316      	add	r3, pc, #88	@ (adr r3, 8009cd0 <__kernel_sin+0x160>)
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	4606      	mov	r6, r0
 8009c7e:	460f      	mov	r7, r1
 8009c80:	4640      	mov	r0, r8
 8009c82:	4649      	mov	r1, r9
 8009c84:	f7f6 fd48 	bl	8000718 <__aeabi_dmul>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fb8c 	bl	80003ac <__adddf3>
 8009c94:	4602      	mov	r2, r0
 8009c96:	460b      	mov	r3, r1
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f6 fb84 	bl	80003a8 <__aeabi_dsub>
 8009ca0:	e7c6      	b.n	8009c30 <__kernel_sin+0xc0>
 8009ca2:	bf00      	nop
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	5acfd57c 	.word	0x5acfd57c
 8009cac:	3de5d93a 	.word	0x3de5d93a
 8009cb0:	8a2b9ceb 	.word	0x8a2b9ceb
 8009cb4:	3e5ae5e6 	.word	0x3e5ae5e6
 8009cb8:	57b1fe7d 	.word	0x57b1fe7d
 8009cbc:	3ec71de3 	.word	0x3ec71de3
 8009cc0:	19c161d5 	.word	0x19c161d5
 8009cc4:	3f2a01a0 	.word	0x3f2a01a0
 8009cc8:	1110f8a6 	.word	0x1110f8a6
 8009ccc:	3f811111 	.word	0x3f811111
 8009cd0:	55555549 	.word	0x55555549
 8009cd4:	3fc55555 	.word	0x3fc55555
 8009cd8:	3fe00000 	.word	0x3fe00000
 8009cdc:	00000000 	.word	0x00000000

08009ce0 <__ieee754_atan2>:
 8009ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	4617      	mov	r7, r2
 8009ce6:	4690      	mov	r8, r2
 8009ce8:	4699      	mov	r9, r3
 8009cea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009cee:	427b      	negs	r3, r7
 8009cf0:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8009e78 <__ieee754_atan2+0x198>
 8009cf4:	433b      	orrs	r3, r7
 8009cf6:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8009cfa:	4553      	cmp	r3, sl
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	460d      	mov	r5, r1
 8009d00:	d809      	bhi.n	8009d16 <__ieee754_atan2+0x36>
 8009d02:	4246      	negs	r6, r0
 8009d04:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009d08:	4306      	orrs	r6, r0
 8009d0a:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8009d0e:	4556      	cmp	r6, sl
 8009d10:	468e      	mov	lr, r1
 8009d12:	4683      	mov	fp, r0
 8009d14:	d908      	bls.n	8009d28 <__ieee754_atan2+0x48>
 8009d16:	4642      	mov	r2, r8
 8009d18:	464b      	mov	r3, r9
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7f6 fb45 	bl	80003ac <__adddf3>
 8009d22:	4604      	mov	r4, r0
 8009d24:	460d      	mov	r5, r1
 8009d26:	e016      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009d28:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8009d2c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8009d30:	433e      	orrs	r6, r7
 8009d32:	d103      	bne.n	8009d3c <__ieee754_atan2+0x5c>
 8009d34:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	f000 ba9e 	b.w	800a278 <atan>
 8009d3c:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8009d40:	f006 0602 	and.w	r6, r6, #2
 8009d44:	ea53 0b0b 	orrs.w	fp, r3, fp
 8009d48:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8009d4c:	d107      	bne.n	8009d5e <__ieee754_atan2+0x7e>
 8009d4e:	2e02      	cmp	r6, #2
 8009d50:	d064      	beq.n	8009e1c <__ieee754_atan2+0x13c>
 8009d52:	2e03      	cmp	r6, #3
 8009d54:	d066      	beq.n	8009e24 <__ieee754_atan2+0x144>
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5e:	4317      	orrs	r7, r2
 8009d60:	d106      	bne.n	8009d70 <__ieee754_atan2+0x90>
 8009d62:	f1be 0f00 	cmp.w	lr, #0
 8009d66:	da68      	bge.n	8009e3a <__ieee754_atan2+0x15a>
 8009d68:	a537      	add	r5, pc, #220	@ (adr r5, 8009e48 <__ieee754_atan2+0x168>)
 8009d6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009d6e:	e7f2      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009d70:	4552      	cmp	r2, sl
 8009d72:	d10f      	bne.n	8009d94 <__ieee754_atan2+0xb4>
 8009d74:	4293      	cmp	r3, r2
 8009d76:	f106 36ff 	add.w	r6, r6, #4294967295
 8009d7a:	d107      	bne.n	8009d8c <__ieee754_atan2+0xac>
 8009d7c:	2e02      	cmp	r6, #2
 8009d7e:	d855      	bhi.n	8009e2c <__ieee754_atan2+0x14c>
 8009d80:	4b3e      	ldr	r3, [pc, #248]	@ (8009e7c <__ieee754_atan2+0x19c>)
 8009d82:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009d86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009d8a:	e7e4      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009d8c:	2e02      	cmp	r6, #2
 8009d8e:	d851      	bhi.n	8009e34 <__ieee754_atan2+0x154>
 8009d90:	4b3b      	ldr	r3, [pc, #236]	@ (8009e80 <__ieee754_atan2+0x1a0>)
 8009d92:	e7f6      	b.n	8009d82 <__ieee754_atan2+0xa2>
 8009d94:	4553      	cmp	r3, sl
 8009d96:	d0e4      	beq.n	8009d62 <__ieee754_atan2+0x82>
 8009d98:	1a9b      	subs	r3, r3, r2
 8009d9a:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8009d9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009da2:	da21      	bge.n	8009de8 <__ieee754_atan2+0x108>
 8009da4:	f1b9 0f00 	cmp.w	r9, #0
 8009da8:	da01      	bge.n	8009dae <__ieee754_atan2+0xce>
 8009daa:	323c      	adds	r2, #60	@ 0x3c
 8009dac:	db20      	blt.n	8009df0 <__ieee754_atan2+0x110>
 8009dae:	4642      	mov	r2, r8
 8009db0:	464b      	mov	r3, r9
 8009db2:	4620      	mov	r0, r4
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 fdd9 	bl	800096c <__aeabi_ddiv>
 8009dba:	f000 fbed 	bl	800a598 <fabs>
 8009dbe:	f000 fa5b 	bl	800a278 <atan>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	2e01      	cmp	r6, #1
 8009dc8:	d015      	beq.n	8009df6 <__ieee754_atan2+0x116>
 8009dca:	2e02      	cmp	r6, #2
 8009dcc:	d017      	beq.n	8009dfe <__ieee754_atan2+0x11e>
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	d0c1      	beq.n	8009d56 <__ieee754_atan2+0x76>
 8009dd2:	a31f      	add	r3, pc, #124	@ (adr r3, 8009e50 <__ieee754_atan2+0x170>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	4620      	mov	r0, r4
 8009dda:	4629      	mov	r1, r5
 8009ddc:	f7f6 fae4 	bl	80003a8 <__aeabi_dsub>
 8009de0:	a31d      	add	r3, pc, #116	@ (adr r3, 8009e58 <__ieee754_atan2+0x178>)
 8009de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de6:	e016      	b.n	8009e16 <__ieee754_atan2+0x136>
 8009de8:	a51d      	add	r5, pc, #116	@ (adr r5, 8009e60 <__ieee754_atan2+0x180>)
 8009dea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009dee:	e7ea      	b.n	8009dc6 <__ieee754_atan2+0xe6>
 8009df0:	2400      	movs	r4, #0
 8009df2:	2500      	movs	r5, #0
 8009df4:	e7e7      	b.n	8009dc6 <__ieee754_atan2+0xe6>
 8009df6:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8009dfa:	461d      	mov	r5, r3
 8009dfc:	e7ab      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009dfe:	a314      	add	r3, pc, #80	@ (adr r3, 8009e50 <__ieee754_atan2+0x170>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	4620      	mov	r0, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	f7f6 face 	bl	80003a8 <__aeabi_dsub>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	a111      	add	r1, pc, #68	@ (adr r1, 8009e58 <__ieee754_atan2+0x178>)
 8009e12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e16:	f7f6 fac7 	bl	80003a8 <__aeabi_dsub>
 8009e1a:	e782      	b.n	8009d22 <__ieee754_atan2+0x42>
 8009e1c:	a50e      	add	r5, pc, #56	@ (adr r5, 8009e58 <__ieee754_atan2+0x178>)
 8009e1e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e22:	e798      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009e24:	a510      	add	r5, pc, #64	@ (adr r5, 8009e68 <__ieee754_atan2+0x188>)
 8009e26:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e2a:	e794      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009e2c:	a510      	add	r5, pc, #64	@ (adr r5, 8009e70 <__ieee754_atan2+0x190>)
 8009e2e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e32:	e790      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009e34:	2400      	movs	r4, #0
 8009e36:	2500      	movs	r5, #0
 8009e38:	e78d      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009e3a:	a509      	add	r5, pc, #36	@ (adr r5, 8009e60 <__ieee754_atan2+0x180>)
 8009e3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e40:	e789      	b.n	8009d56 <__ieee754_atan2+0x76>
 8009e42:	bf00      	nop
 8009e44:	f3af 8000 	nop.w
 8009e48:	54442d18 	.word	0x54442d18
 8009e4c:	bff921fb 	.word	0xbff921fb
 8009e50:	33145c07 	.word	0x33145c07
 8009e54:	3ca1a626 	.word	0x3ca1a626
 8009e58:	54442d18 	.word	0x54442d18
 8009e5c:	400921fb 	.word	0x400921fb
 8009e60:	54442d18 	.word	0x54442d18
 8009e64:	3ff921fb 	.word	0x3ff921fb
 8009e68:	54442d18 	.word	0x54442d18
 8009e6c:	c00921fb 	.word	0xc00921fb
 8009e70:	54442d18 	.word	0x54442d18
 8009e74:	3fe921fb 	.word	0x3fe921fb
 8009e78:	7ff00000 	.word	0x7ff00000
 8009e7c:	0800da88 	.word	0x0800da88
 8009e80:	0800da70 	.word	0x0800da70
 8009e84:	00000000 	.word	0x00000000

08009e88 <__ieee754_rem_pio2>:
 8009e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	4bc4      	ldr	r3, [pc, #784]	@ (800a1a0 <__ieee754_rem_pio2+0x318>)
 8009e8e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009e92:	b08d      	sub	sp, #52	@ 0x34
 8009e94:	4598      	cmp	r8, r3
 8009e96:	4606      	mov	r6, r0
 8009e98:	460f      	mov	r7, r1
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	9104      	str	r1, [sp, #16]
 8009e9e:	d807      	bhi.n	8009eb0 <__ieee754_rem_pio2+0x28>
 8009ea0:	e9c2 6700 	strd	r6, r7, [r2]
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009eac:	2500      	movs	r5, #0
 8009eae:	e026      	b.n	8009efe <__ieee754_rem_pio2+0x76>
 8009eb0:	4bbc      	ldr	r3, [pc, #752]	@ (800a1a4 <__ieee754_rem_pio2+0x31c>)
 8009eb2:	4598      	cmp	r8, r3
 8009eb4:	d876      	bhi.n	8009fa4 <__ieee754_rem_pio2+0x11c>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	4dbb      	ldr	r5, [pc, #748]	@ (800a1a8 <__ieee754_rem_pio2+0x320>)
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	a3aa      	add	r3, pc, #680	@ (adr r3, 800a168 <__ieee754_rem_pio2+0x2e0>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	dd38      	ble.n	8009f36 <__ieee754_rem_pio2+0xae>
 8009ec4:	f7f6 fa70 	bl	80003a8 <__aeabi_dsub>
 8009ec8:	45a8      	cmp	r8, r5
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460f      	mov	r7, r1
 8009ece:	d01a      	beq.n	8009f06 <__ieee754_rem_pio2+0x7e>
 8009ed0:	a3a7      	add	r3, pc, #668	@ (adr r3, 800a170 <__ieee754_rem_pio2+0x2e8>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fa67 	bl	80003a8 <__aeabi_dsub>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4680      	mov	r8, r0
 8009ee0:	4689      	mov	r9, r1
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	f7f6 fa5f 	bl	80003a8 <__aeabi_dsub>
 8009eea:	a3a1      	add	r3, pc, #644	@ (adr r3, 800a170 <__ieee754_rem_pio2+0x2e8>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 fa5a 	bl	80003a8 <__aeabi_dsub>
 8009ef4:	2501      	movs	r5, #1
 8009ef6:	e9c4 8900 	strd	r8, r9, [r4]
 8009efa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009efe:	4628      	mov	r0, r5
 8009f00:	b00d      	add	sp, #52	@ 0x34
 8009f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f06:	a39c      	add	r3, pc, #624	@ (adr r3, 800a178 <__ieee754_rem_pio2+0x2f0>)
 8009f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0c:	f7f6 fa4c 	bl	80003a8 <__aeabi_dsub>
 8009f10:	a39b      	add	r3, pc, #620	@ (adr r3, 800a180 <__ieee754_rem_pio2+0x2f8>)
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	4606      	mov	r6, r0
 8009f18:	460f      	mov	r7, r1
 8009f1a:	f7f6 fa45 	bl	80003a8 <__aeabi_dsub>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	460b      	mov	r3, r1
 8009f22:	4680      	mov	r8, r0
 8009f24:	4689      	mov	r9, r1
 8009f26:	4630      	mov	r0, r6
 8009f28:	4639      	mov	r1, r7
 8009f2a:	f7f6 fa3d 	bl	80003a8 <__aeabi_dsub>
 8009f2e:	a394      	add	r3, pc, #592	@ (adr r3, 800a180 <__ieee754_rem_pio2+0x2f8>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	e7dc      	b.n	8009ef0 <__ieee754_rem_pio2+0x68>
 8009f36:	f7f6 fa39 	bl	80003ac <__adddf3>
 8009f3a:	45a8      	cmp	r8, r5
 8009f3c:	4606      	mov	r6, r0
 8009f3e:	460f      	mov	r7, r1
 8009f40:	d018      	beq.n	8009f74 <__ieee754_rem_pio2+0xec>
 8009f42:	a38b      	add	r3, pc, #556	@ (adr r3, 800a170 <__ieee754_rem_pio2+0x2e8>)
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f7f6 fa30 	bl	80003ac <__adddf3>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	4680      	mov	r8, r0
 8009f52:	4689      	mov	r9, r1
 8009f54:	4630      	mov	r0, r6
 8009f56:	4639      	mov	r1, r7
 8009f58:	f7f6 fa26 	bl	80003a8 <__aeabi_dsub>
 8009f5c:	a384      	add	r3, pc, #528	@ (adr r3, 800a170 <__ieee754_rem_pio2+0x2e8>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	f7f6 fa23 	bl	80003ac <__adddf3>
 8009f66:	f04f 35ff 	mov.w	r5, #4294967295
 8009f6a:	e9c4 8900 	strd	r8, r9, [r4]
 8009f6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009f72:	e7c4      	b.n	8009efe <__ieee754_rem_pio2+0x76>
 8009f74:	a380      	add	r3, pc, #512	@ (adr r3, 800a178 <__ieee754_rem_pio2+0x2f0>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 fa17 	bl	80003ac <__adddf3>
 8009f7e:	a380      	add	r3, pc, #512	@ (adr r3, 800a180 <__ieee754_rem_pio2+0x2f8>)
 8009f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	f7f6 fa10 	bl	80003ac <__adddf3>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4680      	mov	r8, r0
 8009f92:	4689      	mov	r9, r1
 8009f94:	4630      	mov	r0, r6
 8009f96:	4639      	mov	r1, r7
 8009f98:	f7f6 fa06 	bl	80003a8 <__aeabi_dsub>
 8009f9c:	a378      	add	r3, pc, #480	@ (adr r3, 800a180 <__ieee754_rem_pio2+0x2f8>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	e7de      	b.n	8009f62 <__ieee754_rem_pio2+0xda>
 8009fa4:	4b81      	ldr	r3, [pc, #516]	@ (800a1ac <__ieee754_rem_pio2+0x324>)
 8009fa6:	4598      	cmp	r8, r3
 8009fa8:	f200 80cf 	bhi.w	800a14a <__ieee754_rem_pio2+0x2c2>
 8009fac:	f000 faf4 	bl	800a598 <fabs>
 8009fb0:	a375      	add	r3, pc, #468	@ (adr r3, 800a188 <__ieee754_rem_pio2+0x300>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460f      	mov	r7, r1
 8009fba:	f7f6 fbad 	bl	8000718 <__aeabi_dmul>
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	4b7b      	ldr	r3, [pc, #492]	@ (800a1b0 <__ieee754_rem_pio2+0x328>)
 8009fc2:	f7f6 f9f3 	bl	80003ac <__adddf3>
 8009fc6:	f7f6 fe57 	bl	8000c78 <__aeabi_d2iz>
 8009fca:	4605      	mov	r5, r0
 8009fcc:	f7f6 fb3a 	bl	8000644 <__aeabi_i2d>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fd8:	a363      	add	r3, pc, #396	@ (adr r3, 800a168 <__ieee754_rem_pio2+0x2e0>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 fb9b 	bl	8000718 <__aeabi_dmul>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 f9dd 	bl	80003a8 <__aeabi_dsub>
 8009fee:	a360      	add	r3, pc, #384	@ (adr r3, 800a170 <__ieee754_rem_pio2+0x2e8>)
 8009ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff4:	4682      	mov	sl, r0
 8009ff6:	468b      	mov	fp, r1
 8009ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffc:	f7f6 fb8c 	bl	8000718 <__aeabi_dmul>
 800a000:	2d1f      	cmp	r5, #31
 800a002:	4606      	mov	r6, r0
 800a004:	460f      	mov	r7, r1
 800a006:	dc0c      	bgt.n	800a022 <__ieee754_rem_pio2+0x19a>
 800a008:	4b6a      	ldr	r3, [pc, #424]	@ (800a1b4 <__ieee754_rem_pio2+0x32c>)
 800a00a:	1e6a      	subs	r2, r5, #1
 800a00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a010:	4543      	cmp	r3, r8
 800a012:	d006      	beq.n	800a022 <__ieee754_rem_pio2+0x19a>
 800a014:	4632      	mov	r2, r6
 800a016:	463b      	mov	r3, r7
 800a018:	4650      	mov	r0, sl
 800a01a:	4659      	mov	r1, fp
 800a01c:	f7f6 f9c4 	bl	80003a8 <__aeabi_dsub>
 800a020:	e00e      	b.n	800a040 <__ieee754_rem_pio2+0x1b8>
 800a022:	463b      	mov	r3, r7
 800a024:	4632      	mov	r2, r6
 800a026:	4650      	mov	r0, sl
 800a028:	4659      	mov	r1, fp
 800a02a:	f7f6 f9bd 	bl	80003a8 <__aeabi_dsub>
 800a02e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a032:	9305      	str	r3, [sp, #20]
 800a034:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a038:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a03c:	2b10      	cmp	r3, #16
 800a03e:	dc02      	bgt.n	800a046 <__ieee754_rem_pio2+0x1be>
 800a040:	e9c4 0100 	strd	r0, r1, [r4]
 800a044:	e039      	b.n	800a0ba <__ieee754_rem_pio2+0x232>
 800a046:	a34c      	add	r3, pc, #304	@ (adr r3, 800a178 <__ieee754_rem_pio2+0x2f0>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a050:	f7f6 fb62 	bl	8000718 <__aeabi_dmul>
 800a054:	4606      	mov	r6, r0
 800a056:	460f      	mov	r7, r1
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4650      	mov	r0, sl
 800a05e:	4659      	mov	r1, fp
 800a060:	f7f6 f9a2 	bl	80003a8 <__aeabi_dsub>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4680      	mov	r8, r0
 800a06a:	4689      	mov	r9, r1
 800a06c:	4650      	mov	r0, sl
 800a06e:	4659      	mov	r1, fp
 800a070:	f7f6 f99a 	bl	80003a8 <__aeabi_dsub>
 800a074:	4632      	mov	r2, r6
 800a076:	463b      	mov	r3, r7
 800a078:	f7f6 f996 	bl	80003a8 <__aeabi_dsub>
 800a07c:	a340      	add	r3, pc, #256	@ (adr r3, 800a180 <__ieee754_rem_pio2+0x2f8>)
 800a07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08a:	f7f6 fb45 	bl	8000718 <__aeabi_dmul>
 800a08e:	4632      	mov	r2, r6
 800a090:	463b      	mov	r3, r7
 800a092:	f7f6 f989 	bl	80003a8 <__aeabi_dsub>
 800a096:	4602      	mov	r2, r0
 800a098:	460b      	mov	r3, r1
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	f7f6 f981 	bl	80003a8 <__aeabi_dsub>
 800a0a6:	9a05      	ldr	r2, [sp, #20]
 800a0a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	2b31      	cmp	r3, #49	@ 0x31
 800a0b0:	dc20      	bgt.n	800a0f4 <__ieee754_rem_pio2+0x26c>
 800a0b2:	46c2      	mov	sl, r8
 800a0b4:	46cb      	mov	fp, r9
 800a0b6:	e9c4 0100 	strd	r0, r1, [r4]
 800a0ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a0be:	4650      	mov	r0, sl
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	4659      	mov	r1, fp
 800a0c6:	f7f6 f96f 	bl	80003a8 <__aeabi_dsub>
 800a0ca:	463b      	mov	r3, r7
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	f7f6 f96b 	bl	80003a8 <__aeabi_dsub>
 800a0d2:	9b04      	ldr	r3, [sp, #16]
 800a0d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f6bf af10 	bge.w	8009efe <__ieee754_rem_pio2+0x76>
 800a0de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a0e2:	6063      	str	r3, [r4, #4]
 800a0e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a0e8:	f8c4 8000 	str.w	r8, [r4]
 800a0ec:	60a0      	str	r0, [r4, #8]
 800a0ee:	60e3      	str	r3, [r4, #12]
 800a0f0:	426d      	negs	r5, r5
 800a0f2:	e704      	b.n	8009efe <__ieee754_rem_pio2+0x76>
 800a0f4:	a326      	add	r3, pc, #152	@ (adr r3, 800a190 <__ieee754_rem_pio2+0x308>)
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0fe:	f7f6 fb0b 	bl	8000718 <__aeabi_dmul>
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	4602      	mov	r2, r0
 800a108:	460b      	mov	r3, r1
 800a10a:	4640      	mov	r0, r8
 800a10c:	4649      	mov	r1, r9
 800a10e:	f7f6 f94b 	bl	80003a8 <__aeabi_dsub>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4682      	mov	sl, r0
 800a118:	468b      	mov	fp, r1
 800a11a:	4640      	mov	r0, r8
 800a11c:	4649      	mov	r1, r9
 800a11e:	f7f6 f943 	bl	80003a8 <__aeabi_dsub>
 800a122:	4632      	mov	r2, r6
 800a124:	463b      	mov	r3, r7
 800a126:	f7f6 f93f 	bl	80003a8 <__aeabi_dsub>
 800a12a:	a31b      	add	r3, pc, #108	@ (adr r3, 800a198 <__ieee754_rem_pio2+0x310>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	4606      	mov	r6, r0
 800a132:	460f      	mov	r7, r1
 800a134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a138:	f7f6 faee 	bl	8000718 <__aeabi_dmul>
 800a13c:	4632      	mov	r2, r6
 800a13e:	463b      	mov	r3, r7
 800a140:	f7f6 f932 	bl	80003a8 <__aeabi_dsub>
 800a144:	4606      	mov	r6, r0
 800a146:	460f      	mov	r7, r1
 800a148:	e764      	b.n	800a014 <__ieee754_rem_pio2+0x18c>
 800a14a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1b8 <__ieee754_rem_pio2+0x330>)
 800a14c:	4598      	cmp	r8, r3
 800a14e:	d935      	bls.n	800a1bc <__ieee754_rem_pio2+0x334>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	f7f6 f928 	bl	80003a8 <__aeabi_dsub>
 800a158:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a15c:	e9c4 0100 	strd	r0, r1, [r4]
 800a160:	e6a4      	b.n	8009eac <__ieee754_rem_pio2+0x24>
 800a162:	bf00      	nop
 800a164:	f3af 8000 	nop.w
 800a168:	54400000 	.word	0x54400000
 800a16c:	3ff921fb 	.word	0x3ff921fb
 800a170:	1a626331 	.word	0x1a626331
 800a174:	3dd0b461 	.word	0x3dd0b461
 800a178:	1a600000 	.word	0x1a600000
 800a17c:	3dd0b461 	.word	0x3dd0b461
 800a180:	2e037073 	.word	0x2e037073
 800a184:	3ba3198a 	.word	0x3ba3198a
 800a188:	6dc9c883 	.word	0x6dc9c883
 800a18c:	3fe45f30 	.word	0x3fe45f30
 800a190:	2e000000 	.word	0x2e000000
 800a194:	3ba3198a 	.word	0x3ba3198a
 800a198:	252049c1 	.word	0x252049c1
 800a19c:	397b839a 	.word	0x397b839a
 800a1a0:	3fe921fb 	.word	0x3fe921fb
 800a1a4:	4002d97b 	.word	0x4002d97b
 800a1a8:	3ff921fb 	.word	0x3ff921fb
 800a1ac:	413921fb 	.word	0x413921fb
 800a1b0:	3fe00000 	.word	0x3fe00000
 800a1b4:	0800daa0 	.word	0x0800daa0
 800a1b8:	7fefffff 	.word	0x7fefffff
 800a1bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a1c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800a1c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a1c8:	460f      	mov	r7, r1
 800a1ca:	f7f6 fd55 	bl	8000c78 <__aeabi_d2iz>
 800a1ce:	f7f6 fa39 	bl	8000644 <__aeabi_i2d>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	4639      	mov	r1, r7
 800a1da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1de:	f7f6 f8e3 	bl	80003a8 <__aeabi_dsub>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	4b21      	ldr	r3, [pc, #132]	@ (800a26c <__ieee754_rem_pio2+0x3e4>)
 800a1e6:	f7f6 fa97 	bl	8000718 <__aeabi_dmul>
 800a1ea:	460f      	mov	r7, r1
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	f7f6 fd43 	bl	8000c78 <__aeabi_d2iz>
 800a1f2:	f7f6 fa27 	bl	8000644 <__aeabi_i2d>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	4639      	mov	r1, r7
 800a1fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a202:	f7f6 f8d1 	bl	80003a8 <__aeabi_dsub>
 800a206:	2200      	movs	r2, #0
 800a208:	4b18      	ldr	r3, [pc, #96]	@ (800a26c <__ieee754_rem_pio2+0x3e4>)
 800a20a:	f7f6 fa85 	bl	8000718 <__aeabi_dmul>
 800a20e:	f04f 0803 	mov.w	r8, #3
 800a212:	2600      	movs	r6, #0
 800a214:	2700      	movs	r7, #0
 800a216:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800a21a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800a21e:	4632      	mov	r2, r6
 800a220:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a224:	463b      	mov	r3, r7
 800a226:	46c2      	mov	sl, r8
 800a228:	f108 38ff 	add.w	r8, r8, #4294967295
 800a22c:	f7f6 fcdc 	bl	8000be8 <__aeabi_dcmpeq>
 800a230:	2800      	cmp	r0, #0
 800a232:	d1f4      	bne.n	800a21e <__ieee754_rem_pio2+0x396>
 800a234:	4b0e      	ldr	r3, [pc, #56]	@ (800a270 <__ieee754_rem_pio2+0x3e8>)
 800a236:	462a      	mov	r2, r5
 800a238:	9301      	str	r3, [sp, #4]
 800a23a:	2302      	movs	r3, #2
 800a23c:	4621      	mov	r1, r4
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	a806      	add	r0, sp, #24
 800a242:	4653      	mov	r3, sl
 800a244:	f000 f9ac 	bl	800a5a0 <__kernel_rem_pio2>
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	4605      	mov	r5, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f6bf ae56 	bge.w	8009efe <__ieee754_rem_pio2+0x76>
 800a252:	e9d4 2100 	ldrd	r2, r1, [r4]
 800a256:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a25a:	e9c4 2300 	strd	r2, r3, [r4]
 800a25e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800a262:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a266:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800a26a:	e741      	b.n	800a0f0 <__ieee754_rem_pio2+0x268>
 800a26c:	41700000 	.word	0x41700000
 800a270:	0800db20 	.word	0x0800db20
 800a274:	00000000 	.word	0x00000000

0800a278 <atan>:
 800a278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	4bbc      	ldr	r3, [pc, #752]	@ (800a570 <atan+0x2f8>)
 800a27e:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800a282:	429e      	cmp	r6, r3
 800a284:	4604      	mov	r4, r0
 800a286:	460d      	mov	r5, r1
 800a288:	468b      	mov	fp, r1
 800a28a:	d918      	bls.n	800a2be <atan+0x46>
 800a28c:	4bb9      	ldr	r3, [pc, #740]	@ (800a574 <atan+0x2fc>)
 800a28e:	429e      	cmp	r6, r3
 800a290:	d801      	bhi.n	800a296 <atan+0x1e>
 800a292:	d109      	bne.n	800a2a8 <atan+0x30>
 800a294:	b140      	cbz	r0, 800a2a8 <atan+0x30>
 800a296:	4622      	mov	r2, r4
 800a298:	462b      	mov	r3, r5
 800a29a:	4620      	mov	r0, r4
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7f6 f885 	bl	80003ac <__adddf3>
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	e006      	b.n	800a2b6 <atan+0x3e>
 800a2a8:	f1bb 0f00 	cmp.w	fp, #0
 800a2ac:	f340 8123 	ble.w	800a4f6 <atan+0x27e>
 800a2b0:	a593      	add	r5, pc, #588	@ (adr r5, 800a500 <atan+0x288>)
 800a2b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2be:	4bae      	ldr	r3, [pc, #696]	@ (800a578 <atan+0x300>)
 800a2c0:	429e      	cmp	r6, r3
 800a2c2:	d811      	bhi.n	800a2e8 <atan+0x70>
 800a2c4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a2c8:	429e      	cmp	r6, r3
 800a2ca:	d80a      	bhi.n	800a2e2 <atan+0x6a>
 800a2cc:	a38e      	add	r3, pc, #568	@ (adr r3, 800a508 <atan+0x290>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f6 f86b 	bl	80003ac <__adddf3>
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	4ba8      	ldr	r3, [pc, #672]	@ (800a57c <atan+0x304>)
 800a2da:	f7f6 fcad 	bl	8000c38 <__aeabi_dcmpgt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d1e9      	bne.n	800a2b6 <atan+0x3e>
 800a2e2:	f04f 3aff 	mov.w	sl, #4294967295
 800a2e6:	e027      	b.n	800a338 <atan+0xc0>
 800a2e8:	f000 f956 	bl	800a598 <fabs>
 800a2ec:	4ba4      	ldr	r3, [pc, #656]	@ (800a580 <atan+0x308>)
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	429e      	cmp	r6, r3
 800a2f2:	460d      	mov	r5, r1
 800a2f4:	f200 80b8 	bhi.w	800a468 <atan+0x1f0>
 800a2f8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a2fc:	429e      	cmp	r6, r3
 800a2fe:	f200 809c 	bhi.w	800a43a <atan+0x1c2>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	f7f6 f851 	bl	80003ac <__adddf3>
 800a30a:	2200      	movs	r2, #0
 800a30c:	4b9b      	ldr	r3, [pc, #620]	@ (800a57c <atan+0x304>)
 800a30e:	f7f6 f84b 	bl	80003a8 <__aeabi_dsub>
 800a312:	2200      	movs	r2, #0
 800a314:	4606      	mov	r6, r0
 800a316:	460f      	mov	r7, r1
 800a318:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a31c:	4620      	mov	r0, r4
 800a31e:	4629      	mov	r1, r5
 800a320:	f7f6 f844 	bl	80003ac <__adddf3>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f6 fb1e 	bl	800096c <__aeabi_ddiv>
 800a330:	f04f 0a00 	mov.w	sl, #0
 800a334:	4604      	mov	r4, r0
 800a336:	460d      	mov	r5, r1
 800a338:	4622      	mov	r2, r4
 800a33a:	462b      	mov	r3, r5
 800a33c:	4620      	mov	r0, r4
 800a33e:	4629      	mov	r1, r5
 800a340:	f7f6 f9ea 	bl	8000718 <__aeabi_dmul>
 800a344:	4602      	mov	r2, r0
 800a346:	460b      	mov	r3, r1
 800a348:	4680      	mov	r8, r0
 800a34a:	4689      	mov	r9, r1
 800a34c:	f7f6 f9e4 	bl	8000718 <__aeabi_dmul>
 800a350:	a36f      	add	r3, pc, #444	@ (adr r3, 800a510 <atan+0x298>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	4606      	mov	r6, r0
 800a358:	460f      	mov	r7, r1
 800a35a:	f7f6 f9dd 	bl	8000718 <__aeabi_dmul>
 800a35e:	a36e      	add	r3, pc, #440	@ (adr r3, 800a518 <atan+0x2a0>)
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	f7f6 f822 	bl	80003ac <__adddf3>
 800a368:	4632      	mov	r2, r6
 800a36a:	463b      	mov	r3, r7
 800a36c:	f7f6 f9d4 	bl	8000718 <__aeabi_dmul>
 800a370:	a36b      	add	r3, pc, #428	@ (adr r3, 800a520 <atan+0x2a8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f7f6 f819 	bl	80003ac <__adddf3>
 800a37a:	4632      	mov	r2, r6
 800a37c:	463b      	mov	r3, r7
 800a37e:	f7f6 f9cb 	bl	8000718 <__aeabi_dmul>
 800a382:	a369      	add	r3, pc, #420	@ (adr r3, 800a528 <atan+0x2b0>)
 800a384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a388:	f7f6 f810 	bl	80003ac <__adddf3>
 800a38c:	4632      	mov	r2, r6
 800a38e:	463b      	mov	r3, r7
 800a390:	f7f6 f9c2 	bl	8000718 <__aeabi_dmul>
 800a394:	a366      	add	r3, pc, #408	@ (adr r3, 800a530 <atan+0x2b8>)
 800a396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39a:	f7f6 f807 	bl	80003ac <__adddf3>
 800a39e:	4632      	mov	r2, r6
 800a3a0:	463b      	mov	r3, r7
 800a3a2:	f7f6 f9b9 	bl	8000718 <__aeabi_dmul>
 800a3a6:	a364      	add	r3, pc, #400	@ (adr r3, 800a538 <atan+0x2c0>)
 800a3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ac:	f7f5 fffe 	bl	80003ac <__adddf3>
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	f7f6 f9b0 	bl	8000718 <__aeabi_dmul>
 800a3b8:	a361      	add	r3, pc, #388	@ (adr r3, 800a540 <atan+0x2c8>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	4680      	mov	r8, r0
 800a3c0:	4689      	mov	r9, r1
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	4639      	mov	r1, r7
 800a3c6:	f7f6 f9a7 	bl	8000718 <__aeabi_dmul>
 800a3ca:	a35f      	add	r3, pc, #380	@ (adr r3, 800a548 <atan+0x2d0>)
 800a3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d0:	f7f5 ffea 	bl	80003a8 <__aeabi_dsub>
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	463b      	mov	r3, r7
 800a3d8:	f7f6 f99e 	bl	8000718 <__aeabi_dmul>
 800a3dc:	a35c      	add	r3, pc, #368	@ (adr r3, 800a550 <atan+0x2d8>)
 800a3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e2:	f7f5 ffe1 	bl	80003a8 <__aeabi_dsub>
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	463b      	mov	r3, r7
 800a3ea:	f7f6 f995 	bl	8000718 <__aeabi_dmul>
 800a3ee:	a35a      	add	r3, pc, #360	@ (adr r3, 800a558 <atan+0x2e0>)
 800a3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f4:	f7f5 ffd8 	bl	80003a8 <__aeabi_dsub>
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	463b      	mov	r3, r7
 800a3fc:	f7f6 f98c 	bl	8000718 <__aeabi_dmul>
 800a400:	a357      	add	r3, pc, #348	@ (adr r3, 800a560 <atan+0x2e8>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	f7f5 ffcf 	bl	80003a8 <__aeabi_dsub>
 800a40a:	4632      	mov	r2, r6
 800a40c:	463b      	mov	r3, r7
 800a40e:	f7f6 f983 	bl	8000718 <__aeabi_dmul>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4640      	mov	r0, r8
 800a418:	4649      	mov	r1, r9
 800a41a:	f7f5 ffc7 	bl	80003ac <__adddf3>
 800a41e:	4622      	mov	r2, r4
 800a420:	462b      	mov	r3, r5
 800a422:	f7f6 f979 	bl	8000718 <__aeabi_dmul>
 800a426:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	d144      	bne.n	800a4ba <atan+0x242>
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f5 ffb8 	bl	80003a8 <__aeabi_dsub>
 800a438:	e733      	b.n	800a2a2 <atan+0x2a>
 800a43a:	2200      	movs	r2, #0
 800a43c:	4b4f      	ldr	r3, [pc, #316]	@ (800a57c <atan+0x304>)
 800a43e:	f7f5 ffb3 	bl	80003a8 <__aeabi_dsub>
 800a442:	2200      	movs	r2, #0
 800a444:	4606      	mov	r6, r0
 800a446:	460f      	mov	r7, r1
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	4b4b      	ldr	r3, [pc, #300]	@ (800a57c <atan+0x304>)
 800a44e:	f7f5 ffad 	bl	80003ac <__adddf3>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4630      	mov	r0, r6
 800a458:	4639      	mov	r1, r7
 800a45a:	f7f6 fa87 	bl	800096c <__aeabi_ddiv>
 800a45e:	f04f 0a01 	mov.w	sl, #1
 800a462:	4604      	mov	r4, r0
 800a464:	460d      	mov	r5, r1
 800a466:	e767      	b.n	800a338 <atan+0xc0>
 800a468:	4b46      	ldr	r3, [pc, #280]	@ (800a584 <atan+0x30c>)
 800a46a:	429e      	cmp	r6, r3
 800a46c:	d21a      	bcs.n	800a4a4 <atan+0x22c>
 800a46e:	2200      	movs	r2, #0
 800a470:	4b45      	ldr	r3, [pc, #276]	@ (800a588 <atan+0x310>)
 800a472:	f7f5 ff99 	bl	80003a8 <__aeabi_dsub>
 800a476:	2200      	movs	r2, #0
 800a478:	4606      	mov	r6, r0
 800a47a:	460f      	mov	r7, r1
 800a47c:	4620      	mov	r0, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	4b41      	ldr	r3, [pc, #260]	@ (800a588 <atan+0x310>)
 800a482:	f7f6 f949 	bl	8000718 <__aeabi_dmul>
 800a486:	2200      	movs	r2, #0
 800a488:	4b3c      	ldr	r3, [pc, #240]	@ (800a57c <atan+0x304>)
 800a48a:	f7f5 ff8f 	bl	80003ac <__adddf3>
 800a48e:	4602      	mov	r2, r0
 800a490:	460b      	mov	r3, r1
 800a492:	4630      	mov	r0, r6
 800a494:	4639      	mov	r1, r7
 800a496:	f7f6 fa69 	bl	800096c <__aeabi_ddiv>
 800a49a:	f04f 0a02 	mov.w	sl, #2
 800a49e:	4604      	mov	r4, r0
 800a4a0:	460d      	mov	r5, r1
 800a4a2:	e749      	b.n	800a338 <atan+0xc0>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	4938      	ldr	r1, [pc, #224]	@ (800a58c <atan+0x314>)
 800a4ac:	f7f6 fa5e 	bl	800096c <__aeabi_ddiv>
 800a4b0:	f04f 0a03 	mov.w	sl, #3
 800a4b4:	4604      	mov	r4, r0
 800a4b6:	460d      	mov	r5, r1
 800a4b8:	e73e      	b.n	800a338 <atan+0xc0>
 800a4ba:	4b35      	ldr	r3, [pc, #212]	@ (800a590 <atan+0x318>)
 800a4bc:	4e35      	ldr	r6, [pc, #212]	@ (800a594 <atan+0x31c>)
 800a4be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 ff6f 	bl	80003a8 <__aeabi_dsub>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	f7f5 ff6b 	bl	80003a8 <__aeabi_dsub>
 800a4d2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a4de:	f7f5 ff63 	bl	80003a8 <__aeabi_dsub>
 800a4e2:	f1bb 0f00 	cmp.w	fp, #0
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	f6bf aee4 	bge.w	800a2b6 <atan+0x3e>
 800a4ee:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4f2:	461d      	mov	r5, r3
 800a4f4:	e6df      	b.n	800a2b6 <atan+0x3e>
 800a4f6:	a51c      	add	r5, pc, #112	@ (adr r5, 800a568 <atan+0x2f0>)
 800a4f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4fc:	e6db      	b.n	800a2b6 <atan+0x3e>
 800a4fe:	bf00      	nop
 800a500:	54442d18 	.word	0x54442d18
 800a504:	3ff921fb 	.word	0x3ff921fb
 800a508:	8800759c 	.word	0x8800759c
 800a50c:	7e37e43c 	.word	0x7e37e43c
 800a510:	e322da11 	.word	0xe322da11
 800a514:	3f90ad3a 	.word	0x3f90ad3a
 800a518:	24760deb 	.word	0x24760deb
 800a51c:	3fa97b4b 	.word	0x3fa97b4b
 800a520:	a0d03d51 	.word	0xa0d03d51
 800a524:	3fb10d66 	.word	0x3fb10d66
 800a528:	c54c206e 	.word	0xc54c206e
 800a52c:	3fb745cd 	.word	0x3fb745cd
 800a530:	920083ff 	.word	0x920083ff
 800a534:	3fc24924 	.word	0x3fc24924
 800a538:	5555550d 	.word	0x5555550d
 800a53c:	3fd55555 	.word	0x3fd55555
 800a540:	2c6a6c2f 	.word	0x2c6a6c2f
 800a544:	bfa2b444 	.word	0xbfa2b444
 800a548:	52defd9a 	.word	0x52defd9a
 800a54c:	3fadde2d 	.word	0x3fadde2d
 800a550:	af749a6d 	.word	0xaf749a6d
 800a554:	3fb3b0f2 	.word	0x3fb3b0f2
 800a558:	fe231671 	.word	0xfe231671
 800a55c:	3fbc71c6 	.word	0x3fbc71c6
 800a560:	9998ebc4 	.word	0x9998ebc4
 800a564:	3fc99999 	.word	0x3fc99999
 800a568:	54442d18 	.word	0x54442d18
 800a56c:	bff921fb 	.word	0xbff921fb
 800a570:	440fffff 	.word	0x440fffff
 800a574:	7ff00000 	.word	0x7ff00000
 800a578:	3fdbffff 	.word	0x3fdbffff
 800a57c:	3ff00000 	.word	0x3ff00000
 800a580:	3ff2ffff 	.word	0x3ff2ffff
 800a584:	40038000 	.word	0x40038000
 800a588:	3ff80000 	.word	0x3ff80000
 800a58c:	bff00000 	.word	0xbff00000
 800a590:	0800dc28 	.word	0x0800dc28
 800a594:	0800dc48 	.word	0x0800dc48

0800a598 <fabs>:
 800a598:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a59c:	4619      	mov	r1, r3
 800a59e:	4770      	bx	lr

0800a5a0 <__kernel_rem_pio2>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	9104      	str	r1, [sp, #16]
 800a5ac:	4bb6      	ldr	r3, [pc, #728]	@ (800a888 <__kernel_rem_pio2+0x2e8>)
 800a5ae:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800a5b0:	f112 0f14 	cmn.w	r2, #20
 800a5b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a5b8:	bfa8      	it	ge
 800a5ba:	1ed4      	subge	r4, r2, #3
 800a5bc:	9302      	str	r3, [sp, #8]
 800a5be:	9b08      	ldr	r3, [sp, #32]
 800a5c0:	bfb8      	it	lt
 800a5c2:	2400      	movlt	r4, #0
 800a5c4:	f103 33ff 	add.w	r3, r3, #4294967295
 800a5c8:	9306      	str	r3, [sp, #24]
 800a5ca:	bfa4      	itt	ge
 800a5cc:	2318      	movge	r3, #24
 800a5ce:	fb94 f4f3 	sdivge	r4, r4, r3
 800a5d2:	f06f 0317 	mvn.w	r3, #23
 800a5d6:	fb04 3303 	mla	r3, r4, r3, r3
 800a5da:	eb03 0a02 	add.w	sl, r3, r2
 800a5de:	9a06      	ldr	r2, [sp, #24]
 800a5e0:	9b02      	ldr	r3, [sp, #8]
 800a5e2:	1aa7      	subs	r7, r4, r2
 800a5e4:	eb03 0802 	add.w	r8, r3, r2
 800a5e8:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a5ea:	2500      	movs	r5, #0
 800a5ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	9009      	str	r0, [sp, #36]	@ 0x24
 800a5f6:	ae20      	add	r6, sp, #128	@ 0x80
 800a5f8:	4545      	cmp	r5, r8
 800a5fa:	dd14      	ble.n	800a626 <__kernel_rem_pio2+0x86>
 800a5fc:	f04f 0800 	mov.w	r8, #0
 800a600:	9a08      	ldr	r2, [sp, #32]
 800a602:	ab20      	add	r3, sp, #128	@ 0x80
 800a604:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800a608:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800a60c:	9b02      	ldr	r3, [sp, #8]
 800a60e:	4598      	cmp	r8, r3
 800a610:	dc35      	bgt.n	800a67e <__kernel_rem_pio2+0xde>
 800a612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a614:	2200      	movs	r2, #0
 800a616:	f1a3 0908 	sub.w	r9, r3, #8
 800a61a:	2300      	movs	r3, #0
 800a61c:	462f      	mov	r7, r5
 800a61e:	2600      	movs	r6, #0
 800a620:	e9cd 2300 	strd	r2, r3, [sp]
 800a624:	e01f      	b.n	800a666 <__kernel_rem_pio2+0xc6>
 800a626:	42ef      	cmn	r7, r5
 800a628:	d40b      	bmi.n	800a642 <__kernel_rem_pio2+0xa2>
 800a62a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a62e:	e9cd 2300 	strd	r2, r3, [sp]
 800a632:	f7f6 f807 	bl	8000644 <__aeabi_i2d>
 800a636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a63a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a63e:	3501      	adds	r5, #1
 800a640:	e7da      	b.n	800a5f8 <__kernel_rem_pio2+0x58>
 800a642:	4610      	mov	r0, r2
 800a644:	4619      	mov	r1, r3
 800a646:	e7f8      	b.n	800a63a <__kernel_rem_pio2+0x9a>
 800a648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a64c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800a650:	f7f6 f862 	bl	8000718 <__aeabi_dmul>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a65c:	f7f5 fea6 	bl	80003ac <__adddf3>
 800a660:	e9cd 0100 	strd	r0, r1, [sp]
 800a664:	3601      	adds	r6, #1
 800a666:	9b06      	ldr	r3, [sp, #24]
 800a668:	3f08      	subs	r7, #8
 800a66a:	429e      	cmp	r6, r3
 800a66c:	ddec      	ble.n	800a648 <__kernel_rem_pio2+0xa8>
 800a66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a672:	f108 0801 	add.w	r8, r8, #1
 800a676:	e8eb 2302 	strd	r2, r3, [fp], #8
 800a67a:	3508      	adds	r5, #8
 800a67c:	e7c6      	b.n	800a60c <__kernel_rem_pio2+0x6c>
 800a67e:	9b02      	ldr	r3, [sp, #8]
 800a680:	aa0c      	add	r2, sp, #48	@ 0x30
 800a682:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a686:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a688:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800a68a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a68e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a692:	930a      	str	r3, [sp, #40]	@ 0x28
 800a694:	ab98      	add	r3, sp, #608	@ 0x260
 800a696:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a69a:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800a69e:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a6a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a6a4:	ae0c      	add	r6, sp, #48	@ 0x30
 800a6a6:	4698      	mov	r8, r3
 800a6a8:	46b1      	mov	r9, r6
 800a6aa:	465f      	mov	r7, fp
 800a6ac:	9307      	str	r3, [sp, #28]
 800a6ae:	2f00      	cmp	r7, #0
 800a6b0:	f1a8 0808 	sub.w	r8, r8, #8
 800a6b4:	dc71      	bgt.n	800a79a <__kernel_rem_pio2+0x1fa>
 800a6b6:	4652      	mov	r2, sl
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f000 fa94 	bl	800abe8 <scalbn>
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	460d      	mov	r5, r1
 800a6ca:	f7f6 f825 	bl	8000718 <__aeabi_dmul>
 800a6ce:	f7ff f90f 	bl	80098f0 <floor>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	4b6d      	ldr	r3, [pc, #436]	@ (800a88c <__kernel_rem_pio2+0x2ec>)
 800a6d6:	f7f6 f81f 	bl	8000718 <__aeabi_dmul>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4620      	mov	r0, r4
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	f7f5 fe61 	bl	80003a8 <__aeabi_dsub>
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	f7f6 fac5 	bl	8000c78 <__aeabi_d2iz>
 800a6ee:	9005      	str	r0, [sp, #20]
 800a6f0:	f7f5 ffa8 	bl	8000644 <__aeabi_i2d>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	f7f5 fe54 	bl	80003a8 <__aeabi_dsub>
 800a700:	f1ba 0f00 	cmp.w	sl, #0
 800a704:	4680      	mov	r8, r0
 800a706:	4689      	mov	r9, r1
 800a708:	dd6d      	ble.n	800a7e6 <__kernel_rem_pio2+0x246>
 800a70a:	f10b 31ff 	add.w	r1, fp, #4294967295
 800a70e:	ab0c      	add	r3, sp, #48	@ 0x30
 800a710:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a714:	9c05      	ldr	r4, [sp, #20]
 800a716:	f1ca 0018 	rsb	r0, sl, #24
 800a71a:	fa43 f200 	asr.w	r2, r3, r0
 800a71e:	4414      	add	r4, r2
 800a720:	4082      	lsls	r2, r0
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	aa0c      	add	r2, sp, #48	@ 0x30
 800a726:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a72a:	f1ca 0217 	rsb	r2, sl, #23
 800a72e:	9405      	str	r4, [sp, #20]
 800a730:	4113      	asrs	r3, r2
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	9b00      	ldr	r3, [sp, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	dd64      	ble.n	800a804 <__kernel_rem_pio2+0x264>
 800a73a:	2200      	movs	r2, #0
 800a73c:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800a740:	4614      	mov	r4, r2
 800a742:	9b05      	ldr	r3, [sp, #20]
 800a744:	3301      	adds	r3, #1
 800a746:	9305      	str	r3, [sp, #20]
 800a748:	4593      	cmp	fp, r2
 800a74a:	f300 80ab 	bgt.w	800a8a4 <__kernel_rem_pio2+0x304>
 800a74e:	f1ba 0f00 	cmp.w	sl, #0
 800a752:	dd07      	ble.n	800a764 <__kernel_rem_pio2+0x1c4>
 800a754:	f1ba 0f01 	cmp.w	sl, #1
 800a758:	f000 80b2 	beq.w	800a8c0 <__kernel_rem_pio2+0x320>
 800a75c:	f1ba 0f02 	cmp.w	sl, #2
 800a760:	f000 80b9 	beq.w	800a8d6 <__kernel_rem_pio2+0x336>
 800a764:	9b00      	ldr	r3, [sp, #0]
 800a766:	2b02      	cmp	r3, #2
 800a768:	d14c      	bne.n	800a804 <__kernel_rem_pio2+0x264>
 800a76a:	4642      	mov	r2, r8
 800a76c:	464b      	mov	r3, r9
 800a76e:	2000      	movs	r0, #0
 800a770:	4947      	ldr	r1, [pc, #284]	@ (800a890 <__kernel_rem_pio2+0x2f0>)
 800a772:	f7f5 fe19 	bl	80003a8 <__aeabi_dsub>
 800a776:	4680      	mov	r8, r0
 800a778:	4689      	mov	r9, r1
 800a77a:	2c00      	cmp	r4, #0
 800a77c:	d042      	beq.n	800a804 <__kernel_rem_pio2+0x264>
 800a77e:	4652      	mov	r2, sl
 800a780:	2000      	movs	r0, #0
 800a782:	4943      	ldr	r1, [pc, #268]	@ (800a890 <__kernel_rem_pio2+0x2f0>)
 800a784:	f000 fa30 	bl	800abe8 <scalbn>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f5 fe0a 	bl	80003a8 <__aeabi_dsub>
 800a794:	4680      	mov	r8, r0
 800a796:	4689      	mov	r9, r1
 800a798:	e034      	b.n	800a804 <__kernel_rem_pio2+0x264>
 800a79a:	2200      	movs	r2, #0
 800a79c:	4b3d      	ldr	r3, [pc, #244]	@ (800a894 <__kernel_rem_pio2+0x2f4>)
 800a79e:	4620      	mov	r0, r4
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f7f5 ffb9 	bl	8000718 <__aeabi_dmul>
 800a7a6:	f7f6 fa67 	bl	8000c78 <__aeabi_d2iz>
 800a7aa:	f7f5 ff4b 	bl	8000644 <__aeabi_i2d>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	e9cd 2300 	strd	r2, r3, [sp]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4b37      	ldr	r3, [pc, #220]	@ (800a898 <__kernel_rem_pio2+0x2f8>)
 800a7ba:	f7f5 ffad 	bl	8000718 <__aeabi_dmul>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7f5 fdef 	bl	80003a8 <__aeabi_dsub>
 800a7ca:	f7f6 fa55 	bl	8000c78 <__aeabi_d2iz>
 800a7ce:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a7d2:	f849 0b04 	str.w	r0, [r9], #4
 800a7d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7da:	f7f5 fde7 	bl	80003ac <__adddf3>
 800a7de:	3f01      	subs	r7, #1
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	e763      	b.n	800a6ae <__kernel_rem_pio2+0x10e>
 800a7e6:	d106      	bne.n	800a7f6 <__kernel_rem_pio2+0x256>
 800a7e8:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a7ec:	aa0c      	add	r2, sp, #48	@ 0x30
 800a7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7f2:	15db      	asrs	r3, r3, #23
 800a7f4:	e79d      	b.n	800a732 <__kernel_rem_pio2+0x192>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4b28      	ldr	r3, [pc, #160]	@ (800a89c <__kernel_rem_pio2+0x2fc>)
 800a7fa:	f7f6 fa13 	bl	8000c24 <__aeabi_dcmpge>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d13f      	bne.n	800a882 <__kernel_rem_pio2+0x2e2>
 800a802:	9000      	str	r0, [sp, #0]
 800a804:	2200      	movs	r2, #0
 800a806:	2300      	movs	r3, #0
 800a808:	4640      	mov	r0, r8
 800a80a:	4649      	mov	r1, r9
 800a80c:	f7f6 f9ec 	bl	8000be8 <__aeabi_dcmpeq>
 800a810:	2800      	cmp	r0, #0
 800a812:	f000 80af 	beq.w	800a974 <__kernel_rem_pio2+0x3d4>
 800a816:	2200      	movs	r2, #0
 800a818:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a81c:	9902      	ldr	r1, [sp, #8]
 800a81e:	428b      	cmp	r3, r1
 800a820:	da61      	bge.n	800a8e6 <__kernel_rem_pio2+0x346>
 800a822:	2a00      	cmp	r2, #0
 800a824:	d076      	beq.n	800a914 <__kernel_rem_pio2+0x374>
 800a826:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a82a:	ab0c      	add	r3, sp, #48	@ 0x30
 800a82c:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800a830:	f1aa 0a18 	sub.w	sl, sl, #24
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0f6      	beq.n	800a826 <__kernel_rem_pio2+0x286>
 800a838:	4652      	mov	r2, sl
 800a83a:	2000      	movs	r0, #0
 800a83c:	4914      	ldr	r1, [pc, #80]	@ (800a890 <__kernel_rem_pio2+0x2f0>)
 800a83e:	f000 f9d3 	bl	800abe8 <scalbn>
 800a842:	465d      	mov	r5, fp
 800a844:	4606      	mov	r6, r0
 800a846:	460f      	mov	r7, r1
 800a848:	f04f 0900 	mov.w	r9, #0
 800a84c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a84e:	f8df a044 	ldr.w	sl, [pc, #68]	@ 800a894 <__kernel_rem_pio2+0x2f4>
 800a852:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800a856:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800a85a:	2d00      	cmp	r5, #0
 800a85c:	f280 80c0 	bge.w	800a9e0 <__kernel_rem_pio2+0x440>
 800a860:	465d      	mov	r5, fp
 800a862:	2d00      	cmp	r5, #0
 800a864:	f2c0 80f0 	blt.w	800aa48 <__kernel_rem_pio2+0x4a8>
 800a868:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a0 <__kernel_rem_pio2+0x300>)
 800a86a:	f04f 0900 	mov.w	r9, #0
 800a86e:	9306      	str	r3, [sp, #24]
 800a870:	ab70      	add	r3, sp, #448	@ 0x1c0
 800a872:	f04f 0a00 	mov.w	sl, #0
 800a876:	2700      	movs	r7, #0
 800a878:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 800a87c:	ebab 0605 	sub.w	r6, fp, r5
 800a880:	e0d6      	b.n	800aa30 <__kernel_rem_pio2+0x490>
 800a882:	2302      	movs	r3, #2
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	e758      	b.n	800a73a <__kernel_rem_pio2+0x19a>
 800a888:	0800dca8 	.word	0x0800dca8
 800a88c:	40200000 	.word	0x40200000
 800a890:	3ff00000 	.word	0x3ff00000
 800a894:	3e700000 	.word	0x3e700000
 800a898:	41700000 	.word	0x41700000
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	0800dc68 	.word	0x0800dc68
 800a8a4:	f856 3b04 	ldr.w	r3, [r6], #4
 800a8a8:	b944      	cbnz	r4, 800a8bc <__kernel_rem_pio2+0x31c>
 800a8aa:	b123      	cbz	r3, 800a8b6 <__kernel_rem_pio2+0x316>
 800a8ac:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800a8b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	461c      	mov	r4, r3
 800a8b8:	3201      	adds	r2, #1
 800a8ba:	e745      	b.n	800a748 <__kernel_rem_pio2+0x1a8>
 800a8bc:	1acb      	subs	r3, r1, r3
 800a8be:	e7f7      	b.n	800a8b0 <__kernel_rem_pio2+0x310>
 800a8c0:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a8c4:	ab0c      	add	r3, sp, #48	@ 0x30
 800a8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a8ce:	a90c      	add	r1, sp, #48	@ 0x30
 800a8d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a8d4:	e746      	b.n	800a764 <__kernel_rem_pio2+0x1c4>
 800a8d6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a8da:	ab0c      	add	r3, sp, #48	@ 0x30
 800a8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a8e4:	e7f3      	b.n	800a8ce <__kernel_rem_pio2+0x32e>
 800a8e6:	a90c      	add	r1, sp, #48	@ 0x30
 800a8e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	e794      	b.n	800a81c <__kernel_rem_pio2+0x27c>
 800a8f2:	3401      	adds	r4, #1
 800a8f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d0fa      	beq.n	800a8f2 <__kernel_rem_pio2+0x352>
 800a8fc:	9b08      	ldr	r3, [sp, #32]
 800a8fe:	aa20      	add	r2, sp, #128	@ 0x80
 800a900:	445b      	add	r3, fp
 800a902:	f10b 0801 	add.w	r8, fp, #1
 800a906:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a90a:	445c      	add	r4, fp
 800a90c:	4544      	cmp	r4, r8
 800a90e:	da04      	bge.n	800a91a <__kernel_rem_pio2+0x37a>
 800a910:	46a3      	mov	fp, r4
 800a912:	e6bf      	b.n	800a694 <__kernel_rem_pio2+0xf4>
 800a914:	2401      	movs	r4, #1
 800a916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a918:	e7ec      	b.n	800a8f4 <__kernel_rem_pio2+0x354>
 800a91a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a91c:	46ab      	mov	fp, r5
 800a91e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a922:	f7f5 fe8f 	bl	8000644 <__aeabi_i2d>
 800a926:	f04f 0900 	mov.w	r9, #0
 800a92a:	2600      	movs	r6, #0
 800a92c:	2700      	movs	r7, #0
 800a92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a930:	e9c5 0100 	strd	r0, r1, [r5]
 800a934:	3b08      	subs	r3, #8
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	9b06      	ldr	r3, [sp, #24]
 800a93a:	4599      	cmp	r9, r3
 800a93c:	dd07      	ble.n	800a94e <__kernel_rem_pio2+0x3ae>
 800a93e:	9b07      	ldr	r3, [sp, #28]
 800a940:	f108 0801 	add.w	r8, r8, #1
 800a944:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800a948:	3508      	adds	r5, #8
 800a94a:	9307      	str	r3, [sp, #28]
 800a94c:	e7de      	b.n	800a90c <__kernel_rem_pio2+0x36c>
 800a94e:	9900      	ldr	r1, [sp, #0]
 800a950:	f109 0901 	add.w	r9, r9, #1
 800a954:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a958:	9100      	str	r1, [sp, #0]
 800a95a:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800a95e:	f7f5 fedb 	bl	8000718 <__aeabi_dmul>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4630      	mov	r0, r6
 800a968:	4639      	mov	r1, r7
 800a96a:	f7f5 fd1f 	bl	80003ac <__adddf3>
 800a96e:	4606      	mov	r6, r0
 800a970:	460f      	mov	r7, r1
 800a972:	e7e1      	b.n	800a938 <__kernel_rem_pio2+0x398>
 800a974:	f1ca 0200 	rsb	r2, sl, #0
 800a978:	4640      	mov	r0, r8
 800a97a:	4649      	mov	r1, r9
 800a97c:	f000 f934 	bl	800abe8 <scalbn>
 800a980:	2200      	movs	r2, #0
 800a982:	4b97      	ldr	r3, [pc, #604]	@ (800abe0 <__kernel_rem_pio2+0x640>)
 800a984:	4604      	mov	r4, r0
 800a986:	460d      	mov	r5, r1
 800a988:	f7f6 f94c 	bl	8000c24 <__aeabi_dcmpge>
 800a98c:	b300      	cbz	r0, 800a9d0 <__kernel_rem_pio2+0x430>
 800a98e:	2200      	movs	r2, #0
 800a990:	4b94      	ldr	r3, [pc, #592]	@ (800abe4 <__kernel_rem_pio2+0x644>)
 800a992:	4620      	mov	r0, r4
 800a994:	4629      	mov	r1, r5
 800a996:	f7f5 febf 	bl	8000718 <__aeabi_dmul>
 800a99a:	f7f6 f96d 	bl	8000c78 <__aeabi_d2iz>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	f7f5 fe50 	bl	8000644 <__aeabi_i2d>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4b8e      	ldr	r3, [pc, #568]	@ (800abe0 <__kernel_rem_pio2+0x640>)
 800a9a8:	f7f5 feb6 	bl	8000718 <__aeabi_dmul>
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4620      	mov	r0, r4
 800a9b4:	f7f5 fcf8 	bl	80003a8 <__aeabi_dsub>
 800a9b8:	f7f6 f95e 	bl	8000c78 <__aeabi_d2iz>
 800a9bc:	ab0c      	add	r3, sp, #48	@ 0x30
 800a9be:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a9c2:	f10b 0b01 	add.w	fp, fp, #1
 800a9c6:	f10a 0a18 	add.w	sl, sl, #24
 800a9ca:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800a9ce:	e733      	b.n	800a838 <__kernel_rem_pio2+0x298>
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	f7f6 f950 	bl	8000c78 <__aeabi_d2iz>
 800a9d8:	ab0c      	add	r3, sp, #48	@ 0x30
 800a9da:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800a9de:	e72b      	b.n	800a838 <__kernel_rem_pio2+0x298>
 800a9e0:	ab0c      	add	r3, sp, #48	@ 0x30
 800a9e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9e6:	f7f5 fe2d 	bl	8000644 <__aeabi_i2d>
 800a9ea:	4632      	mov	r2, r6
 800a9ec:	463b      	mov	r3, r7
 800a9ee:	f7f5 fe93 	bl	8000718 <__aeabi_dmul>
 800a9f2:	464a      	mov	r2, r9
 800a9f4:	e868 0102 	strd	r0, r1, [r8], #-8
 800a9f8:	4653      	mov	r3, sl
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	f7f5 fe8b 	bl	8000718 <__aeabi_dmul>
 800aa02:	3d01      	subs	r5, #1
 800aa04:	4606      	mov	r6, r0
 800aa06:	460f      	mov	r7, r1
 800aa08:	e727      	b.n	800a85a <__kernel_rem_pio2+0x2ba>
 800aa0a:	f8dd c018 	ldr.w	ip, [sp, #24]
 800aa0e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800aa12:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800aa16:	f8cd c018 	str.w	ip, [sp, #24]
 800aa1a:	f7f5 fe7d 	bl	8000718 <__aeabi_dmul>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4648      	mov	r0, r9
 800aa24:	4651      	mov	r1, sl
 800aa26:	f7f5 fcc1 	bl	80003ac <__adddf3>
 800aa2a:	4681      	mov	r9, r0
 800aa2c:	468a      	mov	sl, r1
 800aa2e:	3701      	adds	r7, #1
 800aa30:	9b02      	ldr	r3, [sp, #8]
 800aa32:	429f      	cmp	r7, r3
 800aa34:	dc01      	bgt.n	800aa3a <__kernel_rem_pio2+0x49a>
 800aa36:	42be      	cmp	r6, r7
 800aa38:	dae7      	bge.n	800aa0a <__kernel_rem_pio2+0x46a>
 800aa3a:	ab48      	add	r3, sp, #288	@ 0x120
 800aa3c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800aa40:	e9c6 9a00 	strd	r9, sl, [r6]
 800aa44:	3d01      	subs	r5, #1
 800aa46:	e70c      	b.n	800a862 <__kernel_rem_pio2+0x2c2>
 800aa48:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	dc09      	bgt.n	800aa62 <__kernel_rem_pio2+0x4c2>
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dc2c      	bgt.n	800aaac <__kernel_rem_pio2+0x50c>
 800aa52:	d04e      	beq.n	800aaf2 <__kernel_rem_pio2+0x552>
 800aa54:	9b05      	ldr	r3, [sp, #20]
 800aa56:	f003 0007 	and.w	r0, r3, #7
 800aa5a:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800aa5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa62:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d1f5      	bne.n	800aa54 <__kernel_rem_pio2+0x4b4>
 800aa68:	ab48      	add	r3, sp, #288	@ 0x120
 800aa6a:	441c      	add	r4, r3
 800aa6c:	4625      	mov	r5, r4
 800aa6e:	46da      	mov	sl, fp
 800aa70:	f1ba 0f00 	cmp.w	sl, #0
 800aa74:	dc63      	bgt.n	800ab3e <__kernel_rem_pio2+0x59e>
 800aa76:	4625      	mov	r5, r4
 800aa78:	46da      	mov	sl, fp
 800aa7a:	f1ba 0f01 	cmp.w	sl, #1
 800aa7e:	dc7b      	bgt.n	800ab78 <__kernel_rem_pio2+0x5d8>
 800aa80:	2000      	movs	r0, #0
 800aa82:	2100      	movs	r1, #0
 800aa84:	f1bb 0f01 	cmp.w	fp, #1
 800aa88:	f300 8093 	bgt.w	800abb2 <__kernel_rem_pio2+0x612>
 800aa8c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800aa90:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800aa94:	9b00      	ldr	r3, [sp, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f040 8092 	bne.w	800abc0 <__kernel_rem_pio2+0x620>
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	e9c3 7800 	strd	r7, r8, [r3]
 800aaa2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800aaa6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aaaa:	e7d3      	b.n	800aa54 <__kernel_rem_pio2+0x4b4>
 800aaac:	465d      	mov	r5, fp
 800aaae:	2000      	movs	r0, #0
 800aab0:	2100      	movs	r1, #0
 800aab2:	ab48      	add	r3, sp, #288	@ 0x120
 800aab4:	441c      	add	r4, r3
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	da32      	bge.n	800ab20 <__kernel_rem_pio2+0x580>
 800aaba:	9b00      	ldr	r3, [sp, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d035      	beq.n	800ab2c <__kernel_rem_pio2+0x58c>
 800aac0:	4602      	mov	r2, r0
 800aac2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aac6:	9c04      	ldr	r4, [sp, #16]
 800aac8:	2501      	movs	r5, #1
 800aaca:	e9c4 2300 	strd	r2, r3, [r4]
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800aad6:	f7f5 fc67 	bl	80003a8 <__aeabi_dsub>
 800aada:	ac48      	add	r4, sp, #288	@ 0x120
 800aadc:	45ab      	cmp	fp, r5
 800aade:	da28      	bge.n	800ab32 <__kernel_rem_pio2+0x592>
 800aae0:	9b00      	ldr	r3, [sp, #0]
 800aae2:	b113      	cbz	r3, 800aaea <__kernel_rem_pio2+0x54a>
 800aae4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aae8:	4619      	mov	r1, r3
 800aaea:	9b04      	ldr	r3, [sp, #16]
 800aaec:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aaf0:	e7b0      	b.n	800aa54 <__kernel_rem_pio2+0x4b4>
 800aaf2:	2000      	movs	r0, #0
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	ab48      	add	r3, sp, #288	@ 0x120
 800aaf8:	441c      	add	r4, r3
 800aafa:	f1bb 0f00 	cmp.w	fp, #0
 800aafe:	da08      	bge.n	800ab12 <__kernel_rem_pio2+0x572>
 800ab00:	9b00      	ldr	r3, [sp, #0]
 800ab02:	b113      	cbz	r3, 800ab0a <__kernel_rem_pio2+0x56a>
 800ab04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab08:	4619      	mov	r1, r3
 800ab0a:	9b04      	ldr	r3, [sp, #16]
 800ab0c:	e9c3 0100 	strd	r0, r1, [r3]
 800ab10:	e7a0      	b.n	800aa54 <__kernel_rem_pio2+0x4b4>
 800ab12:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800ab16:	f7f5 fc49 	bl	80003ac <__adddf3>
 800ab1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab1e:	e7ec      	b.n	800aafa <__kernel_rem_pio2+0x55a>
 800ab20:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800ab24:	f7f5 fc42 	bl	80003ac <__adddf3>
 800ab28:	3d01      	subs	r5, #1
 800ab2a:	e7c4      	b.n	800aab6 <__kernel_rem_pio2+0x516>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	e7c9      	b.n	800aac6 <__kernel_rem_pio2+0x526>
 800ab32:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800ab36:	f7f5 fc39 	bl	80003ac <__adddf3>
 800ab3a:	3501      	adds	r5, #1
 800ab3c:	e7ce      	b.n	800aadc <__kernel_rem_pio2+0x53c>
 800ab3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab42:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800ab46:	4640      	mov	r0, r8
 800ab48:	4649      	mov	r1, r9
 800ab4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab4e:	f7f5 fc2d 	bl	80003ac <__adddf3>
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4606      	mov	r6, r0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	4649      	mov	r1, r9
 800ab5e:	f7f5 fc23 	bl	80003a8 <__aeabi_dsub>
 800ab62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab66:	f7f5 fc21 	bl	80003ac <__adddf3>
 800ab6a:	e865 0102 	strd	r0, r1, [r5], #-8
 800ab6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab72:	e9c5 6700 	strd	r6, r7, [r5]
 800ab76:	e77b      	b.n	800aa70 <__kernel_rem_pio2+0x4d0>
 800ab78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab7c:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800ab80:	4640      	mov	r0, r8
 800ab82:	4649      	mov	r1, r9
 800ab84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab88:	f7f5 fc10 	bl	80003ac <__adddf3>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4606      	mov	r6, r0
 800ab92:	460f      	mov	r7, r1
 800ab94:	4640      	mov	r0, r8
 800ab96:	4649      	mov	r1, r9
 800ab98:	f7f5 fc06 	bl	80003a8 <__aeabi_dsub>
 800ab9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aba0:	f7f5 fc04 	bl	80003ac <__adddf3>
 800aba4:	e865 0102 	strd	r0, r1, [r5], #-8
 800aba8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abac:	e9c5 6700 	strd	r6, r7, [r5]
 800abb0:	e763      	b.n	800aa7a <__kernel_rem_pio2+0x4da>
 800abb2:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800abb6:	f7f5 fbf9 	bl	80003ac <__adddf3>
 800abba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800abbe:	e761      	b.n	800aa84 <__kernel_rem_pio2+0x4e4>
 800abc0:	9b04      	ldr	r3, [sp, #16]
 800abc2:	9a04      	ldr	r2, [sp, #16]
 800abc4:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800abc8:	601f      	str	r7, [r3, #0]
 800abca:	605c      	str	r4, [r3, #4]
 800abcc:	609d      	str	r5, [r3, #8]
 800abce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800abd2:	60d3      	str	r3, [r2, #12]
 800abd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abd8:	6110      	str	r0, [r2, #16]
 800abda:	6153      	str	r3, [r2, #20]
 800abdc:	e73a      	b.n	800aa54 <__kernel_rem_pio2+0x4b4>
 800abde:	bf00      	nop
 800abe0:	41700000 	.word	0x41700000
 800abe4:	3e700000 	.word	0x3e700000

0800abe8 <scalbn>:
 800abe8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800abec:	4616      	mov	r6, r2
 800abee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800abf2:	4683      	mov	fp, r0
 800abf4:	468c      	mov	ip, r1
 800abf6:	460b      	mov	r3, r1
 800abf8:	b982      	cbnz	r2, 800ac1c <scalbn+0x34>
 800abfa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abfe:	4303      	orrs	r3, r0
 800ac00:	d039      	beq.n	800ac76 <scalbn+0x8e>
 800ac02:	4b2f      	ldr	r3, [pc, #188]	@ (800acc0 <scalbn+0xd8>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	f7f5 fd87 	bl	8000718 <__aeabi_dmul>
 800ac0a:	4b2e      	ldr	r3, [pc, #184]	@ (800acc4 <scalbn+0xdc>)
 800ac0c:	4683      	mov	fp, r0
 800ac0e:	429e      	cmp	r6, r3
 800ac10:	468c      	mov	ip, r1
 800ac12:	da0d      	bge.n	800ac30 <scalbn+0x48>
 800ac14:	a326      	add	r3, pc, #152	@ (adr r3, 800acb0 <scalbn+0xc8>)
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	e01b      	b.n	800ac54 <scalbn+0x6c>
 800ac1c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800ac20:	42ba      	cmp	r2, r7
 800ac22:	d109      	bne.n	800ac38 <scalbn+0x50>
 800ac24:	4602      	mov	r2, r0
 800ac26:	f7f5 fbc1 	bl	80003ac <__adddf3>
 800ac2a:	4683      	mov	fp, r0
 800ac2c:	468c      	mov	ip, r1
 800ac2e:	e022      	b.n	800ac76 <scalbn+0x8e>
 800ac30:	460b      	mov	r3, r1
 800ac32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ac36:	3a36      	subs	r2, #54	@ 0x36
 800ac38:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ac3c:	428e      	cmp	r6, r1
 800ac3e:	dd0c      	ble.n	800ac5a <scalbn+0x72>
 800ac40:	a31d      	add	r3, pc, #116	@ (adr r3, 800acb8 <scalbn+0xd0>)
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	461c      	mov	r4, r3
 800ac48:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800ac4c:	f361 74df 	bfi	r4, r1, #31, #1
 800ac50:	4621      	mov	r1, r4
 800ac52:	481d      	ldr	r0, [pc, #116]	@ (800acc8 <scalbn+0xe0>)
 800ac54:	f7f5 fd60 	bl	8000718 <__aeabi_dmul>
 800ac58:	e7e7      	b.n	800ac2a <scalbn+0x42>
 800ac5a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ac5e:	4432      	add	r2, r6
 800ac60:	428a      	cmp	r2, r1
 800ac62:	dced      	bgt.n	800ac40 <scalbn+0x58>
 800ac64:	2a00      	cmp	r2, #0
 800ac66:	dd0a      	ble.n	800ac7e <scalbn+0x96>
 800ac68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ac6c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ac70:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac74:	46ac      	mov	ip, r5
 800ac76:	4658      	mov	r0, fp
 800ac78:	4661      	mov	r1, ip
 800ac7a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800ac7e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ac82:	da09      	bge.n	800ac98 <scalbn+0xb0>
 800ac84:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ac88:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ac8c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ac90:	480e      	ldr	r0, [pc, #56]	@ (800accc <scalbn+0xe4>)
 800ac92:	f041 011f 	orr.w	r1, r1, #31
 800ac96:	e7bd      	b.n	800ac14 <scalbn+0x2c>
 800ac98:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ac9c:	3236      	adds	r2, #54	@ 0x36
 800ac9e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800aca2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aca6:	4658      	mov	r0, fp
 800aca8:	4629      	mov	r1, r5
 800acaa:	2200      	movs	r2, #0
 800acac:	4b08      	ldr	r3, [pc, #32]	@ (800acd0 <scalbn+0xe8>)
 800acae:	e7d1      	b.n	800ac54 <scalbn+0x6c>
 800acb0:	c2f8f359 	.word	0xc2f8f359
 800acb4:	01a56e1f 	.word	0x01a56e1f
 800acb8:	8800759c 	.word	0x8800759c
 800acbc:	7e37e43c 	.word	0x7e37e43c
 800acc0:	43500000 	.word	0x43500000
 800acc4:	ffff3cb0 	.word	0xffff3cb0
 800acc8:	8800759c 	.word	0x8800759c
 800accc:	c2f8f359 	.word	0xc2f8f359
 800acd0:	3c900000 	.word	0x3c900000

0800acd4 <abort>:
 800acd4:	2006      	movs	r0, #6
 800acd6:	b508      	push	{r3, lr}
 800acd8:	f000 fe54 	bl	800b984 <raise>
 800acdc:	2001      	movs	r0, #1
 800acde:	f7fb fc7a 	bl	80065d6 <_exit>
	...

0800ace4 <malloc>:
 800ace4:	4b02      	ldr	r3, [pc, #8]	@ (800acf0 <malloc+0xc>)
 800ace6:	4601      	mov	r1, r0
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	f000 b82d 	b.w	800ad48 <_malloc_r>
 800acee:	bf00      	nop
 800acf0:	2000002c 	.word	0x2000002c

0800acf4 <free>:
 800acf4:	4b02      	ldr	r3, [pc, #8]	@ (800ad00 <free+0xc>)
 800acf6:	4601      	mov	r1, r0
 800acf8:	6818      	ldr	r0, [r3, #0]
 800acfa:	f001 bd55 	b.w	800c7a8 <_free_r>
 800acfe:	bf00      	nop
 800ad00:	2000002c 	.word	0x2000002c

0800ad04 <sbrk_aligned>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	4e0f      	ldr	r6, [pc, #60]	@ (800ad44 <sbrk_aligned+0x40>)
 800ad08:	460c      	mov	r4, r1
 800ad0a:	6831      	ldr	r1, [r6, #0]
 800ad0c:	4605      	mov	r5, r0
 800ad0e:	b911      	cbnz	r1, 800ad16 <sbrk_aligned+0x12>
 800ad10:	f000 fe8c 	bl	800ba2c <_sbrk_r>
 800ad14:	6030      	str	r0, [r6, #0]
 800ad16:	4621      	mov	r1, r4
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f000 fe87 	bl	800ba2c <_sbrk_r>
 800ad1e:	1c43      	adds	r3, r0, #1
 800ad20:	d103      	bne.n	800ad2a <sbrk_aligned+0x26>
 800ad22:	f04f 34ff 	mov.w	r4, #4294967295
 800ad26:	4620      	mov	r0, r4
 800ad28:	bd70      	pop	{r4, r5, r6, pc}
 800ad2a:	1cc4      	adds	r4, r0, #3
 800ad2c:	f024 0403 	bic.w	r4, r4, #3
 800ad30:	42a0      	cmp	r0, r4
 800ad32:	d0f8      	beq.n	800ad26 <sbrk_aligned+0x22>
 800ad34:	1a21      	subs	r1, r4, r0
 800ad36:	4628      	mov	r0, r5
 800ad38:	f000 fe78 	bl	800ba2c <_sbrk_r>
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	d1f2      	bne.n	800ad26 <sbrk_aligned+0x22>
 800ad40:	e7ef      	b.n	800ad22 <sbrk_aligned+0x1e>
 800ad42:	bf00      	nop
 800ad44:	20000770 	.word	0x20000770

0800ad48 <_malloc_r>:
 800ad48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad4c:	1ccd      	adds	r5, r1, #3
 800ad4e:	f025 0503 	bic.w	r5, r5, #3
 800ad52:	3508      	adds	r5, #8
 800ad54:	2d0c      	cmp	r5, #12
 800ad56:	bf38      	it	cc
 800ad58:	250c      	movcc	r5, #12
 800ad5a:	2d00      	cmp	r5, #0
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	db01      	blt.n	800ad64 <_malloc_r+0x1c>
 800ad60:	42a9      	cmp	r1, r5
 800ad62:	d904      	bls.n	800ad6e <_malloc_r+0x26>
 800ad64:	230c      	movs	r3, #12
 800ad66:	6033      	str	r3, [r6, #0]
 800ad68:	2000      	movs	r0, #0
 800ad6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ae44 <_malloc_r+0xfc>
 800ad72:	f000 f869 	bl	800ae48 <__malloc_lock>
 800ad76:	f8d8 3000 	ldr.w	r3, [r8]
 800ad7a:	461c      	mov	r4, r3
 800ad7c:	bb44      	cbnz	r4, 800add0 <_malloc_r+0x88>
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4630      	mov	r0, r6
 800ad82:	f7ff ffbf 	bl	800ad04 <sbrk_aligned>
 800ad86:	1c43      	adds	r3, r0, #1
 800ad88:	4604      	mov	r4, r0
 800ad8a:	d158      	bne.n	800ae3e <_malloc_r+0xf6>
 800ad8c:	f8d8 4000 	ldr.w	r4, [r8]
 800ad90:	4627      	mov	r7, r4
 800ad92:	2f00      	cmp	r7, #0
 800ad94:	d143      	bne.n	800ae1e <_malloc_r+0xd6>
 800ad96:	2c00      	cmp	r4, #0
 800ad98:	d04b      	beq.n	800ae32 <_malloc_r+0xea>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	4630      	mov	r0, r6
 800ada0:	eb04 0903 	add.w	r9, r4, r3
 800ada4:	f000 fe42 	bl	800ba2c <_sbrk_r>
 800ada8:	4581      	cmp	r9, r0
 800adaa:	d142      	bne.n	800ae32 <_malloc_r+0xea>
 800adac:	6821      	ldr	r1, [r4, #0]
 800adae:	4630      	mov	r0, r6
 800adb0:	1a6d      	subs	r5, r5, r1
 800adb2:	4629      	mov	r1, r5
 800adb4:	f7ff ffa6 	bl	800ad04 <sbrk_aligned>
 800adb8:	3001      	adds	r0, #1
 800adba:	d03a      	beq.n	800ae32 <_malloc_r+0xea>
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	442b      	add	r3, r5
 800adc0:	6023      	str	r3, [r4, #0]
 800adc2:	f8d8 3000 	ldr.w	r3, [r8]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	bb62      	cbnz	r2, 800ae24 <_malloc_r+0xdc>
 800adca:	f8c8 7000 	str.w	r7, [r8]
 800adce:	e00f      	b.n	800adf0 <_malloc_r+0xa8>
 800add0:	6822      	ldr	r2, [r4, #0]
 800add2:	1b52      	subs	r2, r2, r5
 800add4:	d420      	bmi.n	800ae18 <_malloc_r+0xd0>
 800add6:	2a0b      	cmp	r2, #11
 800add8:	d917      	bls.n	800ae0a <_malloc_r+0xc2>
 800adda:	1961      	adds	r1, r4, r5
 800addc:	42a3      	cmp	r3, r4
 800adde:	6025      	str	r5, [r4, #0]
 800ade0:	bf18      	it	ne
 800ade2:	6059      	strne	r1, [r3, #4]
 800ade4:	6863      	ldr	r3, [r4, #4]
 800ade6:	bf08      	it	eq
 800ade8:	f8c8 1000 	streq.w	r1, [r8]
 800adec:	5162      	str	r2, [r4, r5]
 800adee:	604b      	str	r3, [r1, #4]
 800adf0:	4630      	mov	r0, r6
 800adf2:	f000 f82f 	bl	800ae54 <__malloc_unlock>
 800adf6:	f104 000b 	add.w	r0, r4, #11
 800adfa:	1d23      	adds	r3, r4, #4
 800adfc:	f020 0007 	bic.w	r0, r0, #7
 800ae00:	1ac2      	subs	r2, r0, r3
 800ae02:	bf1c      	itt	ne
 800ae04:	1a1b      	subne	r3, r3, r0
 800ae06:	50a3      	strne	r3, [r4, r2]
 800ae08:	e7af      	b.n	800ad6a <_malloc_r+0x22>
 800ae0a:	6862      	ldr	r2, [r4, #4]
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	bf0c      	ite	eq
 800ae10:	f8c8 2000 	streq.w	r2, [r8]
 800ae14:	605a      	strne	r2, [r3, #4]
 800ae16:	e7eb      	b.n	800adf0 <_malloc_r+0xa8>
 800ae18:	4623      	mov	r3, r4
 800ae1a:	6864      	ldr	r4, [r4, #4]
 800ae1c:	e7ae      	b.n	800ad7c <_malloc_r+0x34>
 800ae1e:	463c      	mov	r4, r7
 800ae20:	687f      	ldr	r7, [r7, #4]
 800ae22:	e7b6      	b.n	800ad92 <_malloc_r+0x4a>
 800ae24:	461a      	mov	r2, r3
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d1fb      	bne.n	800ae24 <_malloc_r+0xdc>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	6053      	str	r3, [r2, #4]
 800ae30:	e7de      	b.n	800adf0 <_malloc_r+0xa8>
 800ae32:	230c      	movs	r3, #12
 800ae34:	4630      	mov	r0, r6
 800ae36:	6033      	str	r3, [r6, #0]
 800ae38:	f000 f80c 	bl	800ae54 <__malloc_unlock>
 800ae3c:	e794      	b.n	800ad68 <_malloc_r+0x20>
 800ae3e:	6005      	str	r5, [r0, #0]
 800ae40:	e7d6      	b.n	800adf0 <_malloc_r+0xa8>
 800ae42:	bf00      	nop
 800ae44:	20000774 	.word	0x20000774

0800ae48 <__malloc_lock>:
 800ae48:	4801      	ldr	r0, [pc, #4]	@ (800ae50 <__malloc_lock+0x8>)
 800ae4a:	f000 be3c 	b.w	800bac6 <__retarget_lock_acquire_recursive>
 800ae4e:	bf00      	nop
 800ae50:	200008b8 	.word	0x200008b8

0800ae54 <__malloc_unlock>:
 800ae54:	4801      	ldr	r0, [pc, #4]	@ (800ae5c <__malloc_unlock+0x8>)
 800ae56:	f000 be37 	b.w	800bac8 <__retarget_lock_release_recursive>
 800ae5a:	bf00      	nop
 800ae5c:	200008b8 	.word	0x200008b8

0800ae60 <__cvt>:
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae66:	461d      	mov	r5, r3
 800ae68:	bfbb      	ittet	lt
 800ae6a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800ae6e:	461d      	movlt	r5, r3
 800ae70:	2300      	movge	r3, #0
 800ae72:	232d      	movlt	r3, #45	@ 0x2d
 800ae74:	b088      	sub	sp, #32
 800ae76:	4614      	mov	r4, r2
 800ae78:	bfb8      	it	lt
 800ae7a:	4614      	movlt	r4, r2
 800ae7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ae7e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800ae80:	7013      	strb	r3, [r2, #0]
 800ae82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae84:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800ae88:	f023 0820 	bic.w	r8, r3, #32
 800ae8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ae90:	d005      	beq.n	800ae9e <__cvt+0x3e>
 800ae92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ae96:	d100      	bne.n	800ae9a <__cvt+0x3a>
 800ae98:	3601      	adds	r6, #1
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	e000      	b.n	800aea0 <__cvt+0x40>
 800ae9e:	2303      	movs	r3, #3
 800aea0:	aa07      	add	r2, sp, #28
 800aea2:	9204      	str	r2, [sp, #16]
 800aea4:	aa06      	add	r2, sp, #24
 800aea6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800aeaa:	e9cd 3600 	strd	r3, r6, [sp]
 800aeae:	4622      	mov	r2, r4
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	f000 feb1 	bl	800bc18 <_dtoa_r>
 800aeb6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aeba:	4607      	mov	r7, r0
 800aebc:	d119      	bne.n	800aef2 <__cvt+0x92>
 800aebe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aec0:	07db      	lsls	r3, r3, #31
 800aec2:	d50e      	bpl.n	800aee2 <__cvt+0x82>
 800aec4:	eb00 0906 	add.w	r9, r0, r6
 800aec8:	2200      	movs	r2, #0
 800aeca:	2300      	movs	r3, #0
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fe8a 	bl	8000be8 <__aeabi_dcmpeq>
 800aed4:	b108      	cbz	r0, 800aeda <__cvt+0x7a>
 800aed6:	f8cd 901c 	str.w	r9, [sp, #28]
 800aeda:	2230      	movs	r2, #48	@ 0x30
 800aedc:	9b07      	ldr	r3, [sp, #28]
 800aede:	454b      	cmp	r3, r9
 800aee0:	d31e      	bcc.n	800af20 <__cvt+0xc0>
 800aee2:	4638      	mov	r0, r7
 800aee4:	9b07      	ldr	r3, [sp, #28]
 800aee6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800aee8:	1bdb      	subs	r3, r3, r7
 800aeea:	6013      	str	r3, [r2, #0]
 800aeec:	b008      	add	sp, #32
 800aeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aef6:	eb00 0906 	add.w	r9, r0, r6
 800aefa:	d1e5      	bne.n	800aec8 <__cvt+0x68>
 800aefc:	7803      	ldrb	r3, [r0, #0]
 800aefe:	2b30      	cmp	r3, #48	@ 0x30
 800af00:	d10a      	bne.n	800af18 <__cvt+0xb8>
 800af02:	2200      	movs	r2, #0
 800af04:	2300      	movs	r3, #0
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	f7f5 fe6d 	bl	8000be8 <__aeabi_dcmpeq>
 800af0e:	b918      	cbnz	r0, 800af18 <__cvt+0xb8>
 800af10:	f1c6 0601 	rsb	r6, r6, #1
 800af14:	f8ca 6000 	str.w	r6, [sl]
 800af18:	f8da 3000 	ldr.w	r3, [sl]
 800af1c:	4499      	add	r9, r3
 800af1e:	e7d3      	b.n	800aec8 <__cvt+0x68>
 800af20:	1c59      	adds	r1, r3, #1
 800af22:	9107      	str	r1, [sp, #28]
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	e7d9      	b.n	800aedc <__cvt+0x7c>

0800af28 <__exponent>:
 800af28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af2a:	2900      	cmp	r1, #0
 800af2c:	bfb6      	itet	lt
 800af2e:	232d      	movlt	r3, #45	@ 0x2d
 800af30:	232b      	movge	r3, #43	@ 0x2b
 800af32:	4249      	neglt	r1, r1
 800af34:	2909      	cmp	r1, #9
 800af36:	7002      	strb	r2, [r0, #0]
 800af38:	7043      	strb	r3, [r0, #1]
 800af3a:	dd29      	ble.n	800af90 <__exponent+0x68>
 800af3c:	f10d 0307 	add.w	r3, sp, #7
 800af40:	461d      	mov	r5, r3
 800af42:	270a      	movs	r7, #10
 800af44:	fbb1 f6f7 	udiv	r6, r1, r7
 800af48:	461a      	mov	r2, r3
 800af4a:	fb07 1416 	mls	r4, r7, r6, r1
 800af4e:	3430      	adds	r4, #48	@ 0x30
 800af50:	f802 4c01 	strb.w	r4, [r2, #-1]
 800af54:	460c      	mov	r4, r1
 800af56:	2c63      	cmp	r4, #99	@ 0x63
 800af58:	4631      	mov	r1, r6
 800af5a:	f103 33ff 	add.w	r3, r3, #4294967295
 800af5e:	dcf1      	bgt.n	800af44 <__exponent+0x1c>
 800af60:	3130      	adds	r1, #48	@ 0x30
 800af62:	1e94      	subs	r4, r2, #2
 800af64:	f803 1c01 	strb.w	r1, [r3, #-1]
 800af68:	4623      	mov	r3, r4
 800af6a:	1c41      	adds	r1, r0, #1
 800af6c:	42ab      	cmp	r3, r5
 800af6e:	d30a      	bcc.n	800af86 <__exponent+0x5e>
 800af70:	f10d 0309 	add.w	r3, sp, #9
 800af74:	1a9b      	subs	r3, r3, r2
 800af76:	42ac      	cmp	r4, r5
 800af78:	bf88      	it	hi
 800af7a:	2300      	movhi	r3, #0
 800af7c:	3302      	adds	r3, #2
 800af7e:	4403      	add	r3, r0
 800af80:	1a18      	subs	r0, r3, r0
 800af82:	b003      	add	sp, #12
 800af84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af86:	f813 6b01 	ldrb.w	r6, [r3], #1
 800af8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800af8e:	e7ed      	b.n	800af6c <__exponent+0x44>
 800af90:	2330      	movs	r3, #48	@ 0x30
 800af92:	3130      	adds	r1, #48	@ 0x30
 800af94:	7083      	strb	r3, [r0, #2]
 800af96:	70c1      	strb	r1, [r0, #3]
 800af98:	1d03      	adds	r3, r0, #4
 800af9a:	e7f1      	b.n	800af80 <__exponent+0x58>

0800af9c <_printf_float>:
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	b091      	sub	sp, #68	@ 0x44
 800afa2:	460c      	mov	r4, r1
 800afa4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800afa8:	4616      	mov	r6, r2
 800afaa:	461f      	mov	r7, r3
 800afac:	4605      	mov	r5, r0
 800afae:	f000 fcf1 	bl	800b994 <_localeconv_r>
 800afb2:	6803      	ldr	r3, [r0, #0]
 800afb4:	4618      	mov	r0, r3
 800afb6:	9308      	str	r3, [sp, #32]
 800afb8:	f7f5 f936 	bl	8000228 <strlen>
 800afbc:	2300      	movs	r3, #0
 800afbe:	930e      	str	r3, [sp, #56]	@ 0x38
 800afc0:	f8d8 3000 	ldr.w	r3, [r8]
 800afc4:	9009      	str	r0, [sp, #36]	@ 0x24
 800afc6:	3307      	adds	r3, #7
 800afc8:	f023 0307 	bic.w	r3, r3, #7
 800afcc:	f103 0208 	add.w	r2, r3, #8
 800afd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800afd4:	f8d4 b000 	ldr.w	fp, [r4]
 800afd8:	f8c8 2000 	str.w	r2, [r8]
 800afdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afe0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800afe4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afe6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800afea:	f04f 32ff 	mov.w	r2, #4294967295
 800afee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aff2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aff6:	4b9c      	ldr	r3, [pc, #624]	@ (800b268 <_printf_float+0x2cc>)
 800aff8:	f7f5 fe28 	bl	8000c4c <__aeabi_dcmpun>
 800affc:	bb70      	cbnz	r0, 800b05c <_printf_float+0xc0>
 800affe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b002:	f04f 32ff 	mov.w	r2, #4294967295
 800b006:	4b98      	ldr	r3, [pc, #608]	@ (800b268 <_printf_float+0x2cc>)
 800b008:	f7f5 fe02 	bl	8000c10 <__aeabi_dcmple>
 800b00c:	bb30      	cbnz	r0, 800b05c <_printf_float+0xc0>
 800b00e:	2200      	movs	r2, #0
 800b010:	2300      	movs	r3, #0
 800b012:	4640      	mov	r0, r8
 800b014:	4649      	mov	r1, r9
 800b016:	f7f5 fdf1 	bl	8000bfc <__aeabi_dcmplt>
 800b01a:	b110      	cbz	r0, 800b022 <_printf_float+0x86>
 800b01c:	232d      	movs	r3, #45	@ 0x2d
 800b01e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b022:	4a92      	ldr	r2, [pc, #584]	@ (800b26c <_printf_float+0x2d0>)
 800b024:	4b92      	ldr	r3, [pc, #584]	@ (800b270 <_printf_float+0x2d4>)
 800b026:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b02a:	bf94      	ite	ls
 800b02c:	4690      	movls	r8, r2
 800b02e:	4698      	movhi	r8, r3
 800b030:	2303      	movs	r3, #3
 800b032:	f04f 0900 	mov.w	r9, #0
 800b036:	6123      	str	r3, [r4, #16]
 800b038:	f02b 0304 	bic.w	r3, fp, #4
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	4633      	mov	r3, r6
 800b040:	4621      	mov	r1, r4
 800b042:	4628      	mov	r0, r5
 800b044:	9700      	str	r7, [sp, #0]
 800b046:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b048:	f000 f9d4 	bl	800b3f4 <_printf_common>
 800b04c:	3001      	adds	r0, #1
 800b04e:	f040 8090 	bne.w	800b172 <_printf_float+0x1d6>
 800b052:	f04f 30ff 	mov.w	r0, #4294967295
 800b056:	b011      	add	sp, #68	@ 0x44
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	4642      	mov	r2, r8
 800b05e:	464b      	mov	r3, r9
 800b060:	4640      	mov	r0, r8
 800b062:	4649      	mov	r1, r9
 800b064:	f7f5 fdf2 	bl	8000c4c <__aeabi_dcmpun>
 800b068:	b148      	cbz	r0, 800b07e <_printf_float+0xe2>
 800b06a:	464b      	mov	r3, r9
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	bfb8      	it	lt
 800b070:	232d      	movlt	r3, #45	@ 0x2d
 800b072:	4a80      	ldr	r2, [pc, #512]	@ (800b274 <_printf_float+0x2d8>)
 800b074:	bfb8      	it	lt
 800b076:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b07a:	4b7f      	ldr	r3, [pc, #508]	@ (800b278 <_printf_float+0x2dc>)
 800b07c:	e7d3      	b.n	800b026 <_printf_float+0x8a>
 800b07e:	6863      	ldr	r3, [r4, #4]
 800b080:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b084:	1c5a      	adds	r2, r3, #1
 800b086:	d13f      	bne.n	800b108 <_printf_float+0x16c>
 800b088:	2306      	movs	r3, #6
 800b08a:	6063      	str	r3, [r4, #4]
 800b08c:	2200      	movs	r2, #0
 800b08e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	9206      	str	r2, [sp, #24]
 800b096:	aa0e      	add	r2, sp, #56	@ 0x38
 800b098:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b09c:	aa0d      	add	r2, sp, #52	@ 0x34
 800b09e:	9203      	str	r2, [sp, #12]
 800b0a0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b0a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b0a8:	6863      	ldr	r3, [r4, #4]
 800b0aa:	4642      	mov	r2, r8
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	464b      	mov	r3, r9
 800b0b2:	910a      	str	r1, [sp, #40]	@ 0x28
 800b0b4:	f7ff fed4 	bl	800ae60 <__cvt>
 800b0b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0ba:	4680      	mov	r8, r0
 800b0bc:	2947      	cmp	r1, #71	@ 0x47
 800b0be:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b0c0:	d128      	bne.n	800b114 <_printf_float+0x178>
 800b0c2:	1cc8      	adds	r0, r1, #3
 800b0c4:	db02      	blt.n	800b0cc <_printf_float+0x130>
 800b0c6:	6863      	ldr	r3, [r4, #4]
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	dd40      	ble.n	800b14e <_printf_float+0x1b2>
 800b0cc:	f1aa 0a02 	sub.w	sl, sl, #2
 800b0d0:	fa5f fa8a 	uxtb.w	sl, sl
 800b0d4:	4652      	mov	r2, sl
 800b0d6:	3901      	subs	r1, #1
 800b0d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b0dc:	910d      	str	r1, [sp, #52]	@ 0x34
 800b0de:	f7ff ff23 	bl	800af28 <__exponent>
 800b0e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0e4:	4681      	mov	r9, r0
 800b0e6:	1813      	adds	r3, r2, r0
 800b0e8:	2a01      	cmp	r2, #1
 800b0ea:	6123      	str	r3, [r4, #16]
 800b0ec:	dc02      	bgt.n	800b0f4 <_printf_float+0x158>
 800b0ee:	6822      	ldr	r2, [r4, #0]
 800b0f0:	07d2      	lsls	r2, r2, #31
 800b0f2:	d501      	bpl.n	800b0f8 <_printf_float+0x15c>
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	6123      	str	r3, [r4, #16]
 800b0f8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d09e      	beq.n	800b03e <_printf_float+0xa2>
 800b100:	232d      	movs	r3, #45	@ 0x2d
 800b102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b106:	e79a      	b.n	800b03e <_printf_float+0xa2>
 800b108:	2947      	cmp	r1, #71	@ 0x47
 800b10a:	d1bf      	bne.n	800b08c <_printf_float+0xf0>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1bd      	bne.n	800b08c <_printf_float+0xf0>
 800b110:	2301      	movs	r3, #1
 800b112:	e7ba      	b.n	800b08a <_printf_float+0xee>
 800b114:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b118:	d9dc      	bls.n	800b0d4 <_printf_float+0x138>
 800b11a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b11e:	d118      	bne.n	800b152 <_printf_float+0x1b6>
 800b120:	2900      	cmp	r1, #0
 800b122:	6863      	ldr	r3, [r4, #4]
 800b124:	dd0b      	ble.n	800b13e <_printf_float+0x1a2>
 800b126:	6121      	str	r1, [r4, #16]
 800b128:	b913      	cbnz	r3, 800b130 <_printf_float+0x194>
 800b12a:	6822      	ldr	r2, [r4, #0]
 800b12c:	07d0      	lsls	r0, r2, #31
 800b12e:	d502      	bpl.n	800b136 <_printf_float+0x19a>
 800b130:	3301      	adds	r3, #1
 800b132:	440b      	add	r3, r1
 800b134:	6123      	str	r3, [r4, #16]
 800b136:	f04f 0900 	mov.w	r9, #0
 800b13a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b13c:	e7dc      	b.n	800b0f8 <_printf_float+0x15c>
 800b13e:	b913      	cbnz	r3, 800b146 <_printf_float+0x1aa>
 800b140:	6822      	ldr	r2, [r4, #0]
 800b142:	07d2      	lsls	r2, r2, #31
 800b144:	d501      	bpl.n	800b14a <_printf_float+0x1ae>
 800b146:	3302      	adds	r3, #2
 800b148:	e7f4      	b.n	800b134 <_printf_float+0x198>
 800b14a:	2301      	movs	r3, #1
 800b14c:	e7f2      	b.n	800b134 <_printf_float+0x198>
 800b14e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b154:	4299      	cmp	r1, r3
 800b156:	db05      	blt.n	800b164 <_printf_float+0x1c8>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	6121      	str	r1, [r4, #16]
 800b15c:	07d8      	lsls	r0, r3, #31
 800b15e:	d5ea      	bpl.n	800b136 <_printf_float+0x19a>
 800b160:	1c4b      	adds	r3, r1, #1
 800b162:	e7e7      	b.n	800b134 <_printf_float+0x198>
 800b164:	2900      	cmp	r1, #0
 800b166:	bfcc      	ite	gt
 800b168:	2201      	movgt	r2, #1
 800b16a:	f1c1 0202 	rsble	r2, r1, #2
 800b16e:	4413      	add	r3, r2
 800b170:	e7e0      	b.n	800b134 <_printf_float+0x198>
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	055a      	lsls	r2, r3, #21
 800b176:	d407      	bmi.n	800b188 <_printf_float+0x1ec>
 800b178:	6923      	ldr	r3, [r4, #16]
 800b17a:	4642      	mov	r2, r8
 800b17c:	4631      	mov	r1, r6
 800b17e:	4628      	mov	r0, r5
 800b180:	47b8      	blx	r7
 800b182:	3001      	adds	r0, #1
 800b184:	d12b      	bne.n	800b1de <_printf_float+0x242>
 800b186:	e764      	b.n	800b052 <_printf_float+0xb6>
 800b188:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b18c:	f240 80dc 	bls.w	800b348 <_printf_float+0x3ac>
 800b190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b194:	2200      	movs	r2, #0
 800b196:	2300      	movs	r3, #0
 800b198:	f7f5 fd26 	bl	8000be8 <__aeabi_dcmpeq>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d033      	beq.n	800b208 <_printf_float+0x26c>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	4a35      	ldr	r2, [pc, #212]	@ (800b27c <_printf_float+0x2e0>)
 800b1a8:	47b8      	blx	r7
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	f43f af51 	beq.w	800b052 <_printf_float+0xb6>
 800b1b0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b1b4:	4543      	cmp	r3, r8
 800b1b6:	db02      	blt.n	800b1be <_printf_float+0x222>
 800b1b8:	6823      	ldr	r3, [r4, #0]
 800b1ba:	07d8      	lsls	r0, r3, #31
 800b1bc:	d50f      	bpl.n	800b1de <_printf_float+0x242>
 800b1be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	47b8      	blx	r7
 800b1c8:	3001      	adds	r0, #1
 800b1ca:	f43f af42 	beq.w	800b052 <_printf_float+0xb6>
 800b1ce:	f04f 0900 	mov.w	r9, #0
 800b1d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1d6:	f104 0a1a 	add.w	sl, r4, #26
 800b1da:	45c8      	cmp	r8, r9
 800b1dc:	dc09      	bgt.n	800b1f2 <_printf_float+0x256>
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	079b      	lsls	r3, r3, #30
 800b1e2:	f100 8102 	bmi.w	800b3ea <_printf_float+0x44e>
 800b1e6:	68e0      	ldr	r0, [r4, #12]
 800b1e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ea:	4298      	cmp	r0, r3
 800b1ec:	bfb8      	it	lt
 800b1ee:	4618      	movlt	r0, r3
 800b1f0:	e731      	b.n	800b056 <_printf_float+0xba>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4652      	mov	r2, sl
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f af28 	beq.w	800b052 <_printf_float+0xb6>
 800b202:	f109 0901 	add.w	r9, r9, #1
 800b206:	e7e8      	b.n	800b1da <_printf_float+0x23e>
 800b208:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	dc38      	bgt.n	800b280 <_printf_float+0x2e4>
 800b20e:	2301      	movs	r3, #1
 800b210:	4631      	mov	r1, r6
 800b212:	4628      	mov	r0, r5
 800b214:	4a19      	ldr	r2, [pc, #100]	@ (800b27c <_printf_float+0x2e0>)
 800b216:	47b8      	blx	r7
 800b218:	3001      	adds	r0, #1
 800b21a:	f43f af1a 	beq.w	800b052 <_printf_float+0xb6>
 800b21e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b222:	ea59 0303 	orrs.w	r3, r9, r3
 800b226:	d102      	bne.n	800b22e <_printf_float+0x292>
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	07d9      	lsls	r1, r3, #31
 800b22c:	d5d7      	bpl.n	800b1de <_printf_float+0x242>
 800b22e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b232:	4631      	mov	r1, r6
 800b234:	4628      	mov	r0, r5
 800b236:	47b8      	blx	r7
 800b238:	3001      	adds	r0, #1
 800b23a:	f43f af0a 	beq.w	800b052 <_printf_float+0xb6>
 800b23e:	f04f 0a00 	mov.w	sl, #0
 800b242:	f104 0b1a 	add.w	fp, r4, #26
 800b246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b248:	425b      	negs	r3, r3
 800b24a:	4553      	cmp	r3, sl
 800b24c:	dc01      	bgt.n	800b252 <_printf_float+0x2b6>
 800b24e:	464b      	mov	r3, r9
 800b250:	e793      	b.n	800b17a <_printf_float+0x1de>
 800b252:	2301      	movs	r3, #1
 800b254:	465a      	mov	r2, fp
 800b256:	4631      	mov	r1, r6
 800b258:	4628      	mov	r0, r5
 800b25a:	47b8      	blx	r7
 800b25c:	3001      	adds	r0, #1
 800b25e:	f43f aef8 	beq.w	800b052 <_printf_float+0xb6>
 800b262:	f10a 0a01 	add.w	sl, sl, #1
 800b266:	e7ee      	b.n	800b246 <_printf_float+0x2aa>
 800b268:	7fefffff 	.word	0x7fefffff
 800b26c:	0800dcb8 	.word	0x0800dcb8
 800b270:	0800dcbc 	.word	0x0800dcbc
 800b274:	0800dcc0 	.word	0x0800dcc0
 800b278:	0800dcc4 	.word	0x0800dcc4
 800b27c:	0800dcc8 	.word	0x0800dcc8
 800b280:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b282:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b286:	4553      	cmp	r3, sl
 800b288:	bfa8      	it	ge
 800b28a:	4653      	movge	r3, sl
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	4699      	mov	r9, r3
 800b290:	dc36      	bgt.n	800b300 <_printf_float+0x364>
 800b292:	f04f 0b00 	mov.w	fp, #0
 800b296:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b29a:	f104 021a 	add.w	r2, r4, #26
 800b29e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2a2:	eba3 0309 	sub.w	r3, r3, r9
 800b2a6:	455b      	cmp	r3, fp
 800b2a8:	dc31      	bgt.n	800b30e <_printf_float+0x372>
 800b2aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2ac:	459a      	cmp	sl, r3
 800b2ae:	dc3a      	bgt.n	800b326 <_printf_float+0x38a>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07da      	lsls	r2, r3, #31
 800b2b4:	d437      	bmi.n	800b326 <_printf_float+0x38a>
 800b2b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2b8:	ebaa 0903 	sub.w	r9, sl, r3
 800b2bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2be:	ebaa 0303 	sub.w	r3, sl, r3
 800b2c2:	4599      	cmp	r9, r3
 800b2c4:	bfa8      	it	ge
 800b2c6:	4699      	movge	r9, r3
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	dc33      	bgt.n	800b336 <_printf_float+0x39a>
 800b2ce:	f04f 0800 	mov.w	r8, #0
 800b2d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2d6:	f104 0b1a 	add.w	fp, r4, #26
 800b2da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2dc:	ebaa 0303 	sub.w	r3, sl, r3
 800b2e0:	eba3 0309 	sub.w	r3, r3, r9
 800b2e4:	4543      	cmp	r3, r8
 800b2e6:	f77f af7a 	ble.w	800b1de <_printf_float+0x242>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	465a      	mov	r2, fp
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b8      	blx	r7
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	f43f aeac 	beq.w	800b052 <_printf_float+0xb6>
 800b2fa:	f108 0801 	add.w	r8, r8, #1
 800b2fe:	e7ec      	b.n	800b2da <_printf_float+0x33e>
 800b300:	4642      	mov	r2, r8
 800b302:	4631      	mov	r1, r6
 800b304:	4628      	mov	r0, r5
 800b306:	47b8      	blx	r7
 800b308:	3001      	adds	r0, #1
 800b30a:	d1c2      	bne.n	800b292 <_printf_float+0x2f6>
 800b30c:	e6a1      	b.n	800b052 <_printf_float+0xb6>
 800b30e:	2301      	movs	r3, #1
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	920a      	str	r2, [sp, #40]	@ 0x28
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	f43f ae9a 	beq.w	800b052 <_printf_float+0xb6>
 800b31e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b320:	f10b 0b01 	add.w	fp, fp, #1
 800b324:	e7bb      	b.n	800b29e <_printf_float+0x302>
 800b326:	4631      	mov	r1, r6
 800b328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b32c:	4628      	mov	r0, r5
 800b32e:	47b8      	blx	r7
 800b330:	3001      	adds	r0, #1
 800b332:	d1c0      	bne.n	800b2b6 <_printf_float+0x31a>
 800b334:	e68d      	b.n	800b052 <_printf_float+0xb6>
 800b336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b338:	464b      	mov	r3, r9
 800b33a:	4631      	mov	r1, r6
 800b33c:	4628      	mov	r0, r5
 800b33e:	4442      	add	r2, r8
 800b340:	47b8      	blx	r7
 800b342:	3001      	adds	r0, #1
 800b344:	d1c3      	bne.n	800b2ce <_printf_float+0x332>
 800b346:	e684      	b.n	800b052 <_printf_float+0xb6>
 800b348:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b34c:	f1ba 0f01 	cmp.w	sl, #1
 800b350:	dc01      	bgt.n	800b356 <_printf_float+0x3ba>
 800b352:	07db      	lsls	r3, r3, #31
 800b354:	d536      	bpl.n	800b3c4 <_printf_float+0x428>
 800b356:	2301      	movs	r3, #1
 800b358:	4642      	mov	r2, r8
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b8      	blx	r7
 800b360:	3001      	adds	r0, #1
 800b362:	f43f ae76 	beq.w	800b052 <_printf_float+0xb6>
 800b366:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b36a:	4631      	mov	r1, r6
 800b36c:	4628      	mov	r0, r5
 800b36e:	47b8      	blx	r7
 800b370:	3001      	adds	r0, #1
 800b372:	f43f ae6e 	beq.w	800b052 <_printf_float+0xb6>
 800b376:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b37a:	2200      	movs	r2, #0
 800b37c:	2300      	movs	r3, #0
 800b37e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b382:	f7f5 fc31 	bl	8000be8 <__aeabi_dcmpeq>
 800b386:	b9c0      	cbnz	r0, 800b3ba <_printf_float+0x41e>
 800b388:	4653      	mov	r3, sl
 800b38a:	f108 0201 	add.w	r2, r8, #1
 800b38e:	4631      	mov	r1, r6
 800b390:	4628      	mov	r0, r5
 800b392:	47b8      	blx	r7
 800b394:	3001      	adds	r0, #1
 800b396:	d10c      	bne.n	800b3b2 <_printf_float+0x416>
 800b398:	e65b      	b.n	800b052 <_printf_float+0xb6>
 800b39a:	2301      	movs	r3, #1
 800b39c:	465a      	mov	r2, fp
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	47b8      	blx	r7
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	f43f ae54 	beq.w	800b052 <_printf_float+0xb6>
 800b3aa:	f108 0801 	add.w	r8, r8, #1
 800b3ae:	45d0      	cmp	r8, sl
 800b3b0:	dbf3      	blt.n	800b39a <_printf_float+0x3fe>
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b3b8:	e6e0      	b.n	800b17c <_printf_float+0x1e0>
 800b3ba:	f04f 0800 	mov.w	r8, #0
 800b3be:	f104 0b1a 	add.w	fp, r4, #26
 800b3c2:	e7f4      	b.n	800b3ae <_printf_float+0x412>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	4642      	mov	r2, r8
 800b3c8:	e7e1      	b.n	800b38e <_printf_float+0x3f2>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	464a      	mov	r2, r9
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	f43f ae3c 	beq.w	800b052 <_printf_float+0xb6>
 800b3da:	f108 0801 	add.w	r8, r8, #1
 800b3de:	68e3      	ldr	r3, [r4, #12]
 800b3e0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b3e2:	1a5b      	subs	r3, r3, r1
 800b3e4:	4543      	cmp	r3, r8
 800b3e6:	dcf0      	bgt.n	800b3ca <_printf_float+0x42e>
 800b3e8:	e6fd      	b.n	800b1e6 <_printf_float+0x24a>
 800b3ea:	f04f 0800 	mov.w	r8, #0
 800b3ee:	f104 0919 	add.w	r9, r4, #25
 800b3f2:	e7f4      	b.n	800b3de <_printf_float+0x442>

0800b3f4 <_printf_common>:
 800b3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f8:	4616      	mov	r6, r2
 800b3fa:	4698      	mov	r8, r3
 800b3fc:	688a      	ldr	r2, [r1, #8]
 800b3fe:	690b      	ldr	r3, [r1, #16]
 800b400:	4607      	mov	r7, r0
 800b402:	4293      	cmp	r3, r2
 800b404:	bfb8      	it	lt
 800b406:	4613      	movlt	r3, r2
 800b408:	6033      	str	r3, [r6, #0]
 800b40a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b40e:	460c      	mov	r4, r1
 800b410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b414:	b10a      	cbz	r2, 800b41a <_printf_common+0x26>
 800b416:	3301      	adds	r3, #1
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	6823      	ldr	r3, [r4, #0]
 800b41c:	0699      	lsls	r1, r3, #26
 800b41e:	bf42      	ittt	mi
 800b420:	6833      	ldrmi	r3, [r6, #0]
 800b422:	3302      	addmi	r3, #2
 800b424:	6033      	strmi	r3, [r6, #0]
 800b426:	6825      	ldr	r5, [r4, #0]
 800b428:	f015 0506 	ands.w	r5, r5, #6
 800b42c:	d106      	bne.n	800b43c <_printf_common+0x48>
 800b42e:	f104 0a19 	add.w	sl, r4, #25
 800b432:	68e3      	ldr	r3, [r4, #12]
 800b434:	6832      	ldr	r2, [r6, #0]
 800b436:	1a9b      	subs	r3, r3, r2
 800b438:	42ab      	cmp	r3, r5
 800b43a:	dc2b      	bgt.n	800b494 <_printf_common+0xa0>
 800b43c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b440:	6822      	ldr	r2, [r4, #0]
 800b442:	3b00      	subs	r3, #0
 800b444:	bf18      	it	ne
 800b446:	2301      	movne	r3, #1
 800b448:	0692      	lsls	r2, r2, #26
 800b44a:	d430      	bmi.n	800b4ae <_printf_common+0xba>
 800b44c:	4641      	mov	r1, r8
 800b44e:	4638      	mov	r0, r7
 800b450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b454:	47c8      	blx	r9
 800b456:	3001      	adds	r0, #1
 800b458:	d023      	beq.n	800b4a2 <_printf_common+0xae>
 800b45a:	6823      	ldr	r3, [r4, #0]
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	f003 0306 	and.w	r3, r3, #6
 800b462:	2b04      	cmp	r3, #4
 800b464:	bf14      	ite	ne
 800b466:	2500      	movne	r5, #0
 800b468:	6833      	ldreq	r3, [r6, #0]
 800b46a:	f04f 0600 	mov.w	r6, #0
 800b46e:	bf08      	it	eq
 800b470:	68e5      	ldreq	r5, [r4, #12]
 800b472:	f104 041a 	add.w	r4, r4, #26
 800b476:	bf08      	it	eq
 800b478:	1aed      	subeq	r5, r5, r3
 800b47a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b47e:	bf08      	it	eq
 800b480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b484:	4293      	cmp	r3, r2
 800b486:	bfc4      	itt	gt
 800b488:	1a9b      	subgt	r3, r3, r2
 800b48a:	18ed      	addgt	r5, r5, r3
 800b48c:	42b5      	cmp	r5, r6
 800b48e:	d11a      	bne.n	800b4c6 <_printf_common+0xd2>
 800b490:	2000      	movs	r0, #0
 800b492:	e008      	b.n	800b4a6 <_printf_common+0xb2>
 800b494:	2301      	movs	r3, #1
 800b496:	4652      	mov	r2, sl
 800b498:	4641      	mov	r1, r8
 800b49a:	4638      	mov	r0, r7
 800b49c:	47c8      	blx	r9
 800b49e:	3001      	adds	r0, #1
 800b4a0:	d103      	bne.n	800b4aa <_printf_common+0xb6>
 800b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4aa:	3501      	adds	r5, #1
 800b4ac:	e7c1      	b.n	800b432 <_printf_common+0x3e>
 800b4ae:	2030      	movs	r0, #48	@ 0x30
 800b4b0:	18e1      	adds	r1, r4, r3
 800b4b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4bc:	4422      	add	r2, r4
 800b4be:	3302      	adds	r3, #2
 800b4c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4c4:	e7c2      	b.n	800b44c <_printf_common+0x58>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	4641      	mov	r1, r8
 800b4cc:	4638      	mov	r0, r7
 800b4ce:	47c8      	blx	r9
 800b4d0:	3001      	adds	r0, #1
 800b4d2:	d0e6      	beq.n	800b4a2 <_printf_common+0xae>
 800b4d4:	3601      	adds	r6, #1
 800b4d6:	e7d9      	b.n	800b48c <_printf_common+0x98>

0800b4d8 <_printf_i>:
 800b4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4dc:	7e0f      	ldrb	r7, [r1, #24]
 800b4de:	4691      	mov	r9, r2
 800b4e0:	2f78      	cmp	r7, #120	@ 0x78
 800b4e2:	4680      	mov	r8, r0
 800b4e4:	460c      	mov	r4, r1
 800b4e6:	469a      	mov	sl, r3
 800b4e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b4ee:	d807      	bhi.n	800b500 <_printf_i+0x28>
 800b4f0:	2f62      	cmp	r7, #98	@ 0x62
 800b4f2:	d80a      	bhi.n	800b50a <_printf_i+0x32>
 800b4f4:	2f00      	cmp	r7, #0
 800b4f6:	f000 80d3 	beq.w	800b6a0 <_printf_i+0x1c8>
 800b4fa:	2f58      	cmp	r7, #88	@ 0x58
 800b4fc:	f000 80ba 	beq.w	800b674 <_printf_i+0x19c>
 800b500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b508:	e03a      	b.n	800b580 <_printf_i+0xa8>
 800b50a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b50e:	2b15      	cmp	r3, #21
 800b510:	d8f6      	bhi.n	800b500 <_printf_i+0x28>
 800b512:	a101      	add	r1, pc, #4	@ (adr r1, 800b518 <_printf_i+0x40>)
 800b514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b518:	0800b571 	.word	0x0800b571
 800b51c:	0800b585 	.word	0x0800b585
 800b520:	0800b501 	.word	0x0800b501
 800b524:	0800b501 	.word	0x0800b501
 800b528:	0800b501 	.word	0x0800b501
 800b52c:	0800b501 	.word	0x0800b501
 800b530:	0800b585 	.word	0x0800b585
 800b534:	0800b501 	.word	0x0800b501
 800b538:	0800b501 	.word	0x0800b501
 800b53c:	0800b501 	.word	0x0800b501
 800b540:	0800b501 	.word	0x0800b501
 800b544:	0800b687 	.word	0x0800b687
 800b548:	0800b5af 	.word	0x0800b5af
 800b54c:	0800b641 	.word	0x0800b641
 800b550:	0800b501 	.word	0x0800b501
 800b554:	0800b501 	.word	0x0800b501
 800b558:	0800b6a9 	.word	0x0800b6a9
 800b55c:	0800b501 	.word	0x0800b501
 800b560:	0800b5af 	.word	0x0800b5af
 800b564:	0800b501 	.word	0x0800b501
 800b568:	0800b501 	.word	0x0800b501
 800b56c:	0800b649 	.word	0x0800b649
 800b570:	6833      	ldr	r3, [r6, #0]
 800b572:	1d1a      	adds	r2, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6032      	str	r2, [r6, #0]
 800b578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b57c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b580:	2301      	movs	r3, #1
 800b582:	e09e      	b.n	800b6c2 <_printf_i+0x1ea>
 800b584:	6833      	ldr	r3, [r6, #0]
 800b586:	6820      	ldr	r0, [r4, #0]
 800b588:	1d19      	adds	r1, r3, #4
 800b58a:	6031      	str	r1, [r6, #0]
 800b58c:	0606      	lsls	r6, r0, #24
 800b58e:	d501      	bpl.n	800b594 <_printf_i+0xbc>
 800b590:	681d      	ldr	r5, [r3, #0]
 800b592:	e003      	b.n	800b59c <_printf_i+0xc4>
 800b594:	0645      	lsls	r5, r0, #25
 800b596:	d5fb      	bpl.n	800b590 <_printf_i+0xb8>
 800b598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	da03      	bge.n	800b5a8 <_printf_i+0xd0>
 800b5a0:	232d      	movs	r3, #45	@ 0x2d
 800b5a2:	426d      	negs	r5, r5
 800b5a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5a8:	230a      	movs	r3, #10
 800b5aa:	4859      	ldr	r0, [pc, #356]	@ (800b710 <_printf_i+0x238>)
 800b5ac:	e011      	b.n	800b5d2 <_printf_i+0xfa>
 800b5ae:	6821      	ldr	r1, [r4, #0]
 800b5b0:	6833      	ldr	r3, [r6, #0]
 800b5b2:	0608      	lsls	r0, r1, #24
 800b5b4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5b8:	d402      	bmi.n	800b5c0 <_printf_i+0xe8>
 800b5ba:	0649      	lsls	r1, r1, #25
 800b5bc:	bf48      	it	mi
 800b5be:	b2ad      	uxthmi	r5, r5
 800b5c0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5c2:	6033      	str	r3, [r6, #0]
 800b5c4:	bf14      	ite	ne
 800b5c6:	230a      	movne	r3, #10
 800b5c8:	2308      	moveq	r3, #8
 800b5ca:	4851      	ldr	r0, [pc, #324]	@ (800b710 <_printf_i+0x238>)
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5d2:	6866      	ldr	r6, [r4, #4]
 800b5d4:	2e00      	cmp	r6, #0
 800b5d6:	bfa8      	it	ge
 800b5d8:	6821      	ldrge	r1, [r4, #0]
 800b5da:	60a6      	str	r6, [r4, #8]
 800b5dc:	bfa4      	itt	ge
 800b5de:	f021 0104 	bicge.w	r1, r1, #4
 800b5e2:	6021      	strge	r1, [r4, #0]
 800b5e4:	b90d      	cbnz	r5, 800b5ea <_printf_i+0x112>
 800b5e6:	2e00      	cmp	r6, #0
 800b5e8:	d04b      	beq.n	800b682 <_printf_i+0x1aa>
 800b5ea:	4616      	mov	r6, r2
 800b5ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800b5f0:	fb03 5711 	mls	r7, r3, r1, r5
 800b5f4:	5dc7      	ldrb	r7, [r0, r7]
 800b5f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b5fa:	462f      	mov	r7, r5
 800b5fc:	42bb      	cmp	r3, r7
 800b5fe:	460d      	mov	r5, r1
 800b600:	d9f4      	bls.n	800b5ec <_printf_i+0x114>
 800b602:	2b08      	cmp	r3, #8
 800b604:	d10b      	bne.n	800b61e <_printf_i+0x146>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	07df      	lsls	r7, r3, #31
 800b60a:	d508      	bpl.n	800b61e <_printf_i+0x146>
 800b60c:	6923      	ldr	r3, [r4, #16]
 800b60e:	6861      	ldr	r1, [r4, #4]
 800b610:	4299      	cmp	r1, r3
 800b612:	bfde      	ittt	le
 800b614:	2330      	movle	r3, #48	@ 0x30
 800b616:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b61a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b61e:	1b92      	subs	r2, r2, r6
 800b620:	6122      	str	r2, [r4, #16]
 800b622:	464b      	mov	r3, r9
 800b624:	4621      	mov	r1, r4
 800b626:	4640      	mov	r0, r8
 800b628:	f8cd a000 	str.w	sl, [sp]
 800b62c:	aa03      	add	r2, sp, #12
 800b62e:	f7ff fee1 	bl	800b3f4 <_printf_common>
 800b632:	3001      	adds	r0, #1
 800b634:	d14a      	bne.n	800b6cc <_printf_i+0x1f4>
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	b004      	add	sp, #16
 800b63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	f043 0320 	orr.w	r3, r3, #32
 800b646:	6023      	str	r3, [r4, #0]
 800b648:	2778      	movs	r7, #120	@ 0x78
 800b64a:	4832      	ldr	r0, [pc, #200]	@ (800b714 <_printf_i+0x23c>)
 800b64c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b650:	6823      	ldr	r3, [r4, #0]
 800b652:	6831      	ldr	r1, [r6, #0]
 800b654:	061f      	lsls	r7, r3, #24
 800b656:	f851 5b04 	ldr.w	r5, [r1], #4
 800b65a:	d402      	bmi.n	800b662 <_printf_i+0x18a>
 800b65c:	065f      	lsls	r7, r3, #25
 800b65e:	bf48      	it	mi
 800b660:	b2ad      	uxthmi	r5, r5
 800b662:	6031      	str	r1, [r6, #0]
 800b664:	07d9      	lsls	r1, r3, #31
 800b666:	bf44      	itt	mi
 800b668:	f043 0320 	orrmi.w	r3, r3, #32
 800b66c:	6023      	strmi	r3, [r4, #0]
 800b66e:	b11d      	cbz	r5, 800b678 <_printf_i+0x1a0>
 800b670:	2310      	movs	r3, #16
 800b672:	e7ab      	b.n	800b5cc <_printf_i+0xf4>
 800b674:	4826      	ldr	r0, [pc, #152]	@ (800b710 <_printf_i+0x238>)
 800b676:	e7e9      	b.n	800b64c <_printf_i+0x174>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	f023 0320 	bic.w	r3, r3, #32
 800b67e:	6023      	str	r3, [r4, #0]
 800b680:	e7f6      	b.n	800b670 <_printf_i+0x198>
 800b682:	4616      	mov	r6, r2
 800b684:	e7bd      	b.n	800b602 <_printf_i+0x12a>
 800b686:	6833      	ldr	r3, [r6, #0]
 800b688:	6825      	ldr	r5, [r4, #0]
 800b68a:	1d18      	adds	r0, r3, #4
 800b68c:	6961      	ldr	r1, [r4, #20]
 800b68e:	6030      	str	r0, [r6, #0]
 800b690:	062e      	lsls	r6, r5, #24
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	d501      	bpl.n	800b69a <_printf_i+0x1c2>
 800b696:	6019      	str	r1, [r3, #0]
 800b698:	e002      	b.n	800b6a0 <_printf_i+0x1c8>
 800b69a:	0668      	lsls	r0, r5, #25
 800b69c:	d5fb      	bpl.n	800b696 <_printf_i+0x1be>
 800b69e:	8019      	strh	r1, [r3, #0]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	4616      	mov	r6, r2
 800b6a4:	6123      	str	r3, [r4, #16]
 800b6a6:	e7bc      	b.n	800b622 <_printf_i+0x14a>
 800b6a8:	6833      	ldr	r3, [r6, #0]
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	1d1a      	adds	r2, r3, #4
 800b6ae:	6032      	str	r2, [r6, #0]
 800b6b0:	681e      	ldr	r6, [r3, #0]
 800b6b2:	6862      	ldr	r2, [r4, #4]
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f000 fa08 	bl	800baca <memchr>
 800b6ba:	b108      	cbz	r0, 800b6c0 <_printf_i+0x1e8>
 800b6bc:	1b80      	subs	r0, r0, r6
 800b6be:	6060      	str	r0, [r4, #4]
 800b6c0:	6863      	ldr	r3, [r4, #4]
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6ca:	e7aa      	b.n	800b622 <_printf_i+0x14a>
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	4649      	mov	r1, r9
 800b6d0:	4640      	mov	r0, r8
 800b6d2:	6923      	ldr	r3, [r4, #16]
 800b6d4:	47d0      	blx	sl
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	d0ad      	beq.n	800b636 <_printf_i+0x15e>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	079b      	lsls	r3, r3, #30
 800b6de:	d413      	bmi.n	800b708 <_printf_i+0x230>
 800b6e0:	68e0      	ldr	r0, [r4, #12]
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	4298      	cmp	r0, r3
 800b6e6:	bfb8      	it	lt
 800b6e8:	4618      	movlt	r0, r3
 800b6ea:	e7a6      	b.n	800b63a <_printf_i+0x162>
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	4632      	mov	r2, r6
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	47d0      	blx	sl
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	d09d      	beq.n	800b636 <_printf_i+0x15e>
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	68e3      	ldr	r3, [r4, #12]
 800b6fe:	9903      	ldr	r1, [sp, #12]
 800b700:	1a5b      	subs	r3, r3, r1
 800b702:	42ab      	cmp	r3, r5
 800b704:	dcf2      	bgt.n	800b6ec <_printf_i+0x214>
 800b706:	e7eb      	b.n	800b6e0 <_printf_i+0x208>
 800b708:	2500      	movs	r5, #0
 800b70a:	f104 0619 	add.w	r6, r4, #25
 800b70e:	e7f5      	b.n	800b6fc <_printf_i+0x224>
 800b710:	0800dcca 	.word	0x0800dcca
 800b714:	0800dcdb 	.word	0x0800dcdb

0800b718 <std>:
 800b718:	2300      	movs	r3, #0
 800b71a:	b510      	push	{r4, lr}
 800b71c:	4604      	mov	r4, r0
 800b71e:	e9c0 3300 	strd	r3, r3, [r0]
 800b722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b726:	6083      	str	r3, [r0, #8]
 800b728:	8181      	strh	r1, [r0, #12]
 800b72a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b72c:	81c2      	strh	r2, [r0, #14]
 800b72e:	6183      	str	r3, [r0, #24]
 800b730:	4619      	mov	r1, r3
 800b732:	2208      	movs	r2, #8
 800b734:	305c      	adds	r0, #92	@ 0x5c
 800b736:	f000 f8f4 	bl	800b922 <memset>
 800b73a:	4b0d      	ldr	r3, [pc, #52]	@ (800b770 <std+0x58>)
 800b73c:	6224      	str	r4, [r4, #32]
 800b73e:	6263      	str	r3, [r4, #36]	@ 0x24
 800b740:	4b0c      	ldr	r3, [pc, #48]	@ (800b774 <std+0x5c>)
 800b742:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b744:	4b0c      	ldr	r3, [pc, #48]	@ (800b778 <std+0x60>)
 800b746:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b748:	4b0c      	ldr	r3, [pc, #48]	@ (800b77c <std+0x64>)
 800b74a:	6323      	str	r3, [r4, #48]	@ 0x30
 800b74c:	4b0c      	ldr	r3, [pc, #48]	@ (800b780 <std+0x68>)
 800b74e:	429c      	cmp	r4, r3
 800b750:	d006      	beq.n	800b760 <std+0x48>
 800b752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b756:	4294      	cmp	r4, r2
 800b758:	d002      	beq.n	800b760 <std+0x48>
 800b75a:	33d0      	adds	r3, #208	@ 0xd0
 800b75c:	429c      	cmp	r4, r3
 800b75e:	d105      	bne.n	800b76c <std+0x54>
 800b760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b768:	f000 b9ac 	b.w	800bac4 <__retarget_lock_init_recursive>
 800b76c:	bd10      	pop	{r4, pc}
 800b76e:	bf00      	nop
 800b770:	0800b89d 	.word	0x0800b89d
 800b774:	0800b8bf 	.word	0x0800b8bf
 800b778:	0800b8f7 	.word	0x0800b8f7
 800b77c:	0800b91b 	.word	0x0800b91b
 800b780:	20000778 	.word	0x20000778

0800b784 <stdio_exit_handler>:
 800b784:	4a02      	ldr	r2, [pc, #8]	@ (800b790 <stdio_exit_handler+0xc>)
 800b786:	4903      	ldr	r1, [pc, #12]	@ (800b794 <stdio_exit_handler+0x10>)
 800b788:	4803      	ldr	r0, [pc, #12]	@ (800b798 <stdio_exit_handler+0x14>)
 800b78a:	f000 b869 	b.w	800b860 <_fwalk_sglue>
 800b78e:	bf00      	nop
 800b790:	20000020 	.word	0x20000020
 800b794:	0800d039 	.word	0x0800d039
 800b798:	20000030 	.word	0x20000030

0800b79c <cleanup_stdio>:
 800b79c:	6841      	ldr	r1, [r0, #4]
 800b79e:	4b0c      	ldr	r3, [pc, #48]	@ (800b7d0 <cleanup_stdio+0x34>)
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	d001      	beq.n	800b7ac <cleanup_stdio+0x10>
 800b7a8:	f001 fc46 	bl	800d038 <_fflush_r>
 800b7ac:	68a1      	ldr	r1, [r4, #8]
 800b7ae:	4b09      	ldr	r3, [pc, #36]	@ (800b7d4 <cleanup_stdio+0x38>)
 800b7b0:	4299      	cmp	r1, r3
 800b7b2:	d002      	beq.n	800b7ba <cleanup_stdio+0x1e>
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f001 fc3f 	bl	800d038 <_fflush_r>
 800b7ba:	68e1      	ldr	r1, [r4, #12]
 800b7bc:	4b06      	ldr	r3, [pc, #24]	@ (800b7d8 <cleanup_stdio+0x3c>)
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	d004      	beq.n	800b7cc <cleanup_stdio+0x30>
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c8:	f001 bc36 	b.w	800d038 <_fflush_r>
 800b7cc:	bd10      	pop	{r4, pc}
 800b7ce:	bf00      	nop
 800b7d0:	20000778 	.word	0x20000778
 800b7d4:	200007e0 	.word	0x200007e0
 800b7d8:	20000848 	.word	0x20000848

0800b7dc <global_stdio_init.part.0>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	4b0b      	ldr	r3, [pc, #44]	@ (800b80c <global_stdio_init.part.0+0x30>)
 800b7e0:	4c0b      	ldr	r4, [pc, #44]	@ (800b810 <global_stdio_init.part.0+0x34>)
 800b7e2:	4a0c      	ldr	r2, [pc, #48]	@ (800b814 <global_stdio_init.part.0+0x38>)
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	601a      	str	r2, [r3, #0]
 800b7e8:	2104      	movs	r1, #4
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f7ff ff94 	bl	800b718 <std>
 800b7f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b7f4:	2201      	movs	r2, #1
 800b7f6:	2109      	movs	r1, #9
 800b7f8:	f7ff ff8e 	bl	800b718 <std>
 800b7fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b800:	2202      	movs	r2, #2
 800b802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b806:	2112      	movs	r1, #18
 800b808:	f7ff bf86 	b.w	800b718 <std>
 800b80c:	200008b0 	.word	0x200008b0
 800b810:	20000778 	.word	0x20000778
 800b814:	0800b785 	.word	0x0800b785

0800b818 <__sfp_lock_acquire>:
 800b818:	4801      	ldr	r0, [pc, #4]	@ (800b820 <__sfp_lock_acquire+0x8>)
 800b81a:	f000 b954 	b.w	800bac6 <__retarget_lock_acquire_recursive>
 800b81e:	bf00      	nop
 800b820:	200008b9 	.word	0x200008b9

0800b824 <__sfp_lock_release>:
 800b824:	4801      	ldr	r0, [pc, #4]	@ (800b82c <__sfp_lock_release+0x8>)
 800b826:	f000 b94f 	b.w	800bac8 <__retarget_lock_release_recursive>
 800b82a:	bf00      	nop
 800b82c:	200008b9 	.word	0x200008b9

0800b830 <__sinit>:
 800b830:	b510      	push	{r4, lr}
 800b832:	4604      	mov	r4, r0
 800b834:	f7ff fff0 	bl	800b818 <__sfp_lock_acquire>
 800b838:	6a23      	ldr	r3, [r4, #32]
 800b83a:	b11b      	cbz	r3, 800b844 <__sinit+0x14>
 800b83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b840:	f7ff bff0 	b.w	800b824 <__sfp_lock_release>
 800b844:	4b04      	ldr	r3, [pc, #16]	@ (800b858 <__sinit+0x28>)
 800b846:	6223      	str	r3, [r4, #32]
 800b848:	4b04      	ldr	r3, [pc, #16]	@ (800b85c <__sinit+0x2c>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1f5      	bne.n	800b83c <__sinit+0xc>
 800b850:	f7ff ffc4 	bl	800b7dc <global_stdio_init.part.0>
 800b854:	e7f2      	b.n	800b83c <__sinit+0xc>
 800b856:	bf00      	nop
 800b858:	0800b79d 	.word	0x0800b79d
 800b85c:	200008b0 	.word	0x200008b0

0800b860 <_fwalk_sglue>:
 800b860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b864:	4607      	mov	r7, r0
 800b866:	4688      	mov	r8, r1
 800b868:	4614      	mov	r4, r2
 800b86a:	2600      	movs	r6, #0
 800b86c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b870:	f1b9 0901 	subs.w	r9, r9, #1
 800b874:	d505      	bpl.n	800b882 <_fwalk_sglue+0x22>
 800b876:	6824      	ldr	r4, [r4, #0]
 800b878:	2c00      	cmp	r4, #0
 800b87a:	d1f7      	bne.n	800b86c <_fwalk_sglue+0xc>
 800b87c:	4630      	mov	r0, r6
 800b87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b882:	89ab      	ldrh	r3, [r5, #12]
 800b884:	2b01      	cmp	r3, #1
 800b886:	d907      	bls.n	800b898 <_fwalk_sglue+0x38>
 800b888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b88c:	3301      	adds	r3, #1
 800b88e:	d003      	beq.n	800b898 <_fwalk_sglue+0x38>
 800b890:	4629      	mov	r1, r5
 800b892:	4638      	mov	r0, r7
 800b894:	47c0      	blx	r8
 800b896:	4306      	orrs	r6, r0
 800b898:	3568      	adds	r5, #104	@ 0x68
 800b89a:	e7e9      	b.n	800b870 <_fwalk_sglue+0x10>

0800b89c <__sread>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	460c      	mov	r4, r1
 800b8a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a4:	f000 f89c 	bl	800b9e0 <_read_r>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	bfab      	itete	ge
 800b8ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b8ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b8b0:	181b      	addge	r3, r3, r0
 800b8b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b8b6:	bfac      	ite	ge
 800b8b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b8ba:	81a3      	strhlt	r3, [r4, #12]
 800b8bc:	bd10      	pop	{r4, pc}

0800b8be <__swrite>:
 800b8be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c2:	461f      	mov	r7, r3
 800b8c4:	898b      	ldrh	r3, [r1, #12]
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	05db      	lsls	r3, r3, #23
 800b8ca:	460c      	mov	r4, r1
 800b8cc:	4616      	mov	r6, r2
 800b8ce:	d505      	bpl.n	800b8dc <__swrite+0x1e>
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d8:	f000 f870 	bl	800b9bc <_lseek_r>
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	4632      	mov	r2, r6
 800b8e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b8e4:	81a3      	strh	r3, [r4, #12]
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f2:	f000 b8ab 	b.w	800ba4c <_write_r>

0800b8f6 <__sseek>:
 800b8f6:	b510      	push	{r4, lr}
 800b8f8:	460c      	mov	r4, r1
 800b8fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fe:	f000 f85d 	bl	800b9bc <_lseek_r>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	bf15      	itete	ne
 800b908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b90a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b90e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b912:	81a3      	strheq	r3, [r4, #12]
 800b914:	bf18      	it	ne
 800b916:	81a3      	strhne	r3, [r4, #12]
 800b918:	bd10      	pop	{r4, pc}

0800b91a <__sclose>:
 800b91a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b91e:	f000 b83d 	b.w	800b99c <_close_r>

0800b922 <memset>:
 800b922:	4603      	mov	r3, r0
 800b924:	4402      	add	r2, r0
 800b926:	4293      	cmp	r3, r2
 800b928:	d100      	bne.n	800b92c <memset+0xa>
 800b92a:	4770      	bx	lr
 800b92c:	f803 1b01 	strb.w	r1, [r3], #1
 800b930:	e7f9      	b.n	800b926 <memset+0x4>

0800b932 <_raise_r>:
 800b932:	291f      	cmp	r1, #31
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4605      	mov	r5, r0
 800b938:	460c      	mov	r4, r1
 800b93a:	d904      	bls.n	800b946 <_raise_r+0x14>
 800b93c:	2316      	movs	r3, #22
 800b93e:	6003      	str	r3, [r0, #0]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	bd38      	pop	{r3, r4, r5, pc}
 800b946:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b948:	b112      	cbz	r2, 800b950 <_raise_r+0x1e>
 800b94a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b94e:	b94b      	cbnz	r3, 800b964 <_raise_r+0x32>
 800b950:	4628      	mov	r0, r5
 800b952:	f000 f869 	bl	800ba28 <_getpid_r>
 800b956:	4622      	mov	r2, r4
 800b958:	4601      	mov	r1, r0
 800b95a:	4628      	mov	r0, r5
 800b95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b960:	f000 b850 	b.w	800ba04 <_kill_r>
 800b964:	2b01      	cmp	r3, #1
 800b966:	d00a      	beq.n	800b97e <_raise_r+0x4c>
 800b968:	1c59      	adds	r1, r3, #1
 800b96a:	d103      	bne.n	800b974 <_raise_r+0x42>
 800b96c:	2316      	movs	r3, #22
 800b96e:	6003      	str	r3, [r0, #0]
 800b970:	2001      	movs	r0, #1
 800b972:	e7e7      	b.n	800b944 <_raise_r+0x12>
 800b974:	2100      	movs	r1, #0
 800b976:	4620      	mov	r0, r4
 800b978:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b97c:	4798      	blx	r3
 800b97e:	2000      	movs	r0, #0
 800b980:	e7e0      	b.n	800b944 <_raise_r+0x12>
	...

0800b984 <raise>:
 800b984:	4b02      	ldr	r3, [pc, #8]	@ (800b990 <raise+0xc>)
 800b986:	4601      	mov	r1, r0
 800b988:	6818      	ldr	r0, [r3, #0]
 800b98a:	f7ff bfd2 	b.w	800b932 <_raise_r>
 800b98e:	bf00      	nop
 800b990:	2000002c 	.word	0x2000002c

0800b994 <_localeconv_r>:
 800b994:	4800      	ldr	r0, [pc, #0]	@ (800b998 <_localeconv_r+0x4>)
 800b996:	4770      	bx	lr
 800b998:	2000016c 	.word	0x2000016c

0800b99c <_close_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	2300      	movs	r3, #0
 800b9a0:	4d05      	ldr	r5, [pc, #20]	@ (800b9b8 <_close_r+0x1c>)
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	602b      	str	r3, [r5, #0]
 800b9a8:	f7fa fe59 	bl	800665e <_close>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_close_r+0x1a>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_close_r+0x1a>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	200008b4 	.word	0x200008b4

0800b9bc <_lseek_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	4d05      	ldr	r5, [pc, #20]	@ (800b9dc <_lseek_r+0x20>)
 800b9c8:	602a      	str	r2, [r5, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	f7fa fe6b 	bl	80066a6 <_lseek>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	d102      	bne.n	800b9da <_lseek_r+0x1e>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	b103      	cbz	r3, 800b9da <_lseek_r+0x1e>
 800b9d8:	6023      	str	r3, [r4, #0]
 800b9da:	bd38      	pop	{r3, r4, r5, pc}
 800b9dc:	200008b4 	.word	0x200008b4

0800b9e0 <_read_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	4611      	mov	r1, r2
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	4d05      	ldr	r5, [pc, #20]	@ (800ba00 <_read_r+0x20>)
 800b9ec:	602a      	str	r2, [r5, #0]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	f7fa fdfc 	bl	80065ec <_read>
 800b9f4:	1c43      	adds	r3, r0, #1
 800b9f6:	d102      	bne.n	800b9fe <_read_r+0x1e>
 800b9f8:	682b      	ldr	r3, [r5, #0]
 800b9fa:	b103      	cbz	r3, 800b9fe <_read_r+0x1e>
 800b9fc:	6023      	str	r3, [r4, #0]
 800b9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ba00:	200008b4 	.word	0x200008b4

0800ba04 <_kill_r>:
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	2300      	movs	r3, #0
 800ba08:	4d06      	ldr	r5, [pc, #24]	@ (800ba24 <_kill_r+0x20>)
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	4608      	mov	r0, r1
 800ba0e:	4611      	mov	r1, r2
 800ba10:	602b      	str	r3, [r5, #0]
 800ba12:	f7fa fdd0 	bl	80065b6 <_kill>
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d102      	bne.n	800ba20 <_kill_r+0x1c>
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	b103      	cbz	r3, 800ba20 <_kill_r+0x1c>
 800ba1e:	6023      	str	r3, [r4, #0]
 800ba20:	bd38      	pop	{r3, r4, r5, pc}
 800ba22:	bf00      	nop
 800ba24:	200008b4 	.word	0x200008b4

0800ba28 <_getpid_r>:
 800ba28:	f7fa bdbe 	b.w	80065a8 <_getpid>

0800ba2c <_sbrk_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	2300      	movs	r3, #0
 800ba30:	4d05      	ldr	r5, [pc, #20]	@ (800ba48 <_sbrk_r+0x1c>)
 800ba32:	4604      	mov	r4, r0
 800ba34:	4608      	mov	r0, r1
 800ba36:	602b      	str	r3, [r5, #0]
 800ba38:	f7fa fe42 	bl	80066c0 <_sbrk>
 800ba3c:	1c43      	adds	r3, r0, #1
 800ba3e:	d102      	bne.n	800ba46 <_sbrk_r+0x1a>
 800ba40:	682b      	ldr	r3, [r5, #0]
 800ba42:	b103      	cbz	r3, 800ba46 <_sbrk_r+0x1a>
 800ba44:	6023      	str	r3, [r4, #0]
 800ba46:	bd38      	pop	{r3, r4, r5, pc}
 800ba48:	200008b4 	.word	0x200008b4

0800ba4c <_write_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4604      	mov	r4, r0
 800ba50:	4608      	mov	r0, r1
 800ba52:	4611      	mov	r1, r2
 800ba54:	2200      	movs	r2, #0
 800ba56:	4d05      	ldr	r5, [pc, #20]	@ (800ba6c <_write_r+0x20>)
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7fa fde3 	bl	8006626 <_write>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_write_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_write_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	200008b4 	.word	0x200008b4

0800ba70 <__errno>:
 800ba70:	4b01      	ldr	r3, [pc, #4]	@ (800ba78 <__errno+0x8>)
 800ba72:	6818      	ldr	r0, [r3, #0]
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	2000002c 	.word	0x2000002c

0800ba7c <__libc_init_array>:
 800ba7c:	b570      	push	{r4, r5, r6, lr}
 800ba7e:	2600      	movs	r6, #0
 800ba80:	4d0c      	ldr	r5, [pc, #48]	@ (800bab4 <__libc_init_array+0x38>)
 800ba82:	4c0d      	ldr	r4, [pc, #52]	@ (800bab8 <__libc_init_array+0x3c>)
 800ba84:	1b64      	subs	r4, r4, r5
 800ba86:	10a4      	asrs	r4, r4, #2
 800ba88:	42a6      	cmp	r6, r4
 800ba8a:	d109      	bne.n	800baa0 <__libc_init_array+0x24>
 800ba8c:	f001 fdb8 	bl	800d600 <_init>
 800ba90:	2600      	movs	r6, #0
 800ba92:	4d0a      	ldr	r5, [pc, #40]	@ (800babc <__libc_init_array+0x40>)
 800ba94:	4c0a      	ldr	r4, [pc, #40]	@ (800bac0 <__libc_init_array+0x44>)
 800ba96:	1b64      	subs	r4, r4, r5
 800ba98:	10a4      	asrs	r4, r4, #2
 800ba9a:	42a6      	cmp	r6, r4
 800ba9c:	d105      	bne.n	800baaa <__libc_init_array+0x2e>
 800ba9e:	bd70      	pop	{r4, r5, r6, pc}
 800baa0:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa4:	4798      	blx	r3
 800baa6:	3601      	adds	r6, #1
 800baa8:	e7ee      	b.n	800ba88 <__libc_init_array+0xc>
 800baaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800baae:	4798      	blx	r3
 800bab0:	3601      	adds	r6, #1
 800bab2:	e7f2      	b.n	800ba9a <__libc_init_array+0x1e>
 800bab4:	0800e030 	.word	0x0800e030
 800bab8:	0800e030 	.word	0x0800e030
 800babc:	0800e030 	.word	0x0800e030
 800bac0:	0800e040 	.word	0x0800e040

0800bac4 <__retarget_lock_init_recursive>:
 800bac4:	4770      	bx	lr

0800bac6 <__retarget_lock_acquire_recursive>:
 800bac6:	4770      	bx	lr

0800bac8 <__retarget_lock_release_recursive>:
 800bac8:	4770      	bx	lr

0800baca <memchr>:
 800baca:	4603      	mov	r3, r0
 800bacc:	b510      	push	{r4, lr}
 800bace:	b2c9      	uxtb	r1, r1
 800bad0:	4402      	add	r2, r0
 800bad2:	4293      	cmp	r3, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	d101      	bne.n	800badc <memchr+0x12>
 800bad8:	2000      	movs	r0, #0
 800bada:	e003      	b.n	800bae4 <memchr+0x1a>
 800badc:	7804      	ldrb	r4, [r0, #0]
 800bade:	3301      	adds	r3, #1
 800bae0:	428c      	cmp	r4, r1
 800bae2:	d1f6      	bne.n	800bad2 <memchr+0x8>
 800bae4:	bd10      	pop	{r4, pc}

0800bae6 <memcpy>:
 800bae6:	440a      	add	r2, r1
 800bae8:	4291      	cmp	r1, r2
 800baea:	f100 33ff 	add.w	r3, r0, #4294967295
 800baee:	d100      	bne.n	800baf2 <memcpy+0xc>
 800baf0:	4770      	bx	lr
 800baf2:	b510      	push	{r4, lr}
 800baf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800baf8:	4291      	cmp	r1, r2
 800bafa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bafe:	d1f9      	bne.n	800baf4 <memcpy+0xe>
 800bb00:	bd10      	pop	{r4, pc}

0800bb02 <quorem>:
 800bb02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb06:	6903      	ldr	r3, [r0, #16]
 800bb08:	690c      	ldr	r4, [r1, #16]
 800bb0a:	4607      	mov	r7, r0
 800bb0c:	42a3      	cmp	r3, r4
 800bb0e:	db7e      	blt.n	800bc0e <quorem+0x10c>
 800bb10:	3c01      	subs	r4, #1
 800bb12:	00a3      	lsls	r3, r4, #2
 800bb14:	f100 0514 	add.w	r5, r0, #20
 800bb18:	f101 0814 	add.w	r8, r1, #20
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb22:	9301      	str	r3, [sp, #4]
 800bb24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb38:	d32e      	bcc.n	800bb98 <quorem+0x96>
 800bb3a:	f04f 0a00 	mov.w	sl, #0
 800bb3e:	46c4      	mov	ip, r8
 800bb40:	46ae      	mov	lr, r5
 800bb42:	46d3      	mov	fp, sl
 800bb44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb48:	b298      	uxth	r0, r3
 800bb4a:	fb06 a000 	mla	r0, r6, r0, sl
 800bb4e:	0c1b      	lsrs	r3, r3, #16
 800bb50:	0c02      	lsrs	r2, r0, #16
 800bb52:	fb06 2303 	mla	r3, r6, r3, r2
 800bb56:	f8de 2000 	ldr.w	r2, [lr]
 800bb5a:	b280      	uxth	r0, r0
 800bb5c:	b292      	uxth	r2, r2
 800bb5e:	1a12      	subs	r2, r2, r0
 800bb60:	445a      	add	r2, fp
 800bb62:	f8de 0000 	ldr.w	r0, [lr]
 800bb66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb74:	b292      	uxth	r2, r2
 800bb76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb7a:	45e1      	cmp	r9, ip
 800bb7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb80:	f84e 2b04 	str.w	r2, [lr], #4
 800bb84:	d2de      	bcs.n	800bb44 <quorem+0x42>
 800bb86:	9b00      	ldr	r3, [sp, #0]
 800bb88:	58eb      	ldr	r3, [r5, r3]
 800bb8a:	b92b      	cbnz	r3, 800bb98 <quorem+0x96>
 800bb8c:	9b01      	ldr	r3, [sp, #4]
 800bb8e:	3b04      	subs	r3, #4
 800bb90:	429d      	cmp	r5, r3
 800bb92:	461a      	mov	r2, r3
 800bb94:	d32f      	bcc.n	800bbf6 <quorem+0xf4>
 800bb96:	613c      	str	r4, [r7, #16]
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f001 f8c5 	bl	800cd28 <__mcmp>
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	db25      	blt.n	800bbee <quorem+0xec>
 800bba2:	4629      	mov	r1, r5
 800bba4:	2000      	movs	r0, #0
 800bba6:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbaa:	f8d1 c000 	ldr.w	ip, [r1]
 800bbae:	fa1f fe82 	uxth.w	lr, r2
 800bbb2:	fa1f f38c 	uxth.w	r3, ip
 800bbb6:	eba3 030e 	sub.w	r3, r3, lr
 800bbba:	4403      	add	r3, r0
 800bbbc:	0c12      	lsrs	r2, r2, #16
 800bbbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bbc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbcc:	45c1      	cmp	r9, r8
 800bbce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbd2:	f841 3b04 	str.w	r3, [r1], #4
 800bbd6:	d2e6      	bcs.n	800bba6 <quorem+0xa4>
 800bbd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbe0:	b922      	cbnz	r2, 800bbec <quorem+0xea>
 800bbe2:	3b04      	subs	r3, #4
 800bbe4:	429d      	cmp	r5, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	d30b      	bcc.n	800bc02 <quorem+0x100>
 800bbea:	613c      	str	r4, [r7, #16]
 800bbec:	3601      	adds	r6, #1
 800bbee:	4630      	mov	r0, r6
 800bbf0:	b003      	add	sp, #12
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	d1cb      	bne.n	800bb96 <quorem+0x94>
 800bbfe:	3c01      	subs	r4, #1
 800bc00:	e7c6      	b.n	800bb90 <quorem+0x8e>
 800bc02:	6812      	ldr	r2, [r2, #0]
 800bc04:	3b04      	subs	r3, #4
 800bc06:	2a00      	cmp	r2, #0
 800bc08:	d1ef      	bne.n	800bbea <quorem+0xe8>
 800bc0a:	3c01      	subs	r4, #1
 800bc0c:	e7ea      	b.n	800bbe4 <quorem+0xe2>
 800bc0e:	2000      	movs	r0, #0
 800bc10:	e7ee      	b.n	800bbf0 <quorem+0xee>
 800bc12:	0000      	movs	r0, r0
 800bc14:	0000      	movs	r0, r0
	...

0800bc18 <_dtoa_r>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	4614      	mov	r4, r2
 800bc1e:	461d      	mov	r5, r3
 800bc20:	69c7      	ldr	r7, [r0, #28]
 800bc22:	b097      	sub	sp, #92	@ 0x5c
 800bc24:	4683      	mov	fp, r0
 800bc26:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bc2a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bc2c:	b97f      	cbnz	r7, 800bc4e <_dtoa_r+0x36>
 800bc2e:	2010      	movs	r0, #16
 800bc30:	f7ff f858 	bl	800ace4 <malloc>
 800bc34:	4602      	mov	r2, r0
 800bc36:	f8cb 001c 	str.w	r0, [fp, #28]
 800bc3a:	b920      	cbnz	r0, 800bc46 <_dtoa_r+0x2e>
 800bc3c:	21ef      	movs	r1, #239	@ 0xef
 800bc3e:	4ba8      	ldr	r3, [pc, #672]	@ (800bee0 <_dtoa_r+0x2c8>)
 800bc40:	48a8      	ldr	r0, [pc, #672]	@ (800bee4 <_dtoa_r+0x2cc>)
 800bc42:	f001 fa21 	bl	800d088 <__assert_func>
 800bc46:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc4a:	6007      	str	r7, [r0, #0]
 800bc4c:	60c7      	str	r7, [r0, #12]
 800bc4e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc52:	6819      	ldr	r1, [r3, #0]
 800bc54:	b159      	cbz	r1, 800bc6e <_dtoa_r+0x56>
 800bc56:	685a      	ldr	r2, [r3, #4]
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4093      	lsls	r3, r2
 800bc5c:	604a      	str	r2, [r1, #4]
 800bc5e:	608b      	str	r3, [r1, #8]
 800bc60:	4658      	mov	r0, fp
 800bc62:	f000 fe29 	bl	800c8b8 <_Bfree>
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc6c:	601a      	str	r2, [r3, #0]
 800bc6e:	1e2b      	subs	r3, r5, #0
 800bc70:	bfaf      	iteee	ge
 800bc72:	2300      	movge	r3, #0
 800bc74:	2201      	movlt	r2, #1
 800bc76:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc7a:	9303      	strlt	r3, [sp, #12]
 800bc7c:	bfa8      	it	ge
 800bc7e:	6033      	strge	r3, [r6, #0]
 800bc80:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bc84:	4b98      	ldr	r3, [pc, #608]	@ (800bee8 <_dtoa_r+0x2d0>)
 800bc86:	bfb8      	it	lt
 800bc88:	6032      	strlt	r2, [r6, #0]
 800bc8a:	ea33 0308 	bics.w	r3, r3, r8
 800bc8e:	d112      	bne.n	800bcb6 <_dtoa_r+0x9e>
 800bc90:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc94:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bc9c:	4323      	orrs	r3, r4
 800bc9e:	f000 8550 	beq.w	800c742 <_dtoa_r+0xb2a>
 800bca2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bca4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800beec <_dtoa_r+0x2d4>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	f000 8552 	beq.w	800c752 <_dtoa_r+0xb3a>
 800bcae:	f10a 0303 	add.w	r3, sl, #3
 800bcb2:	f000 bd4c 	b.w	800c74e <_dtoa_r+0xb36>
 800bcb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcba:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bcbe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f7f4 ff8f 	bl	8000be8 <__aeabi_dcmpeq>
 800bcca:	4607      	mov	r7, r0
 800bccc:	b158      	cbz	r0, 800bce6 <_dtoa_r+0xce>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bcd6:	b113      	cbz	r3, 800bcde <_dtoa_r+0xc6>
 800bcd8:	4b85      	ldr	r3, [pc, #532]	@ (800bef0 <_dtoa_r+0x2d8>)
 800bcda:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bef4 <_dtoa_r+0x2dc>
 800bce2:	f000 bd36 	b.w	800c752 <_dtoa_r+0xb3a>
 800bce6:	ab14      	add	r3, sp, #80	@ 0x50
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	ab15      	add	r3, sp, #84	@ 0x54
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	4658      	mov	r0, fp
 800bcf0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bcf4:	f001 f8c8 	bl	800ce88 <__d2b>
 800bcf8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bcfc:	4681      	mov	r9, r0
 800bcfe:	2e00      	cmp	r6, #0
 800bd00:	d077      	beq.n	800bdf2 <_dtoa_r+0x1da>
 800bd02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd08:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bd0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd10:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd14:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd18:	9712      	str	r7, [sp, #72]	@ 0x48
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	4b76      	ldr	r3, [pc, #472]	@ (800bef8 <_dtoa_r+0x2e0>)
 800bd20:	f7f4 fb42 	bl	80003a8 <__aeabi_dsub>
 800bd24:	a368      	add	r3, pc, #416	@ (adr r3, 800bec8 <_dtoa_r+0x2b0>)
 800bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2a:	f7f4 fcf5 	bl	8000718 <__aeabi_dmul>
 800bd2e:	a368      	add	r3, pc, #416	@ (adr r3, 800bed0 <_dtoa_r+0x2b8>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 fb3a 	bl	80003ac <__adddf3>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	460d      	mov	r5, r1
 800bd3e:	f7f4 fc81 	bl	8000644 <__aeabi_i2d>
 800bd42:	a365      	add	r3, pc, #404	@ (adr r3, 800bed8 <_dtoa_r+0x2c0>)
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f7f4 fce6 	bl	8000718 <__aeabi_dmul>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4620      	mov	r0, r4
 800bd52:	4629      	mov	r1, r5
 800bd54:	f7f4 fb2a 	bl	80003ac <__adddf3>
 800bd58:	4604      	mov	r4, r0
 800bd5a:	460d      	mov	r5, r1
 800bd5c:	f7f4 ff8c 	bl	8000c78 <__aeabi_d2iz>
 800bd60:	2200      	movs	r2, #0
 800bd62:	4607      	mov	r7, r0
 800bd64:	2300      	movs	r3, #0
 800bd66:	4620      	mov	r0, r4
 800bd68:	4629      	mov	r1, r5
 800bd6a:	f7f4 ff47 	bl	8000bfc <__aeabi_dcmplt>
 800bd6e:	b140      	cbz	r0, 800bd82 <_dtoa_r+0x16a>
 800bd70:	4638      	mov	r0, r7
 800bd72:	f7f4 fc67 	bl	8000644 <__aeabi_i2d>
 800bd76:	4622      	mov	r2, r4
 800bd78:	462b      	mov	r3, r5
 800bd7a:	f7f4 ff35 	bl	8000be8 <__aeabi_dcmpeq>
 800bd7e:	b900      	cbnz	r0, 800bd82 <_dtoa_r+0x16a>
 800bd80:	3f01      	subs	r7, #1
 800bd82:	2f16      	cmp	r7, #22
 800bd84:	d853      	bhi.n	800be2e <_dtoa_r+0x216>
 800bd86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd8a:	4b5c      	ldr	r3, [pc, #368]	@ (800befc <_dtoa_r+0x2e4>)
 800bd8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f7f4 ff32 	bl	8000bfc <__aeabi_dcmplt>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d04a      	beq.n	800be32 <_dtoa_r+0x21a>
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	3f01      	subs	r7, #1
 800bda0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bda2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bda4:	1b9b      	subs	r3, r3, r6
 800bda6:	1e5a      	subs	r2, r3, #1
 800bda8:	bf46      	itte	mi
 800bdaa:	f1c3 0801 	rsbmi	r8, r3, #1
 800bdae:	2300      	movmi	r3, #0
 800bdb0:	f04f 0800 	movpl.w	r8, #0
 800bdb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdb6:	bf48      	it	mi
 800bdb8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bdba:	2f00      	cmp	r7, #0
 800bdbc:	db3b      	blt.n	800be36 <_dtoa_r+0x21e>
 800bdbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdc0:	970e      	str	r7, [sp, #56]	@ 0x38
 800bdc2:	443b      	add	r3, r7
 800bdc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdcc:	2b09      	cmp	r3, #9
 800bdce:	d866      	bhi.n	800be9e <_dtoa_r+0x286>
 800bdd0:	2b05      	cmp	r3, #5
 800bdd2:	bfc4      	itt	gt
 800bdd4:	3b04      	subgt	r3, #4
 800bdd6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bdd8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdda:	bfc8      	it	gt
 800bddc:	2400      	movgt	r4, #0
 800bdde:	f1a3 0302 	sub.w	r3, r3, #2
 800bde2:	bfd8      	it	le
 800bde4:	2401      	movle	r4, #1
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d864      	bhi.n	800beb4 <_dtoa_r+0x29c>
 800bdea:	e8df f003 	tbb	[pc, r3]
 800bdee:	382b      	.short	0x382b
 800bdf0:	5636      	.short	0x5636
 800bdf2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bdf6:	441e      	add	r6, r3
 800bdf8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bdfc:	2b20      	cmp	r3, #32
 800bdfe:	bfc1      	itttt	gt
 800be00:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800be04:	fa08 f803 	lslgt.w	r8, r8, r3
 800be08:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800be0c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be10:	bfd6      	itet	le
 800be12:	f1c3 0320 	rsble	r3, r3, #32
 800be16:	ea48 0003 	orrgt.w	r0, r8, r3
 800be1a:	fa04 f003 	lslle.w	r0, r4, r3
 800be1e:	f7f4 fc01 	bl	8000624 <__aeabi_ui2d>
 800be22:	2201      	movs	r2, #1
 800be24:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be28:	3e01      	subs	r6, #1
 800be2a:	9212      	str	r2, [sp, #72]	@ 0x48
 800be2c:	e775      	b.n	800bd1a <_dtoa_r+0x102>
 800be2e:	2301      	movs	r3, #1
 800be30:	e7b6      	b.n	800bda0 <_dtoa_r+0x188>
 800be32:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be34:	e7b5      	b.n	800bda2 <_dtoa_r+0x18a>
 800be36:	427b      	negs	r3, r7
 800be38:	930a      	str	r3, [sp, #40]	@ 0x28
 800be3a:	2300      	movs	r3, #0
 800be3c:	eba8 0807 	sub.w	r8, r8, r7
 800be40:	930e      	str	r3, [sp, #56]	@ 0x38
 800be42:	e7c2      	b.n	800bdca <_dtoa_r+0x1b2>
 800be44:	2300      	movs	r3, #0
 800be46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be48:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	dc35      	bgt.n	800beba <_dtoa_r+0x2a2>
 800be4e:	2301      	movs	r3, #1
 800be50:	461a      	mov	r2, r3
 800be52:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800be56:	9221      	str	r2, [sp, #132]	@ 0x84
 800be58:	e00b      	b.n	800be72 <_dtoa_r+0x25a>
 800be5a:	2301      	movs	r3, #1
 800be5c:	e7f3      	b.n	800be46 <_dtoa_r+0x22e>
 800be5e:	2300      	movs	r3, #0
 800be60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be64:	18fb      	adds	r3, r7, r3
 800be66:	9308      	str	r3, [sp, #32]
 800be68:	3301      	adds	r3, #1
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	9307      	str	r3, [sp, #28]
 800be6e:	bfb8      	it	lt
 800be70:	2301      	movlt	r3, #1
 800be72:	2100      	movs	r1, #0
 800be74:	2204      	movs	r2, #4
 800be76:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be7a:	f102 0514 	add.w	r5, r2, #20
 800be7e:	429d      	cmp	r5, r3
 800be80:	d91f      	bls.n	800bec2 <_dtoa_r+0x2aa>
 800be82:	6041      	str	r1, [r0, #4]
 800be84:	4658      	mov	r0, fp
 800be86:	f000 fcd7 	bl	800c838 <_Balloc>
 800be8a:	4682      	mov	sl, r0
 800be8c:	2800      	cmp	r0, #0
 800be8e:	d139      	bne.n	800bf04 <_dtoa_r+0x2ec>
 800be90:	4602      	mov	r2, r0
 800be92:	f240 11af 	movw	r1, #431	@ 0x1af
 800be96:	4b1a      	ldr	r3, [pc, #104]	@ (800bf00 <_dtoa_r+0x2e8>)
 800be98:	e6d2      	b.n	800bc40 <_dtoa_r+0x28>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e7e0      	b.n	800be60 <_dtoa_r+0x248>
 800be9e:	2401      	movs	r4, #1
 800bea0:	2300      	movs	r3, #0
 800bea2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bea4:	9320      	str	r3, [sp, #128]	@ 0x80
 800bea6:	f04f 33ff 	mov.w	r3, #4294967295
 800beaa:	2200      	movs	r2, #0
 800beac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800beb0:	2312      	movs	r3, #18
 800beb2:	e7d0      	b.n	800be56 <_dtoa_r+0x23e>
 800beb4:	2301      	movs	r3, #1
 800beb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beb8:	e7f5      	b.n	800bea6 <_dtoa_r+0x28e>
 800beba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bebc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bec0:	e7d7      	b.n	800be72 <_dtoa_r+0x25a>
 800bec2:	3101      	adds	r1, #1
 800bec4:	0052      	lsls	r2, r2, #1
 800bec6:	e7d8      	b.n	800be7a <_dtoa_r+0x262>
 800bec8:	636f4361 	.word	0x636f4361
 800becc:	3fd287a7 	.word	0x3fd287a7
 800bed0:	8b60c8b3 	.word	0x8b60c8b3
 800bed4:	3fc68a28 	.word	0x3fc68a28
 800bed8:	509f79fb 	.word	0x509f79fb
 800bedc:	3fd34413 	.word	0x3fd34413
 800bee0:	0800dcf9 	.word	0x0800dcf9
 800bee4:	0800dd10 	.word	0x0800dd10
 800bee8:	7ff00000 	.word	0x7ff00000
 800beec:	0800dcf5 	.word	0x0800dcf5
 800bef0:	0800dcc9 	.word	0x0800dcc9
 800bef4:	0800dcc8 	.word	0x0800dcc8
 800bef8:	3ff80000 	.word	0x3ff80000
 800befc:	0800de08 	.word	0x0800de08
 800bf00:	0800dd68 	.word	0x0800dd68
 800bf04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf08:	6018      	str	r0, [r3, #0]
 800bf0a:	9b07      	ldr	r3, [sp, #28]
 800bf0c:	2b0e      	cmp	r3, #14
 800bf0e:	f200 80a4 	bhi.w	800c05a <_dtoa_r+0x442>
 800bf12:	2c00      	cmp	r4, #0
 800bf14:	f000 80a1 	beq.w	800c05a <_dtoa_r+0x442>
 800bf18:	2f00      	cmp	r7, #0
 800bf1a:	dd33      	ble.n	800bf84 <_dtoa_r+0x36c>
 800bf1c:	4b86      	ldr	r3, [pc, #536]	@ (800c138 <_dtoa_r+0x520>)
 800bf1e:	f007 020f 	and.w	r2, r7, #15
 800bf22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf26:	05f8      	lsls	r0, r7, #23
 800bf28:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf2c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf34:	d516      	bpl.n	800bf64 <_dtoa_r+0x34c>
 800bf36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf3a:	4b80      	ldr	r3, [pc, #512]	@ (800c13c <_dtoa_r+0x524>)
 800bf3c:	2603      	movs	r6, #3
 800bf3e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf42:	f7f4 fd13 	bl	800096c <__aeabi_ddiv>
 800bf46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf4a:	f004 040f 	and.w	r4, r4, #15
 800bf4e:	4d7b      	ldr	r5, [pc, #492]	@ (800c13c <_dtoa_r+0x524>)
 800bf50:	b954      	cbnz	r4, 800bf68 <_dtoa_r+0x350>
 800bf52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf5a:	f7f4 fd07 	bl	800096c <__aeabi_ddiv>
 800bf5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf62:	e028      	b.n	800bfb6 <_dtoa_r+0x39e>
 800bf64:	2602      	movs	r6, #2
 800bf66:	e7f2      	b.n	800bf4e <_dtoa_r+0x336>
 800bf68:	07e1      	lsls	r1, r4, #31
 800bf6a:	d508      	bpl.n	800bf7e <_dtoa_r+0x366>
 800bf6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf74:	f7f4 fbd0 	bl	8000718 <__aeabi_dmul>
 800bf78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf7c:	3601      	adds	r6, #1
 800bf7e:	1064      	asrs	r4, r4, #1
 800bf80:	3508      	adds	r5, #8
 800bf82:	e7e5      	b.n	800bf50 <_dtoa_r+0x338>
 800bf84:	f000 80d2 	beq.w	800c12c <_dtoa_r+0x514>
 800bf88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf8c:	427c      	negs	r4, r7
 800bf8e:	4b6a      	ldr	r3, [pc, #424]	@ (800c138 <_dtoa_r+0x520>)
 800bf90:	f004 020f 	and.w	r2, r4, #15
 800bf94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	f7f4 fbbc 	bl	8000718 <__aeabi_dmul>
 800bfa0:	2602      	movs	r6, #2
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa8:	4d64      	ldr	r5, [pc, #400]	@ (800c13c <_dtoa_r+0x524>)
 800bfaa:	1124      	asrs	r4, r4, #4
 800bfac:	2c00      	cmp	r4, #0
 800bfae:	f040 80b2 	bne.w	800c116 <_dtoa_r+0x4fe>
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1d3      	bne.n	800bf5e <_dtoa_r+0x346>
 800bfb6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bfba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 80b7 	beq.w	800c130 <_dtoa_r+0x518>
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	4b5d      	ldr	r3, [pc, #372]	@ (800c140 <_dtoa_r+0x528>)
 800bfca:	f7f4 fe17 	bl	8000bfc <__aeabi_dcmplt>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f000 80ae 	beq.w	800c130 <_dtoa_r+0x518>
 800bfd4:	9b07      	ldr	r3, [sp, #28]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f000 80aa 	beq.w	800c130 <_dtoa_r+0x518>
 800bfdc:	9b08      	ldr	r3, [sp, #32]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	dd37      	ble.n	800c052 <_dtoa_r+0x43a>
 800bfe2:	1e7b      	subs	r3, r7, #1
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	9304      	str	r3, [sp, #16]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	4629      	mov	r1, r5
 800bfec:	4b55      	ldr	r3, [pc, #340]	@ (800c144 <_dtoa_r+0x52c>)
 800bfee:	f7f4 fb93 	bl	8000718 <__aeabi_dmul>
 800bff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bff6:	9c08      	ldr	r4, [sp, #32]
 800bff8:	3601      	adds	r6, #1
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7f4 fb22 	bl	8000644 <__aeabi_i2d>
 800c000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c004:	f7f4 fb88 	bl	8000718 <__aeabi_dmul>
 800c008:	2200      	movs	r2, #0
 800c00a:	4b4f      	ldr	r3, [pc, #316]	@ (800c148 <_dtoa_r+0x530>)
 800c00c:	f7f4 f9ce 	bl	80003ac <__adddf3>
 800c010:	4605      	mov	r5, r0
 800c012:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c016:	2c00      	cmp	r4, #0
 800c018:	f040 809a 	bne.w	800c150 <_dtoa_r+0x538>
 800c01c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c020:	2200      	movs	r2, #0
 800c022:	4b4a      	ldr	r3, [pc, #296]	@ (800c14c <_dtoa_r+0x534>)
 800c024:	f7f4 f9c0 	bl	80003a8 <__aeabi_dsub>
 800c028:	4602      	mov	r2, r0
 800c02a:	460b      	mov	r3, r1
 800c02c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c030:	462a      	mov	r2, r5
 800c032:	4633      	mov	r3, r6
 800c034:	f7f4 fe00 	bl	8000c38 <__aeabi_dcmpgt>
 800c038:	2800      	cmp	r0, #0
 800c03a:	f040 828e 	bne.w	800c55a <_dtoa_r+0x942>
 800c03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c042:	462a      	mov	r2, r5
 800c044:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c048:	f7f4 fdd8 	bl	8000bfc <__aeabi_dcmplt>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	f040 8127 	bne.w	800c2a0 <_dtoa_r+0x688>
 800c052:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c056:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c05a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f2c0 8163 	blt.w	800c328 <_dtoa_r+0x710>
 800c062:	2f0e      	cmp	r7, #14
 800c064:	f300 8160 	bgt.w	800c328 <_dtoa_r+0x710>
 800c068:	4b33      	ldr	r3, [pc, #204]	@ (800c138 <_dtoa_r+0x520>)
 800c06a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c06e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c072:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c076:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c078:	2b00      	cmp	r3, #0
 800c07a:	da03      	bge.n	800c084 <_dtoa_r+0x46c>
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f340 8100 	ble.w	800c284 <_dtoa_r+0x66c>
 800c084:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c088:	4656      	mov	r6, sl
 800c08a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c08e:	4620      	mov	r0, r4
 800c090:	4629      	mov	r1, r5
 800c092:	f7f4 fc6b 	bl	800096c <__aeabi_ddiv>
 800c096:	f7f4 fdef 	bl	8000c78 <__aeabi_d2iz>
 800c09a:	4680      	mov	r8, r0
 800c09c:	f7f4 fad2 	bl	8000644 <__aeabi_i2d>
 800c0a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0a4:	f7f4 fb38 	bl	8000718 <__aeabi_dmul>
 800c0a8:	4602      	mov	r2, r0
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 f97a 	bl	80003a8 <__aeabi_dsub>
 800c0b4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c0b8:	9d07      	ldr	r5, [sp, #28]
 800c0ba:	f806 4b01 	strb.w	r4, [r6], #1
 800c0be:	eba6 040a 	sub.w	r4, r6, sl
 800c0c2:	42a5      	cmp	r5, r4
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	f040 8116 	bne.w	800c2f8 <_dtoa_r+0x6e0>
 800c0cc:	f7f4 f96e 	bl	80003ac <__adddf3>
 800c0d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	460d      	mov	r5, r1
 800c0d8:	f7f4 fdae 	bl	8000c38 <__aeabi_dcmpgt>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	f040 80f8 	bne.w	800c2d2 <_dtoa_r+0x6ba>
 800c0e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	f7f4 fd7d 	bl	8000be8 <__aeabi_dcmpeq>
 800c0ee:	b118      	cbz	r0, 800c0f8 <_dtoa_r+0x4e0>
 800c0f0:	f018 0f01 	tst.w	r8, #1
 800c0f4:	f040 80ed 	bne.w	800c2d2 <_dtoa_r+0x6ba>
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	4658      	mov	r0, fp
 800c0fc:	f000 fbdc 	bl	800c8b8 <_Bfree>
 800c100:	2300      	movs	r3, #0
 800c102:	7033      	strb	r3, [r6, #0]
 800c104:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c106:	3701      	adds	r7, #1
 800c108:	601f      	str	r7, [r3, #0]
 800c10a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 8320 	beq.w	800c752 <_dtoa_r+0xb3a>
 800c112:	601e      	str	r6, [r3, #0]
 800c114:	e31d      	b.n	800c752 <_dtoa_r+0xb3a>
 800c116:	07e2      	lsls	r2, r4, #31
 800c118:	d505      	bpl.n	800c126 <_dtoa_r+0x50e>
 800c11a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c11e:	f7f4 fafb 	bl	8000718 <__aeabi_dmul>
 800c122:	2301      	movs	r3, #1
 800c124:	3601      	adds	r6, #1
 800c126:	1064      	asrs	r4, r4, #1
 800c128:	3508      	adds	r5, #8
 800c12a:	e73f      	b.n	800bfac <_dtoa_r+0x394>
 800c12c:	2602      	movs	r6, #2
 800c12e:	e742      	b.n	800bfb6 <_dtoa_r+0x39e>
 800c130:	9c07      	ldr	r4, [sp, #28]
 800c132:	9704      	str	r7, [sp, #16]
 800c134:	e761      	b.n	800bffa <_dtoa_r+0x3e2>
 800c136:	bf00      	nop
 800c138:	0800de08 	.word	0x0800de08
 800c13c:	0800dde0 	.word	0x0800dde0
 800c140:	3ff00000 	.word	0x3ff00000
 800c144:	40240000 	.word	0x40240000
 800c148:	401c0000 	.word	0x401c0000
 800c14c:	40140000 	.word	0x40140000
 800c150:	4b70      	ldr	r3, [pc, #448]	@ (800c314 <_dtoa_r+0x6fc>)
 800c152:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c154:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c158:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c15c:	4454      	add	r4, sl
 800c15e:	2900      	cmp	r1, #0
 800c160:	d045      	beq.n	800c1ee <_dtoa_r+0x5d6>
 800c162:	2000      	movs	r0, #0
 800c164:	496c      	ldr	r1, [pc, #432]	@ (800c318 <_dtoa_r+0x700>)
 800c166:	f7f4 fc01 	bl	800096c <__aeabi_ddiv>
 800c16a:	4633      	mov	r3, r6
 800c16c:	462a      	mov	r2, r5
 800c16e:	f7f4 f91b 	bl	80003a8 <__aeabi_dsub>
 800c172:	4656      	mov	r6, sl
 800c174:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c17c:	f7f4 fd7c 	bl	8000c78 <__aeabi_d2iz>
 800c180:	4605      	mov	r5, r0
 800c182:	f7f4 fa5f 	bl	8000644 <__aeabi_i2d>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c18e:	f7f4 f90b 	bl	80003a8 <__aeabi_dsub>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	3530      	adds	r5, #48	@ 0x30
 800c198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c19c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1a0:	f806 5b01 	strb.w	r5, [r6], #1
 800c1a4:	f7f4 fd2a 	bl	8000bfc <__aeabi_dcmplt>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d163      	bne.n	800c274 <_dtoa_r+0x65c>
 800c1ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	495a      	ldr	r1, [pc, #360]	@ (800c31c <_dtoa_r+0x704>)
 800c1b4:	f7f4 f8f8 	bl	80003a8 <__aeabi_dsub>
 800c1b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1bc:	f7f4 fd1e 	bl	8000bfc <__aeabi_dcmplt>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	f040 8087 	bne.w	800c2d4 <_dtoa_r+0x6bc>
 800c1c6:	42a6      	cmp	r6, r4
 800c1c8:	f43f af43 	beq.w	800c052 <_dtoa_r+0x43a>
 800c1cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	4b53      	ldr	r3, [pc, #332]	@ (800c320 <_dtoa_r+0x708>)
 800c1d4:	f7f4 faa0 	bl	8000718 <__aeabi_dmul>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e2:	4b4f      	ldr	r3, [pc, #316]	@ (800c320 <_dtoa_r+0x708>)
 800c1e4:	f7f4 fa98 	bl	8000718 <__aeabi_dmul>
 800c1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ec:	e7c4      	b.n	800c178 <_dtoa_r+0x560>
 800c1ee:	4631      	mov	r1, r6
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	f7f4 fa91 	bl	8000718 <__aeabi_dmul>
 800c1f6:	4656      	mov	r6, sl
 800c1f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1fc:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c1fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c202:	f7f4 fd39 	bl	8000c78 <__aeabi_d2iz>
 800c206:	4605      	mov	r5, r0
 800c208:	f7f4 fa1c 	bl	8000644 <__aeabi_i2d>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c214:	f7f4 f8c8 	bl	80003a8 <__aeabi_dsub>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	3530      	adds	r5, #48	@ 0x30
 800c21e:	f806 5b01 	strb.w	r5, [r6], #1
 800c222:	42a6      	cmp	r6, r4
 800c224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c228:	f04f 0200 	mov.w	r2, #0
 800c22c:	d124      	bne.n	800c278 <_dtoa_r+0x660>
 800c22e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c232:	4b39      	ldr	r3, [pc, #228]	@ (800c318 <_dtoa_r+0x700>)
 800c234:	f7f4 f8ba 	bl	80003ac <__adddf3>
 800c238:	4602      	mov	r2, r0
 800c23a:	460b      	mov	r3, r1
 800c23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c240:	f7f4 fcfa 	bl	8000c38 <__aeabi_dcmpgt>
 800c244:	2800      	cmp	r0, #0
 800c246:	d145      	bne.n	800c2d4 <_dtoa_r+0x6bc>
 800c248:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c24c:	2000      	movs	r0, #0
 800c24e:	4932      	ldr	r1, [pc, #200]	@ (800c318 <_dtoa_r+0x700>)
 800c250:	f7f4 f8aa 	bl	80003a8 <__aeabi_dsub>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c25c:	f7f4 fcce 	bl	8000bfc <__aeabi_dcmplt>
 800c260:	2800      	cmp	r0, #0
 800c262:	f43f aef6 	beq.w	800c052 <_dtoa_r+0x43a>
 800c266:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c268:	1e73      	subs	r3, r6, #1
 800c26a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c26c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c270:	2b30      	cmp	r3, #48	@ 0x30
 800c272:	d0f8      	beq.n	800c266 <_dtoa_r+0x64e>
 800c274:	9f04      	ldr	r7, [sp, #16]
 800c276:	e73f      	b.n	800c0f8 <_dtoa_r+0x4e0>
 800c278:	4b29      	ldr	r3, [pc, #164]	@ (800c320 <_dtoa_r+0x708>)
 800c27a:	f7f4 fa4d 	bl	8000718 <__aeabi_dmul>
 800c27e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c282:	e7bc      	b.n	800c1fe <_dtoa_r+0x5e6>
 800c284:	d10c      	bne.n	800c2a0 <_dtoa_r+0x688>
 800c286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c28a:	2200      	movs	r2, #0
 800c28c:	4b25      	ldr	r3, [pc, #148]	@ (800c324 <_dtoa_r+0x70c>)
 800c28e:	f7f4 fa43 	bl	8000718 <__aeabi_dmul>
 800c292:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c296:	f7f4 fcc5 	bl	8000c24 <__aeabi_dcmpge>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	f000 815b 	beq.w	800c556 <_dtoa_r+0x93e>
 800c2a0:	2400      	movs	r4, #0
 800c2a2:	4625      	mov	r5, r4
 800c2a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2a6:	4656      	mov	r6, sl
 800c2a8:	43db      	mvns	r3, r3
 800c2aa:	9304      	str	r3, [sp, #16]
 800c2ac:	2700      	movs	r7, #0
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4658      	mov	r0, fp
 800c2b2:	f000 fb01 	bl	800c8b8 <_Bfree>
 800c2b6:	2d00      	cmp	r5, #0
 800c2b8:	d0dc      	beq.n	800c274 <_dtoa_r+0x65c>
 800c2ba:	b12f      	cbz	r7, 800c2c8 <_dtoa_r+0x6b0>
 800c2bc:	42af      	cmp	r7, r5
 800c2be:	d003      	beq.n	800c2c8 <_dtoa_r+0x6b0>
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	4658      	mov	r0, fp
 800c2c4:	f000 faf8 	bl	800c8b8 <_Bfree>
 800c2c8:	4629      	mov	r1, r5
 800c2ca:	4658      	mov	r0, fp
 800c2cc:	f000 faf4 	bl	800c8b8 <_Bfree>
 800c2d0:	e7d0      	b.n	800c274 <_dtoa_r+0x65c>
 800c2d2:	9704      	str	r7, [sp, #16]
 800c2d4:	4633      	mov	r3, r6
 800c2d6:	461e      	mov	r6, r3
 800c2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2dc:	2a39      	cmp	r2, #57	@ 0x39
 800c2de:	d107      	bne.n	800c2f0 <_dtoa_r+0x6d8>
 800c2e0:	459a      	cmp	sl, r3
 800c2e2:	d1f8      	bne.n	800c2d6 <_dtoa_r+0x6be>
 800c2e4:	9a04      	ldr	r2, [sp, #16]
 800c2e6:	3201      	adds	r2, #1
 800c2e8:	9204      	str	r2, [sp, #16]
 800c2ea:	2230      	movs	r2, #48	@ 0x30
 800c2ec:	f88a 2000 	strb.w	r2, [sl]
 800c2f0:	781a      	ldrb	r2, [r3, #0]
 800c2f2:	3201      	adds	r2, #1
 800c2f4:	701a      	strb	r2, [r3, #0]
 800c2f6:	e7bd      	b.n	800c274 <_dtoa_r+0x65c>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	4b09      	ldr	r3, [pc, #36]	@ (800c320 <_dtoa_r+0x708>)
 800c2fc:	f7f4 fa0c 	bl	8000718 <__aeabi_dmul>
 800c300:	2200      	movs	r2, #0
 800c302:	2300      	movs	r3, #0
 800c304:	4604      	mov	r4, r0
 800c306:	460d      	mov	r5, r1
 800c308:	f7f4 fc6e 	bl	8000be8 <__aeabi_dcmpeq>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	f43f aebc 	beq.w	800c08a <_dtoa_r+0x472>
 800c312:	e6f1      	b.n	800c0f8 <_dtoa_r+0x4e0>
 800c314:	0800de08 	.word	0x0800de08
 800c318:	3fe00000 	.word	0x3fe00000
 800c31c:	3ff00000 	.word	0x3ff00000
 800c320:	40240000 	.word	0x40240000
 800c324:	40140000 	.word	0x40140000
 800c328:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	f000 80db 	beq.w	800c4e6 <_dtoa_r+0x8ce>
 800c330:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c332:	2a01      	cmp	r2, #1
 800c334:	f300 80bf 	bgt.w	800c4b6 <_dtoa_r+0x89e>
 800c338:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	f000 80b7 	beq.w	800c4ae <_dtoa_r+0x896>
 800c340:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c344:	4646      	mov	r6, r8
 800c346:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c34a:	2101      	movs	r1, #1
 800c34c:	441a      	add	r2, r3
 800c34e:	4658      	mov	r0, fp
 800c350:	4498      	add	r8, r3
 800c352:	9209      	str	r2, [sp, #36]	@ 0x24
 800c354:	f000 fb64 	bl	800ca20 <__i2b>
 800c358:	4605      	mov	r5, r0
 800c35a:	b15e      	cbz	r6, 800c374 <_dtoa_r+0x75c>
 800c35c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c35e:	2b00      	cmp	r3, #0
 800c360:	dd08      	ble.n	800c374 <_dtoa_r+0x75c>
 800c362:	42b3      	cmp	r3, r6
 800c364:	bfa8      	it	ge
 800c366:	4633      	movge	r3, r6
 800c368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c36a:	eba8 0803 	sub.w	r8, r8, r3
 800c36e:	1af6      	subs	r6, r6, r3
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	9309      	str	r3, [sp, #36]	@ 0x24
 800c374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c376:	b1f3      	cbz	r3, 800c3b6 <_dtoa_r+0x79e>
 800c378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 80b7 	beq.w	800c4ee <_dtoa_r+0x8d6>
 800c380:	b18c      	cbz	r4, 800c3a6 <_dtoa_r+0x78e>
 800c382:	4629      	mov	r1, r5
 800c384:	4622      	mov	r2, r4
 800c386:	4658      	mov	r0, fp
 800c388:	f000 fc08 	bl	800cb9c <__pow5mult>
 800c38c:	464a      	mov	r2, r9
 800c38e:	4601      	mov	r1, r0
 800c390:	4605      	mov	r5, r0
 800c392:	4658      	mov	r0, fp
 800c394:	f000 fb5a 	bl	800ca4c <__multiply>
 800c398:	4649      	mov	r1, r9
 800c39a:	9004      	str	r0, [sp, #16]
 800c39c:	4658      	mov	r0, fp
 800c39e:	f000 fa8b 	bl	800c8b8 <_Bfree>
 800c3a2:	9b04      	ldr	r3, [sp, #16]
 800c3a4:	4699      	mov	r9, r3
 800c3a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3a8:	1b1a      	subs	r2, r3, r4
 800c3aa:	d004      	beq.n	800c3b6 <_dtoa_r+0x79e>
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	4658      	mov	r0, fp
 800c3b0:	f000 fbf4 	bl	800cb9c <__pow5mult>
 800c3b4:	4681      	mov	r9, r0
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	4658      	mov	r0, fp
 800c3ba:	f000 fb31 	bl	800ca20 <__i2b>
 800c3be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3c0:	4604      	mov	r4, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	f000 81c9 	beq.w	800c75a <_dtoa_r+0xb42>
 800c3c8:	461a      	mov	r2, r3
 800c3ca:	4601      	mov	r1, r0
 800c3cc:	4658      	mov	r0, fp
 800c3ce:	f000 fbe5 	bl	800cb9c <__pow5mult>
 800c3d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	f300 808f 	bgt.w	800c4fa <_dtoa_r+0x8e2>
 800c3dc:	9b02      	ldr	r3, [sp, #8]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f040 8087 	bne.w	800c4f2 <_dtoa_r+0x8da>
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f040 8083 	bne.w	800c4f6 <_dtoa_r+0x8de>
 800c3f0:	9b03      	ldr	r3, [sp, #12]
 800c3f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3f6:	0d1b      	lsrs	r3, r3, #20
 800c3f8:	051b      	lsls	r3, r3, #20
 800c3fa:	b12b      	cbz	r3, 800c408 <_dtoa_r+0x7f0>
 800c3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3fe:	f108 0801 	add.w	r8, r8, #1
 800c402:	3301      	adds	r3, #1
 800c404:	9309      	str	r3, [sp, #36]	@ 0x24
 800c406:	2301      	movs	r3, #1
 800c408:	930a      	str	r3, [sp, #40]	@ 0x28
 800c40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 81aa 	beq.w	800c766 <_dtoa_r+0xb4e>
 800c412:	6923      	ldr	r3, [r4, #16]
 800c414:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c418:	6918      	ldr	r0, [r3, #16]
 800c41a:	f000 fab5 	bl	800c988 <__hi0bits>
 800c41e:	f1c0 0020 	rsb	r0, r0, #32
 800c422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c424:	4418      	add	r0, r3
 800c426:	f010 001f 	ands.w	r0, r0, #31
 800c42a:	d071      	beq.n	800c510 <_dtoa_r+0x8f8>
 800c42c:	f1c0 0320 	rsb	r3, r0, #32
 800c430:	2b04      	cmp	r3, #4
 800c432:	dd65      	ble.n	800c500 <_dtoa_r+0x8e8>
 800c434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c436:	f1c0 001c 	rsb	r0, r0, #28
 800c43a:	4403      	add	r3, r0
 800c43c:	4480      	add	r8, r0
 800c43e:	4406      	add	r6, r0
 800c440:	9309      	str	r3, [sp, #36]	@ 0x24
 800c442:	f1b8 0f00 	cmp.w	r8, #0
 800c446:	dd05      	ble.n	800c454 <_dtoa_r+0x83c>
 800c448:	4649      	mov	r1, r9
 800c44a:	4642      	mov	r2, r8
 800c44c:	4658      	mov	r0, fp
 800c44e:	f000 fbff 	bl	800cc50 <__lshift>
 800c452:	4681      	mov	r9, r0
 800c454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c456:	2b00      	cmp	r3, #0
 800c458:	dd05      	ble.n	800c466 <_dtoa_r+0x84e>
 800c45a:	4621      	mov	r1, r4
 800c45c:	461a      	mov	r2, r3
 800c45e:	4658      	mov	r0, fp
 800c460:	f000 fbf6 	bl	800cc50 <__lshift>
 800c464:	4604      	mov	r4, r0
 800c466:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d053      	beq.n	800c514 <_dtoa_r+0x8fc>
 800c46c:	4621      	mov	r1, r4
 800c46e:	4648      	mov	r0, r9
 800c470:	f000 fc5a 	bl	800cd28 <__mcmp>
 800c474:	2800      	cmp	r0, #0
 800c476:	da4d      	bge.n	800c514 <_dtoa_r+0x8fc>
 800c478:	1e7b      	subs	r3, r7, #1
 800c47a:	4649      	mov	r1, r9
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	220a      	movs	r2, #10
 800c480:	2300      	movs	r3, #0
 800c482:	4658      	mov	r0, fp
 800c484:	f000 fa3a 	bl	800c8fc <__multadd>
 800c488:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c48a:	4681      	mov	r9, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 816c 	beq.w	800c76a <_dtoa_r+0xb52>
 800c492:	2300      	movs	r3, #0
 800c494:	4629      	mov	r1, r5
 800c496:	220a      	movs	r2, #10
 800c498:	4658      	mov	r0, fp
 800c49a:	f000 fa2f 	bl	800c8fc <__multadd>
 800c49e:	9b08      	ldr	r3, [sp, #32]
 800c4a0:	4605      	mov	r5, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	dc61      	bgt.n	800c56a <_dtoa_r+0x952>
 800c4a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c4a8:	2b02      	cmp	r3, #2
 800c4aa:	dc3b      	bgt.n	800c524 <_dtoa_r+0x90c>
 800c4ac:	e05d      	b.n	800c56a <_dtoa_r+0x952>
 800c4ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4b0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c4b4:	e746      	b.n	800c344 <_dtoa_r+0x72c>
 800c4b6:	9b07      	ldr	r3, [sp, #28]
 800c4b8:	1e5c      	subs	r4, r3, #1
 800c4ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4bc:	42a3      	cmp	r3, r4
 800c4be:	bfbf      	itttt	lt
 800c4c0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c4c2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c4c4:	1ae3      	sublt	r3, r4, r3
 800c4c6:	18d2      	addlt	r2, r2, r3
 800c4c8:	bfa8      	it	ge
 800c4ca:	1b1c      	subge	r4, r3, r4
 800c4cc:	9b07      	ldr	r3, [sp, #28]
 800c4ce:	bfbe      	ittt	lt
 800c4d0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c4d2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c4d4:	2400      	movlt	r4, #0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	bfb5      	itete	lt
 800c4da:	eba8 0603 	sublt.w	r6, r8, r3
 800c4de:	4646      	movge	r6, r8
 800c4e0:	2300      	movlt	r3, #0
 800c4e2:	9b07      	ldrge	r3, [sp, #28]
 800c4e4:	e730      	b.n	800c348 <_dtoa_r+0x730>
 800c4e6:	4646      	mov	r6, r8
 800c4e8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4ea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c4ec:	e735      	b.n	800c35a <_dtoa_r+0x742>
 800c4ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4f0:	e75c      	b.n	800c3ac <_dtoa_r+0x794>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	e788      	b.n	800c408 <_dtoa_r+0x7f0>
 800c4f6:	9b02      	ldr	r3, [sp, #8]
 800c4f8:	e786      	b.n	800c408 <_dtoa_r+0x7f0>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4fe:	e788      	b.n	800c412 <_dtoa_r+0x7fa>
 800c500:	d09f      	beq.n	800c442 <_dtoa_r+0x82a>
 800c502:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c504:	331c      	adds	r3, #28
 800c506:	441a      	add	r2, r3
 800c508:	4498      	add	r8, r3
 800c50a:	441e      	add	r6, r3
 800c50c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c50e:	e798      	b.n	800c442 <_dtoa_r+0x82a>
 800c510:	4603      	mov	r3, r0
 800c512:	e7f6      	b.n	800c502 <_dtoa_r+0x8ea>
 800c514:	9b07      	ldr	r3, [sp, #28]
 800c516:	9704      	str	r7, [sp, #16]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	dc20      	bgt.n	800c55e <_dtoa_r+0x946>
 800c51c:	9308      	str	r3, [sp, #32]
 800c51e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c520:	2b02      	cmp	r3, #2
 800c522:	dd1e      	ble.n	800c562 <_dtoa_r+0x94a>
 800c524:	9b08      	ldr	r3, [sp, #32]
 800c526:	2b00      	cmp	r3, #0
 800c528:	f47f aebc 	bne.w	800c2a4 <_dtoa_r+0x68c>
 800c52c:	4621      	mov	r1, r4
 800c52e:	2205      	movs	r2, #5
 800c530:	4658      	mov	r0, fp
 800c532:	f000 f9e3 	bl	800c8fc <__multadd>
 800c536:	4601      	mov	r1, r0
 800c538:	4604      	mov	r4, r0
 800c53a:	4648      	mov	r0, r9
 800c53c:	f000 fbf4 	bl	800cd28 <__mcmp>
 800c540:	2800      	cmp	r0, #0
 800c542:	f77f aeaf 	ble.w	800c2a4 <_dtoa_r+0x68c>
 800c546:	2331      	movs	r3, #49	@ 0x31
 800c548:	4656      	mov	r6, sl
 800c54a:	f806 3b01 	strb.w	r3, [r6], #1
 800c54e:	9b04      	ldr	r3, [sp, #16]
 800c550:	3301      	adds	r3, #1
 800c552:	9304      	str	r3, [sp, #16]
 800c554:	e6aa      	b.n	800c2ac <_dtoa_r+0x694>
 800c556:	9c07      	ldr	r4, [sp, #28]
 800c558:	9704      	str	r7, [sp, #16]
 800c55a:	4625      	mov	r5, r4
 800c55c:	e7f3      	b.n	800c546 <_dtoa_r+0x92e>
 800c55e:	9b07      	ldr	r3, [sp, #28]
 800c560:	9308      	str	r3, [sp, #32]
 800c562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 8104 	beq.w	800c772 <_dtoa_r+0xb5a>
 800c56a:	2e00      	cmp	r6, #0
 800c56c:	dd05      	ble.n	800c57a <_dtoa_r+0x962>
 800c56e:	4629      	mov	r1, r5
 800c570:	4632      	mov	r2, r6
 800c572:	4658      	mov	r0, fp
 800c574:	f000 fb6c 	bl	800cc50 <__lshift>
 800c578:	4605      	mov	r5, r0
 800c57a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d05a      	beq.n	800c636 <_dtoa_r+0xa1e>
 800c580:	4658      	mov	r0, fp
 800c582:	6869      	ldr	r1, [r5, #4]
 800c584:	f000 f958 	bl	800c838 <_Balloc>
 800c588:	4606      	mov	r6, r0
 800c58a:	b928      	cbnz	r0, 800c598 <_dtoa_r+0x980>
 800c58c:	4602      	mov	r2, r0
 800c58e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c592:	4b83      	ldr	r3, [pc, #524]	@ (800c7a0 <_dtoa_r+0xb88>)
 800c594:	f7ff bb54 	b.w	800bc40 <_dtoa_r+0x28>
 800c598:	692a      	ldr	r2, [r5, #16]
 800c59a:	f105 010c 	add.w	r1, r5, #12
 800c59e:	3202      	adds	r2, #2
 800c5a0:	0092      	lsls	r2, r2, #2
 800c5a2:	300c      	adds	r0, #12
 800c5a4:	f7ff fa9f 	bl	800bae6 <memcpy>
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4658      	mov	r0, fp
 800c5ae:	f000 fb4f 	bl	800cc50 <__lshift>
 800c5b2:	462f      	mov	r7, r5
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	f10a 0301 	add.w	r3, sl, #1
 800c5ba:	9307      	str	r3, [sp, #28]
 800c5bc:	9b08      	ldr	r3, [sp, #32]
 800c5be:	4453      	add	r3, sl
 800c5c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5c2:	9b02      	ldr	r3, [sp, #8]
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ca:	9b07      	ldr	r3, [sp, #28]
 800c5cc:	4621      	mov	r1, r4
 800c5ce:	3b01      	subs	r3, #1
 800c5d0:	4648      	mov	r0, r9
 800c5d2:	9302      	str	r3, [sp, #8]
 800c5d4:	f7ff fa95 	bl	800bb02 <quorem>
 800c5d8:	4639      	mov	r1, r7
 800c5da:	9008      	str	r0, [sp, #32]
 800c5dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5e0:	4648      	mov	r0, r9
 800c5e2:	f000 fba1 	bl	800cd28 <__mcmp>
 800c5e6:	462a      	mov	r2, r5
 800c5e8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4658      	mov	r0, fp
 800c5ee:	f000 fbb7 	bl	800cd60 <__mdiff>
 800c5f2:	68c2      	ldr	r2, [r0, #12]
 800c5f4:	4606      	mov	r6, r0
 800c5f6:	bb02      	cbnz	r2, 800c63a <_dtoa_r+0xa22>
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	4648      	mov	r0, r9
 800c5fc:	f000 fb94 	bl	800cd28 <__mcmp>
 800c600:	4602      	mov	r2, r0
 800c602:	4631      	mov	r1, r6
 800c604:	4658      	mov	r0, fp
 800c606:	920c      	str	r2, [sp, #48]	@ 0x30
 800c608:	f000 f956 	bl	800c8b8 <_Bfree>
 800c60c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c60e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c610:	9e07      	ldr	r6, [sp, #28]
 800c612:	ea43 0102 	orr.w	r1, r3, r2
 800c616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c618:	4319      	orrs	r1, r3
 800c61a:	d110      	bne.n	800c63e <_dtoa_r+0xa26>
 800c61c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c620:	d029      	beq.n	800c676 <_dtoa_r+0xa5e>
 800c622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c624:	2b00      	cmp	r3, #0
 800c626:	dd02      	ble.n	800c62e <_dtoa_r+0xa16>
 800c628:	9b08      	ldr	r3, [sp, #32]
 800c62a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c62e:	9b02      	ldr	r3, [sp, #8]
 800c630:	f883 8000 	strb.w	r8, [r3]
 800c634:	e63b      	b.n	800c2ae <_dtoa_r+0x696>
 800c636:	4628      	mov	r0, r5
 800c638:	e7bb      	b.n	800c5b2 <_dtoa_r+0x99a>
 800c63a:	2201      	movs	r2, #1
 800c63c:	e7e1      	b.n	800c602 <_dtoa_r+0x9ea>
 800c63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c640:	2b00      	cmp	r3, #0
 800c642:	db04      	blt.n	800c64e <_dtoa_r+0xa36>
 800c644:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c646:	430b      	orrs	r3, r1
 800c648:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c64a:	430b      	orrs	r3, r1
 800c64c:	d120      	bne.n	800c690 <_dtoa_r+0xa78>
 800c64e:	2a00      	cmp	r2, #0
 800c650:	dded      	ble.n	800c62e <_dtoa_r+0xa16>
 800c652:	4649      	mov	r1, r9
 800c654:	2201      	movs	r2, #1
 800c656:	4658      	mov	r0, fp
 800c658:	f000 fafa 	bl	800cc50 <__lshift>
 800c65c:	4621      	mov	r1, r4
 800c65e:	4681      	mov	r9, r0
 800c660:	f000 fb62 	bl	800cd28 <__mcmp>
 800c664:	2800      	cmp	r0, #0
 800c666:	dc03      	bgt.n	800c670 <_dtoa_r+0xa58>
 800c668:	d1e1      	bne.n	800c62e <_dtoa_r+0xa16>
 800c66a:	f018 0f01 	tst.w	r8, #1
 800c66e:	d0de      	beq.n	800c62e <_dtoa_r+0xa16>
 800c670:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c674:	d1d8      	bne.n	800c628 <_dtoa_r+0xa10>
 800c676:	2339      	movs	r3, #57	@ 0x39
 800c678:	9a02      	ldr	r2, [sp, #8]
 800c67a:	7013      	strb	r3, [r2, #0]
 800c67c:	4633      	mov	r3, r6
 800c67e:	461e      	mov	r6, r3
 800c680:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c684:	3b01      	subs	r3, #1
 800c686:	2a39      	cmp	r2, #57	@ 0x39
 800c688:	d052      	beq.n	800c730 <_dtoa_r+0xb18>
 800c68a:	3201      	adds	r2, #1
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	e60e      	b.n	800c2ae <_dtoa_r+0x696>
 800c690:	2a00      	cmp	r2, #0
 800c692:	dd07      	ble.n	800c6a4 <_dtoa_r+0xa8c>
 800c694:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c698:	d0ed      	beq.n	800c676 <_dtoa_r+0xa5e>
 800c69a:	9a02      	ldr	r2, [sp, #8]
 800c69c:	f108 0301 	add.w	r3, r8, #1
 800c6a0:	7013      	strb	r3, [r2, #0]
 800c6a2:	e604      	b.n	800c2ae <_dtoa_r+0x696>
 800c6a4:	9b07      	ldr	r3, [sp, #28]
 800c6a6:	9a07      	ldr	r2, [sp, #28]
 800c6a8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c6ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d028      	beq.n	800c704 <_dtoa_r+0xaec>
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	220a      	movs	r2, #10
 800c6b8:	4658      	mov	r0, fp
 800c6ba:	f000 f91f 	bl	800c8fc <__multadd>
 800c6be:	42af      	cmp	r7, r5
 800c6c0:	4681      	mov	r9, r0
 800c6c2:	f04f 0300 	mov.w	r3, #0
 800c6c6:	f04f 020a 	mov.w	r2, #10
 800c6ca:	4639      	mov	r1, r7
 800c6cc:	4658      	mov	r0, fp
 800c6ce:	d107      	bne.n	800c6e0 <_dtoa_r+0xac8>
 800c6d0:	f000 f914 	bl	800c8fc <__multadd>
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	9b07      	ldr	r3, [sp, #28]
 800c6da:	3301      	adds	r3, #1
 800c6dc:	9307      	str	r3, [sp, #28]
 800c6de:	e774      	b.n	800c5ca <_dtoa_r+0x9b2>
 800c6e0:	f000 f90c 	bl	800c8fc <__multadd>
 800c6e4:	4629      	mov	r1, r5
 800c6e6:	4607      	mov	r7, r0
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	220a      	movs	r2, #10
 800c6ec:	4658      	mov	r0, fp
 800c6ee:	f000 f905 	bl	800c8fc <__multadd>
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	e7f0      	b.n	800c6d8 <_dtoa_r+0xac0>
 800c6f6:	9b08      	ldr	r3, [sp, #32]
 800c6f8:	2700      	movs	r7, #0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	bfcc      	ite	gt
 800c6fe:	461e      	movgt	r6, r3
 800c700:	2601      	movle	r6, #1
 800c702:	4456      	add	r6, sl
 800c704:	4649      	mov	r1, r9
 800c706:	2201      	movs	r2, #1
 800c708:	4658      	mov	r0, fp
 800c70a:	f000 faa1 	bl	800cc50 <__lshift>
 800c70e:	4621      	mov	r1, r4
 800c710:	4681      	mov	r9, r0
 800c712:	f000 fb09 	bl	800cd28 <__mcmp>
 800c716:	2800      	cmp	r0, #0
 800c718:	dcb0      	bgt.n	800c67c <_dtoa_r+0xa64>
 800c71a:	d102      	bne.n	800c722 <_dtoa_r+0xb0a>
 800c71c:	f018 0f01 	tst.w	r8, #1
 800c720:	d1ac      	bne.n	800c67c <_dtoa_r+0xa64>
 800c722:	4633      	mov	r3, r6
 800c724:	461e      	mov	r6, r3
 800c726:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c72a:	2a30      	cmp	r2, #48	@ 0x30
 800c72c:	d0fa      	beq.n	800c724 <_dtoa_r+0xb0c>
 800c72e:	e5be      	b.n	800c2ae <_dtoa_r+0x696>
 800c730:	459a      	cmp	sl, r3
 800c732:	d1a4      	bne.n	800c67e <_dtoa_r+0xa66>
 800c734:	9b04      	ldr	r3, [sp, #16]
 800c736:	3301      	adds	r3, #1
 800c738:	9304      	str	r3, [sp, #16]
 800c73a:	2331      	movs	r3, #49	@ 0x31
 800c73c:	f88a 3000 	strb.w	r3, [sl]
 800c740:	e5b5      	b.n	800c2ae <_dtoa_r+0x696>
 800c742:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c744:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c7a4 <_dtoa_r+0xb8c>
 800c748:	b11b      	cbz	r3, 800c752 <_dtoa_r+0xb3a>
 800c74a:	f10a 0308 	add.w	r3, sl, #8
 800c74e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	4650      	mov	r0, sl
 800c754:	b017      	add	sp, #92	@ 0x5c
 800c756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	f77f ae3d 	ble.w	800c3dc <_dtoa_r+0x7c4>
 800c762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c764:	930a      	str	r3, [sp, #40]	@ 0x28
 800c766:	2001      	movs	r0, #1
 800c768:	e65b      	b.n	800c422 <_dtoa_r+0x80a>
 800c76a:	9b08      	ldr	r3, [sp, #32]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f77f aed6 	ble.w	800c51e <_dtoa_r+0x906>
 800c772:	4656      	mov	r6, sl
 800c774:	4621      	mov	r1, r4
 800c776:	4648      	mov	r0, r9
 800c778:	f7ff f9c3 	bl	800bb02 <quorem>
 800c77c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c780:	9b08      	ldr	r3, [sp, #32]
 800c782:	f806 8b01 	strb.w	r8, [r6], #1
 800c786:	eba6 020a 	sub.w	r2, r6, sl
 800c78a:	4293      	cmp	r3, r2
 800c78c:	ddb3      	ble.n	800c6f6 <_dtoa_r+0xade>
 800c78e:	4649      	mov	r1, r9
 800c790:	2300      	movs	r3, #0
 800c792:	220a      	movs	r2, #10
 800c794:	4658      	mov	r0, fp
 800c796:	f000 f8b1 	bl	800c8fc <__multadd>
 800c79a:	4681      	mov	r9, r0
 800c79c:	e7ea      	b.n	800c774 <_dtoa_r+0xb5c>
 800c79e:	bf00      	nop
 800c7a0:	0800dd68 	.word	0x0800dd68
 800c7a4:	0800dcec 	.word	0x0800dcec

0800c7a8 <_free_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	2900      	cmp	r1, #0
 800c7ae:	d040      	beq.n	800c832 <_free_r+0x8a>
 800c7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7b4:	1f0c      	subs	r4, r1, #4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bfb8      	it	lt
 800c7ba:	18e4      	addlt	r4, r4, r3
 800c7bc:	f7fe fb44 	bl	800ae48 <__malloc_lock>
 800c7c0:	4a1c      	ldr	r2, [pc, #112]	@ (800c834 <_free_r+0x8c>)
 800c7c2:	6813      	ldr	r3, [r2, #0]
 800c7c4:	b933      	cbnz	r3, 800c7d4 <_free_r+0x2c>
 800c7c6:	6063      	str	r3, [r4, #4]
 800c7c8:	6014      	str	r4, [r2, #0]
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7d0:	f7fe bb40 	b.w	800ae54 <__malloc_unlock>
 800c7d4:	42a3      	cmp	r3, r4
 800c7d6:	d908      	bls.n	800c7ea <_free_r+0x42>
 800c7d8:	6820      	ldr	r0, [r4, #0]
 800c7da:	1821      	adds	r1, r4, r0
 800c7dc:	428b      	cmp	r3, r1
 800c7de:	bf01      	itttt	eq
 800c7e0:	6819      	ldreq	r1, [r3, #0]
 800c7e2:	685b      	ldreq	r3, [r3, #4]
 800c7e4:	1809      	addeq	r1, r1, r0
 800c7e6:	6021      	streq	r1, [r4, #0]
 800c7e8:	e7ed      	b.n	800c7c6 <_free_r+0x1e>
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	b10b      	cbz	r3, 800c7f4 <_free_r+0x4c>
 800c7f0:	42a3      	cmp	r3, r4
 800c7f2:	d9fa      	bls.n	800c7ea <_free_r+0x42>
 800c7f4:	6811      	ldr	r1, [r2, #0]
 800c7f6:	1850      	adds	r0, r2, r1
 800c7f8:	42a0      	cmp	r0, r4
 800c7fa:	d10b      	bne.n	800c814 <_free_r+0x6c>
 800c7fc:	6820      	ldr	r0, [r4, #0]
 800c7fe:	4401      	add	r1, r0
 800c800:	1850      	adds	r0, r2, r1
 800c802:	4283      	cmp	r3, r0
 800c804:	6011      	str	r1, [r2, #0]
 800c806:	d1e0      	bne.n	800c7ca <_free_r+0x22>
 800c808:	6818      	ldr	r0, [r3, #0]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	4408      	add	r0, r1
 800c80e:	6010      	str	r0, [r2, #0]
 800c810:	6053      	str	r3, [r2, #4]
 800c812:	e7da      	b.n	800c7ca <_free_r+0x22>
 800c814:	d902      	bls.n	800c81c <_free_r+0x74>
 800c816:	230c      	movs	r3, #12
 800c818:	602b      	str	r3, [r5, #0]
 800c81a:	e7d6      	b.n	800c7ca <_free_r+0x22>
 800c81c:	6820      	ldr	r0, [r4, #0]
 800c81e:	1821      	adds	r1, r4, r0
 800c820:	428b      	cmp	r3, r1
 800c822:	bf01      	itttt	eq
 800c824:	6819      	ldreq	r1, [r3, #0]
 800c826:	685b      	ldreq	r3, [r3, #4]
 800c828:	1809      	addeq	r1, r1, r0
 800c82a:	6021      	streq	r1, [r4, #0]
 800c82c:	6063      	str	r3, [r4, #4]
 800c82e:	6054      	str	r4, [r2, #4]
 800c830:	e7cb      	b.n	800c7ca <_free_r+0x22>
 800c832:	bd38      	pop	{r3, r4, r5, pc}
 800c834:	20000774 	.word	0x20000774

0800c838 <_Balloc>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	69c6      	ldr	r6, [r0, #28]
 800c83c:	4604      	mov	r4, r0
 800c83e:	460d      	mov	r5, r1
 800c840:	b976      	cbnz	r6, 800c860 <_Balloc+0x28>
 800c842:	2010      	movs	r0, #16
 800c844:	f7fe fa4e 	bl	800ace4 <malloc>
 800c848:	4602      	mov	r2, r0
 800c84a:	61e0      	str	r0, [r4, #28]
 800c84c:	b920      	cbnz	r0, 800c858 <_Balloc+0x20>
 800c84e:	216b      	movs	r1, #107	@ 0x6b
 800c850:	4b17      	ldr	r3, [pc, #92]	@ (800c8b0 <_Balloc+0x78>)
 800c852:	4818      	ldr	r0, [pc, #96]	@ (800c8b4 <_Balloc+0x7c>)
 800c854:	f000 fc18 	bl	800d088 <__assert_func>
 800c858:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c85c:	6006      	str	r6, [r0, #0]
 800c85e:	60c6      	str	r6, [r0, #12]
 800c860:	69e6      	ldr	r6, [r4, #28]
 800c862:	68f3      	ldr	r3, [r6, #12]
 800c864:	b183      	cbz	r3, 800c888 <_Balloc+0x50>
 800c866:	69e3      	ldr	r3, [r4, #28]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c86e:	b9b8      	cbnz	r0, 800c8a0 <_Balloc+0x68>
 800c870:	2101      	movs	r1, #1
 800c872:	fa01 f605 	lsl.w	r6, r1, r5
 800c876:	1d72      	adds	r2, r6, #5
 800c878:	4620      	mov	r0, r4
 800c87a:	0092      	lsls	r2, r2, #2
 800c87c:	f000 fc22 	bl	800d0c4 <_calloc_r>
 800c880:	b160      	cbz	r0, 800c89c <_Balloc+0x64>
 800c882:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c886:	e00e      	b.n	800c8a6 <_Balloc+0x6e>
 800c888:	2221      	movs	r2, #33	@ 0x21
 800c88a:	2104      	movs	r1, #4
 800c88c:	4620      	mov	r0, r4
 800c88e:	f000 fc19 	bl	800d0c4 <_calloc_r>
 800c892:	69e3      	ldr	r3, [r4, #28]
 800c894:	60f0      	str	r0, [r6, #12]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1e4      	bne.n	800c866 <_Balloc+0x2e>
 800c89c:	2000      	movs	r0, #0
 800c89e:	bd70      	pop	{r4, r5, r6, pc}
 800c8a0:	6802      	ldr	r2, [r0, #0]
 800c8a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8ac:	e7f7      	b.n	800c89e <_Balloc+0x66>
 800c8ae:	bf00      	nop
 800c8b0:	0800dcf9 	.word	0x0800dcf9
 800c8b4:	0800dd79 	.word	0x0800dd79

0800c8b8 <_Bfree>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	69c6      	ldr	r6, [r0, #28]
 800c8bc:	4605      	mov	r5, r0
 800c8be:	460c      	mov	r4, r1
 800c8c0:	b976      	cbnz	r6, 800c8e0 <_Bfree+0x28>
 800c8c2:	2010      	movs	r0, #16
 800c8c4:	f7fe fa0e 	bl	800ace4 <malloc>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	61e8      	str	r0, [r5, #28]
 800c8cc:	b920      	cbnz	r0, 800c8d8 <_Bfree+0x20>
 800c8ce:	218f      	movs	r1, #143	@ 0x8f
 800c8d0:	4b08      	ldr	r3, [pc, #32]	@ (800c8f4 <_Bfree+0x3c>)
 800c8d2:	4809      	ldr	r0, [pc, #36]	@ (800c8f8 <_Bfree+0x40>)
 800c8d4:	f000 fbd8 	bl	800d088 <__assert_func>
 800c8d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8dc:	6006      	str	r6, [r0, #0]
 800c8de:	60c6      	str	r6, [r0, #12]
 800c8e0:	b13c      	cbz	r4, 800c8f2 <_Bfree+0x3a>
 800c8e2:	69eb      	ldr	r3, [r5, #28]
 800c8e4:	6862      	ldr	r2, [r4, #4]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8ec:	6021      	str	r1, [r4, #0]
 800c8ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
 800c8f4:	0800dcf9 	.word	0x0800dcf9
 800c8f8:	0800dd79 	.word	0x0800dd79

0800c8fc <__multadd>:
 800c8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c900:	4607      	mov	r7, r0
 800c902:	460c      	mov	r4, r1
 800c904:	461e      	mov	r6, r3
 800c906:	2000      	movs	r0, #0
 800c908:	690d      	ldr	r5, [r1, #16]
 800c90a:	f101 0c14 	add.w	ip, r1, #20
 800c90e:	f8dc 3000 	ldr.w	r3, [ip]
 800c912:	3001      	adds	r0, #1
 800c914:	b299      	uxth	r1, r3
 800c916:	fb02 6101 	mla	r1, r2, r1, r6
 800c91a:	0c1e      	lsrs	r6, r3, #16
 800c91c:	0c0b      	lsrs	r3, r1, #16
 800c91e:	fb02 3306 	mla	r3, r2, r6, r3
 800c922:	b289      	uxth	r1, r1
 800c924:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c928:	4285      	cmp	r5, r0
 800c92a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c92e:	f84c 1b04 	str.w	r1, [ip], #4
 800c932:	dcec      	bgt.n	800c90e <__multadd+0x12>
 800c934:	b30e      	cbz	r6, 800c97a <__multadd+0x7e>
 800c936:	68a3      	ldr	r3, [r4, #8]
 800c938:	42ab      	cmp	r3, r5
 800c93a:	dc19      	bgt.n	800c970 <__multadd+0x74>
 800c93c:	6861      	ldr	r1, [r4, #4]
 800c93e:	4638      	mov	r0, r7
 800c940:	3101      	adds	r1, #1
 800c942:	f7ff ff79 	bl	800c838 <_Balloc>
 800c946:	4680      	mov	r8, r0
 800c948:	b928      	cbnz	r0, 800c956 <__multadd+0x5a>
 800c94a:	4602      	mov	r2, r0
 800c94c:	21ba      	movs	r1, #186	@ 0xba
 800c94e:	4b0c      	ldr	r3, [pc, #48]	@ (800c980 <__multadd+0x84>)
 800c950:	480c      	ldr	r0, [pc, #48]	@ (800c984 <__multadd+0x88>)
 800c952:	f000 fb99 	bl	800d088 <__assert_func>
 800c956:	6922      	ldr	r2, [r4, #16]
 800c958:	f104 010c 	add.w	r1, r4, #12
 800c95c:	3202      	adds	r2, #2
 800c95e:	0092      	lsls	r2, r2, #2
 800c960:	300c      	adds	r0, #12
 800c962:	f7ff f8c0 	bl	800bae6 <memcpy>
 800c966:	4621      	mov	r1, r4
 800c968:	4638      	mov	r0, r7
 800c96a:	f7ff ffa5 	bl	800c8b8 <_Bfree>
 800c96e:	4644      	mov	r4, r8
 800c970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c974:	3501      	adds	r5, #1
 800c976:	615e      	str	r6, [r3, #20]
 800c978:	6125      	str	r5, [r4, #16]
 800c97a:	4620      	mov	r0, r4
 800c97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c980:	0800dd68 	.word	0x0800dd68
 800c984:	0800dd79 	.word	0x0800dd79

0800c988 <__hi0bits>:
 800c988:	4603      	mov	r3, r0
 800c98a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c98e:	bf3a      	itte	cc
 800c990:	0403      	lslcc	r3, r0, #16
 800c992:	2010      	movcc	r0, #16
 800c994:	2000      	movcs	r0, #0
 800c996:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c99a:	bf3c      	itt	cc
 800c99c:	021b      	lslcc	r3, r3, #8
 800c99e:	3008      	addcc	r0, #8
 800c9a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9a4:	bf3c      	itt	cc
 800c9a6:	011b      	lslcc	r3, r3, #4
 800c9a8:	3004      	addcc	r0, #4
 800c9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9ae:	bf3c      	itt	cc
 800c9b0:	009b      	lslcc	r3, r3, #2
 800c9b2:	3002      	addcc	r0, #2
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	db05      	blt.n	800c9c4 <__hi0bits+0x3c>
 800c9b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c9bc:	f100 0001 	add.w	r0, r0, #1
 800c9c0:	bf08      	it	eq
 800c9c2:	2020      	moveq	r0, #32
 800c9c4:	4770      	bx	lr

0800c9c6 <__lo0bits>:
 800c9c6:	6803      	ldr	r3, [r0, #0]
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	f013 0007 	ands.w	r0, r3, #7
 800c9ce:	d00b      	beq.n	800c9e8 <__lo0bits+0x22>
 800c9d0:	07d9      	lsls	r1, r3, #31
 800c9d2:	d421      	bmi.n	800ca18 <__lo0bits+0x52>
 800c9d4:	0798      	lsls	r0, r3, #30
 800c9d6:	bf49      	itett	mi
 800c9d8:	085b      	lsrmi	r3, r3, #1
 800c9da:	089b      	lsrpl	r3, r3, #2
 800c9dc:	2001      	movmi	r0, #1
 800c9de:	6013      	strmi	r3, [r2, #0]
 800c9e0:	bf5c      	itt	pl
 800c9e2:	2002      	movpl	r0, #2
 800c9e4:	6013      	strpl	r3, [r2, #0]
 800c9e6:	4770      	bx	lr
 800c9e8:	b299      	uxth	r1, r3
 800c9ea:	b909      	cbnz	r1, 800c9f0 <__lo0bits+0x2a>
 800c9ec:	2010      	movs	r0, #16
 800c9ee:	0c1b      	lsrs	r3, r3, #16
 800c9f0:	b2d9      	uxtb	r1, r3
 800c9f2:	b909      	cbnz	r1, 800c9f8 <__lo0bits+0x32>
 800c9f4:	3008      	adds	r0, #8
 800c9f6:	0a1b      	lsrs	r3, r3, #8
 800c9f8:	0719      	lsls	r1, r3, #28
 800c9fa:	bf04      	itt	eq
 800c9fc:	091b      	lsreq	r3, r3, #4
 800c9fe:	3004      	addeq	r0, #4
 800ca00:	0799      	lsls	r1, r3, #30
 800ca02:	bf04      	itt	eq
 800ca04:	089b      	lsreq	r3, r3, #2
 800ca06:	3002      	addeq	r0, #2
 800ca08:	07d9      	lsls	r1, r3, #31
 800ca0a:	d403      	bmi.n	800ca14 <__lo0bits+0x4e>
 800ca0c:	085b      	lsrs	r3, r3, #1
 800ca0e:	f100 0001 	add.w	r0, r0, #1
 800ca12:	d003      	beq.n	800ca1c <__lo0bits+0x56>
 800ca14:	6013      	str	r3, [r2, #0]
 800ca16:	4770      	bx	lr
 800ca18:	2000      	movs	r0, #0
 800ca1a:	4770      	bx	lr
 800ca1c:	2020      	movs	r0, #32
 800ca1e:	4770      	bx	lr

0800ca20 <__i2b>:
 800ca20:	b510      	push	{r4, lr}
 800ca22:	460c      	mov	r4, r1
 800ca24:	2101      	movs	r1, #1
 800ca26:	f7ff ff07 	bl	800c838 <_Balloc>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	b928      	cbnz	r0, 800ca3a <__i2b+0x1a>
 800ca2e:	f240 1145 	movw	r1, #325	@ 0x145
 800ca32:	4b04      	ldr	r3, [pc, #16]	@ (800ca44 <__i2b+0x24>)
 800ca34:	4804      	ldr	r0, [pc, #16]	@ (800ca48 <__i2b+0x28>)
 800ca36:	f000 fb27 	bl	800d088 <__assert_func>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	6144      	str	r4, [r0, #20]
 800ca3e:	6103      	str	r3, [r0, #16]
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	bf00      	nop
 800ca44:	0800dd68 	.word	0x0800dd68
 800ca48:	0800dd79 	.word	0x0800dd79

0800ca4c <__multiply>:
 800ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	4614      	mov	r4, r2
 800ca52:	690a      	ldr	r2, [r1, #16]
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	460f      	mov	r7, r1
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	bfa2      	ittt	ge
 800ca5c:	4623      	movge	r3, r4
 800ca5e:	460c      	movge	r4, r1
 800ca60:	461f      	movge	r7, r3
 800ca62:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ca66:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ca6a:	68a3      	ldr	r3, [r4, #8]
 800ca6c:	6861      	ldr	r1, [r4, #4]
 800ca6e:	eb0a 0609 	add.w	r6, sl, r9
 800ca72:	42b3      	cmp	r3, r6
 800ca74:	b085      	sub	sp, #20
 800ca76:	bfb8      	it	lt
 800ca78:	3101      	addlt	r1, #1
 800ca7a:	f7ff fedd 	bl	800c838 <_Balloc>
 800ca7e:	b930      	cbnz	r0, 800ca8e <__multiply+0x42>
 800ca80:	4602      	mov	r2, r0
 800ca82:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca86:	4b43      	ldr	r3, [pc, #268]	@ (800cb94 <__multiply+0x148>)
 800ca88:	4843      	ldr	r0, [pc, #268]	@ (800cb98 <__multiply+0x14c>)
 800ca8a:	f000 fafd 	bl	800d088 <__assert_func>
 800ca8e:	f100 0514 	add.w	r5, r0, #20
 800ca92:	462b      	mov	r3, r5
 800ca94:	2200      	movs	r2, #0
 800ca96:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca9a:	4543      	cmp	r3, r8
 800ca9c:	d321      	bcc.n	800cae2 <__multiply+0x96>
 800ca9e:	f107 0114 	add.w	r1, r7, #20
 800caa2:	f104 0214 	add.w	r2, r4, #20
 800caa6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800caaa:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800caae:	9302      	str	r3, [sp, #8]
 800cab0:	1b13      	subs	r3, r2, r4
 800cab2:	3b15      	subs	r3, #21
 800cab4:	f023 0303 	bic.w	r3, r3, #3
 800cab8:	3304      	adds	r3, #4
 800caba:	f104 0715 	add.w	r7, r4, #21
 800cabe:	42ba      	cmp	r2, r7
 800cac0:	bf38      	it	cc
 800cac2:	2304      	movcc	r3, #4
 800cac4:	9301      	str	r3, [sp, #4]
 800cac6:	9b02      	ldr	r3, [sp, #8]
 800cac8:	9103      	str	r1, [sp, #12]
 800caca:	428b      	cmp	r3, r1
 800cacc:	d80c      	bhi.n	800cae8 <__multiply+0x9c>
 800cace:	2e00      	cmp	r6, #0
 800cad0:	dd03      	ble.n	800cada <__multiply+0x8e>
 800cad2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d05a      	beq.n	800cb90 <__multiply+0x144>
 800cada:	6106      	str	r6, [r0, #16]
 800cadc:	b005      	add	sp, #20
 800cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae2:	f843 2b04 	str.w	r2, [r3], #4
 800cae6:	e7d8      	b.n	800ca9a <__multiply+0x4e>
 800cae8:	f8b1 a000 	ldrh.w	sl, [r1]
 800caec:	f1ba 0f00 	cmp.w	sl, #0
 800caf0:	d023      	beq.n	800cb3a <__multiply+0xee>
 800caf2:	46a9      	mov	r9, r5
 800caf4:	f04f 0c00 	mov.w	ip, #0
 800caf8:	f104 0e14 	add.w	lr, r4, #20
 800cafc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb00:	f8d9 3000 	ldr.w	r3, [r9]
 800cb04:	fa1f fb87 	uxth.w	fp, r7
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	fb0a 330b 	mla	r3, sl, fp, r3
 800cb0e:	4463      	add	r3, ip
 800cb10:	f8d9 c000 	ldr.w	ip, [r9]
 800cb14:	0c3f      	lsrs	r7, r7, #16
 800cb16:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cb1a:	fb0a c707 	mla	r7, sl, r7, ip
 800cb1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb28:	4572      	cmp	r2, lr
 800cb2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb2e:	f849 3b04 	str.w	r3, [r9], #4
 800cb32:	d8e3      	bhi.n	800cafc <__multiply+0xb0>
 800cb34:	9b01      	ldr	r3, [sp, #4]
 800cb36:	f845 c003 	str.w	ip, [r5, r3]
 800cb3a:	9b03      	ldr	r3, [sp, #12]
 800cb3c:	3104      	adds	r1, #4
 800cb3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb42:	f1b9 0f00 	cmp.w	r9, #0
 800cb46:	d021      	beq.n	800cb8c <__multiply+0x140>
 800cb48:	46ae      	mov	lr, r5
 800cb4a:	f04f 0a00 	mov.w	sl, #0
 800cb4e:	682b      	ldr	r3, [r5, #0]
 800cb50:	f104 0c14 	add.w	ip, r4, #20
 800cb54:	f8bc b000 	ldrh.w	fp, [ip]
 800cb58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	fb09 770b 	mla	r7, r9, fp, r7
 800cb62:	4457      	add	r7, sl
 800cb64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb68:	f84e 3b04 	str.w	r3, [lr], #4
 800cb6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb74:	f8be 3000 	ldrh.w	r3, [lr]
 800cb78:	4562      	cmp	r2, ip
 800cb7a:	fb09 330a 	mla	r3, r9, sl, r3
 800cb7e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cb82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb86:	d8e5      	bhi.n	800cb54 <__multiply+0x108>
 800cb88:	9f01      	ldr	r7, [sp, #4]
 800cb8a:	51eb      	str	r3, [r5, r7]
 800cb8c:	3504      	adds	r5, #4
 800cb8e:	e79a      	b.n	800cac6 <__multiply+0x7a>
 800cb90:	3e01      	subs	r6, #1
 800cb92:	e79c      	b.n	800cace <__multiply+0x82>
 800cb94:	0800dd68 	.word	0x0800dd68
 800cb98:	0800dd79 	.word	0x0800dd79

0800cb9c <__pow5mult>:
 800cb9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cba0:	4615      	mov	r5, r2
 800cba2:	f012 0203 	ands.w	r2, r2, #3
 800cba6:	4607      	mov	r7, r0
 800cba8:	460e      	mov	r6, r1
 800cbaa:	d007      	beq.n	800cbbc <__pow5mult+0x20>
 800cbac:	4c25      	ldr	r4, [pc, #148]	@ (800cc44 <__pow5mult+0xa8>)
 800cbae:	3a01      	subs	r2, #1
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbb6:	f7ff fea1 	bl	800c8fc <__multadd>
 800cbba:	4606      	mov	r6, r0
 800cbbc:	10ad      	asrs	r5, r5, #2
 800cbbe:	d03d      	beq.n	800cc3c <__pow5mult+0xa0>
 800cbc0:	69fc      	ldr	r4, [r7, #28]
 800cbc2:	b97c      	cbnz	r4, 800cbe4 <__pow5mult+0x48>
 800cbc4:	2010      	movs	r0, #16
 800cbc6:	f7fe f88d 	bl	800ace4 <malloc>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	61f8      	str	r0, [r7, #28]
 800cbce:	b928      	cbnz	r0, 800cbdc <__pow5mult+0x40>
 800cbd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbd4:	4b1c      	ldr	r3, [pc, #112]	@ (800cc48 <__pow5mult+0xac>)
 800cbd6:	481d      	ldr	r0, [pc, #116]	@ (800cc4c <__pow5mult+0xb0>)
 800cbd8:	f000 fa56 	bl	800d088 <__assert_func>
 800cbdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbe0:	6004      	str	r4, [r0, #0]
 800cbe2:	60c4      	str	r4, [r0, #12]
 800cbe4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cbe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbec:	b94c      	cbnz	r4, 800cc02 <__pow5mult+0x66>
 800cbee:	f240 2171 	movw	r1, #625	@ 0x271
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7ff ff14 	bl	800ca20 <__i2b>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc00:	6003      	str	r3, [r0, #0]
 800cc02:	f04f 0900 	mov.w	r9, #0
 800cc06:	07eb      	lsls	r3, r5, #31
 800cc08:	d50a      	bpl.n	800cc20 <__pow5mult+0x84>
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	4622      	mov	r2, r4
 800cc0e:	4638      	mov	r0, r7
 800cc10:	f7ff ff1c 	bl	800ca4c <__multiply>
 800cc14:	4680      	mov	r8, r0
 800cc16:	4631      	mov	r1, r6
 800cc18:	4638      	mov	r0, r7
 800cc1a:	f7ff fe4d 	bl	800c8b8 <_Bfree>
 800cc1e:	4646      	mov	r6, r8
 800cc20:	106d      	asrs	r5, r5, #1
 800cc22:	d00b      	beq.n	800cc3c <__pow5mult+0xa0>
 800cc24:	6820      	ldr	r0, [r4, #0]
 800cc26:	b938      	cbnz	r0, 800cc38 <__pow5mult+0x9c>
 800cc28:	4622      	mov	r2, r4
 800cc2a:	4621      	mov	r1, r4
 800cc2c:	4638      	mov	r0, r7
 800cc2e:	f7ff ff0d 	bl	800ca4c <__multiply>
 800cc32:	6020      	str	r0, [r4, #0]
 800cc34:	f8c0 9000 	str.w	r9, [r0]
 800cc38:	4604      	mov	r4, r0
 800cc3a:	e7e4      	b.n	800cc06 <__pow5mult+0x6a>
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc42:	bf00      	nop
 800cc44:	0800ddd4 	.word	0x0800ddd4
 800cc48:	0800dcf9 	.word	0x0800dcf9
 800cc4c:	0800dd79 	.word	0x0800dd79

0800cc50 <__lshift>:
 800cc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc54:	460c      	mov	r4, r1
 800cc56:	4607      	mov	r7, r0
 800cc58:	4691      	mov	r9, r2
 800cc5a:	6923      	ldr	r3, [r4, #16]
 800cc5c:	6849      	ldr	r1, [r1, #4]
 800cc5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc68:	f108 0601 	add.w	r6, r8, #1
 800cc6c:	42b3      	cmp	r3, r6
 800cc6e:	db0b      	blt.n	800cc88 <__lshift+0x38>
 800cc70:	4638      	mov	r0, r7
 800cc72:	f7ff fde1 	bl	800c838 <_Balloc>
 800cc76:	4605      	mov	r5, r0
 800cc78:	b948      	cbnz	r0, 800cc8e <__lshift+0x3e>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc80:	4b27      	ldr	r3, [pc, #156]	@ (800cd20 <__lshift+0xd0>)
 800cc82:	4828      	ldr	r0, [pc, #160]	@ (800cd24 <__lshift+0xd4>)
 800cc84:	f000 fa00 	bl	800d088 <__assert_func>
 800cc88:	3101      	adds	r1, #1
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	e7ee      	b.n	800cc6c <__lshift+0x1c>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f100 0114 	add.w	r1, r0, #20
 800cc94:	f100 0210 	add.w	r2, r0, #16
 800cc98:	4618      	mov	r0, r3
 800cc9a:	4553      	cmp	r3, sl
 800cc9c:	db33      	blt.n	800cd06 <__lshift+0xb6>
 800cc9e:	6920      	ldr	r0, [r4, #16]
 800cca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cca4:	f104 0314 	add.w	r3, r4, #20
 800cca8:	f019 091f 	ands.w	r9, r9, #31
 800ccac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ccb4:	d02b      	beq.n	800cd0e <__lshift+0xbe>
 800ccb6:	468a      	mov	sl, r1
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f1c9 0e20 	rsb	lr, r9, #32
 800ccbe:	6818      	ldr	r0, [r3, #0]
 800ccc0:	fa00 f009 	lsl.w	r0, r0, r9
 800ccc4:	4310      	orrs	r0, r2
 800ccc6:	f84a 0b04 	str.w	r0, [sl], #4
 800ccca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccce:	459c      	cmp	ip, r3
 800ccd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccd4:	d8f3      	bhi.n	800ccbe <__lshift+0x6e>
 800ccd6:	ebac 0304 	sub.w	r3, ip, r4
 800ccda:	3b15      	subs	r3, #21
 800ccdc:	f023 0303 	bic.w	r3, r3, #3
 800cce0:	3304      	adds	r3, #4
 800cce2:	f104 0015 	add.w	r0, r4, #21
 800cce6:	4584      	cmp	ip, r0
 800cce8:	bf38      	it	cc
 800ccea:	2304      	movcc	r3, #4
 800ccec:	50ca      	str	r2, [r1, r3]
 800ccee:	b10a      	cbz	r2, 800ccf4 <__lshift+0xa4>
 800ccf0:	f108 0602 	add.w	r6, r8, #2
 800ccf4:	3e01      	subs	r6, #1
 800ccf6:	4638      	mov	r0, r7
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	612e      	str	r6, [r5, #16]
 800ccfc:	f7ff fddc 	bl	800c8b8 <_Bfree>
 800cd00:	4628      	mov	r0, r5
 800cd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd06:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	e7c5      	b.n	800cc9a <__lshift+0x4a>
 800cd0e:	3904      	subs	r1, #4
 800cd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd14:	459c      	cmp	ip, r3
 800cd16:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd1a:	d8f9      	bhi.n	800cd10 <__lshift+0xc0>
 800cd1c:	e7ea      	b.n	800ccf4 <__lshift+0xa4>
 800cd1e:	bf00      	nop
 800cd20:	0800dd68 	.word	0x0800dd68
 800cd24:	0800dd79 	.word	0x0800dd79

0800cd28 <__mcmp>:
 800cd28:	4603      	mov	r3, r0
 800cd2a:	690a      	ldr	r2, [r1, #16]
 800cd2c:	6900      	ldr	r0, [r0, #16]
 800cd2e:	b530      	push	{r4, r5, lr}
 800cd30:	1a80      	subs	r0, r0, r2
 800cd32:	d10e      	bne.n	800cd52 <__mcmp+0x2a>
 800cd34:	3314      	adds	r3, #20
 800cd36:	3114      	adds	r1, #20
 800cd38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd48:	4295      	cmp	r5, r2
 800cd4a:	d003      	beq.n	800cd54 <__mcmp+0x2c>
 800cd4c:	d205      	bcs.n	800cd5a <__mcmp+0x32>
 800cd4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd52:	bd30      	pop	{r4, r5, pc}
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	d3f3      	bcc.n	800cd40 <__mcmp+0x18>
 800cd58:	e7fb      	b.n	800cd52 <__mcmp+0x2a>
 800cd5a:	2001      	movs	r0, #1
 800cd5c:	e7f9      	b.n	800cd52 <__mcmp+0x2a>
	...

0800cd60 <__mdiff>:
 800cd60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd64:	4689      	mov	r9, r1
 800cd66:	4606      	mov	r6, r0
 800cd68:	4611      	mov	r1, r2
 800cd6a:	4648      	mov	r0, r9
 800cd6c:	4614      	mov	r4, r2
 800cd6e:	f7ff ffdb 	bl	800cd28 <__mcmp>
 800cd72:	1e05      	subs	r5, r0, #0
 800cd74:	d112      	bne.n	800cd9c <__mdiff+0x3c>
 800cd76:	4629      	mov	r1, r5
 800cd78:	4630      	mov	r0, r6
 800cd7a:	f7ff fd5d 	bl	800c838 <_Balloc>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	b928      	cbnz	r0, 800cd8e <__mdiff+0x2e>
 800cd82:	f240 2137 	movw	r1, #567	@ 0x237
 800cd86:	4b3e      	ldr	r3, [pc, #248]	@ (800ce80 <__mdiff+0x120>)
 800cd88:	483e      	ldr	r0, [pc, #248]	@ (800ce84 <__mdiff+0x124>)
 800cd8a:	f000 f97d 	bl	800d088 <__assert_func>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd94:	4610      	mov	r0, r2
 800cd96:	b003      	add	sp, #12
 800cd98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9c:	bfbc      	itt	lt
 800cd9e:	464b      	movlt	r3, r9
 800cda0:	46a1      	movlt	r9, r4
 800cda2:	4630      	mov	r0, r6
 800cda4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cda8:	bfba      	itte	lt
 800cdaa:	461c      	movlt	r4, r3
 800cdac:	2501      	movlt	r5, #1
 800cdae:	2500      	movge	r5, #0
 800cdb0:	f7ff fd42 	bl	800c838 <_Balloc>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	b918      	cbnz	r0, 800cdc0 <__mdiff+0x60>
 800cdb8:	f240 2145 	movw	r1, #581	@ 0x245
 800cdbc:	4b30      	ldr	r3, [pc, #192]	@ (800ce80 <__mdiff+0x120>)
 800cdbe:	e7e3      	b.n	800cd88 <__mdiff+0x28>
 800cdc0:	f100 0b14 	add.w	fp, r0, #20
 800cdc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cdc8:	f109 0310 	add.w	r3, r9, #16
 800cdcc:	60c5      	str	r5, [r0, #12]
 800cdce:	f04f 0c00 	mov.w	ip, #0
 800cdd2:	f109 0514 	add.w	r5, r9, #20
 800cdd6:	46d9      	mov	r9, fp
 800cdd8:	6926      	ldr	r6, [r4, #16]
 800cdda:	f104 0e14 	add.w	lr, r4, #20
 800cdde:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cde2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	9b01      	ldr	r3, [sp, #4]
 800cdea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cdee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cdf2:	b281      	uxth	r1, r0
 800cdf4:	9301      	str	r3, [sp, #4]
 800cdf6:	fa1f f38a 	uxth.w	r3, sl
 800cdfa:	1a5b      	subs	r3, r3, r1
 800cdfc:	0c00      	lsrs	r0, r0, #16
 800cdfe:	4463      	add	r3, ip
 800ce00:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ce04:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ce0e:	4576      	cmp	r6, lr
 800ce10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce14:	f849 3b04 	str.w	r3, [r9], #4
 800ce18:	d8e6      	bhi.n	800cde8 <__mdiff+0x88>
 800ce1a:	1b33      	subs	r3, r6, r4
 800ce1c:	3b15      	subs	r3, #21
 800ce1e:	f023 0303 	bic.w	r3, r3, #3
 800ce22:	3415      	adds	r4, #21
 800ce24:	3304      	adds	r3, #4
 800ce26:	42a6      	cmp	r6, r4
 800ce28:	bf38      	it	cc
 800ce2a:	2304      	movcc	r3, #4
 800ce2c:	441d      	add	r5, r3
 800ce2e:	445b      	add	r3, fp
 800ce30:	461e      	mov	r6, r3
 800ce32:	462c      	mov	r4, r5
 800ce34:	4544      	cmp	r4, r8
 800ce36:	d30e      	bcc.n	800ce56 <__mdiff+0xf6>
 800ce38:	f108 0103 	add.w	r1, r8, #3
 800ce3c:	1b49      	subs	r1, r1, r5
 800ce3e:	f021 0103 	bic.w	r1, r1, #3
 800ce42:	3d03      	subs	r5, #3
 800ce44:	45a8      	cmp	r8, r5
 800ce46:	bf38      	it	cc
 800ce48:	2100      	movcc	r1, #0
 800ce4a:	440b      	add	r3, r1
 800ce4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce50:	b199      	cbz	r1, 800ce7a <__mdiff+0x11a>
 800ce52:	6117      	str	r7, [r2, #16]
 800ce54:	e79e      	b.n	800cd94 <__mdiff+0x34>
 800ce56:	46e6      	mov	lr, ip
 800ce58:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce5c:	fa1f fc81 	uxth.w	ip, r1
 800ce60:	44f4      	add	ip, lr
 800ce62:	0c08      	lsrs	r0, r1, #16
 800ce64:	4471      	add	r1, lr
 800ce66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce6a:	b289      	uxth	r1, r1
 800ce6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce74:	f846 1b04 	str.w	r1, [r6], #4
 800ce78:	e7dc      	b.n	800ce34 <__mdiff+0xd4>
 800ce7a:	3f01      	subs	r7, #1
 800ce7c:	e7e6      	b.n	800ce4c <__mdiff+0xec>
 800ce7e:	bf00      	nop
 800ce80:	0800dd68 	.word	0x0800dd68
 800ce84:	0800dd79 	.word	0x0800dd79

0800ce88 <__d2b>:
 800ce88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ce8c:	2101      	movs	r1, #1
 800ce8e:	4690      	mov	r8, r2
 800ce90:	4699      	mov	r9, r3
 800ce92:	9e08      	ldr	r6, [sp, #32]
 800ce94:	f7ff fcd0 	bl	800c838 <_Balloc>
 800ce98:	4604      	mov	r4, r0
 800ce9a:	b930      	cbnz	r0, 800ceaa <__d2b+0x22>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	f240 310f 	movw	r1, #783	@ 0x30f
 800cea2:	4b23      	ldr	r3, [pc, #140]	@ (800cf30 <__d2b+0xa8>)
 800cea4:	4823      	ldr	r0, [pc, #140]	@ (800cf34 <__d2b+0xac>)
 800cea6:	f000 f8ef 	bl	800d088 <__assert_func>
 800ceaa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ceae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ceb2:	b10d      	cbz	r5, 800ceb8 <__d2b+0x30>
 800ceb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ceb8:	9301      	str	r3, [sp, #4]
 800ceba:	f1b8 0300 	subs.w	r3, r8, #0
 800cebe:	d024      	beq.n	800cf0a <__d2b+0x82>
 800cec0:	4668      	mov	r0, sp
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	f7ff fd7f 	bl	800c9c6 <__lo0bits>
 800cec8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cecc:	b1d8      	cbz	r0, 800cf06 <__d2b+0x7e>
 800cece:	f1c0 0320 	rsb	r3, r0, #32
 800ced2:	fa02 f303 	lsl.w	r3, r2, r3
 800ced6:	430b      	orrs	r3, r1
 800ced8:	40c2      	lsrs	r2, r0
 800ceda:	6163      	str	r3, [r4, #20]
 800cedc:	9201      	str	r2, [sp, #4]
 800cede:	9b01      	ldr	r3, [sp, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	bf0c      	ite	eq
 800cee4:	2201      	moveq	r2, #1
 800cee6:	2202      	movne	r2, #2
 800cee8:	61a3      	str	r3, [r4, #24]
 800ceea:	6122      	str	r2, [r4, #16]
 800ceec:	b1ad      	cbz	r5, 800cf1a <__d2b+0x92>
 800ceee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cef2:	4405      	add	r5, r0
 800cef4:	6035      	str	r5, [r6, #0]
 800cef6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cefa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cefc:	6018      	str	r0, [r3, #0]
 800cefe:	4620      	mov	r0, r4
 800cf00:	b002      	add	sp, #8
 800cf02:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cf06:	6161      	str	r1, [r4, #20]
 800cf08:	e7e9      	b.n	800cede <__d2b+0x56>
 800cf0a:	a801      	add	r0, sp, #4
 800cf0c:	f7ff fd5b 	bl	800c9c6 <__lo0bits>
 800cf10:	9b01      	ldr	r3, [sp, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	6163      	str	r3, [r4, #20]
 800cf16:	3020      	adds	r0, #32
 800cf18:	e7e7      	b.n	800ceea <__d2b+0x62>
 800cf1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf22:	6030      	str	r0, [r6, #0]
 800cf24:	6918      	ldr	r0, [r3, #16]
 800cf26:	f7ff fd2f 	bl	800c988 <__hi0bits>
 800cf2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf2e:	e7e4      	b.n	800cefa <__d2b+0x72>
 800cf30:	0800dd68 	.word	0x0800dd68
 800cf34:	0800dd79 	.word	0x0800dd79

0800cf38 <__sflush_r>:
 800cf38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	0716      	lsls	r6, r2, #28
 800cf40:	4605      	mov	r5, r0
 800cf42:	460c      	mov	r4, r1
 800cf44:	d454      	bmi.n	800cff0 <__sflush_r+0xb8>
 800cf46:	684b      	ldr	r3, [r1, #4]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	dc02      	bgt.n	800cf52 <__sflush_r+0x1a>
 800cf4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	dd48      	ble.n	800cfe4 <__sflush_r+0xac>
 800cf52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf54:	2e00      	cmp	r6, #0
 800cf56:	d045      	beq.n	800cfe4 <__sflush_r+0xac>
 800cf58:	2300      	movs	r3, #0
 800cf5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf5e:	682f      	ldr	r7, [r5, #0]
 800cf60:	6a21      	ldr	r1, [r4, #32]
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	d030      	beq.n	800cfc8 <__sflush_r+0x90>
 800cf66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf68:	89a3      	ldrh	r3, [r4, #12]
 800cf6a:	0759      	lsls	r1, r3, #29
 800cf6c:	d505      	bpl.n	800cf7a <__sflush_r+0x42>
 800cf6e:	6863      	ldr	r3, [r4, #4]
 800cf70:	1ad2      	subs	r2, r2, r3
 800cf72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf74:	b10b      	cbz	r3, 800cf7a <__sflush_r+0x42>
 800cf76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf78:	1ad2      	subs	r2, r2, r3
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf80:	6a21      	ldr	r1, [r4, #32]
 800cf82:	47b0      	blx	r6
 800cf84:	1c43      	adds	r3, r0, #1
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	d106      	bne.n	800cf98 <__sflush_r+0x60>
 800cf8a:	6829      	ldr	r1, [r5, #0]
 800cf8c:	291d      	cmp	r1, #29
 800cf8e:	d82b      	bhi.n	800cfe8 <__sflush_r+0xb0>
 800cf90:	4a28      	ldr	r2, [pc, #160]	@ (800d034 <__sflush_r+0xfc>)
 800cf92:	410a      	asrs	r2, r1
 800cf94:	07d6      	lsls	r6, r2, #31
 800cf96:	d427      	bmi.n	800cfe8 <__sflush_r+0xb0>
 800cf98:	2200      	movs	r2, #0
 800cf9a:	6062      	str	r2, [r4, #4]
 800cf9c:	6922      	ldr	r2, [r4, #16]
 800cf9e:	04d9      	lsls	r1, r3, #19
 800cfa0:	6022      	str	r2, [r4, #0]
 800cfa2:	d504      	bpl.n	800cfae <__sflush_r+0x76>
 800cfa4:	1c42      	adds	r2, r0, #1
 800cfa6:	d101      	bne.n	800cfac <__sflush_r+0x74>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b903      	cbnz	r3, 800cfae <__sflush_r+0x76>
 800cfac:	6560      	str	r0, [r4, #84]	@ 0x54
 800cfae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfb0:	602f      	str	r7, [r5, #0]
 800cfb2:	b1b9      	cbz	r1, 800cfe4 <__sflush_r+0xac>
 800cfb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfb8:	4299      	cmp	r1, r3
 800cfba:	d002      	beq.n	800cfc2 <__sflush_r+0x8a>
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f7ff fbf3 	bl	800c7a8 <_free_r>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfc6:	e00d      	b.n	800cfe4 <__sflush_r+0xac>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b0      	blx	r6
 800cfce:	4602      	mov	r2, r0
 800cfd0:	1c50      	adds	r0, r2, #1
 800cfd2:	d1c9      	bne.n	800cf68 <__sflush_r+0x30>
 800cfd4:	682b      	ldr	r3, [r5, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d0c6      	beq.n	800cf68 <__sflush_r+0x30>
 800cfda:	2b1d      	cmp	r3, #29
 800cfdc:	d001      	beq.n	800cfe2 <__sflush_r+0xaa>
 800cfde:	2b16      	cmp	r3, #22
 800cfe0:	d11d      	bne.n	800d01e <__sflush_r+0xe6>
 800cfe2:	602f      	str	r7, [r5, #0]
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	e021      	b.n	800d02c <__sflush_r+0xf4>
 800cfe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfec:	b21b      	sxth	r3, r3
 800cfee:	e01a      	b.n	800d026 <__sflush_r+0xee>
 800cff0:	690f      	ldr	r7, [r1, #16]
 800cff2:	2f00      	cmp	r7, #0
 800cff4:	d0f6      	beq.n	800cfe4 <__sflush_r+0xac>
 800cff6:	0793      	lsls	r3, r2, #30
 800cff8:	bf18      	it	ne
 800cffa:	2300      	movne	r3, #0
 800cffc:	680e      	ldr	r6, [r1, #0]
 800cffe:	bf08      	it	eq
 800d000:	694b      	ldreq	r3, [r1, #20]
 800d002:	1bf6      	subs	r6, r6, r7
 800d004:	600f      	str	r7, [r1, #0]
 800d006:	608b      	str	r3, [r1, #8]
 800d008:	2e00      	cmp	r6, #0
 800d00a:	ddeb      	ble.n	800cfe4 <__sflush_r+0xac>
 800d00c:	4633      	mov	r3, r6
 800d00e:	463a      	mov	r2, r7
 800d010:	4628      	mov	r0, r5
 800d012:	6a21      	ldr	r1, [r4, #32]
 800d014:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d018:	47e0      	blx	ip
 800d01a:	2800      	cmp	r0, #0
 800d01c:	dc07      	bgt.n	800d02e <__sflush_r+0xf6>
 800d01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d026:	f04f 30ff 	mov.w	r0, #4294967295
 800d02a:	81a3      	strh	r3, [r4, #12]
 800d02c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d02e:	4407      	add	r7, r0
 800d030:	1a36      	subs	r6, r6, r0
 800d032:	e7e9      	b.n	800d008 <__sflush_r+0xd0>
 800d034:	dfbffffe 	.word	0xdfbffffe

0800d038 <_fflush_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	690b      	ldr	r3, [r1, #16]
 800d03c:	4605      	mov	r5, r0
 800d03e:	460c      	mov	r4, r1
 800d040:	b913      	cbnz	r3, 800d048 <_fflush_r+0x10>
 800d042:	2500      	movs	r5, #0
 800d044:	4628      	mov	r0, r5
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	b118      	cbz	r0, 800d052 <_fflush_r+0x1a>
 800d04a:	6a03      	ldr	r3, [r0, #32]
 800d04c:	b90b      	cbnz	r3, 800d052 <_fflush_r+0x1a>
 800d04e:	f7fe fbef 	bl	800b830 <__sinit>
 800d052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0f3      	beq.n	800d042 <_fflush_r+0xa>
 800d05a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d05c:	07d0      	lsls	r0, r2, #31
 800d05e:	d404      	bmi.n	800d06a <_fflush_r+0x32>
 800d060:	0599      	lsls	r1, r3, #22
 800d062:	d402      	bmi.n	800d06a <_fflush_r+0x32>
 800d064:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d066:	f7fe fd2e 	bl	800bac6 <__retarget_lock_acquire_recursive>
 800d06a:	4628      	mov	r0, r5
 800d06c:	4621      	mov	r1, r4
 800d06e:	f7ff ff63 	bl	800cf38 <__sflush_r>
 800d072:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d074:	4605      	mov	r5, r0
 800d076:	07da      	lsls	r2, r3, #31
 800d078:	d4e4      	bmi.n	800d044 <_fflush_r+0xc>
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	059b      	lsls	r3, r3, #22
 800d07e:	d4e1      	bmi.n	800d044 <_fflush_r+0xc>
 800d080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d082:	f7fe fd21 	bl	800bac8 <__retarget_lock_release_recursive>
 800d086:	e7dd      	b.n	800d044 <_fflush_r+0xc>

0800d088 <__assert_func>:
 800d088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d08a:	4614      	mov	r4, r2
 800d08c:	461a      	mov	r2, r3
 800d08e:	4b09      	ldr	r3, [pc, #36]	@ (800d0b4 <__assert_func+0x2c>)
 800d090:	4605      	mov	r5, r0
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68d8      	ldr	r0, [r3, #12]
 800d096:	b954      	cbnz	r4, 800d0ae <__assert_func+0x26>
 800d098:	4b07      	ldr	r3, [pc, #28]	@ (800d0b8 <__assert_func+0x30>)
 800d09a:	461c      	mov	r4, r3
 800d09c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0a0:	9100      	str	r1, [sp, #0]
 800d0a2:	462b      	mov	r3, r5
 800d0a4:	4905      	ldr	r1, [pc, #20]	@ (800d0bc <__assert_func+0x34>)
 800d0a6:	f000 f841 	bl	800d12c <fiprintf>
 800d0aa:	f7fd fe13 	bl	800acd4 <abort>
 800d0ae:	4b04      	ldr	r3, [pc, #16]	@ (800d0c0 <__assert_func+0x38>)
 800d0b0:	e7f4      	b.n	800d09c <__assert_func+0x14>
 800d0b2:	bf00      	nop
 800d0b4:	2000002c 	.word	0x2000002c
 800d0b8:	0800df15 	.word	0x0800df15
 800d0bc:	0800dee7 	.word	0x0800dee7
 800d0c0:	0800deda 	.word	0x0800deda

0800d0c4 <_calloc_r>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	fba1 5402 	umull	r5, r4, r1, r2
 800d0ca:	b93c      	cbnz	r4, 800d0dc <_calloc_r+0x18>
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	f7fd fe3b 	bl	800ad48 <_malloc_r>
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	b928      	cbnz	r0, 800d0e2 <_calloc_r+0x1e>
 800d0d6:	2600      	movs	r6, #0
 800d0d8:	4630      	mov	r0, r6
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
 800d0dc:	220c      	movs	r2, #12
 800d0de:	6002      	str	r2, [r0, #0]
 800d0e0:	e7f9      	b.n	800d0d6 <_calloc_r+0x12>
 800d0e2:	462a      	mov	r2, r5
 800d0e4:	4621      	mov	r1, r4
 800d0e6:	f7fe fc1c 	bl	800b922 <memset>
 800d0ea:	e7f5      	b.n	800d0d8 <_calloc_r+0x14>

0800d0ec <__ascii_mbtowc>:
 800d0ec:	b082      	sub	sp, #8
 800d0ee:	b901      	cbnz	r1, 800d0f2 <__ascii_mbtowc+0x6>
 800d0f0:	a901      	add	r1, sp, #4
 800d0f2:	b142      	cbz	r2, 800d106 <__ascii_mbtowc+0x1a>
 800d0f4:	b14b      	cbz	r3, 800d10a <__ascii_mbtowc+0x1e>
 800d0f6:	7813      	ldrb	r3, [r2, #0]
 800d0f8:	600b      	str	r3, [r1, #0]
 800d0fa:	7812      	ldrb	r2, [r2, #0]
 800d0fc:	1e10      	subs	r0, r2, #0
 800d0fe:	bf18      	it	ne
 800d100:	2001      	movne	r0, #1
 800d102:	b002      	add	sp, #8
 800d104:	4770      	bx	lr
 800d106:	4610      	mov	r0, r2
 800d108:	e7fb      	b.n	800d102 <__ascii_mbtowc+0x16>
 800d10a:	f06f 0001 	mvn.w	r0, #1
 800d10e:	e7f8      	b.n	800d102 <__ascii_mbtowc+0x16>

0800d110 <__ascii_wctomb>:
 800d110:	4603      	mov	r3, r0
 800d112:	4608      	mov	r0, r1
 800d114:	b141      	cbz	r1, 800d128 <__ascii_wctomb+0x18>
 800d116:	2aff      	cmp	r2, #255	@ 0xff
 800d118:	d904      	bls.n	800d124 <__ascii_wctomb+0x14>
 800d11a:	228a      	movs	r2, #138	@ 0x8a
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	601a      	str	r2, [r3, #0]
 800d122:	4770      	bx	lr
 800d124:	2001      	movs	r0, #1
 800d126:	700a      	strb	r2, [r1, #0]
 800d128:	4770      	bx	lr
	...

0800d12c <fiprintf>:
 800d12c:	b40e      	push	{r1, r2, r3}
 800d12e:	b503      	push	{r0, r1, lr}
 800d130:	4601      	mov	r1, r0
 800d132:	ab03      	add	r3, sp, #12
 800d134:	4805      	ldr	r0, [pc, #20]	@ (800d14c <fiprintf+0x20>)
 800d136:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	f000 f82f 	bl	800d1a0 <_vfiprintf_r>
 800d142:	b002      	add	sp, #8
 800d144:	f85d eb04 	ldr.w	lr, [sp], #4
 800d148:	b003      	add	sp, #12
 800d14a:	4770      	bx	lr
 800d14c:	2000002c 	.word	0x2000002c

0800d150 <__sfputc_r>:
 800d150:	6893      	ldr	r3, [r2, #8]
 800d152:	b410      	push	{r4}
 800d154:	3b01      	subs	r3, #1
 800d156:	2b00      	cmp	r3, #0
 800d158:	6093      	str	r3, [r2, #8]
 800d15a:	da07      	bge.n	800d16c <__sfputc_r+0x1c>
 800d15c:	6994      	ldr	r4, [r2, #24]
 800d15e:	42a3      	cmp	r3, r4
 800d160:	db01      	blt.n	800d166 <__sfputc_r+0x16>
 800d162:	290a      	cmp	r1, #10
 800d164:	d102      	bne.n	800d16c <__sfputc_r+0x1c>
 800d166:	bc10      	pop	{r4}
 800d168:	f000 b932 	b.w	800d3d0 <__swbuf_r>
 800d16c:	6813      	ldr	r3, [r2, #0]
 800d16e:	1c58      	adds	r0, r3, #1
 800d170:	6010      	str	r0, [r2, #0]
 800d172:	7019      	strb	r1, [r3, #0]
 800d174:	4608      	mov	r0, r1
 800d176:	bc10      	pop	{r4}
 800d178:	4770      	bx	lr

0800d17a <__sfputs_r>:
 800d17a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17c:	4606      	mov	r6, r0
 800d17e:	460f      	mov	r7, r1
 800d180:	4614      	mov	r4, r2
 800d182:	18d5      	adds	r5, r2, r3
 800d184:	42ac      	cmp	r4, r5
 800d186:	d101      	bne.n	800d18c <__sfputs_r+0x12>
 800d188:	2000      	movs	r0, #0
 800d18a:	e007      	b.n	800d19c <__sfputs_r+0x22>
 800d18c:	463a      	mov	r2, r7
 800d18e:	4630      	mov	r0, r6
 800d190:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d194:	f7ff ffdc 	bl	800d150 <__sfputc_r>
 800d198:	1c43      	adds	r3, r0, #1
 800d19a:	d1f3      	bne.n	800d184 <__sfputs_r+0xa>
 800d19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d1a0 <_vfiprintf_r>:
 800d1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a4:	460d      	mov	r5, r1
 800d1a6:	4614      	mov	r4, r2
 800d1a8:	4698      	mov	r8, r3
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	b09d      	sub	sp, #116	@ 0x74
 800d1ae:	b118      	cbz	r0, 800d1b8 <_vfiprintf_r+0x18>
 800d1b0:	6a03      	ldr	r3, [r0, #32]
 800d1b2:	b90b      	cbnz	r3, 800d1b8 <_vfiprintf_r+0x18>
 800d1b4:	f7fe fb3c 	bl	800b830 <__sinit>
 800d1b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1ba:	07d9      	lsls	r1, r3, #31
 800d1bc:	d405      	bmi.n	800d1ca <_vfiprintf_r+0x2a>
 800d1be:	89ab      	ldrh	r3, [r5, #12]
 800d1c0:	059a      	lsls	r2, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <_vfiprintf_r+0x2a>
 800d1c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1c6:	f7fe fc7e 	bl	800bac6 <__retarget_lock_acquire_recursive>
 800d1ca:	89ab      	ldrh	r3, [r5, #12]
 800d1cc:	071b      	lsls	r3, r3, #28
 800d1ce:	d501      	bpl.n	800d1d4 <_vfiprintf_r+0x34>
 800d1d0:	692b      	ldr	r3, [r5, #16]
 800d1d2:	b99b      	cbnz	r3, 800d1fc <_vfiprintf_r+0x5c>
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	4630      	mov	r0, r6
 800d1d8:	f000 f938 	bl	800d44c <__swsetup_r>
 800d1dc:	b170      	cbz	r0, 800d1fc <_vfiprintf_r+0x5c>
 800d1de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1e0:	07dc      	lsls	r4, r3, #31
 800d1e2:	d504      	bpl.n	800d1ee <_vfiprintf_r+0x4e>
 800d1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e8:	b01d      	add	sp, #116	@ 0x74
 800d1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ee:	89ab      	ldrh	r3, [r5, #12]
 800d1f0:	0598      	lsls	r0, r3, #22
 800d1f2:	d4f7      	bmi.n	800d1e4 <_vfiprintf_r+0x44>
 800d1f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1f6:	f7fe fc67 	bl	800bac8 <__retarget_lock_release_recursive>
 800d1fa:	e7f3      	b.n	800d1e4 <_vfiprintf_r+0x44>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800d200:	2320      	movs	r3, #32
 800d202:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d206:	2330      	movs	r3, #48	@ 0x30
 800d208:	f04f 0901 	mov.w	r9, #1
 800d20c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d210:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d3bc <_vfiprintf_r+0x21c>
 800d214:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d218:	4623      	mov	r3, r4
 800d21a:	469a      	mov	sl, r3
 800d21c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d220:	b10a      	cbz	r2, 800d226 <_vfiprintf_r+0x86>
 800d222:	2a25      	cmp	r2, #37	@ 0x25
 800d224:	d1f9      	bne.n	800d21a <_vfiprintf_r+0x7a>
 800d226:	ebba 0b04 	subs.w	fp, sl, r4
 800d22a:	d00b      	beq.n	800d244 <_vfiprintf_r+0xa4>
 800d22c:	465b      	mov	r3, fp
 800d22e:	4622      	mov	r2, r4
 800d230:	4629      	mov	r1, r5
 800d232:	4630      	mov	r0, r6
 800d234:	f7ff ffa1 	bl	800d17a <__sfputs_r>
 800d238:	3001      	adds	r0, #1
 800d23a:	f000 80a7 	beq.w	800d38c <_vfiprintf_r+0x1ec>
 800d23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d240:	445a      	add	r2, fp
 800d242:	9209      	str	r2, [sp, #36]	@ 0x24
 800d244:	f89a 3000 	ldrb.w	r3, [sl]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 809f 	beq.w	800d38c <_vfiprintf_r+0x1ec>
 800d24e:	2300      	movs	r3, #0
 800d250:	f04f 32ff 	mov.w	r2, #4294967295
 800d254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d258:	f10a 0a01 	add.w	sl, sl, #1
 800d25c:	9304      	str	r3, [sp, #16]
 800d25e:	9307      	str	r3, [sp, #28]
 800d260:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d264:	931a      	str	r3, [sp, #104]	@ 0x68
 800d266:	4654      	mov	r4, sl
 800d268:	2205      	movs	r2, #5
 800d26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26e:	4853      	ldr	r0, [pc, #332]	@ (800d3bc <_vfiprintf_r+0x21c>)
 800d270:	f7fe fc2b 	bl	800baca <memchr>
 800d274:	9a04      	ldr	r2, [sp, #16]
 800d276:	b9d8      	cbnz	r0, 800d2b0 <_vfiprintf_r+0x110>
 800d278:	06d1      	lsls	r1, r2, #27
 800d27a:	bf44      	itt	mi
 800d27c:	2320      	movmi	r3, #32
 800d27e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d282:	0713      	lsls	r3, r2, #28
 800d284:	bf44      	itt	mi
 800d286:	232b      	movmi	r3, #43	@ 0x2b
 800d288:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d28c:	f89a 3000 	ldrb.w	r3, [sl]
 800d290:	2b2a      	cmp	r3, #42	@ 0x2a
 800d292:	d015      	beq.n	800d2c0 <_vfiprintf_r+0x120>
 800d294:	4654      	mov	r4, sl
 800d296:	2000      	movs	r0, #0
 800d298:	f04f 0c0a 	mov.w	ip, #10
 800d29c:	9a07      	ldr	r2, [sp, #28]
 800d29e:	4621      	mov	r1, r4
 800d2a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2a4:	3b30      	subs	r3, #48	@ 0x30
 800d2a6:	2b09      	cmp	r3, #9
 800d2a8:	d94b      	bls.n	800d342 <_vfiprintf_r+0x1a2>
 800d2aa:	b1b0      	cbz	r0, 800d2da <_vfiprintf_r+0x13a>
 800d2ac:	9207      	str	r2, [sp, #28]
 800d2ae:	e014      	b.n	800d2da <_vfiprintf_r+0x13a>
 800d2b0:	eba0 0308 	sub.w	r3, r0, r8
 800d2b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	46a2      	mov	sl, r4
 800d2bc:	9304      	str	r3, [sp, #16]
 800d2be:	e7d2      	b.n	800d266 <_vfiprintf_r+0xc6>
 800d2c0:	9b03      	ldr	r3, [sp, #12]
 800d2c2:	1d19      	adds	r1, r3, #4
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	9103      	str	r1, [sp, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	bfbb      	ittet	lt
 800d2cc:	425b      	neglt	r3, r3
 800d2ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d2d2:	9307      	strge	r3, [sp, #28]
 800d2d4:	9307      	strlt	r3, [sp, #28]
 800d2d6:	bfb8      	it	lt
 800d2d8:	9204      	strlt	r2, [sp, #16]
 800d2da:	7823      	ldrb	r3, [r4, #0]
 800d2dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2de:	d10a      	bne.n	800d2f6 <_vfiprintf_r+0x156>
 800d2e0:	7863      	ldrb	r3, [r4, #1]
 800d2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2e4:	d132      	bne.n	800d34c <_vfiprintf_r+0x1ac>
 800d2e6:	9b03      	ldr	r3, [sp, #12]
 800d2e8:	3402      	adds	r4, #2
 800d2ea:	1d1a      	adds	r2, r3, #4
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	9203      	str	r2, [sp, #12]
 800d2f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d3c0 <_vfiprintf_r+0x220>
 800d2fa:	2203      	movs	r2, #3
 800d2fc:	4650      	mov	r0, sl
 800d2fe:	7821      	ldrb	r1, [r4, #0]
 800d300:	f7fe fbe3 	bl	800baca <memchr>
 800d304:	b138      	cbz	r0, 800d316 <_vfiprintf_r+0x176>
 800d306:	2240      	movs	r2, #64	@ 0x40
 800d308:	9b04      	ldr	r3, [sp, #16]
 800d30a:	eba0 000a 	sub.w	r0, r0, sl
 800d30e:	4082      	lsls	r2, r0
 800d310:	4313      	orrs	r3, r2
 800d312:	3401      	adds	r4, #1
 800d314:	9304      	str	r3, [sp, #16]
 800d316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31a:	2206      	movs	r2, #6
 800d31c:	4829      	ldr	r0, [pc, #164]	@ (800d3c4 <_vfiprintf_r+0x224>)
 800d31e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d322:	f7fe fbd2 	bl	800baca <memchr>
 800d326:	2800      	cmp	r0, #0
 800d328:	d03f      	beq.n	800d3aa <_vfiprintf_r+0x20a>
 800d32a:	4b27      	ldr	r3, [pc, #156]	@ (800d3c8 <_vfiprintf_r+0x228>)
 800d32c:	bb1b      	cbnz	r3, 800d376 <_vfiprintf_r+0x1d6>
 800d32e:	9b03      	ldr	r3, [sp, #12]
 800d330:	3307      	adds	r3, #7
 800d332:	f023 0307 	bic.w	r3, r3, #7
 800d336:	3308      	adds	r3, #8
 800d338:	9303      	str	r3, [sp, #12]
 800d33a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33c:	443b      	add	r3, r7
 800d33e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d340:	e76a      	b.n	800d218 <_vfiprintf_r+0x78>
 800d342:	460c      	mov	r4, r1
 800d344:	2001      	movs	r0, #1
 800d346:	fb0c 3202 	mla	r2, ip, r2, r3
 800d34a:	e7a8      	b.n	800d29e <_vfiprintf_r+0xfe>
 800d34c:	2300      	movs	r3, #0
 800d34e:	f04f 0c0a 	mov.w	ip, #10
 800d352:	4619      	mov	r1, r3
 800d354:	3401      	adds	r4, #1
 800d356:	9305      	str	r3, [sp, #20]
 800d358:	4620      	mov	r0, r4
 800d35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d35e:	3a30      	subs	r2, #48	@ 0x30
 800d360:	2a09      	cmp	r2, #9
 800d362:	d903      	bls.n	800d36c <_vfiprintf_r+0x1cc>
 800d364:	2b00      	cmp	r3, #0
 800d366:	d0c6      	beq.n	800d2f6 <_vfiprintf_r+0x156>
 800d368:	9105      	str	r1, [sp, #20]
 800d36a:	e7c4      	b.n	800d2f6 <_vfiprintf_r+0x156>
 800d36c:	4604      	mov	r4, r0
 800d36e:	2301      	movs	r3, #1
 800d370:	fb0c 2101 	mla	r1, ip, r1, r2
 800d374:	e7f0      	b.n	800d358 <_vfiprintf_r+0x1b8>
 800d376:	ab03      	add	r3, sp, #12
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	462a      	mov	r2, r5
 800d37c:	4630      	mov	r0, r6
 800d37e:	4b13      	ldr	r3, [pc, #76]	@ (800d3cc <_vfiprintf_r+0x22c>)
 800d380:	a904      	add	r1, sp, #16
 800d382:	f7fd fe0b 	bl	800af9c <_printf_float>
 800d386:	4607      	mov	r7, r0
 800d388:	1c78      	adds	r0, r7, #1
 800d38a:	d1d6      	bne.n	800d33a <_vfiprintf_r+0x19a>
 800d38c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d38e:	07d9      	lsls	r1, r3, #31
 800d390:	d405      	bmi.n	800d39e <_vfiprintf_r+0x1fe>
 800d392:	89ab      	ldrh	r3, [r5, #12]
 800d394:	059a      	lsls	r2, r3, #22
 800d396:	d402      	bmi.n	800d39e <_vfiprintf_r+0x1fe>
 800d398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d39a:	f7fe fb95 	bl	800bac8 <__retarget_lock_release_recursive>
 800d39e:	89ab      	ldrh	r3, [r5, #12]
 800d3a0:	065b      	lsls	r3, r3, #25
 800d3a2:	f53f af1f 	bmi.w	800d1e4 <_vfiprintf_r+0x44>
 800d3a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3a8:	e71e      	b.n	800d1e8 <_vfiprintf_r+0x48>
 800d3aa:	ab03      	add	r3, sp, #12
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	462a      	mov	r2, r5
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	4b06      	ldr	r3, [pc, #24]	@ (800d3cc <_vfiprintf_r+0x22c>)
 800d3b4:	a904      	add	r1, sp, #16
 800d3b6:	f7fe f88f 	bl	800b4d8 <_printf_i>
 800d3ba:	e7e4      	b.n	800d386 <_vfiprintf_r+0x1e6>
 800d3bc:	0800e017 	.word	0x0800e017
 800d3c0:	0800e01d 	.word	0x0800e01d
 800d3c4:	0800e021 	.word	0x0800e021
 800d3c8:	0800af9d 	.word	0x0800af9d
 800d3cc:	0800d17b 	.word	0x0800d17b

0800d3d0 <__swbuf_r>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	460e      	mov	r6, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b118      	cbz	r0, 800d3e2 <__swbuf_r+0x12>
 800d3da:	6a03      	ldr	r3, [r0, #32]
 800d3dc:	b90b      	cbnz	r3, 800d3e2 <__swbuf_r+0x12>
 800d3de:	f7fe fa27 	bl	800b830 <__sinit>
 800d3e2:	69a3      	ldr	r3, [r4, #24]
 800d3e4:	60a3      	str	r3, [r4, #8]
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	071a      	lsls	r2, r3, #28
 800d3ea:	d501      	bpl.n	800d3f0 <__swbuf_r+0x20>
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	b943      	cbnz	r3, 800d402 <__swbuf_r+0x32>
 800d3f0:	4621      	mov	r1, r4
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f000 f82a 	bl	800d44c <__swsetup_r>
 800d3f8:	b118      	cbz	r0, 800d402 <__swbuf_r+0x32>
 800d3fa:	f04f 37ff 	mov.w	r7, #4294967295
 800d3fe:	4638      	mov	r0, r7
 800d400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d402:	6823      	ldr	r3, [r4, #0]
 800d404:	6922      	ldr	r2, [r4, #16]
 800d406:	b2f6      	uxtb	r6, r6
 800d408:	1a98      	subs	r0, r3, r2
 800d40a:	6963      	ldr	r3, [r4, #20]
 800d40c:	4637      	mov	r7, r6
 800d40e:	4283      	cmp	r3, r0
 800d410:	dc05      	bgt.n	800d41e <__swbuf_r+0x4e>
 800d412:	4621      	mov	r1, r4
 800d414:	4628      	mov	r0, r5
 800d416:	f7ff fe0f 	bl	800d038 <_fflush_r>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d1ed      	bne.n	800d3fa <__swbuf_r+0x2a>
 800d41e:	68a3      	ldr	r3, [r4, #8]
 800d420:	3b01      	subs	r3, #1
 800d422:	60a3      	str	r3, [r4, #8]
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	1c5a      	adds	r2, r3, #1
 800d428:	6022      	str	r2, [r4, #0]
 800d42a:	701e      	strb	r6, [r3, #0]
 800d42c:	6962      	ldr	r2, [r4, #20]
 800d42e:	1c43      	adds	r3, r0, #1
 800d430:	429a      	cmp	r2, r3
 800d432:	d004      	beq.n	800d43e <__swbuf_r+0x6e>
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	07db      	lsls	r3, r3, #31
 800d438:	d5e1      	bpl.n	800d3fe <__swbuf_r+0x2e>
 800d43a:	2e0a      	cmp	r6, #10
 800d43c:	d1df      	bne.n	800d3fe <__swbuf_r+0x2e>
 800d43e:	4621      	mov	r1, r4
 800d440:	4628      	mov	r0, r5
 800d442:	f7ff fdf9 	bl	800d038 <_fflush_r>
 800d446:	2800      	cmp	r0, #0
 800d448:	d0d9      	beq.n	800d3fe <__swbuf_r+0x2e>
 800d44a:	e7d6      	b.n	800d3fa <__swbuf_r+0x2a>

0800d44c <__swsetup_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4b29      	ldr	r3, [pc, #164]	@ (800d4f4 <__swsetup_r+0xa8>)
 800d450:	4605      	mov	r5, r0
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	460c      	mov	r4, r1
 800d456:	b118      	cbz	r0, 800d460 <__swsetup_r+0x14>
 800d458:	6a03      	ldr	r3, [r0, #32]
 800d45a:	b90b      	cbnz	r3, 800d460 <__swsetup_r+0x14>
 800d45c:	f7fe f9e8 	bl	800b830 <__sinit>
 800d460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d464:	0719      	lsls	r1, r3, #28
 800d466:	d422      	bmi.n	800d4ae <__swsetup_r+0x62>
 800d468:	06da      	lsls	r2, r3, #27
 800d46a:	d407      	bmi.n	800d47c <__swsetup_r+0x30>
 800d46c:	2209      	movs	r2, #9
 800d46e:	602a      	str	r2, [r5, #0]
 800d470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	81a3      	strh	r3, [r4, #12]
 800d47a:	e033      	b.n	800d4e4 <__swsetup_r+0x98>
 800d47c:	0758      	lsls	r0, r3, #29
 800d47e:	d512      	bpl.n	800d4a6 <__swsetup_r+0x5a>
 800d480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d482:	b141      	cbz	r1, 800d496 <__swsetup_r+0x4a>
 800d484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d488:	4299      	cmp	r1, r3
 800d48a:	d002      	beq.n	800d492 <__swsetup_r+0x46>
 800d48c:	4628      	mov	r0, r5
 800d48e:	f7ff f98b 	bl	800c7a8 <_free_r>
 800d492:	2300      	movs	r3, #0
 800d494:	6363      	str	r3, [r4, #52]	@ 0x34
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d49c:	81a3      	strh	r3, [r4, #12]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	6063      	str	r3, [r4, #4]
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f043 0308 	orr.w	r3, r3, #8
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	b94b      	cbnz	r3, 800d4c6 <__swsetup_r+0x7a>
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4bc:	d003      	beq.n	800d4c6 <__swsetup_r+0x7a>
 800d4be:	4621      	mov	r1, r4
 800d4c0:	4628      	mov	r0, r5
 800d4c2:	f000 f83e 	bl	800d542 <__smakebuf_r>
 800d4c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ca:	f013 0201 	ands.w	r2, r3, #1
 800d4ce:	d00a      	beq.n	800d4e6 <__swsetup_r+0x9a>
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	60a2      	str	r2, [r4, #8]
 800d4d4:	6962      	ldr	r2, [r4, #20]
 800d4d6:	4252      	negs	r2, r2
 800d4d8:	61a2      	str	r2, [r4, #24]
 800d4da:	6922      	ldr	r2, [r4, #16]
 800d4dc:	b942      	cbnz	r2, 800d4f0 <__swsetup_r+0xa4>
 800d4de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4e2:	d1c5      	bne.n	800d470 <__swsetup_r+0x24>
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
 800d4e6:	0799      	lsls	r1, r3, #30
 800d4e8:	bf58      	it	pl
 800d4ea:	6962      	ldrpl	r2, [r4, #20]
 800d4ec:	60a2      	str	r2, [r4, #8]
 800d4ee:	e7f4      	b.n	800d4da <__swsetup_r+0x8e>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	e7f7      	b.n	800d4e4 <__swsetup_r+0x98>
 800d4f4:	2000002c 	.word	0x2000002c

0800d4f8 <__swhatbuf_r>:
 800d4f8:	b570      	push	{r4, r5, r6, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d500:	4615      	mov	r5, r2
 800d502:	2900      	cmp	r1, #0
 800d504:	461e      	mov	r6, r3
 800d506:	b096      	sub	sp, #88	@ 0x58
 800d508:	da0c      	bge.n	800d524 <__swhatbuf_r+0x2c>
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	2100      	movs	r1, #0
 800d50e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d512:	bf14      	ite	ne
 800d514:	2340      	movne	r3, #64	@ 0x40
 800d516:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d51a:	2000      	movs	r0, #0
 800d51c:	6031      	str	r1, [r6, #0]
 800d51e:	602b      	str	r3, [r5, #0]
 800d520:	b016      	add	sp, #88	@ 0x58
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	466a      	mov	r2, sp
 800d526:	f000 f849 	bl	800d5bc <_fstat_r>
 800d52a:	2800      	cmp	r0, #0
 800d52c:	dbed      	blt.n	800d50a <__swhatbuf_r+0x12>
 800d52e:	9901      	ldr	r1, [sp, #4]
 800d530:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d534:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d538:	4259      	negs	r1, r3
 800d53a:	4159      	adcs	r1, r3
 800d53c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d540:	e7eb      	b.n	800d51a <__swhatbuf_r+0x22>

0800d542 <__smakebuf_r>:
 800d542:	898b      	ldrh	r3, [r1, #12]
 800d544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d546:	079d      	lsls	r5, r3, #30
 800d548:	4606      	mov	r6, r0
 800d54a:	460c      	mov	r4, r1
 800d54c:	d507      	bpl.n	800d55e <__smakebuf_r+0x1c>
 800d54e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d552:	6023      	str	r3, [r4, #0]
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	2301      	movs	r3, #1
 800d558:	6163      	str	r3, [r4, #20]
 800d55a:	b003      	add	sp, #12
 800d55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d55e:	466a      	mov	r2, sp
 800d560:	ab01      	add	r3, sp, #4
 800d562:	f7ff ffc9 	bl	800d4f8 <__swhatbuf_r>
 800d566:	9f00      	ldr	r7, [sp, #0]
 800d568:	4605      	mov	r5, r0
 800d56a:	4639      	mov	r1, r7
 800d56c:	4630      	mov	r0, r6
 800d56e:	f7fd fbeb 	bl	800ad48 <_malloc_r>
 800d572:	b948      	cbnz	r0, 800d588 <__smakebuf_r+0x46>
 800d574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d578:	059a      	lsls	r2, r3, #22
 800d57a:	d4ee      	bmi.n	800d55a <__smakebuf_r+0x18>
 800d57c:	f023 0303 	bic.w	r3, r3, #3
 800d580:	f043 0302 	orr.w	r3, r3, #2
 800d584:	81a3      	strh	r3, [r4, #12]
 800d586:	e7e2      	b.n	800d54e <__smakebuf_r+0xc>
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d58e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d592:	81a3      	strh	r3, [r4, #12]
 800d594:	9b01      	ldr	r3, [sp, #4]
 800d596:	6020      	str	r0, [r4, #0]
 800d598:	b15b      	cbz	r3, 800d5b2 <__smakebuf_r+0x70>
 800d59a:	4630      	mov	r0, r6
 800d59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5a0:	f000 f81e 	bl	800d5e0 <_isatty_r>
 800d5a4:	b128      	cbz	r0, 800d5b2 <__smakebuf_r+0x70>
 800d5a6:	89a3      	ldrh	r3, [r4, #12]
 800d5a8:	f023 0303 	bic.w	r3, r3, #3
 800d5ac:	f043 0301 	orr.w	r3, r3, #1
 800d5b0:	81a3      	strh	r3, [r4, #12]
 800d5b2:	89a3      	ldrh	r3, [r4, #12]
 800d5b4:	431d      	orrs	r5, r3
 800d5b6:	81a5      	strh	r5, [r4, #12]
 800d5b8:	e7cf      	b.n	800d55a <__smakebuf_r+0x18>
	...

0800d5bc <_fstat_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	2300      	movs	r3, #0
 800d5c0:	4d06      	ldr	r5, [pc, #24]	@ (800d5dc <_fstat_r+0x20>)
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	602b      	str	r3, [r5, #0]
 800d5ca:	f7f9 f853 	bl	8006674 <_fstat>
 800d5ce:	1c43      	adds	r3, r0, #1
 800d5d0:	d102      	bne.n	800d5d8 <_fstat_r+0x1c>
 800d5d2:	682b      	ldr	r3, [r5, #0]
 800d5d4:	b103      	cbz	r3, 800d5d8 <_fstat_r+0x1c>
 800d5d6:	6023      	str	r3, [r4, #0]
 800d5d8:	bd38      	pop	{r3, r4, r5, pc}
 800d5da:	bf00      	nop
 800d5dc:	200008b4 	.word	0x200008b4

0800d5e0 <_isatty_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	4d05      	ldr	r5, [pc, #20]	@ (800d5fc <_isatty_r+0x1c>)
 800d5e6:	4604      	mov	r4, r0
 800d5e8:	4608      	mov	r0, r1
 800d5ea:	602b      	str	r3, [r5, #0]
 800d5ec:	f7f9 f851 	bl	8006692 <_isatty>
 800d5f0:	1c43      	adds	r3, r0, #1
 800d5f2:	d102      	bne.n	800d5fa <_isatty_r+0x1a>
 800d5f4:	682b      	ldr	r3, [r5, #0]
 800d5f6:	b103      	cbz	r3, 800d5fa <_isatty_r+0x1a>
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	bd38      	pop	{r3, r4, r5, pc}
 800d5fc:	200008b4 	.word	0x200008b4

0800d600 <_init>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr

0800d60c <_fini>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	bf00      	nop
 800d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d612:	bc08      	pop	{r3}
 800d614:	469e      	mov	lr, r3
 800d616:	4770      	bx	lr
